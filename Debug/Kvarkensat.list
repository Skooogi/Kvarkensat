
Kvarkensat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f18c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800f424  0800f424  0001f424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f4d0  0800f4d0  0001f4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f4d4  0800f4d4  0001f4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  24000000  0800f4d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002088  24000100  0800f5d8  00020100  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24002188  0800f5d8  00022188  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029421  00000000  00000000  0002012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004831  00000000  00000000  0004954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000020c8  00000000  00000000  0004dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001ee0  00000000  00000000  0004fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d2c9  00000000  00000000  00051d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002988e  00000000  00000000  0008eff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00183ecb  00000000  00000000  000b887f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0023c74a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008efc  00000000  00000000  0023c79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f40c 	.word	0x0800f40c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	0800f40c 	.word	0x0800f40c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f001 fa71 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f83f 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 fc6d 	bl	8000bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ea:	f000 fc4b 	bl	8000b84 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80002ee:	f000 f9ff 	bl	80006f0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80002f2:	f000 fa61 	bl	80007b8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80002f6:	f000 fac3 	bl	8000880 <MX_I2C1_Init>
  MX_I2C4_Init();
 80002fa:	f000 fb01 	bl	8000900 <MX_I2C4_Init>
  MX_SPI2_Init();
 80002fe:	f000 fb3f 	bl	8000980 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000302:	f000 f8b3 	bl	800046c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000306:	f000 f98d 	bl	8000624 <MX_ADC3_Init>
  MX_ADC2_Init();
 800030a:	f000 f92d 	bl	8000568 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 800030e:	f00e fb1d 	bl	800e94c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000312:	f000 fb8b 	bl	8000a2c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* If no flags were set by interrupts, go back to sleep */
		if (!eventflags.dont_sleep)
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <main+0x84>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d019      	beq.n	8000358 <main+0x80>
			continue;
		eventflags.dont_sleep = 0;
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <main+0x84>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]

		/* Go through all flags to check which of them are up. Flags could indicate for example the need
		 * for data processing or */
		if (eventflags.tick) {
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <main+0x84>)
 800032c:	785b      	ldrb	r3, [r3, #1]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f2      	beq.n	800031a <main+0x42>
			eventflags.tick = 0;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <main+0x84>)
 8000336:	2200      	movs	r2, #0
 8000338:	705a      	strb	r2, [r3, #1]
			GPIOW(CANLED, 1 & (a >> 8));	// Blink LED while system is running.
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	121b      	asrs	r3, r3, #8
 800033e:	b2db      	uxtb	r3, r3
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	2120      	movs	r1, #32
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <main+0x88>)
 800034c:	f005 f93a 	bl	80055c4 <HAL_GPIO_WritePin>
			++a;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3301      	adds	r3, #1
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e7e0      	b.n	800031a <main+0x42>
			continue;
 8000358:	bf00      	nop
		if (!eventflags.dont_sleep)
 800035a:	e7de      	b.n	800031a <main+0x42>
 800035c:	2400056c 	.word	0x2400056c
 8000360:	58020400 	.word	0x58020400

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b09c      	sub	sp, #112	; 0x70
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800036e:	224c      	movs	r2, #76	; 0x4c
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f00f f842 	bl	800f3fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2220      	movs	r2, #32
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f00f f83c 	bl	800f3fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000384:	2002      	movs	r0, #2
 8000386:	f006 fd33 	bl	8006df0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	4b34      	ldr	r3, [pc, #208]	; (8000460 <SystemClock_Config+0xfc>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a33      	ldr	r2, [pc, #204]	; (8000460 <SystemClock_Config+0xfc>)
 8000394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b31      	ldr	r3, [pc, #196]	; (8000460 <SystemClock_Config+0xfc>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	4b2f      	ldr	r3, [pc, #188]	; (8000464 <SystemClock_Config+0x100>)
 80003a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a8:	4a2e      	ldr	r2, [pc, #184]	; (8000464 <SystemClock_Config+0x100>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003b0:	4b2c      	ldr	r3, [pc, #176]	; (8000464 <SystemClock_Config+0x100>)
 80003b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003bc:	bf00      	nop
 80003be:	4b28      	ldr	r3, [pc, #160]	; (8000460 <SystemClock_Config+0xfc>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ca:	d1f8      	bne.n	80003be <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003cc:	4b26      	ldr	r3, [pc, #152]	; (8000468 <SystemClock_Config+0x104>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d0:	f023 0303 	bic.w	r3, r3, #3
 80003d4:	4a24      	ldr	r2, [pc, #144]	; (8000468 <SystemClock_Config+0x104>)
 80003d6:	f043 0302 	orr.w	r3, r3, #2
 80003da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003dc:	2301      	movs	r3, #1
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e6:	2302      	movs	r3, #2
 80003e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ea:	2302      	movs	r3, #2
 80003ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80003f2:	2360      	movs	r3, #96	; 0x60
 80003f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80003fa:	2308      	movs	r3, #8
 80003fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003fe:	2302      	movs	r3, #2
 8000400:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000402:	230c      	movs	r3, #12
 8000404:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000406:	2300      	movs	r3, #0
 8000408:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000412:	4618      	mov	r0, r3
 8000414:	f006 fd36 	bl	8006e84 <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800041e:	f000 fd7b 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	233f      	movs	r3, #63	; 0x3f
 8000424:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000426:	2303      	movs	r3, #3
 8000428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800042e:	2308      	movs	r3, #8
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000432:	2340      	movs	r3, #64	; 0x40
 8000434:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000436:	2340      	movs	r3, #64	; 0x40
 8000438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800043a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000440:	2340      	movs	r3, #64	; 0x40
 8000442:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2104      	movs	r1, #4
 8000448:	4618      	mov	r0, r3
 800044a:	f007 f949 	bl	80076e0 <HAL_RCC_ClockConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000454:	f000 fd60 	bl	8000f18 <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3770      	adds	r7, #112	; 0x70
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	58024800 	.word	0x58024800
 8000464:	58000400 	.word	0x58000400
 8000468:	58024400 	.word	0x58024400

0800046c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000472:	f107 031c 	add.w	r3, r7, #28
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	463b      	mov	r3, r7
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]
 800048e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000490:	4b31      	ldr	r3, [pc, #196]	; (8000558 <MX_ADC1_Init+0xec>)
 8000492:	4a32      	ldr	r2, [pc, #200]	; (800055c <MX_ADC1_Init+0xf0>)
 8000494:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000496:	4b30      	ldr	r3, [pc, #192]	; (8000558 <MX_ADC1_Init+0xec>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800049c:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <MX_ADC1_Init+0xec>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004a2:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <MX_ADC1_Init+0xec>)
 80004a4:	2204      	movs	r2, #4
 80004a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004a8:	4b2b      	ldr	r3, [pc, #172]	; (8000558 <MX_ADC1_Init+0xec>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ae:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <MX_ADC1_Init+0xec>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80004b4:	4b28      	ldr	r3, [pc, #160]	; (8000558 <MX_ADC1_Init+0xec>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ba:	4b27      	ldr	r3, [pc, #156]	; (8000558 <MX_ADC1_Init+0xec>)
 80004bc:	2200      	movs	r2, #0
 80004be:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80004c0:	4b25      	ldr	r3, [pc, #148]	; (8000558 <MX_ADC1_Init+0xec>)
 80004c2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <MX_ADC1_Init+0xec>)
 80004ca:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80004d0:	4b21      	ldr	r3, [pc, #132]	; (8000558 <MX_ADC1_Init+0xec>)
 80004d2:	2203      	movs	r2, #3
 80004d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_ADC1_Init+0xec>)
 80004d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <MX_ADC1_Init+0xec>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <MX_ADC1_Init+0xec>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ec:	481a      	ldr	r0, [pc, #104]	; (8000558 <MX_ADC1_Init+0xec>)
 80004ee:	f001 fbf9 	bl	8001ce4 <HAL_ADC_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80004f8:	f000 fd0e 	bl	8000f18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80004fc:	2306      	movs	r3, #6
 80004fe:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000504:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000506:	2300      	movs	r3, #0
 8000508:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	4619      	mov	r1, r3
 8000510:	4811      	ldr	r0, [pc, #68]	; (8000558 <MX_ADC1_Init+0xec>)
 8000512:	f002 fc93 	bl	8002e3c <HAL_ADCEx_MultiModeConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800051c:	f000 fcfc 	bl	8000f18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_ADC1_Init+0xf4>)
 8000522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000524:	2306      	movs	r3, #6
 8000526:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000528:	2303      	movs	r3, #3
 800052a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <MX_ADC1_Init+0xf8>)
 800052e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000530:	2304      	movs	r3, #4
 8000532:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	4619      	mov	r1, r3
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_ADC1_Init+0xec>)
 8000542:	f001 ffc9 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800054c:	f000 fce4 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	3728      	adds	r7, #40	; 0x28
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2400011c 	.word	0x2400011c
 800055c:	40022000 	.word	0x40022000
 8000560:	0c900008 	.word	0x0c900008
 8000564:	47ff0000 	.word	0x47ff0000

08000568 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
 800057e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_ADC2_Init+0xac>)
 8000582:	4a25      	ldr	r2, [pc, #148]	; (8000618 <MX_ADC2_Init+0xb0>)
 8000584:	601a      	str	r2, [r3, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <MX_ADC2_Init+0xac>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_ADC2_Init+0xac>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <MX_ADC2_Init+0xac>)
 8000594:	2204      	movs	r2, #4
 8000596:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <MX_ADC2_Init+0xac>)
 800059a:	2200      	movs	r2, #0
 800059c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <MX_ADC2_Init+0xac>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_ADC2_Init+0xac>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <MX_ADC2_Init+0xac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_ADC2_Init+0xac>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_ADC2_Init+0xac>)
 80005b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_ADC2_Init+0xac>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_ADC2_Init+0xac>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <MX_ADC2_Init+0xac>)
 80005ce:	f001 fb89 	bl	8001ce4 <HAL_ADC_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80005d8:	f000 fc9e 	bl	8000f18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_ADC2_Init+0xb4>)
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e0:	2306      	movs	r3, #6
 80005e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80005e4:	2303      	movs	r3, #3
 80005e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_ADC2_Init+0xb8>)
 80005ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ec:	2304      	movs	r3, #4
 80005ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_ADC2_Init+0xac>)
 80005fe:	f001 ff6b 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000608:	f000 fc86 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	24000180 	.word	0x24000180
 8000618:	40022100 	.word	0x40022100
 800061c:	10c00010 	.word	0x10c00010
 8000620:	47ff0000 	.word	0x47ff0000

08000624 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <MX_ADC3_Init+0xc0>)
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <MX_ADC3_Init+0xc4>)
 8000640:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_ADC3_Init+0xc0>)
 800064a:	2208      	movs	r2, #8
 800064c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000656:	2208      	movs	r2, #8
 8000658:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_ADC3_Init+0xc0>)
 800065c:	2200      	movs	r2, #0
 800065e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000662:	2201      	movs	r2, #1
 8000664:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000668:	2201      	movs	r2, #1
 800066a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_ADC3_Init+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_ADC3_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800068a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_ADC3_Init+0xc0>)
 800068e:	2200      	movs	r2, #0
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_ADC3_Init+0xc0>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <MX_ADC3_Init+0xc0>)
 800069c:	f001 fb22 	bl	8001ce4 <HAL_ADC_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80006a6:	f000 fc37 	bl	8000f18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_ADC3_Init+0xc8>)
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ae:	2306      	movs	r3, #6
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80006b2:	2307      	movs	r3, #7
 80006b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006bc:	2304      	movs	r3, #4
 80006be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_ADC3_Init+0xc0>)
 80006ce:	f001 ff03 	bl	80024d8 <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80006d8:	f000 fc1e 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	240001e4 	.word	0x240001e4
 80006e8:	58026000 	.word	0x58026000
 80006ec:	cb840000 	.word	0xcb840000

080006f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006f4:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <MX_FDCAN1_Init+0xc4>)
 80006f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000712:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000720:	2201      	movs	r2, #1
 8000722:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000726:	2202      	movs	r2, #2
 8000728:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800072c:	2202      	movs	r2, #2
 800072e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000732:	2201      	movs	r2, #1
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000738:	2201      	movs	r2, #1
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800073e:	2201      	movs	r2, #1
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000744:	2201      	movs	r2, #1
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000762:	2204      	movs	r2, #4
 8000764:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000768:	2200      	movs	r2, #0
 800076a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800076e:	2204      	movs	r2, #4
 8000770:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800077a:	2204      	movs	r2, #4
 800077c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000786:	2200      	movs	r2, #0
 8000788:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000792:	2200      	movs	r2, #0
 8000794:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 8000798:	2204      	movs	r2, #4
 800079a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_FDCAN1_Init+0xc0>)
 800079e:	f004 f9fd 	bl	8004b9c <HAL_FDCAN_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007a8:	f000 fbb6 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	240002c0 	.word	0x240002c0
 80007b4:	4000a000 	.word	0x4000a000

080007b8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <MX_FDCAN2_Init+0xc4>)
 80007c0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000800:	2201      	movs	r2, #1
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000806:	2201      	movs	r2, #1
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 800080c:	2201      	movs	r2, #1
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000818:	2200      	movs	r2, #0
 800081a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 800081e:	2200      	movs	r2, #0
 8000820:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000824:	2200      	movs	r2, #0
 8000826:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 800082a:	2204      	movs	r2, #4
 800082c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000830:	2200      	movs	r2, #0
 8000832:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000836:	2204      	movs	r2, #4
 8000838:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 800083c:	2200      	movs	r2, #0
 800083e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000842:	2204      	movs	r2, #4
 8000844:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000848:	2200      	movs	r2, #0
 800084a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 800084e:	2200      	movs	r2, #0
 8000850:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 800085a:	2200      	movs	r2, #0
 800085c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000860:	2204      	movs	r2, #4
 8000862:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_FDCAN2_Init+0xc0>)
 8000866:	f004 f999 	bl	8004b9c <HAL_FDCAN_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000870:	f000 fb52 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	24000360 	.word	0x24000360
 800087c:	4000a400 	.word	0x4000a400

08000880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_I2C1_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_I2C1_Init+0x74>)
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_I2C1_Init+0x7c>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008bc:	f004 fe9c 	bl	80055f8 <HAL_I2C_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 fb27 	bl	8000f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008ce:	f004 ff23 	bl	8005718 <HAL_I2CEx_ConfigAnalogFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 fb1e 	bl	8000f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008e0:	f004 ff65 	bl	80057ae <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 fb15 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	24000400 	.word	0x24000400
 80008f8:	40005400 	.word	0x40005400
 80008fc:	307075b1 	.word	0x307075b1

08000900 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_I2C4_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_I2C4_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_I2C4_Init+0x74>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_I2C4_Init+0x7c>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_I2C4_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_I2C4_Init+0x74>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_I2C4_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_I2C4_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C4_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C4_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C4_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_I2C4_Init+0x74>)
 800093c:	f004 fe5c 	bl	80055f8 <HAL_I2C_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000946:	f000 fae7 	bl	8000f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_I2C4_Init+0x74>)
 800094e:	f004 fee3 	bl	8005718 <HAL_I2CEx_ConfigAnalogFilter>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 fade 	bl	8000f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_I2C4_Init+0x74>)
 8000960:	f004 ff25 	bl	80057ae <HAL_I2CEx_ConfigDigitalFilter>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fad5 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2400044c 	.word	0x2400044c
 8000978:	58001c00 	.word	0x58001c00
 800097c:	307075b1 	.word	0x307075b1

08000980 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_SPI2_Init+0xa8>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_SPI2_Init+0xa4>)
 800098c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000990:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_SPI2_Init+0xa4>)
 800099a:	2207      	movs	r2, #7
 800099c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000a10:	f009 fb52 	bl	800a0b8 <HAL_SPI_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000a1a:	f000 fa7d 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000498 	.word	0x24000498
 8000a28:	40003800 	.word	0x40003800

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09a      	sub	sp, #104	; 0x68
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	222c      	movs	r2, #44	; 0x2c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00e fcc8 	bl	800f3fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6c:	4b43      	ldr	r3, [pc, #268]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a6e:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a72:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b40      	ldr	r3, [pc, #256]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 8000a7e:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a80:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8c:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a98:	4838      	ldr	r0, [pc, #224]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a9a:	f009 fc2e 	bl	800a2fa <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 fa38 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4831      	ldr	r0, [pc, #196]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000ab6:	f009 fd53 	bl	800a560 <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ac0:	f000 fa2a 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ac4:	482d      	ldr	r0, [pc, #180]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000ac6:	f009 fc6f 	bl	800a3a8 <HAL_TIM_OC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ad0:	f000 fa22 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4825      	ldr	r0, [pc, #148]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000ae8:	f00a fa40 	bl	800af6c <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000af2:	f000 fa11 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000af6:	2330      	movs	r3, #48	; 0x30
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4818      	ldr	r0, [pc, #96]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000b1c:	f009 fca6 	bl	800a46c <HAL_TIM_OC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b26:	f000 f9f7 	bl	8000f18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000b60:	f00a fa92 	bl	800b088 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000b6a:	f000 f9d5 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000b70:	f000 fce6 	bl	8001540 <HAL_TIM_MspPostInit>

}
 8000b74:	bf00      	nop
 8000b76:	3768      	adds	r7, #104	; 0x68
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000520 	.word	0x24000520
 8000b80:	40010000 	.word	0x40010000

08000b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	2038      	movs	r0, #56	; 0x38
 8000bae:	f002 fafe 	bl	80031ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bb2:	2038      	movs	r0, #56	; 0x38
 8000bb4:	f002 fb15 	bl	80031e2 <HAL_NVIC_EnableIRQ>

}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024400 	.word	0x58024400

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bda:	4bbf      	ldr	r3, [pc, #764]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4abd      	ldr	r2, [pc, #756]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4bbb      	ldr	r3, [pc, #748]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	4bb7      	ldr	r3, [pc, #732]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4ab6      	ldr	r2, [pc, #728]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4bb3      	ldr	r3, [pc, #716]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4bb0      	ldr	r3, [pc, #704]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4aae      	ldr	r2, [pc, #696]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c1e:	f043 0320 	orr.w	r3, r3, #32
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4bac      	ldr	r3, [pc, #688]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c34:	4ba8      	ldr	r3, [pc, #672]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4aa7      	ldr	r2, [pc, #668]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4ba4      	ldr	r3, [pc, #656]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4ba1      	ldr	r3, [pc, #644]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a9f      	ldr	r2, [pc, #636]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b9d      	ldr	r3, [pc, #628]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b99      	ldr	r3, [pc, #612]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a98      	ldr	r2, [pc, #608]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b95      	ldr	r3, [pc, #596]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8e:	4b92      	ldr	r3, [pc, #584]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a90      	ldr	r2, [pc, #576]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b8e      	ldr	r3, [pc, #568]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b8a      	ldr	r3, [pc, #552]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a89      	ldr	r2, [pc, #548]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b86      	ldr	r3, [pc, #536]	; (8000ed8 <MX_GPIO_Init+0x314>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V0_GPIO_Port, EN_3V0_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4883      	ldr	r0, [pc, #524]	; (8000edc <MX_GPIO_Init+0x318>)
 8000cd0:	f004 fc78 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_RESET_GPIO_Port, DEMOD_RESET_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	4880      	ldr	r0, [pc, #512]	; (8000edc <MX_GPIO_Init+0x318>)
 8000cda:	f004 fc73 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	487f      	ldr	r0, [pc, #508]	; (8000ee0 <MX_GPIO_Init+0x31c>)
 8000ce4:	f004 fc6e 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2126      	movs	r1, #38	; 0x26
 8000cec:	487c      	ldr	r0, [pc, #496]	; (8000ee0 <MX_GPIO_Init+0x31c>)
 8000cee:	f004 fc69 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cf2:	2374      	movs	r3, #116	; 0x74
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d02:	2305      	movs	r3, #5
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4875      	ldr	r0, [pc, #468]	; (8000ee4 <MX_GPIO_Init+0x320>)
 8000d0e:	f004 faa9 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8000d12:	230b      	movs	r3, #11
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	486f      	ldr	r0, [pc, #444]	; (8000ee4 <MX_GPIO_Init+0x320>)
 8000d26:	f004 fa9d 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8000d2a:	f24e 33c2 	movw	r3, #58306	; 0xe3c2
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	486a      	ldr	r0, [pc, #424]	; (8000ee8 <MX_GPIO_Init+0x324>)
 8000d40:	f004 fa90 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d44:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d56:	230c      	movs	r3, #12
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4862      	ldr	r0, [pc, #392]	; (8000eec <MX_GPIO_Init+0x328>)
 8000d62:	f004 fa7f 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d66:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	485c      	ldr	r0, [pc, #368]	; (8000eec <MX_GPIO_Init+0x328>)
 8000d7c:	f004 fa72 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000d80:	230d      	movs	r3, #13
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d90:	230c      	movs	r3, #12
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4853      	ldr	r0, [pc, #332]	; (8000ee8 <MX_GPIO_Init+0x324>)
 8000d9c:	f004 fa62 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000da0:	230f      	movs	r3, #15
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da4:	2303      	movs	r3, #3
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	484a      	ldr	r0, [pc, #296]	; (8000edc <MX_GPIO_Init+0x318>)
 8000db4:	f004 fa56 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_3V0_Pin DEMOD_RESET_Pin */
  GPIO_InitStruct.Pin = EN_3V0_Pin|DEMOD_RESET_Pin;
 8000db8:	2330      	movs	r3, #48	; 0x30
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4843      	ldr	r0, [pc, #268]	; (8000edc <MX_GPIO_Init+0x318>)
 8000dd0:	f004 fa48 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEMOD_CS_Pin DEMOD_RXEN_Pin DEMOD_TXEN_Pin CANLED_Pin */
  GPIO_InitStruct.Pin = DEMOD_CS_Pin|DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin;
 8000dd4:	2327      	movs	r3, #39	; 0x27
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <MX_GPIO_Init+0x31c>)
 8000dec:	f004 fa3a 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG4
                           PG5 PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000df0:	f248 1337 	movw	r3, #33079	; 0x8137
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e02:	230c      	movs	r3, #12
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4838      	ldr	r0, [pc, #224]	; (8000ef0 <MX_GPIO_Init+0x32c>)
 8000e0e:	f004 fa29 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e12:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e24:	230c      	movs	r3, #12
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <MX_GPIO_Init+0x320>)
 8000e30:	f004 fa18 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4825      	ldr	r0, [pc, #148]	; (8000ee0 <MX_GPIO_Init+0x31c>)
 8000e4a:	f004 fa0b 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD14
                           PD15 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e4e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e60:	230c      	movs	r3, #12
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0x330>)
 8000e6c:	f004 f9fa 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000e70:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	481b      	ldr	r0, [pc, #108]	; (8000ef4 <MX_GPIO_Init+0x330>)
 8000e86:	f004 f9ed 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000e8a:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e90:	2303      	movs	r3, #3
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <MX_GPIO_Init+0x32c>)
 8000ea0:	f004 f9e0 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ea4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_GPIO_Init+0x318>)
 8000ec2:	f004 f9cf 	bl	8005264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ec6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed4:	e010      	b.n	8000ef8 <MX_GPIO_Init+0x334>
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58021000 	.word	0x58021000
 8000ee8:	58020800 	.word	0x58020800
 8000eec:	58021400 	.word	0x58021400
 8000ef0:	58021800 	.word	0x58021800
 8000ef4:	58020c00 	.word	0x58020c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000efc:	2306      	movs	r3, #6
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_GPIO_Init+0x350>)
 8000f08:	f004 f9ac 	bl	8005264 <HAL_GPIO_Init>

}
 8000f0c:	bf00      	nop
 8000f0e:	3738      	adds	r7, #56	; 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58020800 	.word	0x58020800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_MspInit+0x30>)
 8000f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x30>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x30>)
 8000f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58024400 	.word	0x58024400

08000f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a68      	ldr	r2, [pc, #416]	; (8001118 <HAL_ADC_MspInit+0x1c0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d175      	bne.n	8001066 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f7a:	4b68      	ldr	r3, [pc, #416]	; (800111c <HAL_ADC_MspInit+0x1c4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a66      	ldr	r2, [pc, #408]	; (800111c <HAL_ADC_MspInit+0x1c4>)
 8000f82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f84:	4b65      	ldr	r3, [pc, #404]	; (800111c <HAL_ADC_MspInit+0x1c4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10e      	bne.n	8000faa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f8c:	4b64      	ldr	r3, [pc, #400]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f92:	4a63      	ldr	r2, [pc, #396]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f9c:	4b60      	ldr	r3, [pc, #384]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8000f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b5d      	ldr	r3, [pc, #372]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a5b      	ldr	r2, [pc, #364]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b59      	ldr	r3, [pc, #356]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc8:	23c0      	movs	r3, #192	; 0xc0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4852      	ldr	r0, [pc, #328]	; (8001124 <HAL_ADC_MspInit+0x1cc>)
 8000fdc:	f004 f942 	bl	8005264 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fe0:	4b51      	ldr	r3, [pc, #324]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8000fe2:	4a52      	ldr	r2, [pc, #328]	; (800112c <HAL_ADC_MspInit+0x1d4>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe6:	4b50      	ldr	r3, [pc, #320]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8000fe8:	2209      	movs	r2, #9
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fec:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff2:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff8:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8000ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001000:	4b49      	ldr	r3, [pc, #292]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8001002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001008:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001010:	4b45      	ldr	r3, [pc, #276]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8001012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001016:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001018:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 800101a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8001022:	2204      	movs	r2, #4
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8001028:	2203      	movs	r2, #3
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800102c:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 800102e:	2200      	movs	r2, #0
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001038:	483b      	ldr	r0, [pc, #236]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 800103a:	f002 f8ed 	bl	8003218 <HAL_DMA_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001044:	f7ff ff68 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a37      	ldr	r2, [pc, #220]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 800104c:	64da      	str	r2, [r3, #76]	; 0x4c
 800104e:	4a36      	ldr	r2, [pc, #216]	; (8001128 <HAL_ADC_MspInit+0x1d0>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2012      	movs	r0, #18
 800105a:	f002 f8a8 	bl	80031ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800105e:	2012      	movs	r0, #18
 8001060:	f002 f8bf 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001064:	e054      	b.n	8001110 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a31      	ldr	r2, [pc, #196]	; (8001130 <HAL_ADC_MspInit+0x1d8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d13b      	bne.n	80010e8 <HAL_ADC_MspInit+0x190>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_ADC_MspInit+0x1c4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <HAL_ADC_MspInit+0x1c4>)
 8001078:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_ADC_MspInit+0x1c4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10e      	bne.n	80010a0 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8001084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001088:	4a25      	ldr	r2, [pc, #148]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8001094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010be:	2330      	movs	r3, #48	; 0x30
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <HAL_ADC_MspInit+0x1dc>)
 80010d2:	f004 f8c7 	bl	8005264 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2012      	movs	r0, #18
 80010dc:	f002 f867 	bl	80031ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010e0:	2012      	movs	r0, #18
 80010e2:	f002 f87e 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 80010e6:	e013      	b.n	8001110 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC3)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_ADC_MspInit+0x1e0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10e      	bne.n	8001110 <HAL_ADC_MspInit+0x1b8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 80010fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_ADC_MspInit+0x1c8>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
}
 8001110:	bf00      	nop
 8001112:	3730      	adds	r7, #48	; 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40022000 	.word	0x40022000
 800111c:	24000570 	.word	0x24000570
 8001120:	58024400 	.word	0x58024400
 8001124:	58020000 	.word	0x58020000
 8001128:	24000248 	.word	0x24000248
 800112c:	40020410 	.word	0x40020410
 8001130:	40022100 	.word	0x40022100
 8001134:	58020800 	.word	0x58020800
 8001138:	58026000 	.word	0x58026000

0800113c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0ba      	sub	sp, #232	; 0xe8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	22bc      	movs	r2, #188	; 0xbc
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f00e f94d 	bl	800f3fc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_FDCAN_MspInit+0x17c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d14e      	bne.n	800120a <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800116c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001170:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001172:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	4618      	mov	r0, r3
 8001180:	f006 fe0e 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800118a:	f7ff fec5 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800118e:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <HAL_FDCAN_MspInit+0x180>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_FDCAN_MspInit+0x180>)
 8001196:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001198:	4b48      	ldr	r3, [pc, #288]	; (80012bc <HAL_FDCAN_MspInit+0x180>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10e      	bne.n	80011be <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80011a0:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 80011a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011a6:	4a46      	ldr	r2, [pc, #280]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 80011b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4a3e      	ldr	r2, [pc, #248]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011f6:	2309      	movs	r3, #9
 80011f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001200:	4619      	mov	r1, r3
 8001202:	4830      	ldr	r0, [pc, #192]	; (80012c4 <HAL_FDCAN_MspInit+0x188>)
 8001204:	f004 f82e 	bl	8005264 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001208:	e052      	b.n	80012b0 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <HAL_FDCAN_MspInit+0x18c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d14d      	bne.n	80012b0 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001218:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800121a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800121e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	4618      	mov	r0, r3
 8001228:	f006 fdba 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001232:	f7ff fe71 	bl	8000f18 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_FDCAN_MspInit+0x180>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_FDCAN_MspInit+0x180>)
 800123e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_FDCAN_MspInit+0x180>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10e      	bne.n	8001266 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 800124a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 800125a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_FDCAN_MspInit+0x184>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001284:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001288:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800129e:	2309      	movs	r3, #9
 80012a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <HAL_FDCAN_MspInit+0x188>)
 80012ac:	f003 ffda 	bl	8005264 <HAL_GPIO_Init>
}
 80012b0:	bf00      	nop
 80012b2:	37e8      	adds	r7, #232	; 0xe8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	4000a000 	.word	0x4000a000
 80012bc:	24000574 	.word	0x24000574
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58020400 	.word	0x58020400
 80012c8:	4000a400 	.word	0x4000a400

080012cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ba      	sub	sp, #232	; 0xe8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	22bc      	movs	r2, #188	; 0xbc
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00e f885 	bl	800f3fc <memset>
  if(hi2c->Instance==I2C1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a49      	ldr	r2, [pc, #292]	; (800141c <HAL_I2C_MspInit+0x150>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d142      	bne.n	8001382 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012fc:	2308      	movs	r3, #8
 80012fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	f107 0318 	add.w	r3, r7, #24
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fd48 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001316:	f7ff fdff 	bl	8000f18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_I2C_MspInit+0x154>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	4a3f      	ldr	r2, [pc, #252]	; (8001420 <HAL_I2C_MspInit+0x154>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_I2C_MspInit+0x154>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001338:	23c0      	movs	r3, #192	; 0xc0
 800133a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800135a:	4619      	mov	r1, r3
 800135c:	4831      	ldr	r0, [pc, #196]	; (8001424 <HAL_I2C_MspInit+0x158>)
 800135e:	f003 ff81 	bl	8005264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_I2C_MspInit+0x154>)
 8001364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001368:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_I2C_MspInit+0x154>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_I2C_MspInit+0x154>)
 8001374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001380:	e047      	b.n	8001412 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C4)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a28      	ldr	r2, [pc, #160]	; (8001428 <HAL_I2C_MspInit+0x15c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d142      	bne.n	8001412 <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800138c:	2310      	movs	r3, #16
 800138e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	4618      	mov	r0, r3
 800139c:	f006 fd00 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80013a6:	f7ff fdb7 	bl	8000f18 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_I2C_MspInit+0x154>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_I2C_MspInit+0x154>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_I2C_MspInit+0x154>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80013c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80013e2:	2304      	movs	r3, #4
 80013e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ec:	4619      	mov	r1, r3
 80013ee:	480f      	ldr	r0, [pc, #60]	; (800142c <HAL_I2C_MspInit+0x160>)
 80013f0:	f003 ff38 	bl	8005264 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_I2C_MspInit+0x154>)
 80013f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_I2C_MspInit+0x154>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_I2C_MspInit+0x154>)
 8001406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
}
 8001412:	bf00      	nop
 8001414:	37e8      	adds	r7, #232	; 0xe8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40005400 	.word	0x40005400
 8001420:	58024400 	.word	0x58024400
 8001424:	58020400 	.word	0x58020400
 8001428:	58001c00 	.word	0x58001c00
 800142c:	58020c00 	.word	0x58020c00

08001430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0b8      	sub	sp, #224	; 0xe0
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	22bc      	movs	r2, #188	; 0xbc
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f00d ffd3 	bl	800f3fc <memset>
  if(hspi->Instance==SPI2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <HAL_SPI_MspInit+0xc0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d142      	bne.n	80014e6 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001466:	2300      	movs	r3, #0
 8001468:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4618      	mov	r0, r3
 8001470:	f006 fc96 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800147a:	f7ff fd4d 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <HAL_SPI_MspInit+0xc4>)
 8001480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <HAL_SPI_MspInit+0xc4>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_SPI_MspInit+0xc4>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_SPI_MspInit+0xc4>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_SPI_MspInit+0xc4>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_SPI_MspInit+0xc4>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80014ba:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80014be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d4:	2305      	movs	r3, #5
 80014d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_SPI_MspInit+0xc8>)
 80014e2:	f003 febf 	bl	8005264 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	37e0      	adds	r7, #224	; 0xe0
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40003800 	.word	0x40003800
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58020400 	.word	0x58020400

080014fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_Base_MspInit+0x3c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10e      	bne.n	800152c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_TIM_Base_MspInit+0x40>)
 8001510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001514:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_TIM_Base_MspInit+0x40>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_TIM_Base_MspInit+0x40>)
 8001520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40010000 	.word	0x40010000
 800153c:	58024400 	.word	0x58024400

08001540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_TIM_MspPostInit+0x6c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d11f      	bne.n	80015a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_TIM_MspPostInit+0x70>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_TIM_MspPostInit+0x70>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_TIM_MspPostInit+0x70>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001584:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001592:	2301      	movs	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_TIM_MspPostInit+0x74>)
 800159e:	f003 fe61 	bl	8005264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010000 	.word	0x40010000
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58020000 	.word	0x58020000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SET_EVENT(tick);
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Handler+0x18>)
 8001606:	2201      	movs	r2, #1
 8001608:	705a      	strb	r2, [r3, #1]
 800160a:	4b03      	ldr	r3, [pc, #12]	; (8001618 <SysTick_Handler+0x18>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 f94a 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2400056c 	.word	0x2400056c

0800161c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <ADC_IRQHandler+0x14>)
 8001622:	f000 fd01 	bl	8002028 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <ADC_IRQHandler+0x18>)
 8001628:	f000 fcfe 	bl	8002028 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2400011c 	.word	0x2400011c
 8001634:	24000180 	.word	0x24000180

08001638 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA2_Stream0_IRQHandler+0x10>)
 800163e:	f002 f947 	bl	80038d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	24000248 	.word	0x24000248

0800164c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <OTG_FS_IRQHandler+0x10>)
 8001652:	f004 fa4f 	bl	8005af4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	24001a5c 	.word	0x24001a5c

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <SystemInit+0xe4>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a36      	ldr	r2, [pc, #216]	; (8001744 <SystemInit+0xe4>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <SystemInit+0xe8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	2b06      	cmp	r3, #6
 800167e:	d807      	bhi.n	8001690 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <SystemInit+0xe8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 030f 	bic.w	r3, r3, #15
 8001688:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <SystemInit+0xe8>)
 800168a:	f043 0307 	orr.w	r3, r3, #7
 800168e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <SystemInit+0xec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2d      	ldr	r2, [pc, #180]	; (800174c <SystemInit+0xec>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <SystemInit+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <SystemInit+0xec>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4929      	ldr	r1, [pc, #164]	; (800174c <SystemInit+0xec>)
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <SystemInit+0xf0>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <SystemInit+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <SystemInit+0xe8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 030f 	bic.w	r3, r3, #15
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <SystemInit+0xe8>)
 80016c4:	f043 0307 	orr.w	r3, r3, #7
 80016c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <SystemInit+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <SystemInit+0xec>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <SystemInit+0xec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <SystemInit+0xec>)
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <SystemInit+0xf4>)
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <SystemInit+0xec>)
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <SystemInit+0xf8>)
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <SystemInit+0xec>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <SystemInit+0xfc>)
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <SystemInit+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <SystemInit+0xec>)
 80016f6:	4a19      	ldr	r2, [pc, #100]	; (800175c <SystemInit+0xfc>)
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <SystemInit+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <SystemInit+0xec>)
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <SystemInit+0xfc>)
 8001704:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <SystemInit+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <SystemInit+0xec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <SystemInit+0xec>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <SystemInit+0xec>)
 800171a:	2200      	movs	r2, #0
 800171c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <SystemInit+0x100>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SystemInit+0x104>)
 8001724:	4013      	ands	r3, r2
 8001726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800172a:	d202      	bcs.n	8001732 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <SystemInit+0x108>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <SystemInit+0x10c>)
 8001734:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001738:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	52002000 	.word	0x52002000
 800174c:	58024400 	.word	0x58024400
 8001750:	eaf6ed7f 	.word	0xeaf6ed7f
 8001754:	02020200 	.word	0x02020200
 8001758:	01ff0000 	.word	0x01ff0000
 800175c:	01010280 	.word	0x01010280
 8001760:	5c001000 	.word	0x5c001000
 8001764:	ffff0000 	.word	0xffff0000
 8001768:	51008108 	.word	0x51008108
 800176c:	52004000 	.word	0x52004000

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001774:	f7ff ff74 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f00d fdfb 	bl	800f398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7fe fd99 	bl	80002d8 <main>
  bx  lr
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017b0:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 80017b4:	0800f4d8 	.word	0x0800f4d8
  ldr r2, =_sbss
 80017b8:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80017bc:	24002188 	.word	0x24002188

080017c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC3_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ca:	2003      	movs	r0, #3
 80017cc:	f001 fce4 	bl	8003198 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017d0:	f006 f93c 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_Init+0x68>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	4913      	ldr	r1, [pc, #76]	; (8001830 <HAL_Init+0x6c>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_Init+0x68>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_Init+0x6c>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_Init+0x70>)
 8001806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_Init+0x74>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f814 	bl	800183c <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e002      	b.n	8001824 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800181e:	f7ff fb81 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400
 8001830:	0800f4b8 	.word	0x0800f4b8
 8001834:	24000004 	.word	0x24000004
 8001838:	24000000 	.word	0x24000000

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_InitTick+0x60>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e021      	b.n	8001894 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_InitTick+0x64>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_InitTick+0x60>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fcc9 	bl	80031fe <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001884:	f001 fc93 	bl	80031ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x68>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2400000c 	.word	0x2400000c
 80018a0:	24000000 	.word	0x24000000
 80018a4:	24000008 	.word	0x24000008

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2400000c 	.word	0x2400000c
 80018cc:	24000578 	.word	0x24000578

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	24000578 	.word	0x24000578

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2400000c 	.word	0x2400000c

08001930 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetREVID+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0c1b      	lsrs	r3, r3, #16
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	5c001000 	.word	0x5c001000

08001948 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	609a      	str	r2, [r3, #8]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3360      	adds	r3, #96	; 0x60
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	430b      	orrs	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019e4:	bf00      	nop
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	431a      	orrs	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	611a      	str	r2, [r3, #16]
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3360      	adds	r3, #96	; 0x60
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	601a      	str	r2, [r3, #0]
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b087      	sub	sp, #28
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3330      	adds	r3, #48	; 0x30
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	0a1b      	lsrs	r3, r3, #8
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	4413      	add	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	211f      	movs	r1, #31
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	f003 011f 	and.w	r1, r3, #31
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	0e5b      	lsrs	r3, r3, #25
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	0d1b      	lsrs	r3, r3, #20
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2107      	movs	r1, #7
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	401a      	ands	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0d1b      	lsrs	r3, r3, #20
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0318 	and.w	r3, r3, #24
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b78:	40d9      	lsrs	r1, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b82:	431a      	orrs	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	000fffff 	.word	0x000fffff

08001b9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6093      	str	r3, [r2, #8]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	5fffffc0 	.word	0x5fffffc0

08001bf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	6fffffc0 	.word	0x6fffffc0

08001c48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <LL_ADC_IsEnabled+0x18>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_ADC_IsEnabled+0x1a>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_REG_IsConversionOngoing+0x18>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e18f      	b.n	800201e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff f923 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff67 	bl	8001bf8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff4d 	bl	8001bd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff82 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d114      	bne.n	8001d74 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff66 	bl	8001c20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d54:	4b87      	ldr	r3, [pc, #540]	; (8001f74 <HAL_ADC_Init+0x290>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	4a87      	ldr	r2, [pc, #540]	; (8001f78 <HAL_ADC_Init+0x294>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d66:	e002      	b.n	8001d6e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f9      	bne.n	8001d68 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff65 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0210 	orr.w	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff76 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8001daa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f040 8129 	bne.w	800200c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 8125 	bne.w	800200c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dca:	f043 0202 	orr.w	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff4a 	bl	8001c70 <LL_ADC_IsEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d136      	bne.n	8001e50 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a65      	ldr	r2, [pc, #404]	; (8001f7c <HAL_ADC_Init+0x298>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_ADC_Init+0x112>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a63      	ldr	r2, [pc, #396]	; (8001f80 <HAL_ADC_Init+0x29c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10e      	bne.n	8001e14 <HAL_ADC_Init+0x130>
 8001df6:	4861      	ldr	r0, [pc, #388]	; (8001f7c <HAL_ADC_Init+0x298>)
 8001df8:	f7ff ff3a 	bl	8001c70 <LL_ADC_IsEnabled>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	4860      	ldr	r0, [pc, #384]	; (8001f80 <HAL_ADC_Init+0x29c>)
 8001e00:	f7ff ff36 	bl	8001c70 <LL_ADC_IsEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4323      	orrs	r3, r4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	e008      	b.n	8001e26 <HAL_ADC_Init+0x142>
 8001e14:	485b      	ldr	r0, [pc, #364]	; (8001f84 <HAL_ADC_Init+0x2a0>)
 8001e16:	f7ff ff2b 	bl	8001c70 <LL_ADC_IsEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a53      	ldr	r2, [pc, #332]	; (8001f7c <HAL_ADC_Init+0x298>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_ADC_Init+0x15a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_ADC_Init+0x29c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x15e>
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_ADC_Init+0x2a4>)
 8001e40:	e000      	b.n	8001e44 <HAL_ADC_Init+0x160>
 8001e42:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_ADC_Init+0x2a8>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f7ff fd7c 	bl	8001948 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e50:	f7ff fd6e 	bl	8001930 <HAL_GetREVID>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d914      	bls.n	8001e88 <HAL_ADC_Init+0x1a4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d110      	bne.n	8001e88 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7d5b      	ldrb	r3, [r3, #21]
 8001e6a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e70:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e76:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7f1b      	ldrb	r3, [r3, #28]
 8001e7c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e7e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e80:	f043 030c 	orr.w	r3, r3, #12
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e00d      	b.n	8001ea4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7d5b      	ldrb	r3, [r3, #21]
 8001e8c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e92:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e98:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7f1b      	ldrb	r3, [r3, #28]
 8001e9e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7f1b      	ldrb	r3, [r3, #28]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	045b      	lsls	r3, r3, #17
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_ADC_Init+0x2ac>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fed1 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8001ef4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fede 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 8001f00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d15f      	bne.n	8001fc8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d15c      	bne.n	8001fc8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7d1b      	ldrb	r3, [r3, #20]
 8001f12:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_ADC_Init+0x2b0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	69b9      	ldr	r1, [r7, #24]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d130      	bne.n	8001f9c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_ADC_Init+0x2b4>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f4e:	3a01      	subs	r2, #1
 8001f50:	0411      	lsls	r1, r2, #16
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f62:	430a      	orrs	r2, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	e01c      	b.n	8001fac <HAL_ADC_Init+0x2c8>
 8001f72:	bf00      	nop
 8001f74:	24000000 	.word	0x24000000
 8001f78:	053e2d63 	.word	0x053e2d63
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	40022100 	.word	0x40022100
 8001f84:	58026000 	.word	0x58026000
 8001f88:	40022300 	.word	0x40022300
 8001f8c:	58026300 	.word	0x58026300
 8001f90:	fff0c003 	.word	0xfff0c003
 8001f94:	ffffbffc 	.word	0xffffbffc
 8001f98:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fdd8 	bl	8002b78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f023 010f 	bic.w	r1, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe8:	e007      	b.n	8001ffa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 020f 	bic.w	r2, r2, #15
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
 800200a:	e007      	b.n	800201c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop

08002028 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_ADC_IRQHandler+0x240>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_ADC_IRQHandler+0x30>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a86      	ldr	r2, [pc, #536]	; (800226c <HAL_ADC_IRQHandler+0x244>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_ADC_IRQHandler+0x34>
 8002058:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_ADC_IRQHandler+0x248>)
 800205a:	e000      	b.n	800205e <HAL_ADC_IRQHandler+0x36>
 800205c:	4b85      	ldr	r3, [pc, #532]	; (8002274 <HAL_ADC_IRQHandler+0x24c>)
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fd9c 	bl	8001b9c <LL_ADC_GetMultimode>
 8002064:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d017      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x78>
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d012      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fec8 	bl	8002e28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2202      	movs	r2, #2
 800209e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x8c>
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8083 	beq.w	80021c6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d07d      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fcb6 	bl	8001a58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d062      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5d      	ldr	r2, [pc, #372]	; (800226c <HAL_ADC_IRQHandler+0x244>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d002      	beq.n	8002102 <HAL_ADC_IRQHandler+0xda>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	e000      	b.n	8002104 <HAL_ADC_IRQHandler+0xdc>
 8002102:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_ADC_IRQHandler+0x240>)
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	4293      	cmp	r3, r2
 800210a:	d008      	beq.n	800211e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d002      	beq.n	800211e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b09      	cmp	r3, #9
 800211c:	d104      	bne.n	8002128 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	e00c      	b.n	8002142 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a4f      	ldr	r2, [pc, #316]	; (800226c <HAL_ADC_IRQHandler+0x244>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d002      	beq.n	8002138 <HAL_ADC_IRQHandler+0x110>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	e000      	b.n	800213a <HAL_ADC_IRQHandler+0x112>
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_ADC_IRQHandler+0x240>)
 800213a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d135      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b08      	cmp	r3, #8
 8002158:	d12e      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fd99 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11a      	bne.n	80021a0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020c 	bic.w	r2, r2, #12
 8002178:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d112      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
 800219e:	e00b      	b.n	80021b8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f043 0210 	orr.w	r2, r3, #16
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f96f 	bl	800249c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_ADC_IRQHandler+0x1b2>
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10b      	bne.n	80021f2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a0 	beq.w	8002326 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 809a 	beq.w	8002326 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fc61 	bl	8001ad6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002214:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fc1c 	bl	8001a58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002220:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_ADC_IRQHandler+0x244>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d002      	beq.n	8002232 <HAL_ADC_IRQHandler+0x20a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	e000      	b.n	8002234 <HAL_ADC_IRQHandler+0x20c>
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_ADC_IRQHandler+0x240>)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	4293      	cmp	r3, r2
 800223a:	d008      	beq.n	800224e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d002      	beq.n	800224e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d104      	bne.n	8002258 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	e014      	b.n	8002282 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <HAL_ADC_IRQHandler+0x244>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00a      	beq.n	8002278 <HAL_ADC_IRQHandler+0x250>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e008      	b.n	800227a <HAL_ADC_IRQHandler+0x252>
 8002268:	40022000 	.word	0x40022000
 800226c:	40022100 	.word	0x40022100
 8002270:	40022300 	.word	0x40022300
 8002274:	58026300 	.word	0x58026300
 8002278:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_ADC_IRQHandler+0x464>)
 800227a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d047      	beq.n	8002318 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_ADC_IRQHandler+0x27a>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03f      	beq.n	8002318 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d13a      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b40      	cmp	r3, #64	; 0x40
 80022ae:	d133      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d12e      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fcfc 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11a      	bne.n	8002300 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d112      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
 80022fe:	e00b      	b.n	8002318 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fd5d 	bl	8002dd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2260      	movs	r2, #96	; 0x60
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b00      	cmp	r3, #0
 800232e:	d011      	beq.n	8002354 <HAL_ADC_IRQHandler+0x32c>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8b2 	bl	80024b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <HAL_ADC_IRQHandler+0x35c>
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fd43 	bl	8002e00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002382:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x38c>
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fd35 	bl	8002e14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d043      	beq.n	8002446 <HAL_ADC_IRQHandler+0x41e>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d03e      	beq.n	8002446 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80023d0:	2301      	movs	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	e021      	b.n	800241a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_ADC_IRQHandler+0x464>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_ADC_IRQHandler+0x3c8>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a29      	ldr	r2, [pc, #164]	; (8002490 <HAL_ADC_IRQHandler+0x468>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_IRQHandler+0x3cc>
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_ADC_IRQHandler+0x46c>)
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_IRQHandler+0x3ce>
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_ADC_IRQHandler+0x470>)
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fbde 	bl	8001bb8 <LL_ADC_GetMultiDMATransfer>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002402:	2301      	movs	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e008      	b.n	800241a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002416:	2301      	movs	r3, #1
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10e      	bne.n	800243e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f043 0202 	orr.w	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f843 	bl	80024c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2210      	movs	r2, #16
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d018      	beq.n	8002482 <HAL_ADC_IRQHandler+0x45a>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002456:	2b00      	cmp	r3, #0
 8002458:	d013      	beq.n	8002482 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f043 0208 	orr.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fcb5 	bl	8002dec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40022100 	.word	0x40022100
 8002494:	40022300 	.word	0x40022300
 8002498:	58026300 	.word	0x58026300

0800249c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b0a1      	sub	sp, #132	; 0x84
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a9d      	ldr	r2, [pc, #628]	; (8002768 <HAL_ADC_ConfigChannel+0x290>)
 80024f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x2a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e321      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x66e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbc1 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 8306 	bne.w	8002b28 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002524:	2b00      	cmp	r3, #0
 8002526:	d108      	bne.n	800253a <HAL_ADC_ConfigChannel+0x62>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2201      	movs	r2, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	e016      	b.n	8002568 <HAL_ADC_ConfigChannel+0x90>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800254a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800254c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e003      	b.n	800255e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2201      	movs	r2, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	69d1      	ldr	r1, [r2, #28]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	430b      	orrs	r3, r1
 8002574:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	f7ff fa7b 	bl	8001a7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb82 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8002592:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fb8f 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 800259e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 80b3 	bne.w	800270e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 80af 	bne.w	800270e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	461a      	mov	r2, r3
 80025be:	f7ff fa9d 	bl	8001afc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025c2:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_ADC_ConfigChannel+0x294>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ce:	d10b      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x110>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	e01d      	b.n	8002624 <HAL_ADC_ConfigChannel+0x14c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_ADC_ConfigChannel+0x136>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	e00a      	b.n	8002624 <HAL_ADC_ConfigChannel+0x14c>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b04      	cmp	r3, #4
 800262c:	d027      	beq.n	800267e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263c:	f7ff f9b8 	bl	80019b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6919      	ldr	r1, [r3, #16]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	7e5b      	ldrb	r3, [r3, #25]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x17e>
 8002650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002654:	e000      	b.n	8002658 <HAL_ADC_ConfigChannel+0x180>
 8002656:	2300      	movs	r3, #0
 8002658:	461a      	mov	r2, r3
 800265a:	f7ff f9e2 	bl	8001a22 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6919      	ldr	r1, [r3, #16]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	7e1b      	ldrb	r3, [r3, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x19c>
 800266e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002672:	e000      	b.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 8002674:	2300      	movs	r3, #0
 8002676:	461a      	mov	r2, r3
 8002678:	f7ff f9ba 	bl	80019f0 <LL_ADC_SetDataRightShift>
 800267c:	e047      	b.n	800270e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	429a      	cmp	r2, r3
 8002690:	d107      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	069b      	lsls	r3, r3, #26
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d107      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026c4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	069b      	lsls	r3, r3, #26
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d107      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026e8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	069b      	lsls	r3, r3, #26
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d107      	bne.n	800270e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800270c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff faac 	bl	8001c70 <LL_ADC_IsEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 820d 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	461a      	mov	r2, r3
 800272e:	f7ff fa11 	bl	8001b54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_ADC_ConfigChannel+0x290>)
 8002738:	4293      	cmp	r3, r2
 800273a:	f040 8133 	bne.w	80029a4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800274a:	2b00      	cmp	r3, #0
 800274c:	d110      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x298>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	3301      	adds	r3, #1
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	2b09      	cmp	r3, #9
 800275c:	bf94      	ite	ls
 800275e:	2301      	movls	r3, #1
 8002760:	2300      	movhi	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e01e      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x2cc>
 8002766:	bf00      	nop
 8002768:	47ff0000 	.word	0x47ff0000
 800276c:	5c001000 	.word	0x5c001000
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800278c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2b09      	cmp	r3, #9
 800279c:	bf94      	ite	ls
 800279e:	2301      	movls	r3, #1
 80027a0:	2300      	movhi	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d079      	beq.n	800289c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x2ec>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	069b      	lsls	r3, r3, #26
 80027be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c2:	e015      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x318>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80027d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80027d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e003      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80027e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	069b      	lsls	r3, r3, #26
 80027ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x338>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0e9b      	lsrs	r3, r3, #26
 8002802:	3301      	adds	r3, #1
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	e017      	b.n	8002840 <HAL_ADC_ConfigChannel+0x368>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002820:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	ea42 0103 	orr.w	r1, r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x38e>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	051b      	lsls	r3, r3, #20
 8002864:	e018      	b.n	8002898 <HAL_ADC_ConfigChannel+0x3c0>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e003      	b.n	800288a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002898:	430b      	orrs	r3, r1
 800289a:	e07e      	b.n	800299a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x3e0>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	069b      	lsls	r3, r3, #26
 80028b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b6:	e015      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x40c>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e003      	b.n	80028dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	3301      	adds	r3, #1
 80028de:	069b      	lsls	r3, r3, #26
 80028e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x42c>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	3301      	adds	r3, #1
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	e017      	b.n	8002934 <HAL_ADC_ConfigChannel+0x45c>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	61bb      	str	r3, [r7, #24]
  return result;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e003      	b.n	8002928 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3301      	adds	r3, #1
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	ea42 0103 	orr.w	r1, r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x488>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	3301      	adds	r3, #1
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	3b1e      	subs	r3, #30
 8002958:	051b      	lsls	r3, r3, #20
 800295a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800295e:	e01b      	b.n	8002998 <HAL_ADC_ConfigChannel+0x4c0>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	60fb      	str	r3, [r7, #12]
  return result;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002978:	2320      	movs	r3, #32
 800297a:	e003      	b.n	8002984 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f003 021f 	and.w	r2, r3, #31
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	3b1e      	subs	r3, #30
 8002992:	051b      	lsls	r3, r3, #20
 8002994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002998:	430b      	orrs	r3, r1
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	6892      	ldr	r2, [r2, #8]
 800299e:	4619      	mov	r1, r3
 80029a0:	f7ff f8ac 	bl	8001afc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f280 80c6 	bge.w	8002b3a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <HAL_ADC_ConfigChannel+0x678>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d004      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x4ea>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a65      	ldr	r2, [pc, #404]	; (8002b54 <HAL_ADC_ConfigChannel+0x67c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x4ee>
 80029c2:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <HAL_ADC_ConfigChannel+0x680>)
 80029c4:	e000      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x4f0>
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_ADC_ConfigChannel+0x684>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe ffe3 	bl	8001994 <LL_ADC_GetCommonPathInternalCh>
 80029ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <HAL_ADC_ConfigChannel+0x678>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x50c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a5d      	ldr	r2, [pc, #372]	; (8002b54 <HAL_ADC_ConfigChannel+0x67c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10e      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x52a>
 80029e4:	485a      	ldr	r0, [pc, #360]	; (8002b50 <HAL_ADC_ConfigChannel+0x678>)
 80029e6:	f7ff f943 	bl	8001c70 <LL_ADC_IsEnabled>
 80029ea:	4604      	mov	r4, r0
 80029ec:	4859      	ldr	r0, [pc, #356]	; (8002b54 <HAL_ADC_ConfigChannel+0x67c>)
 80029ee:	f7ff f93f 	bl	8001c70 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4323      	orrs	r3, r4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	e008      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x53c>
 8002a02:	4857      	ldr	r0, [pc, #348]	; (8002b60 <HAL_ADC_ConfigChannel+0x688>)
 8002a04:	f7ff f934 	bl	8001c70 <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d07d      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <HAL_ADC_ConfigChannel+0x68c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d130      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x5ac>
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d12b      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a4b      	ldr	r2, [pc, #300]	; (8002b60 <HAL_ADC_ConfigChannel+0x688>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	f040 8081 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a44      	ldr	r2, [pc, #272]	; (8002b50 <HAL_ADC_ConfigChannel+0x678>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_ADC_ConfigChannel+0x574>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <HAL_ADC_ConfigChannel+0x67c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x578>
 8002a4c:	4a42      	ldr	r2, [pc, #264]	; (8002b58 <HAL_ADC_ConfigChannel+0x680>)
 8002a4e:	e000      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x57a>
 8002a50:	4a42      	ldr	r2, [pc, #264]	; (8002b5c <HAL_ADC_ConfigChannel+0x684>)
 8002a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7fe ff87 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a60:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_ADC_ConfigChannel+0x690>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	4a41      	ldr	r2, [pc, #260]	; (8002b6c <HAL_ADC_ConfigChannel+0x694>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a74:	e002      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f9      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a82:	e05a      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a39      	ldr	r2, [pc, #228]	; (8002b70 <HAL_ADC_ConfigChannel+0x698>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d11e      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5f4>
 8002a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d119      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <HAL_ADC_ConfigChannel+0x688>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d14b      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <HAL_ADC_ConfigChannel+0x678>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x5de>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <HAL_ADC_ConfigChannel+0x67c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x5e2>
 8002ab6:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <HAL_ADC_ConfigChannel+0x680>)
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_ConfigChannel+0x5e4>
 8002aba:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_ADC_ConfigChannel+0x684>)
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7fe ff52 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aca:	e036      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a28      	ldr	r2, [pc, #160]	; (8002b74 <HAL_ADC_ConfigChannel+0x69c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d131      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
 8002ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d12c      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_ADC_ConfigChannel+0x688>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d127      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_ADC_ConfigChannel+0x678>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d004      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x626>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <HAL_ADC_ConfigChannel+0x67c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x62a>
 8002afe:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_ADC_ConfigChannel+0x680>)
 8002b00:	e000      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x62c>
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_ADC_ConfigChannel+0x684>)
 8002b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7fe ff2e 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 8002b12:	e012      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b26:	e008      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3784      	adds	r7, #132	; 0x84
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40022100 	.word	0x40022100
 8002b58:	40022300 	.word	0x40022300
 8002b5c:	58026300 	.word	0x58026300
 8002b60:	58026000 	.word	0x58026000
 8002b64:	cb840000 	.word	0xcb840000
 8002b68:	24000000 	.word	0x24000000
 8002b6c:	053e2d63 	.word	0x053e2d63
 8002b70:	c7520000 	.word	0xc7520000
 8002b74:	cfb80000 	.word	0xcfb80000

08002b78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a79      	ldr	r2, [pc, #484]	; (8002d6c <ADC_ConfigureBoostMode+0x1f4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <ADC_ConfigureBoostMode+0x1c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a78      	ldr	r2, [pc, #480]	; (8002d70 <ADC_ConfigureBoostMode+0x1f8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d109      	bne.n	8002ba8 <ADC_ConfigureBoostMode+0x30>
 8002b94:	4b77      	ldr	r3, [pc, #476]	; (8002d74 <ADC_ConfigureBoostMode+0x1fc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e008      	b.n	8002bba <ADC_ConfigureBoostMode+0x42>
 8002ba8:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <ADC_ConfigureBoostMode+0x200>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01c      	beq.n	8002bf8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002bbe:	f005 f8bf 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 8002bc2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bcc:	d010      	beq.n	8002bf0 <ADC_ConfigureBoostMode+0x78>
 8002bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bd2:	d871      	bhi.n	8002cb8 <ADC_ConfigureBoostMode+0x140>
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d002      	beq.n	8002be0 <ADC_ConfigureBoostMode+0x68>
 8002bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bde:	d16b      	bne.n	8002cb8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	60fb      	str	r3, [r7, #12]
        break;
 8002bee:	e066      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	60fb      	str	r3, [r7, #12]
        break;
 8002bf6:	e062      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002bf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002bfc:	f006 f816 	bl	8008c2c <HAL_RCCEx_GetPeriphCLKFreq>
 8002c00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c0a:	d051      	beq.n	8002cb0 <ADC_ConfigureBoostMode+0x138>
 8002c0c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c10:	d854      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c16:	d047      	beq.n	8002ca8 <ADC_ConfigureBoostMode+0x130>
 8002c18:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c1c:	d84e      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c22:	d03d      	beq.n	8002ca0 <ADC_ConfigureBoostMode+0x128>
 8002c24:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c28:	d848      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c2e:	d033      	beq.n	8002c98 <ADC_ConfigureBoostMode+0x120>
 8002c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c34:	d842      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c3a:	d029      	beq.n	8002c90 <ADC_ConfigureBoostMode+0x118>
 8002c3c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c40:	d83c      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c46:	d01a      	beq.n	8002c7e <ADC_ConfigureBoostMode+0x106>
 8002c48:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c4c:	d836      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c52:	d014      	beq.n	8002c7e <ADC_ConfigureBoostMode+0x106>
 8002c54:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c58:	d830      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5e:	d00e      	beq.n	8002c7e <ADC_ConfigureBoostMode+0x106>
 8002c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c64:	d82a      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c6a:	d008      	beq.n	8002c7e <ADC_ConfigureBoostMode+0x106>
 8002c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c70:	d824      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x144>
 8002c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c76:	d002      	beq.n	8002c7e <ADC_ConfigureBoostMode+0x106>
 8002c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c7c:	d11e      	bne.n	8002cbc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c9b      	lsrs	r3, r3, #18
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
        break;
 8002c8e:	e016      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
        break;
 8002c96:	e012      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	60fb      	str	r3, [r7, #12]
        break;
 8002c9e:	e00e      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	60fb      	str	r3, [r7, #12]
        break;
 8002ca6:	e00a      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	09db      	lsrs	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
        break;
 8002cae:	e006      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	60fb      	str	r3, [r7, #12]
        break;
 8002cb6:	e002      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
        break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002cbc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002cbe:	f7fe fe37 	bl	8001930 <HAL_GetREVID>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d815      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <ADC_ConfigureBoostMode+0x204>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d908      	bls.n	8002ce6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ce4:	e03e      	b.n	8002d64 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	e035      	b.n	8002d64 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <ADC_ConfigureBoostMode+0x208>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d808      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d14:	609a      	str	r2, [r3, #8]
}
 8002d16:	e025      	b.n	8002d64 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <ADC_ConfigureBoostMode+0x20c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d80a      	bhi.n	8002d36 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	e016      	b.n	8002d64 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <ADC_ConfigureBoostMode+0x210>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d80a      	bhi.n	8002d54 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	e007      	b.n	8002d64 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40022100 	.word	0x40022100
 8002d74:	40022300 	.word	0x40022300
 8002d78:	58026300 	.word	0x58026300
 8002d7c:	01312d00 	.word	0x01312d00
 8002d80:	005f5e10 	.word	0x005f5e10
 8002d84:	00bebc20 	.word	0x00bebc20
 8002d88:	017d7840 	.word	0x017d7840

08002d8c <LL_ADC_IsEnabled>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <LL_ADC_IsEnabled+0x18>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <LL_ADC_IsEnabled+0x1a>
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d101      	bne.n	8002dca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b09f      	sub	sp, #124	; 0x7c
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e0be      	b.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5c      	ldr	r2, [pc, #368]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d102      	bne.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e74:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	e001      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e09d      	b.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff87 	bl	8002db2 <LL_ADC_REG_IsConversionOngoing>
 8002ea4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff81 	bl	8002db2 <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d17f      	bne.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d17c      	bne.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a46      	ldr	r2, [pc, #280]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002ed0:	4b45      	ldr	r3, [pc, #276]	; (8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ed4:	4b45      	ldr	r3, [pc, #276]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ed6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d039      	beq.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10e      	bne.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f06:	4836      	ldr	r0, [pc, #216]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f08:	f7ff ff40 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	4835      	ldr	r0, [pc, #212]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f10:	f7ff ff3c 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4323      	orrs	r3, r4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e008      	b.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002f24:	4832      	ldr	r0, [pc, #200]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f26:	f7ff ff31 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d047      	beq.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	6811      	ldr	r1, [r2, #0]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f52:	e03a      	b.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10e      	bne.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002f74:	481a      	ldr	r0, [pc, #104]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f76:	f7ff ff09 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4819      	ldr	r0, [pc, #100]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f7e:	f7ff ff05 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4323      	orrs	r3, r4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	e008      	b.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f92:	4817      	ldr	r0, [pc, #92]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f94:	f7ff fefa 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2301      	moveq	r3, #1
 8002fa0:	2300      	movne	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fb2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb4:	e009      	b.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fc8:	e000      	b.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	377c      	adds	r7, #124	; 0x7c
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd90      	pop	{r4, r7, pc}
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40022100 	.word	0x40022100
 8002fe8:	40022300 	.word	0x40022300
 8002fec:	58026300 	.word	0x58026300
 8002ff0:	58026000 	.word	0x58026000
 8002ff4:	fffff0e0 	.word	0xfffff0e0

08002ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <__NVIC_SetPriorityGrouping+0x40>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x40>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00
 800303c:	05fa0000 	.word	0x05fa0000

08003040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <__NVIC_GetPriorityGrouping+0x18>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0307 	and.w	r3, r3, #7
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	db0b      	blt.n	8003086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <__NVIC_EnableIRQ+0x38>)
 8003076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2001      	movs	r0, #1
 800307e:	fa00 f202 	lsl.w	r2, r0, r2
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	6039      	str	r1, [r7, #0]
 80030a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	db0a      	blt.n	80030c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	490c      	ldr	r1, [pc, #48]	; (80030e4 <__NVIC_SetPriority+0x4c>)
 80030b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	440b      	add	r3, r1
 80030bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c0:	e00a      	b.n	80030d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4908      	ldr	r1, [pc, #32]	; (80030e8 <__NVIC_SetPriority+0x50>)
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	3b04      	subs	r3, #4
 80030d0:	0112      	lsls	r2, r2, #4
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	440b      	add	r3, r1
 80030d6:	761a      	strb	r2, [r3, #24]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000e100 	.word	0xe000e100
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f1c3 0307 	rsb	r3, r3, #7
 8003106:	2b04      	cmp	r3, #4
 8003108:	bf28      	it	cs
 800310a:	2304      	movcs	r3, #4
 800310c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3304      	adds	r3, #4
 8003112:	2b06      	cmp	r3, #6
 8003114:	d902      	bls.n	800311c <NVIC_EncodePriority+0x30>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3b03      	subs	r3, #3
 800311a:	e000      	b.n	800311e <NVIC_EncodePriority+0x32>
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	401a      	ands	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	43d9      	mvns	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	4313      	orrs	r3, r2
         );
}
 8003146:	4618      	mov	r0, r3
 8003148:	3724      	adds	r7, #36	; 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003164:	d301      	bcc.n	800316a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003166:	2301      	movs	r3, #1
 8003168:	e00f      	b.n	800318a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <SysTick_Config+0x40>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3b01      	subs	r3, #1
 8003170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003172:	210f      	movs	r1, #15
 8003174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003178:	f7ff ff8e 	bl	8003098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <SysTick_Config+0x40>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <SysTick_Config+0x40>)
 8003184:	2207      	movs	r2, #7
 8003186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	e000e010 	.word	0xe000e010

08003198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ff29 	bl	8002ff8 <__NVIC_SetPriorityGrouping>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031bc:	f7ff ff40 	bl	8003040 <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff90 	bl	80030ec <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5f 	bl	8003098 <__NVIC_SetPriority>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff33 	bl	800305c <__NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffa4 	bl	8003154 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7fe fb56 	bl	80018d0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e316      	b.n	800385e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a66      	ldr	r2, [pc, #408]	; (80033d0 <HAL_DMA_Init+0x1b8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d04a      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a65      	ldr	r2, [pc, #404]	; (80033d4 <HAL_DMA_Init+0x1bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d045      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a63      	ldr	r2, [pc, #396]	; (80033d8 <HAL_DMA_Init+0x1c0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d040      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a62      	ldr	r2, [pc, #392]	; (80033dc <HAL_DMA_Init+0x1c4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d03b      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a60      	ldr	r2, [pc, #384]	; (80033e0 <HAL_DMA_Init+0x1c8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d036      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a5f      	ldr	r2, [pc, #380]	; (80033e4 <HAL_DMA_Init+0x1cc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d031      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a5d      	ldr	r2, [pc, #372]	; (80033e8 <HAL_DMA_Init+0x1d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02c      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5c      	ldr	r2, [pc, #368]	; (80033ec <HAL_DMA_Init+0x1d4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d027      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5a      	ldr	r2, [pc, #360]	; (80033f0 <HAL_DMA_Init+0x1d8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a59      	ldr	r2, [pc, #356]	; (80033f4 <HAL_DMA_Init+0x1dc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01d      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a57      	ldr	r2, [pc, #348]	; (80033f8 <HAL_DMA_Init+0x1e0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a56      	ldr	r2, [pc, #344]	; (80033fc <HAL_DMA_Init+0x1e4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a54      	ldr	r2, [pc, #336]	; (8003400 <HAL_DMA_Init+0x1e8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a53      	ldr	r2, [pc, #332]	; (8003404 <HAL_DMA_Init+0x1ec>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a51      	ldr	r2, [pc, #324]	; (8003408 <HAL_DMA_Init+0x1f0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_DMA_Init+0xb8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a50      	ldr	r2, [pc, #320]	; (800340c <HAL_DMA_Init+0x1f4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_DMA_Init+0xbc>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_DMA_Init+0xbe>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 813b 	beq.w	8003552 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a37      	ldr	r2, [pc, #220]	; (80033d0 <HAL_DMA_Init+0x1b8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d04a      	beq.n	800338c <HAL_DMA_Init+0x174>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a36      	ldr	r2, [pc, #216]	; (80033d4 <HAL_DMA_Init+0x1bc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d045      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <HAL_DMA_Init+0x1c0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d040      	beq.n	800338c <HAL_DMA_Init+0x174>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a33      	ldr	r2, [pc, #204]	; (80033dc <HAL_DMA_Init+0x1c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d03b      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a31      	ldr	r2, [pc, #196]	; (80033e0 <HAL_DMA_Init+0x1c8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d036      	beq.n	800338c <HAL_DMA_Init+0x174>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a30      	ldr	r2, [pc, #192]	; (80033e4 <HAL_DMA_Init+0x1cc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d031      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a2e      	ldr	r2, [pc, #184]	; (80033e8 <HAL_DMA_Init+0x1d0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02c      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <HAL_DMA_Init+0x1d4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d027      	beq.n	800338c <HAL_DMA_Init+0x174>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <HAL_DMA_Init+0x1d8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d022      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <HAL_DMA_Init+0x1dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d01d      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a28      	ldr	r2, [pc, #160]	; (80033f8 <HAL_DMA_Init+0x1e0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d018      	beq.n	800338c <HAL_DMA_Init+0x174>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a27      	ldr	r2, [pc, #156]	; (80033fc <HAL_DMA_Init+0x1e4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a25      	ldr	r2, [pc, #148]	; (8003400 <HAL_DMA_Init+0x1e8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00e      	beq.n	800338c <HAL_DMA_Init+0x174>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a24      	ldr	r2, [pc, #144]	; (8003404 <HAL_DMA_Init+0x1ec>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_DMA_Init+0x1f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_DMA_Init+0x174>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <HAL_DMA_Init+0x1f4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <HAL_DMA_Init+0x186>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e007      	b.n	80033ae <HAL_DMA_Init+0x196>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033ae:	e02f      	b.n	8003410 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b0:	f7fe fa8e 	bl	80018d0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d928      	bls.n	8003410 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2203      	movs	r2, #3
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e246      	b.n	800385e <HAL_DMA_Init+0x646>
 80033d0:	40020010 	.word	0x40020010
 80033d4:	40020028 	.word	0x40020028
 80033d8:	40020040 	.word	0x40020040
 80033dc:	40020058 	.word	0x40020058
 80033e0:	40020070 	.word	0x40020070
 80033e4:	40020088 	.word	0x40020088
 80033e8:	400200a0 	.word	0x400200a0
 80033ec:	400200b8 	.word	0x400200b8
 80033f0:	40020410 	.word	0x40020410
 80033f4:	40020428 	.word	0x40020428
 80033f8:	40020440 	.word	0x40020440
 80033fc:	40020458 	.word	0x40020458
 8003400:	40020470 	.word	0x40020470
 8003404:	40020488 	.word	0x40020488
 8003408:	400204a0 	.word	0x400204a0
 800340c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1c8      	bne.n	80033b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_DMA_Init+0x420>)
 800342a:	4013      	ands	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003436:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003442:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	2b04      	cmp	r3, #4
 8003462:	d107      	bne.n	8003474 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4313      	orrs	r3, r2
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003474:	4b71      	ldr	r3, [pc, #452]	; (800363c <HAL_DMA_Init+0x424>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b71      	ldr	r3, [pc, #452]	; (8003640 <HAL_DMA_Init+0x428>)
 800347a:	4013      	ands	r3, r2
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003480:	d328      	bcc.n	80034d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b28      	cmp	r3, #40	; 0x28
 8003488:	d903      	bls.n	8003492 <HAL_DMA_Init+0x27a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b2e      	cmp	r3, #46	; 0x2e
 8003490:	d917      	bls.n	80034c2 <HAL_DMA_Init+0x2aa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b3e      	cmp	r3, #62	; 0x3e
 8003498:	d903      	bls.n	80034a2 <HAL_DMA_Init+0x28a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b42      	cmp	r3, #66	; 0x42
 80034a0:	d90f      	bls.n	80034c2 <HAL_DMA_Init+0x2aa>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b46      	cmp	r3, #70	; 0x46
 80034a8:	d903      	bls.n	80034b2 <HAL_DMA_Init+0x29a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b48      	cmp	r3, #72	; 0x48
 80034b0:	d907      	bls.n	80034c2 <HAL_DMA_Init+0x2aa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b4e      	cmp	r3, #78	; 0x4e
 80034b8:	d905      	bls.n	80034c6 <HAL_DMA_Init+0x2ae>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b52      	cmp	r3, #82	; 0x52
 80034c0:	d801      	bhi.n	80034c6 <HAL_DMA_Init+0x2ae>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_DMA_Init+0x2b0>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0307 	bic.w	r3, r3, #7
 80034ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d117      	bne.n	800352e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f001 f9b9 	bl	8004888 <DMA_CheckFifoParam>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e197      	b.n	800385e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f001 f8f4 	bl	8004724 <DMA_CalcBaseAndBitshift>
 800353c:	4603      	mov	r3, r0
 800353e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	223f      	movs	r2, #63	; 0x3f
 800354a:	409a      	lsls	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	e0cd      	b.n	80036ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3b      	ldr	r2, [pc, #236]	; (8003644 <HAL_DMA_Init+0x42c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_Init+0x38a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a39      	ldr	r2, [pc, #228]	; (8003648 <HAL_DMA_Init+0x430>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_DMA_Init+0x38a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_DMA_Init+0x434>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_Init+0x38a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a36      	ldr	r2, [pc, #216]	; (8003650 <HAL_DMA_Init+0x438>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_DMA_Init+0x38a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a35      	ldr	r2, [pc, #212]	; (8003654 <HAL_DMA_Init+0x43c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Init+0x38a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a33      	ldr	r2, [pc, #204]	; (8003658 <HAL_DMA_Init+0x440>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_DMA_Init+0x38a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a32      	ldr	r2, [pc, #200]	; (800365c <HAL_DMA_Init+0x444>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_Init+0x38a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a30      	ldr	r2, [pc, #192]	; (8003660 <HAL_DMA_Init+0x448>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_DMA_Init+0x38e>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_DMA_Init+0x390>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8097 	beq.w	80036dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a24      	ldr	r2, [pc, #144]	; (8003644 <HAL_DMA_Init+0x42c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d021      	beq.n	80035fc <HAL_DMA_Init+0x3e4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_DMA_Init+0x430>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01c      	beq.n	80035fc <HAL_DMA_Init+0x3e4>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_DMA_Init+0x434>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d017      	beq.n	80035fc <HAL_DMA_Init+0x3e4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_DMA_Init+0x438>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d012      	beq.n	80035fc <HAL_DMA_Init+0x3e4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1e      	ldr	r2, [pc, #120]	; (8003654 <HAL_DMA_Init+0x43c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00d      	beq.n	80035fc <HAL_DMA_Init+0x3e4>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_DMA_Init+0x440>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d008      	beq.n	80035fc <HAL_DMA_Init+0x3e4>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1b      	ldr	r2, [pc, #108]	; (800365c <HAL_DMA_Init+0x444>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <HAL_DMA_Init+0x3e4>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_DMA_Init+0x448>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_DMA_Init+0x44c>)
 800361a:	4013      	ands	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d020      	beq.n	8003668 <HAL_DMA_Init+0x450>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d102      	bne.n	8003634 <HAL_DMA_Init+0x41c>
 800362e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003632:	e01a      	b.n	800366a <HAL_DMA_Init+0x452>
 8003634:	2300      	movs	r3, #0
 8003636:	e018      	b.n	800366a <HAL_DMA_Init+0x452>
 8003638:	fe10803f 	.word	0xfe10803f
 800363c:	5c001000 	.word	0x5c001000
 8003640:	ffff0000 	.word	0xffff0000
 8003644:	58025408 	.word	0x58025408
 8003648:	5802541c 	.word	0x5802541c
 800364c:	58025430 	.word	0x58025430
 8003650:	58025444 	.word	0x58025444
 8003654:	58025458 	.word	0x58025458
 8003658:	5802546c 	.word	0x5802546c
 800365c:	58025480 	.word	0x58025480
 8003660:	58025494 	.word	0x58025494
 8003664:	fffe000f 	.word	0xfffe000f
 8003668:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003698:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <HAL_DMA_Init+0x650>)
 80036b0:	4413      	add	r3, r2
 80036b2:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_DMA_Init+0x654>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	009a      	lsls	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f001 f82f 	bl	8004724 <DMA_CalcBaseAndBitshift>
 80036c6:	4603      	mov	r3, r0
 80036c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2201      	movs	r2, #1
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	e008      	b.n	80036ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2203      	movs	r2, #3
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0b7      	b.n	800385e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5f      	ldr	r2, [pc, #380]	; (8003870 <HAL_DMA_Init+0x658>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d072      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <HAL_DMA_Init+0x65c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d06d      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <HAL_DMA_Init+0x660>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d068      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a5a      	ldr	r2, [pc, #360]	; (800387c <HAL_DMA_Init+0x664>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d063      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a59      	ldr	r2, [pc, #356]	; (8003880 <HAL_DMA_Init+0x668>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d05e      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a57      	ldr	r2, [pc, #348]	; (8003884 <HAL_DMA_Init+0x66c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d059      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a56      	ldr	r2, [pc, #344]	; (8003888 <HAL_DMA_Init+0x670>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d054      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a54      	ldr	r2, [pc, #336]	; (800388c <HAL_DMA_Init+0x674>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d04f      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a53      	ldr	r2, [pc, #332]	; (8003890 <HAL_DMA_Init+0x678>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d04a      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a51      	ldr	r2, [pc, #324]	; (8003894 <HAL_DMA_Init+0x67c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d045      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a50      	ldr	r2, [pc, #320]	; (8003898 <HAL_DMA_Init+0x680>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d040      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a4e      	ldr	r2, [pc, #312]	; (800389c <HAL_DMA_Init+0x684>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d03b      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <HAL_DMA_Init+0x688>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d036      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4b      	ldr	r2, [pc, #300]	; (80038a4 <HAL_DMA_Init+0x68c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d031      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <HAL_DMA_Init+0x690>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d02c      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a48      	ldr	r2, [pc, #288]	; (80038ac <HAL_DMA_Init+0x694>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d027      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a47      	ldr	r2, [pc, #284]	; (80038b0 <HAL_DMA_Init+0x698>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a45      	ldr	r2, [pc, #276]	; (80038b4 <HAL_DMA_Init+0x69c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01d      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a44      	ldr	r2, [pc, #272]	; (80038b8 <HAL_DMA_Init+0x6a0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a42      	ldr	r2, [pc, #264]	; (80038bc <HAL_DMA_Init+0x6a4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a41      	ldr	r2, [pc, #260]	; (80038c0 <HAL_DMA_Init+0x6a8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a3f      	ldr	r2, [pc, #252]	; (80038c4 <HAL_DMA_Init+0x6ac>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a3e      	ldr	r2, [pc, #248]	; (80038c8 <HAL_DMA_Init+0x6b0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_DMA_Init+0x5c6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3c      	ldr	r2, [pc, #240]	; (80038cc <HAL_DMA_Init+0x6b4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_DMA_Init+0x5ca>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_DMA_Init+0x5cc>
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d032      	beq.n	800384e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 f8c9 	bl	8004980 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d102      	bne.n	80037fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003810:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HAL_DMA_Init+0x624>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b08      	cmp	r3, #8
 8003820:	d80c      	bhi.n	800383c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f001 f946 	bl	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	e008      	b.n	800384e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	a7fdabf8 	.word	0xa7fdabf8
 800386c:	cccccccd 	.word	0xcccccccd
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8
 80038b0:	58025408 	.word	0x58025408
 80038b4:	5802541c 	.word	0x5802541c
 80038b8:	58025430 	.word	0x58025430
 80038bc:	58025444 	.word	0x58025444
 80038c0:	58025458 	.word	0x58025458
 80038c4:	5802546c 	.word	0x5802546c
 80038c8:	58025480 	.word	0x58025480
 80038cc:	58025494 	.word	0x58025494

080038d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038dc:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <HAL_DMA_IRQHandler+0x1ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	; (8003a80 <HAL_DMA_IRQHandler+0x1b0>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <HAL_DMA_IRQHandler+0x1b4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5d      	ldr	r2, [pc, #372]	; (8003a88 <HAL_DMA_IRQHandler+0x1b8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a5c      	ldr	r2, [pc, #368]	; (8003a8c <HAL_DMA_IRQHandler+0x1bc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5a      	ldr	r2, [pc, #360]	; (8003a90 <HAL_DMA_IRQHandler+0x1c0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a59      	ldr	r2, [pc, #356]	; (8003a94 <HAL_DMA_IRQHandler+0x1c4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_DMA_IRQHandler+0x1c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a56      	ldr	r2, [pc, #344]	; (8003a9c <HAL_DMA_IRQHandler+0x1cc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <HAL_DMA_IRQHandler+0x1d0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a53      	ldr	r2, [pc, #332]	; (8003aa4 <HAL_DMA_IRQHandler+0x1d4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a51      	ldr	r2, [pc, #324]	; (8003aa8 <HAL_DMA_IRQHandler+0x1d8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a50      	ldr	r2, [pc, #320]	; (8003aac <HAL_DMA_IRQHandler+0x1dc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a4e      	ldr	r2, [pc, #312]	; (8003ab0 <HAL_DMA_IRQHandler+0x1e0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4d      	ldr	r2, [pc, #308]	; (8003ab4 <HAL_DMA_IRQHandler+0x1e4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4b      	ldr	r2, [pc, #300]	; (8003ab8 <HAL_DMA_IRQHandler+0x1e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <HAL_DMA_IRQHandler+0x1ec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a48      	ldr	r2, [pc, #288]	; (8003ac0 <HAL_DMA_IRQHandler+0x1f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_DMA_IRQHandler+0xd6>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_DMA_IRQHandler+0xd8>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 842b 	beq.w	8004204 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2208      	movs	r2, #8
 80039b8:	409a      	lsls	r2, r3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80a2 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <HAL_DMA_IRQHandler+0x1b4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04a      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <HAL_DMA_IRQHandler+0x1b8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <HAL_DMA_IRQHandler+0x1bc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_DMA_IRQHandler+0x1c0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03b      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_DMA_IRQHandler+0x1c4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d036      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_DMA_IRQHandler+0x1c8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d031      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <HAL_DMA_IRQHandler+0x1cc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02c      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d027      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_DMA_IRQHandler+0x1d4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_DMA_IRQHandler+0x1dc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_DMA_IRQHandler+0x1ec>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d12f      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x1f4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e02e      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x208>
 8003a7a:	bf00      	nop
 8003a7c:	24000000 	.word	0x24000000
 8003a80:	1b4e81b5 	.word	0x1b4e81b5
 8003a84:	40020010 	.word	0x40020010
 8003a88:	40020028 	.word	0x40020028
 8003a8c:	40020040 	.word	0x40020040
 8003a90:	40020058 	.word	0x40020058
 8003a94:	40020070 	.word	0x40020070
 8003a98:	40020088 	.word	0x40020088
 8003a9c:	400200a0 	.word	0x400200a0
 8003aa0:	400200b8 	.word	0x400200b8
 8003aa4:	40020410 	.word	0x40020410
 8003aa8:	40020428 	.word	0x40020428
 8003aac:	40020440 	.word	0x40020440
 8003ab0:	40020458 	.word	0x40020458
 8003ab4:	40020470 	.word	0x40020470
 8003ab8:	40020488 	.word	0x40020488
 8003abc:	400204a0 	.word	0x400204a0
 8003ac0:	400204b8 	.word	0x400204b8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2208      	movs	r2, #8
 8003af6:	409a      	lsls	r2, r3
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d06e      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a69      	ldr	r2, [pc, #420]	; (8003cc8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d04a      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a67      	ldr	r2, [pc, #412]	; (8003ccc <HAL_DMA_IRQHandler+0x3fc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d045      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a66      	ldr	r2, [pc, #408]	; (8003cd0 <HAL_DMA_IRQHandler+0x400>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d040      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a64      	ldr	r2, [pc, #400]	; (8003cd4 <HAL_DMA_IRQHandler+0x404>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d03b      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_DMA_IRQHandler+0x408>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d036      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a61      	ldr	r2, [pc, #388]	; (8003cdc <HAL_DMA_IRQHandler+0x40c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d031      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <HAL_DMA_IRQHandler+0x410>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d02c      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5e      	ldr	r2, [pc, #376]	; (8003ce4 <HAL_DMA_IRQHandler+0x414>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d027      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5d      	ldr	r2, [pc, #372]	; (8003ce8 <HAL_DMA_IRQHandler+0x418>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d022      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5b      	ldr	r2, [pc, #364]	; (8003cec <HAL_DMA_IRQHandler+0x41c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01d      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5a      	ldr	r2, [pc, #360]	; (8003cf0 <HAL_DMA_IRQHandler+0x420>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a58      	ldr	r2, [pc, #352]	; (8003cf4 <HAL_DMA_IRQHandler+0x424>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_DMA_IRQHandler+0x428>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a55      	ldr	r2, [pc, #340]	; (8003cfc <HAL_DMA_IRQHandler+0x42c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a54      	ldr	r2, [pc, #336]	; (8003d00 <HAL_DMA_IRQHandler+0x430>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	; (8003d04 <HAL_DMA_IRQHandler+0x434>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x304>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e003      	b.n	8003bdc <HAL_DMA_IRQHandler+0x30c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2201      	movs	r2, #1
 8003bea:	409a      	lsls	r2, r3
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f043 0202 	orr.w	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2204      	movs	r2, #4
 8003c06:	409a      	lsls	r2, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 808f 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <HAL_DMA_IRQHandler+0x3f8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d04a      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_DMA_IRQHandler+0x3fc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d045      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_DMA_IRQHandler+0x400>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d040      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <HAL_DMA_IRQHandler+0x404>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d03b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_DMA_IRQHandler+0x408>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d036      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <HAL_DMA_IRQHandler+0x40c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d031      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <HAL_DMA_IRQHandler+0x410>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d02c      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <HAL_DMA_IRQHandler+0x414>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d027      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <HAL_DMA_IRQHandler+0x418>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_DMA_IRQHandler+0x41c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_DMA_IRQHandler+0x420>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_DMA_IRQHandler+0x424>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_DMA_IRQHandler+0x428>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_DMA_IRQHandler+0x42c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_DMA_IRQHandler+0x430>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <HAL_DMA_IRQHandler+0x434>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d12a      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x438>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e023      	b.n	8003d10 <HAL_DMA_IRQHandler+0x440>
 8003cc8:	40020010 	.word	0x40020010
 8003ccc:	40020028 	.word	0x40020028
 8003cd0:	40020040 	.word	0x40020040
 8003cd4:	40020058 	.word	0x40020058
 8003cd8:	40020070 	.word	0x40020070
 8003cdc:	40020088 	.word	0x40020088
 8003ce0:	400200a0 	.word	0x400200a0
 8003ce4:	400200b8 	.word	0x400200b8
 8003ce8:	40020410 	.word	0x40020410
 8003cec:	40020428 	.word	0x40020428
 8003cf0:	40020440 	.word	0x40020440
 8003cf4:	40020458 	.word	0x40020458
 8003cf8:	40020470 	.word	0x40020470
 8003cfc:	40020488 	.word	0x40020488
 8003d00:	400204a0 	.word	0x400204a0
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f043 0204 	orr.w	r2, r3, #4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2210      	movs	r2, #16
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a6 	beq.w	8003e92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a85      	ldr	r2, [pc, #532]	; (8003f60 <HAL_DMA_IRQHandler+0x690>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_DMA_IRQHandler+0x694>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a82      	ldr	r2, [pc, #520]	; (8003f68 <HAL_DMA_IRQHandler+0x698>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a80      	ldr	r2, [pc, #512]	; (8003f6c <HAL_DMA_IRQHandler+0x69c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7f      	ldr	r2, [pc, #508]	; (8003f70 <HAL_DMA_IRQHandler+0x6a0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7d      	ldr	r2, [pc, #500]	; (8003f74 <HAL_DMA_IRQHandler+0x6a4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7c      	ldr	r2, [pc, #496]	; (8003f78 <HAL_DMA_IRQHandler+0x6a8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_DMA_IRQHandler+0x6ac>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a79      	ldr	r2, [pc, #484]	; (8003f80 <HAL_DMA_IRQHandler+0x6b0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a77      	ldr	r2, [pc, #476]	; (8003f84 <HAL_DMA_IRQHandler+0x6b4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_DMA_IRQHandler+0x6b8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a74      	ldr	r2, [pc, #464]	; (8003f8c <HAL_DMA_IRQHandler+0x6bc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a73      	ldr	r2, [pc, #460]	; (8003f90 <HAL_DMA_IRQHandler+0x6c0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a71      	ldr	r2, [pc, #452]	; (8003f94 <HAL_DMA_IRQHandler+0x6c4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a70      	ldr	r2, [pc, #448]	; (8003f98 <HAL_DMA_IRQHandler+0x6c8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_DMA_IRQHandler+0x6cc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10a      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x52c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e009      	b.n	8003e10 <HAL_DMA_IRQHandler+0x540>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d03e      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d108      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d024      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
 8003e50:	e01f      	b.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e016      	b.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8110 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <HAL_DMA_IRQHandler+0x690>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04a      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <HAL_DMA_IRQHandler+0x694>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d045      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <HAL_DMA_IRQHandler+0x698>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d040      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <HAL_DMA_IRQHandler+0x69c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d03b      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <HAL_DMA_IRQHandler+0x6a0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d036      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <HAL_DMA_IRQHandler+0x6a4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d031      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_DMA_IRQHandler+0x6a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02c      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_DMA_IRQHandler+0x6ac>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d027      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_DMA_IRQHandler+0x6b0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d022      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_DMA_IRQHandler+0x6b4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d01d      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_DMA_IRQHandler+0x6b8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <HAL_DMA_IRQHandler+0x6bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_DMA_IRQHandler+0x6c0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_DMA_IRQHandler+0x6c4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_DMA_IRQHandler+0x6c8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <HAL_DMA_IRQHandler+0x6cc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d12b      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x6d0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf14      	ite	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	2300      	moveq	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	e02a      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x6e4>
 8003f5e:	bf00      	nop
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8087 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d139      	bne.n	800404a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0216 	bic.w	r2, r2, #22
 8003fe4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <HAL_DMA_IRQHandler+0x736>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0208 	bic.w	r2, r2, #8
 8004014:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	223f      	movs	r2, #63	; 0x3f
 8004020:	409a      	lsls	r2, r3
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 834a 	beq.w	80046d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
          }
          return;
 8004048:	e344      	b.n	80046d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
 8004076:	e027      	b.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d023      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e01e      	b.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10f      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0210 	bic.w	r2, r2, #16
 80040a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8306 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8088 	beq.w	80041f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2204      	movs	r2, #4
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a7a      	ldr	r2, [pc, #488]	; (80042d8 <HAL_DMA_IRQHandler+0xa08>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d04a      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a79      	ldr	r2, [pc, #484]	; (80042dc <HAL_DMA_IRQHandler+0xa0c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d045      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a77      	ldr	r2, [pc, #476]	; (80042e0 <HAL_DMA_IRQHandler+0xa10>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d040      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a76      	ldr	r2, [pc, #472]	; (80042e4 <HAL_DMA_IRQHandler+0xa14>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d03b      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <HAL_DMA_IRQHandler+0xa18>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d036      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a73      	ldr	r2, [pc, #460]	; (80042ec <HAL_DMA_IRQHandler+0xa1c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d031      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a71      	ldr	r2, [pc, #452]	; (80042f0 <HAL_DMA_IRQHandler+0xa20>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02c      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a70      	ldr	r2, [pc, #448]	; (80042f4 <HAL_DMA_IRQHandler+0xa24>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d027      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a6e      	ldr	r2, [pc, #440]	; (80042f8 <HAL_DMA_IRQHandler+0xa28>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d022      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6d      	ldr	r2, [pc, #436]	; (80042fc <HAL_DMA_IRQHandler+0xa2c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d01d      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6b      	ldr	r2, [pc, #428]	; (8004300 <HAL_DMA_IRQHandler+0xa30>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d018      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6a      	ldr	r2, [pc, #424]	; (8004304 <HAL_DMA_IRQHandler+0xa34>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a68      	ldr	r2, [pc, #416]	; (8004308 <HAL_DMA_IRQHandler+0xa38>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a67      	ldr	r2, [pc, #412]	; (800430c <HAL_DMA_IRQHandler+0xa3c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_DMA_IRQHandler+0xa40>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a64      	ldr	r2, [pc, #400]	; (8004314 <HAL_DMA_IRQHandler+0xa44>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <HAL_DMA_IRQHandler+0x8ca>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e007      	b.n	80041aa <HAL_DMA_IRQHandler+0x8da>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d307      	bcc.n	80041c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f2      	bne.n	80041aa <HAL_DMA_IRQHandler+0x8da>
 80041c4:	e000      	b.n	80041c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2203      	movs	r2, #3
 80041da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041de:	e003      	b.n	80041e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8272 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
 8004202:	e26c      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a43      	ldr	r2, [pc, #268]	; (8004318 <HAL_DMA_IRQHandler+0xa48>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_DMA_IRQHandler+0xa4c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d01d      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a40      	ldr	r2, [pc, #256]	; (8004320 <HAL_DMA_IRQHandler+0xa50>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3f      	ldr	r2, [pc, #252]	; (8004324 <HAL_DMA_IRQHandler+0xa54>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a3d      	ldr	r2, [pc, #244]	; (8004328 <HAL_DMA_IRQHandler+0xa58>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3c      	ldr	r2, [pc, #240]	; (800432c <HAL_DMA_IRQHandler+0xa5c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3a      	ldr	r2, [pc, #232]	; (8004330 <HAL_DMA_IRQHandler+0xa60>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_DMA_IRQHandler+0x984>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a39      	ldr	r2, [pc, #228]	; (8004334 <HAL_DMA_IRQHandler+0xa64>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_DMA_IRQHandler+0x988>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_DMA_IRQHandler+0x98a>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 823f 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2204      	movs	r2, #4
 8004272:	409a      	lsls	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80cd 	beq.w	8004418 <HAL_DMA_IRQHandler+0xb48>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80c7 	beq.w	8004418 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2204      	movs	r2, #4
 8004294:	409a      	lsls	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d049      	beq.n	8004338 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8210 	beq.w	80046d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042c0:	e20a      	b.n	80046d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8206 	beq.w	80046d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d4:	e200      	b.n	80046d8 <HAL_DMA_IRQHandler+0xe08>
 80042d6:	bf00      	nop
 80042d8:	40020010 	.word	0x40020010
 80042dc:	40020028 	.word	0x40020028
 80042e0:	40020040 	.word	0x40020040
 80042e4:	40020058 	.word	0x40020058
 80042e8:	40020070 	.word	0x40020070
 80042ec:	40020088 	.word	0x40020088
 80042f0:	400200a0 	.word	0x400200a0
 80042f4:	400200b8 	.word	0x400200b8
 80042f8:	40020410 	.word	0x40020410
 80042fc:	40020428 	.word	0x40020428
 8004300:	40020440 	.word	0x40020440
 8004304:	40020458 	.word	0x40020458
 8004308:	40020470 	.word	0x40020470
 800430c:	40020488 	.word	0x40020488
 8004310:	400204a0 	.word	0x400204a0
 8004314:	400204b8 	.word	0x400204b8
 8004318:	58025408 	.word	0x58025408
 800431c:	5802541c 	.word	0x5802541c
 8004320:	58025430 	.word	0x58025430
 8004324:	58025444 	.word	0x58025444
 8004328:	58025458 	.word	0x58025458
 800432c:	5802546c 	.word	0x5802546c
 8004330:	58025480 	.word	0x58025480
 8004334:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d160      	bne.n	8004404 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7f      	ldr	r2, [pc, #508]	; (8004544 <HAL_DMA_IRQHandler+0xc74>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d04a      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7d      	ldr	r2, [pc, #500]	; (8004548 <HAL_DMA_IRQHandler+0xc78>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d045      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7c      	ldr	r2, [pc, #496]	; (800454c <HAL_DMA_IRQHandler+0xc7c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d040      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a7a      	ldr	r2, [pc, #488]	; (8004550 <HAL_DMA_IRQHandler+0xc80>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d03b      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a79      	ldr	r2, [pc, #484]	; (8004554 <HAL_DMA_IRQHandler+0xc84>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d036      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a77      	ldr	r2, [pc, #476]	; (8004558 <HAL_DMA_IRQHandler+0xc88>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d031      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a76      	ldr	r2, [pc, #472]	; (800455c <HAL_DMA_IRQHandler+0xc8c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d02c      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a74      	ldr	r2, [pc, #464]	; (8004560 <HAL_DMA_IRQHandler+0xc90>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d027      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a73      	ldr	r2, [pc, #460]	; (8004564 <HAL_DMA_IRQHandler+0xc94>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a71      	ldr	r2, [pc, #452]	; (8004568 <HAL_DMA_IRQHandler+0xc98>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a70      	ldr	r2, [pc, #448]	; (800456c <HAL_DMA_IRQHandler+0xc9c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_DMA_IRQHandler+0xca0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6d      	ldr	r2, [pc, #436]	; (8004574 <HAL_DMA_IRQHandler+0xca4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6b      	ldr	r2, [pc, #428]	; (8004578 <HAL_DMA_IRQHandler+0xca8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6a      	ldr	r2, [pc, #424]	; (800457c <HAL_DMA_IRQHandler+0xcac>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xb12>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a68      	ldr	r2, [pc, #416]	; (8004580 <HAL_DMA_IRQHandler+0xcb0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d108      	bne.n	80043f4 <HAL_DMA_IRQHandler+0xb24>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0208 	bic.w	r2, r2, #8
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e007      	b.n	8004404 <HAL_DMA_IRQHandler+0xb34>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8165 	beq.w	80046d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004416:	e15f      	b.n	80046d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2202      	movs	r2, #2
 8004422:	409a      	lsls	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80c5 	beq.w	80045b8 <HAL_DMA_IRQHandler+0xce8>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80bf 	beq.w	80045b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2202      	movs	r2, #2
 8004444:	409a      	lsls	r2, r3
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 813a 	beq.w	80046dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004470:	e134      	b.n	80046dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8130 	beq.w	80046dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004484:	e12a      	b.n	80046dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 8089 	bne.w	80045a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <HAL_DMA_IRQHandler+0xc74>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d04a      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_DMA_IRQHandler+0xc78>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d045      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a28      	ldr	r2, [pc, #160]	; (800454c <HAL_DMA_IRQHandler+0xc7c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d040      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a26      	ldr	r2, [pc, #152]	; (8004550 <HAL_DMA_IRQHandler+0xc80>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d03b      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a25      	ldr	r2, [pc, #148]	; (8004554 <HAL_DMA_IRQHandler+0xc84>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d036      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a23      	ldr	r2, [pc, #140]	; (8004558 <HAL_DMA_IRQHandler+0xc88>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d031      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a22      	ldr	r2, [pc, #136]	; (800455c <HAL_DMA_IRQHandler+0xc8c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d02c      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <HAL_DMA_IRQHandler+0xc90>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_DMA_IRQHandler+0xc94>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <HAL_DMA_IRQHandler+0xc98>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_DMA_IRQHandler+0xc9c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <HAL_DMA_IRQHandler+0xca0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_DMA_IRQHandler+0xca4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_DMA_IRQHandler+0xca8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a16      	ldr	r2, [pc, #88]	; (800457c <HAL_DMA_IRQHandler+0xcac>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc62>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <HAL_DMA_IRQHandler+0xcb0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d128      	bne.n	8004584 <HAL_DMA_IRQHandler+0xcb4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0214 	bic.w	r2, r2, #20
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e027      	b.n	8004594 <HAL_DMA_IRQHandler+0xcc4>
 8004544:	40020010 	.word	0x40020010
 8004548:	40020028 	.word	0x40020028
 800454c:	40020040 	.word	0x40020040
 8004550:	40020058 	.word	0x40020058
 8004554:	40020070 	.word	0x40020070
 8004558:	40020088 	.word	0x40020088
 800455c:	400200a0 	.word	0x400200a0
 8004560:	400200b8 	.word	0x400200b8
 8004564:	40020410 	.word	0x40020410
 8004568:	40020428 	.word	0x40020428
 800456c:	40020440 	.word	0x40020440
 8004570:	40020458 	.word	0x40020458
 8004574:	40020470 	.word	0x40020470
 8004578:	40020488 	.word	0x40020488
 800457c:	400204a0 	.word	0x400204a0
 8004580:	400204b8 	.word	0x400204b8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 020a 	bic.w	r2, r2, #10
 8004592:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8097 	beq.w	80046dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b6:	e091      	b.n	80046dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2208      	movs	r2, #8
 80045c2:	409a      	lsls	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8088 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8082 	beq.w	80046de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a41      	ldr	r2, [pc, #260]	; (80046e4 <HAL_DMA_IRQHandler+0xe14>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d04a      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <HAL_DMA_IRQHandler+0xe18>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d045      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3e      	ldr	r2, [pc, #248]	; (80046ec <HAL_DMA_IRQHandler+0xe1c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d040      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <HAL_DMA_IRQHandler+0xe20>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d03b      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <HAL_DMA_IRQHandler+0xe24>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d036      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a39      	ldr	r2, [pc, #228]	; (80046f8 <HAL_DMA_IRQHandler+0xe28>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d031      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a38      	ldr	r2, [pc, #224]	; (80046fc <HAL_DMA_IRQHandler+0xe2c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d02c      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a36      	ldr	r2, [pc, #216]	; (8004700 <HAL_DMA_IRQHandler+0xe30>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d027      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a35      	ldr	r2, [pc, #212]	; (8004704 <HAL_DMA_IRQHandler+0xe34>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a33      	ldr	r2, [pc, #204]	; (8004708 <HAL_DMA_IRQHandler+0xe38>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01d      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a32      	ldr	r2, [pc, #200]	; (800470c <HAL_DMA_IRQHandler+0xe3c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a30      	ldr	r2, [pc, #192]	; (8004710 <HAL_DMA_IRQHandler+0xe40>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <HAL_DMA_IRQHandler+0xe44>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2d      	ldr	r2, [pc, #180]	; (8004718 <HAL_DMA_IRQHandler+0xe48>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	; (800471c <HAL_DMA_IRQHandler+0xe4c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_DMA_IRQHandler+0xdaa>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <HAL_DMA_IRQHandler+0xe50>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d108      	bne.n	800468c <HAL_DMA_IRQHandler+0xdbc>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 021c 	bic.w	r2, r2, #28
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e007      	b.n	800469c <HAL_DMA_IRQHandler+0xdcc>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 020e 	bic.w	r2, r2, #14
 800469a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2201      	movs	r2, #1
 80046a6:	409a      	lsls	r2, r3
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
 80046d2:	e004      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80046d4:	bf00      	nop
 80046d6:	e002      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d8:	bf00      	nop
 80046da:	e000      	b.n	80046de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40020010 	.word	0x40020010
 80046e8:	40020028 	.word	0x40020028
 80046ec:	40020040 	.word	0x40020040
 80046f0:	40020058 	.word	0x40020058
 80046f4:	40020070 	.word	0x40020070
 80046f8:	40020088 	.word	0x40020088
 80046fc:	400200a0 	.word	0x400200a0
 8004700:	400200b8 	.word	0x400200b8
 8004704:	40020410 	.word	0x40020410
 8004708:	40020428 	.word	0x40020428
 800470c:	40020440 	.word	0x40020440
 8004710:	40020458 	.word	0x40020458
 8004714:	40020470 	.word	0x40020470
 8004718:	40020488 	.word	0x40020488
 800471c:	400204a0 	.word	0x400204a0
 8004720:	400204b8 	.word	0x400204b8

08004724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a42      	ldr	r2, [pc, #264]	; (800483c <DMA_CalcBaseAndBitshift+0x118>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d04a      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a41      	ldr	r2, [pc, #260]	; (8004840 <DMA_CalcBaseAndBitshift+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d045      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3f      	ldr	r2, [pc, #252]	; (8004844 <DMA_CalcBaseAndBitshift+0x120>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d040      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3e      	ldr	r2, [pc, #248]	; (8004848 <DMA_CalcBaseAndBitshift+0x124>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d03b      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3c      	ldr	r2, [pc, #240]	; (800484c <DMA_CalcBaseAndBitshift+0x128>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d036      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3b      	ldr	r2, [pc, #236]	; (8004850 <DMA_CalcBaseAndBitshift+0x12c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d031      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a39      	ldr	r2, [pc, #228]	; (8004854 <DMA_CalcBaseAndBitshift+0x130>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02c      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a38      	ldr	r2, [pc, #224]	; (8004858 <DMA_CalcBaseAndBitshift+0x134>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d027      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a36      	ldr	r2, [pc, #216]	; (800485c <DMA_CalcBaseAndBitshift+0x138>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a35      	ldr	r2, [pc, #212]	; (8004860 <DMA_CalcBaseAndBitshift+0x13c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d01d      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a33      	ldr	r2, [pc, #204]	; (8004864 <DMA_CalcBaseAndBitshift+0x140>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a32      	ldr	r2, [pc, #200]	; (8004868 <DMA_CalcBaseAndBitshift+0x144>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a30      	ldr	r2, [pc, #192]	; (800486c <DMA_CalcBaseAndBitshift+0x148>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2f      	ldr	r2, [pc, #188]	; (8004870 <DMA_CalcBaseAndBitshift+0x14c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2d      	ldr	r2, [pc, #180]	; (8004874 <DMA_CalcBaseAndBitshift+0x150>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <DMA_CalcBaseAndBitshift+0xa8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2c      	ldr	r2, [pc, #176]	; (8004878 <DMA_CalcBaseAndBitshift+0x154>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <DMA_CalcBaseAndBitshift+0xac>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <DMA_CalcBaseAndBitshift+0xae>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d024      	beq.n	8004820 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3b10      	subs	r3, #16
 80047de:	4a27      	ldr	r2, [pc, #156]	; (800487c <DMA_CalcBaseAndBitshift+0x158>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	4a24      	ldr	r2, [pc, #144]	; (8004880 <DMA_CalcBaseAndBitshift+0x15c>)
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d908      	bls.n	8004810 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <DMA_CalcBaseAndBitshift+0x160>)
 8004806:	4013      	ands	r3, r2
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	659a      	str	r2, [r3, #88]	; 0x58
 800480e:	e00d      	b.n	800482c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <DMA_CalcBaseAndBitshift+0x160>)
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6593      	str	r3, [r2, #88]	; 0x58
 800481e:	e005      	b.n	800482c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40020010 	.word	0x40020010
 8004840:	40020028 	.word	0x40020028
 8004844:	40020040 	.word	0x40020040
 8004848:	40020058 	.word	0x40020058
 800484c:	40020070 	.word	0x40020070
 8004850:	40020088 	.word	0x40020088
 8004854:	400200a0 	.word	0x400200a0
 8004858:	400200b8 	.word	0x400200b8
 800485c:	40020410 	.word	0x40020410
 8004860:	40020428 	.word	0x40020428
 8004864:	40020440 	.word	0x40020440
 8004868:	40020458 	.word	0x40020458
 800486c:	40020470 	.word	0x40020470
 8004870:	40020488 	.word	0x40020488
 8004874:	400204a0 	.word	0x400204a0
 8004878:	400204b8 	.word	0x400204b8
 800487c:	aaaaaaab 	.word	0xaaaaaaab
 8004880:	0800f4c8 	.word	0x0800f4c8
 8004884:	fffffc00 	.word	0xfffffc00

08004888 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d120      	bne.n	80048de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d858      	bhi.n	8004956 <DMA_CheckFifoParam+0xce>
 80048a4:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <DMA_CheckFifoParam+0x24>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048cf 	.word	0x080048cf
 80048b4:	080048bd 	.word	0x080048bd
 80048b8:	08004957 	.word	0x08004957
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d048      	beq.n	800495a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048cc:	e045      	b.n	800495a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048d6:	d142      	bne.n	800495e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048dc:	e03f      	b.n	800495e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e6:	d123      	bne.n	8004930 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d838      	bhi.n	8004962 <DMA_CheckFifoParam+0xda>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <DMA_CheckFifoParam+0x70>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	08004909 	.word	0x08004909
 80048fc:	0800490f 	.word	0x0800490f
 8004900:	08004909 	.word	0x08004909
 8004904:	08004921 	.word	0x08004921
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
        break;
 800490c:	e030      	b.n	8004970 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d025      	beq.n	8004966 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800491e:	e022      	b.n	8004966 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004928:	d11f      	bne.n	800496a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800492e:	e01c      	b.n	800496a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	2b02      	cmp	r3, #2
 8004936:	d902      	bls.n	800493e <DMA_CheckFifoParam+0xb6>
 8004938:	2b03      	cmp	r3, #3
 800493a:	d003      	beq.n	8004944 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800493c:	e018      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
        break;
 8004942:	e015      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
    break;
 8004954:	e00b      	b.n	800496e <DMA_CheckFifoParam+0xe6>
        break;
 8004956:	bf00      	nop
 8004958:	e00a      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 800495a:	bf00      	nop
 800495c:	e008      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 800495e:	bf00      	nop
 8004960:	e006      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
        break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <DMA_CheckFifoParam+0xe8>
    break;
 800496e:	bf00      	nop
    }
  }

  return status;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop

08004980 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a38      	ldr	r2, [pc, #224]	; (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a36      	ldr	r2, [pc, #216]	; (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01d      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a35      	ldr	r2, [pc, #212]	; (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a33      	ldr	r2, [pc, #204]	; (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a32      	ldr	r2, [pc, #200]	; (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a30      	ldr	r2, [pc, #192]	; (8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2f      	ldr	r2, [pc, #188]	; (8004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2d      	ldr	r2, [pc, #180]	; (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	3b08      	subs	r3, #8
 80049f0:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2201      	movs	r2, #1
 8004a16:	409a      	lsls	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a1c:	e024      	b.n	8004a68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3b10      	subs	r3, #16
 8004a26:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a1c      	ldr	r2, [pc, #112]	; (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d806      	bhi.n	8004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d902      	bls.n	8004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3308      	adds	r3, #8
 8004a44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	2201      	movs	r2, #1
 8004a62:	409a      	lsls	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	58025408 	.word	0x58025408
 8004a78:	5802541c 	.word	0x5802541c
 8004a7c:	58025430 	.word	0x58025430
 8004a80:	58025444 	.word	0x58025444
 8004a84:	58025458 	.word	0x58025458
 8004a88:	5802546c 	.word	0x5802546c
 8004a8c:	58025480 	.word	0x58025480
 8004a90:	58025494 	.word	0x58025494
 8004a94:	cccccccd 	.word	0xcccccccd
 8004a98:	16009600 	.word	0x16009600
 8004a9c:	58025880 	.word	0x58025880
 8004aa0:	aaaaaaab 	.word	0xaaaaaaab
 8004aa4:	400204b8 	.word	0x400204b8
 8004aa8:	4002040f 	.word	0x4002040f
 8004aac:	10008200 	.word	0x10008200
 8004ab0:	40020880 	.word	0x40020880

08004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d04a      	beq.n	8004b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d847      	bhi.n	8004b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d022      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d01d      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	461a      	mov	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b3c:	671a      	str	r2, [r3, #112]	; 0x70
 8004b3e:	e009      	b.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	58025408 	.word	0x58025408
 8004b70:	5802541c 	.word	0x5802541c
 8004b74:	58025430 	.word	0x58025430
 8004b78:	58025444 	.word	0x58025444
 8004b7c:	58025458 	.word	0x58025458
 8004b80:	5802546c 	.word	0x5802546c
 8004b84:	58025480 	.word	0x58025480
 8004b88:	58025494 	.word	0x58025494
 8004b8c:	1600963f 	.word	0x1600963f
 8004b90:	58025940 	.word	0x58025940
 8004b94:	1000823f 	.word	0x1000823f
 8004b98:	40020940 	.word	0x40020940

08004b9c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b098      	sub	sp, #96	; 0x60
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004ba4:	4a84      	ldr	r2, [pc, #528]	; (8004db8 <HAL_FDCAN_Init+0x21c>)
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	4611      	mov	r1, r2
 8004bac:	224c      	movs	r2, #76	; 0x4c
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f00a fc16 	bl	800f3e0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e1c6      	b.n	8004f4c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7e      	ldr	r2, [pc, #504]	; (8004dbc <HAL_FDCAN_Init+0x220>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d106      	bne.n	8004bd6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc faa6 	bl	800113c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0210 	bic.w	r2, r2, #16
 8004bfe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c00:	f7fc fe66 	bl	80018d0 <HAL_GetTick>
 8004c04:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c06:	e014      	b.n	8004c32 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c08:	f7fc fe62 	bl	80018d0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b0a      	cmp	r3, #10
 8004c14:	d90d      	bls.n	8004c32 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c1c:	f043 0201 	orr.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e18c      	b.n	8004f4c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d0e3      	beq.n	8004c08 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c50:	f7fc fe3e 	bl	80018d0 <HAL_GetTick>
 8004c54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c56:	e014      	b.n	8004c82 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c58:	f7fc fe3a 	bl	80018d0 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b0a      	cmp	r3, #10
 8004c64:	d90d      	bls.n	8004c82 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e164      	b.n	8004f4c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0e3      	beq.n	8004c58 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0202 	orr.w	r2, r2, #2
 8004c9e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7c1b      	ldrb	r3, [r3, #16]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d108      	bne.n	8004cba <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb6:	619a      	str	r2, [r3, #24]
 8004cb8:	e007      	b.n	8004cca <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	7c5b      	ldrb	r3, [r3, #17]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d108      	bne.n	8004ce4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce0:	619a      	str	r2, [r3, #24]
 8004ce2:	e007      	b.n	8004cf4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	7c9b      	ldrb	r3, [r3, #18]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d108      	bne.n	8004d0e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d0a:	619a      	str	r2, [r3, #24]
 8004d0c:	e007      	b.n	8004d1e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d1c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004d42:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0210 	bic.w	r2, r2, #16
 8004d52:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d108      	bne.n	8004d6e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0204 	orr.w	r2, r2, #4
 8004d6a:	619a      	str	r2, [r3, #24]
 8004d6c:	e030      	b.n	8004dd0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02c      	beq.n	8004dd0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d020      	beq.n	8004dc0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d8c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0210 	orr.w	r2, r2, #16
 8004d9c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d114      	bne.n	8004dd0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0220 	orr.w	r2, r2, #32
 8004db4:	619a      	str	r2, [r3, #24]
 8004db6:	e00b      	b.n	8004dd0 <HAL_FDCAN_Init+0x234>
 8004db8:	0800f424 	.word	0x0800f424
 8004dbc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0220 	orr.w	r2, r2, #32
 8004dce:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004de0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004de8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004df8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dfa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e04:	d115      	bne.n	8004e32 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	3b01      	subs	r3, #1
 8004e12:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e14:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e1e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	3b01      	subs	r3, #1
 8004e28:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004e2e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e30:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	4413      	add	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d011      	beq.n	8004e82 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004e66:	f023 0107 	bic.w	r1, r3, #7
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3360      	adds	r3, #96	; 0x60
 8004e72:	443b      	add	r3, r7
 8004e74:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d011      	beq.n	8004eae <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004e92:	f023 0107 	bic.w	r1, r3, #7
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	3360      	adds	r3, #96	; 0x60
 8004e9e:	443b      	add	r3, r7
 8004ea0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ebe:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	3360      	adds	r3, #96	; 0x60
 8004eca:	443b      	add	r3, r7
 8004ecc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004ed0:	011a      	lsls	r2, r3, #4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d012      	beq.n	8004f0a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004eec:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	3360      	adds	r3, #96	; 0x60
 8004ef8:	443b      	add	r3, r7
 8004efa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <HAL_FDCAN_Init+0x3b8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d107      	bne.n	8004f24 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f022 0203 	bic.w	r2, r2, #3
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f80b 	bl	8004f58 <FDCAN_CalcultateRamBlockAddresses>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004f48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3760      	adds	r7, #96	; 0x60
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	4000a000 	.word	0x4000a000

08004f58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f64:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004f6e:	4ba7      	ldr	r3, [pc, #668]	; (800520c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0091      	lsls	r1, r2, #2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f88:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	041a      	lsls	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fae:	4b97      	ldr	r3, [pc, #604]	; (800520c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	0091      	lsls	r1, r2, #2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	041a      	lsls	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ff0:	4b86      	ldr	r3, [pc, #536]	; (800520c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	0091      	lsls	r1, r2, #2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800500a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	041a      	lsls	r2, r3, #16
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005038:	4b74      	ldr	r3, [pc, #464]	; (800520c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800503a:	4013      	ands	r3, r2
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	0091      	lsls	r1, r2, #2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	430b      	orrs	r3, r1
 8005046:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005052:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505a:	041a      	lsls	r2, r3, #16
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4413      	add	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005080:	4b62      	ldr	r3, [pc, #392]	; (800520c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005082:	4013      	ands	r3, r2
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	0091      	lsls	r1, r2, #2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	430b      	orrs	r3, r1
 800508e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80050ac:	4b57      	ldr	r3, [pc, #348]	; (800520c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	0091      	lsls	r1, r2, #2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	430b      	orrs	r3, r1
 80050ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050c6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	041a      	lsls	r2, r3, #16
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	4413      	add	r3, r2
 80050e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80050ee:	4b47      	ldr	r3, [pc, #284]	; (800520c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	0091      	lsls	r1, r2, #2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	430b      	orrs	r3, r1
 80050fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005108:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005124:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512c:	061a      	lsls	r2, r3, #24
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513c:	4b34      	ldr	r3, [pc, #208]	; (8005210 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800513e:	4413      	add	r3, r2
 8005140:	009a      	lsls	r2, r3, #2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	441a      	add	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800518a:	fb01 f303 	mul.w	r3, r1, r3
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	441a      	add	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	4a04      	ldr	r2, [pc, #16]	; (8005214 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d915      	bls.n	8005234 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005208:	e006      	b.n	8005218 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800520a:	bf00      	nop
 800520c:	ffff0003 	.word	0xffff0003
 8005210:	10002b00 	.word	0x10002b00
 8005214:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2203      	movs	r2, #3
 800522c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e010      	b.n	8005256 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e005      	b.n	8005248 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3304      	adds	r3, #4
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	429a      	cmp	r2, r3
 8005252:	d3f3      	bcc.n	800523c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop

08005264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005264:	b480      	push	{r7}
 8005266:	b089      	sub	sp, #36	; 0x24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005272:	4b89      	ldr	r3, [pc, #548]	; (8005498 <HAL_GPIO_Init+0x234>)
 8005274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005276:	e194      	b.n	80055a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	2101      	movs	r1, #1
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	4013      	ands	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8186 	beq.w	800559c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d005      	beq.n	80052a8 <HAL_GPIO_Init+0x44>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d130      	bne.n	800530a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	2203      	movs	r2, #3
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052de:	2201      	movs	r2, #1
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	091b      	lsrs	r3, r3, #4
 80052f4:	f003 0201 	and.w	r2, r3, #1
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b03      	cmp	r3, #3
 8005314:	d017      	beq.n	8005346 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	2203      	movs	r2, #3
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d123      	bne.n	800539a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	08da      	lsrs	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3208      	adds	r2, #8
 800535a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	220f      	movs	r2, #15
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4313      	orrs	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	08da      	lsrs	r2, r3, #3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3208      	adds	r2, #8
 8005394:	69b9      	ldr	r1, [r7, #24]
 8005396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 0203 	and.w	r2, r3, #3
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80e0 	beq.w	800559c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053dc:	4b2f      	ldr	r3, [pc, #188]	; (800549c <HAL_GPIO_Init+0x238>)
 80053de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053e2:	4a2e      	ldr	r2, [pc, #184]	; (800549c <HAL_GPIO_Init+0x238>)
 80053e4:	f043 0302 	orr.w	r3, r3, #2
 80053e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80053ec:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_GPIO_Init+0x238>)
 80053ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053fa:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <HAL_GPIO_Init+0x23c>)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	3302      	adds	r3, #2
 8005402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	220f      	movs	r2, #15
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <HAL_GPIO_Init+0x240>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d052      	beq.n	80054cc <HAL_GPIO_Init+0x268>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <HAL_GPIO_Init+0x244>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d031      	beq.n	8005492 <HAL_GPIO_Init+0x22e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_GPIO_Init+0x248>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d02b      	beq.n	800548e <HAL_GPIO_Init+0x22a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <HAL_GPIO_Init+0x24c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d025      	beq.n	800548a <HAL_GPIO_Init+0x226>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <HAL_GPIO_Init+0x250>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01f      	beq.n	8005486 <HAL_GPIO_Init+0x222>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_GPIO_Init+0x254>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d019      	beq.n	8005482 <HAL_GPIO_Init+0x21e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <HAL_GPIO_Init+0x258>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_GPIO_Init+0x21a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_GPIO_Init+0x25c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00d      	beq.n	800547a <HAL_GPIO_Init+0x216>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_GPIO_Init+0x260>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d007      	beq.n	8005476 <HAL_GPIO_Init+0x212>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <HAL_GPIO_Init+0x264>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_GPIO_Init+0x20e>
 800546e:	2309      	movs	r3, #9
 8005470:	e02d      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 8005472:	230a      	movs	r3, #10
 8005474:	e02b      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 8005476:	2308      	movs	r3, #8
 8005478:	e029      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 800547a:	2307      	movs	r3, #7
 800547c:	e027      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 800547e:	2306      	movs	r3, #6
 8005480:	e025      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 8005482:	2305      	movs	r3, #5
 8005484:	e023      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 8005486:	2304      	movs	r3, #4
 8005488:	e021      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 800548a:	2303      	movs	r3, #3
 800548c:	e01f      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 800548e:	2302      	movs	r3, #2
 8005490:	e01d      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 8005492:	2301      	movs	r3, #1
 8005494:	e01b      	b.n	80054ce <HAL_GPIO_Init+0x26a>
 8005496:	bf00      	nop
 8005498:	58000080 	.word	0x58000080
 800549c:	58024400 	.word	0x58024400
 80054a0:	58000400 	.word	0x58000400
 80054a4:	58020000 	.word	0x58020000
 80054a8:	58020400 	.word	0x58020400
 80054ac:	58020800 	.word	0x58020800
 80054b0:	58020c00 	.word	0x58020c00
 80054b4:	58021000 	.word	0x58021000
 80054b8:	58021400 	.word	0x58021400
 80054bc:	58021800 	.word	0x58021800
 80054c0:	58021c00 	.word	0x58021c00
 80054c4:	58022000 	.word	0x58022000
 80054c8:	58022400 	.word	0x58022400
 80054cc:	2300      	movs	r3, #0
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	f002 0203 	and.w	r2, r2, #3
 80054d4:	0092      	lsls	r2, r2, #2
 80054d6:	4093      	lsls	r3, r2
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054de:	4938      	ldr	r1, [pc, #224]	; (80055c0 <HAL_GPIO_Init+0x35c>)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	3302      	adds	r3, #2
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	43db      	mvns	r3, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4013      	ands	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	43db      	mvns	r3, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4013      	ands	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	3301      	adds	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f47f ae63 	bne.w	8005278 <HAL_GPIO_Init+0x14>
  }
}
 80055b2:	bf00      	nop
 80055b4:	bf00      	nop
 80055b6:	3724      	adds	r7, #36	; 0x24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	58000400 	.word	0x58000400

080055c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
 80055d0:	4613      	mov	r3, r2
 80055d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055d4:	787b      	ldrb	r3, [r7, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80055e0:	e003      	b.n	80055ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055e2:	887b      	ldrh	r3, [r7, #2]
 80055e4:	041a      	lsls	r2, r3, #16
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	619a      	str	r2, [r3, #24]
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e07f      	b.n	800570a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb fe54 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d107      	bne.n	8005672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800566e:	609a      	str	r2, [r3, #8]
 8005670:	e006      	b.n	8005680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800567e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d104      	bne.n	8005692 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <HAL_I2C_Init+0x11c>)
 800569e:	430b      	orrs	r3, r1
 80056a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	02008000 	.word	0x02008000

08005718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b20      	cmp	r3, #32
 800572c:	d138      	bne.n	80057a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005738:	2302      	movs	r3, #2
 800573a:	e032      	b.n	80057a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2224      	movs	r2, #36	; 0x24
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800576a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d139      	bne.n	8005838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e033      	b.n	800583a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2224      	movs	r2, #36	; 0x24
 80057de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e000      	b.n	800583a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005848:	b08f      	sub	sp, #60	; 0x3c
 800584a:	af0a      	add	r7, sp, #40	; 0x28
 800584c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e116      	b.n	8005a86 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f009 fa4c 	bl	800ed10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f005 fd95 	bl	800b3c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	687e      	ldr	r6, [r7, #4]
 80058a4:	466d      	mov	r5, sp
 80058a6:	f106 0410 	add.w	r4, r6, #16
 80058aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80058ba:	1d33      	adds	r3, r6, #4
 80058bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058be:	6838      	ldr	r0, [r7, #0]
 80058c0:	f005 fc60 	bl	800b184 <USB_CoreInit>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0d7      	b.n	8005a86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f005 fd83 	bl	800b3e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e04a      	b.n	800597e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	333d      	adds	r3, #61	; 0x3d
 80058f8:	2201      	movs	r2, #1
 80058fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	333c      	adds	r3, #60	; 0x3c
 800590c:	7bfa      	ldrb	r2, [r7, #15]
 800590e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005910:	7bfa      	ldrb	r2, [r7, #15]
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	b298      	uxth	r0, r3
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	3344      	adds	r3, #68	; 0x44
 8005924:	4602      	mov	r2, r0
 8005926:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005928:	7bfa      	ldrb	r2, [r7, #15]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	3340      	adds	r3, #64	; 0x40
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800593c:	7bfa      	ldrb	r2, [r7, #15]
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	4613      	mov	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	3348      	adds	r3, #72	; 0x48
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005950:	7bfa      	ldrb	r2, [r7, #15]
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	334c      	adds	r3, #76	; 0x4c
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005964:	7bfa      	ldrb	r2, [r7, #15]
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	3354      	adds	r3, #84	; 0x54
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	3301      	adds	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d3af      	bcc.n	80058e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	e044      	b.n	8005a18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800598e:	7bfa      	ldrb	r2, [r7, #15]
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059a4:	7bfa      	ldrb	r2, [r7, #15]
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059ba:	7bfa      	ldrb	r2, [r7, #15]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059fc:	7bfa      	ldrb	r2, [r7, #15]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	3301      	adds	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
 8005a18:	7bfa      	ldrb	r2, [r7, #15]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d3b5      	bcc.n	800598e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	687e      	ldr	r6, [r7, #4]
 8005a2a:	466d      	mov	r5, sp
 8005a2c:	f106 0410 	add.w	r4, r6, #16
 8005a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a40:	1d33      	adds	r3, r6, #4
 8005a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a44:	6838      	ldr	r0, [r7, #0]
 8005a46:	f005 fd1b 	bl	800b480 <USB_DevInit>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e014      	b.n	8005a86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d102      	bne.n	8005a7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f98b 	bl	8006d90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f006 fe69 	bl	800c756 <USB_DevDisconnect>

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_PCD_Start+0x1c>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e020      	b.n	8005aec <HAL_PCD_Start+0x5e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d109      	bne.n	8005ace <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d005      	beq.n	8005ace <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f005 fc66 	bl	800b3a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f006 fe19 	bl	800c714 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b08d      	sub	sp, #52	; 0x34
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f006 fed7 	bl	800c8be <USB_GetMode>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 84b7 	bne.w	8006486 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f006 fe3b 	bl	800c798 <USB_ReadInterrupts>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 84ad 	beq.w	8006484 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f006 fe28 	bl	800c798 <USB_ReadInterrupts>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d107      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f002 0202 	and.w	r2, r2, #2
 8005b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f006 fe16 	bl	800c798 <USB_ReadInterrupts>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d161      	bne.n	8005c3a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0210 	bic.w	r2, r2, #16
 8005b84:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f003 020f 	and.w	r2, r3, #15
 8005b92:	4613      	mov	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	0c5b      	lsrs	r3, r3, #17
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d124      	bne.n	8005bfc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d035      	beq.n	8005c2a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6a38      	ldr	r0, [r7, #32]
 8005bd2:	f006 fc4d 	bl	800c470 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005be2:	441a      	add	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6a1a      	ldr	r2, [r3, #32]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bf4:	441a      	add	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	621a      	str	r2, [r3, #32]
 8005bfa:	e016      	b.n	8005c2a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	0c5b      	lsrs	r3, r3, #17
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	2b06      	cmp	r3, #6
 8005c06:	d110      	bne.n	8005c2a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c0e:	2208      	movs	r2, #8
 8005c10:	4619      	mov	r1, r3
 8005c12:	6a38      	ldr	r0, [r7, #32]
 8005c14:	f006 fc2c 	bl	800c470 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	091b      	lsrs	r3, r3, #4
 8005c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c24:	441a      	add	r2, r3
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0210 	orr.w	r2, r2, #16
 8005c38:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f006 fdaa 	bl	800c798 <USB_ReadInterrupts>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c4e:	f040 80a7 	bne.w	8005da0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f006 fdaf 	bl	800c7be <USB_ReadDevAllOutEpInterrupt>
 8005c60:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005c62:	e099      	b.n	8005d98 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 808e 	beq.w	8005d8c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f006 fdd3 	bl	800c826 <USB_ReadDevOutEPInterrupt>
 8005c80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 feef 	bl	8006a84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 ffc5 	bl	8006c54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	2310      	movs	r3, #16
 8005ce4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d030      	beq.n	8005d52 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d109      	bne.n	8005d10 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d0e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	4613      	mov	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4413      	add	r3, r2
 8005d22:	3304      	adds	r3, #4
 8005d24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	78db      	ldrb	r3, [r3, #3]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d108      	bne.n	8005d40 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2200      	movs	r2, #0
 8005d32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f009 f91a 	bl	800ef74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2302      	movs	r3, #2
 8005d50:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f003 0320 	and.w	r3, r3, #32
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2320      	movs	r3, #32
 8005d6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d009      	beq.n	8005d8c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	461a      	mov	r2, r3
 8005d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d8a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	3301      	adds	r3, #1
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f47f af62 	bne.w	8005c64 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f006 fcf7 	bl	800c798 <USB_ReadInterrupts>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005db4:	f040 80db 	bne.w	8005f6e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f006 fd18 	bl	800c7f2 <USB_ReadDevAllInEpInterrupt>
 8005dc2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005dc8:	e0cd      	b.n	8005f66 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80c2 	beq.w	8005f5a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f006 fd3e 	bl	800c862 <USB_ReadDevInEPInterrupt>
 8005de6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d057      	beq.n	8005ea2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	2201      	movs	r2, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69f9      	ldr	r1, [r7, #28]
 8005e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e12:	4013      	ands	r3, r2
 8005e14:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e22:	461a      	mov	r2, r3
 8005e24:	2301      	movs	r3, #1
 8005e26:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d132      	bne.n	8005e96 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e34:	4613      	mov	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	334c      	adds	r3, #76	; 0x4c
 8005e40:	6819      	ldr	r1, [r3, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4403      	add	r3, r0
 8005e50:	3348      	adds	r3, #72	; 0x48
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4419      	add	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4403      	add	r3, r0
 8005e64:	334c      	adds	r3, #76	; 0x4c
 8005e66:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d113      	bne.n	8005e96 <HAL_PCD_IRQHandler+0x3a2>
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	4613      	mov	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	3354      	adds	r3, #84	; 0x54
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d108      	bne.n	8005e96 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e8e:	461a      	mov	r2, r3
 8005e90:	2101      	movs	r1, #1
 8005e92:	f006 fd47 	bl	800c924 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f008 ffe4 	bl	800ee6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2308      	movs	r3, #8
 8005ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2340      	movs	r3, #64	; 0x40
 8005ef4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d023      	beq.n	8005f48 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f02:	6a38      	ldr	r0, [r7, #32]
 8005f04:	f005 fc1a 	bl	800b73c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	3338      	adds	r3, #56	; 0x38
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	3304      	adds	r3, #4
 8005f1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d108      	bne.n	8005f36 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2200      	movs	r2, #0
 8005f28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f009 f831 	bl	800ef98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	461a      	mov	r2, r3
 8005f44:	2302      	movs	r3, #2
 8005f46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fd08 	bl	800696a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f af2e 	bne.w	8005dca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f006 fc10 	bl	800c798 <USB_ReadInterrupts>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f82:	d122      	bne.n	8005fca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d108      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005faa:	2100      	movs	r1, #0
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 ff13 	bl	8006dd8 <HAL_PCDEx_LPM_Callback>
 8005fb2:	e002      	b.n	8005fba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f008 ffcf 	bl	800ef58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f006 fbe2 	bl	800c798 <USB_ReadInterrupts>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fde:	d112      	bne.n	8006006 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d102      	bne.n	8005ff6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f008 ff8b 	bl	800ef0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006004:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f006 fbc4 	bl	800c798 <USB_ReadInterrupts>
 8006010:	4603      	mov	r3, r0
 8006012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800601a:	d121      	bne.n	8006060 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800602a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006032:	2b00      	cmp	r3, #0
 8006034:	d111      	bne.n	800605a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006044:	089b      	lsrs	r3, r3, #2
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006050:	2101      	movs	r1, #1
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fec0 	bl	8006dd8 <HAL_PCDEx_LPM_Callback>
 8006058:	e002      	b.n	8006060 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f008 ff56 	bl	800ef0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f006 fb97 	bl	800c798 <USB_ReadInterrupts>
 800606a:	4603      	mov	r3, r0
 800606c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006074:	f040 80b7 	bne.w	80061e6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2110      	movs	r1, #16
 8006092:	4618      	mov	r0, r3
 8006094:	f005 fb52 	bl	800b73c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006098:	2300      	movs	r3, #0
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609c:	e046      	b.n	800612c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	461a      	mov	r2, r3
 80060ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	461a      	mov	r2, r3
 80060e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006100:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006104:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006120:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006124:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	3301      	adds	r3, #1
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006132:	429a      	cmp	r2, r3
 8006134:	d3b3      	bcc.n	800609e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006144:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006148:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d016      	beq.n	8006180 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006162:	f043 030b 	orr.w	r3, r3, #11
 8006166:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006178:	f043 030b 	orr.w	r3, r3, #11
 800617c:	6453      	str	r3, [r2, #68]	; 0x44
 800617e:	e015      	b.n	80061ac <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	4619      	mov	r1, r3
 8006190:	f242 032b 	movw	r3, #8235	; 0x202b
 8006194:	4313      	orrs	r3, r2
 8006196:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a6:	f043 030b 	orr.w	r3, r3, #11
 80061aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061d0:	461a      	mov	r2, r3
 80061d2:	f006 fba7 	bl	800c924 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80061e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f006 fad4 	bl	800c798 <USB_ReadInterrupts>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061fa:	d124      	bne.n	8006246 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	f006 fb6b 	bl	800c8dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f005 fb13 	bl	800b836 <USB_GetDevSpeed>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681c      	ldr	r4, [r3, #0]
 800621c:	f001 fd90 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 8006220:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006226:	b2db      	uxtb	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	4620      	mov	r0, r4
 800622c:	f005 f818 	bl	800b260 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f008 fe42 	bl	800eeba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695a      	ldr	r2, [r3, #20]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006244:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f006 faa4 	bl	800c798 <USB_ReadInterrupts>
 8006250:	4603      	mov	r3, r0
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b08      	cmp	r3, #8
 8006258:	d10a      	bne.n	8006270 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f008 fe1f 	bl	800ee9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f002 0208 	and.w	r2, r2, #8
 800626e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f006 fa8f 	bl	800c798 <USB_ReadInterrupts>
 800627a:	4603      	mov	r3, r0
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	d122      	bne.n	80062ca <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006290:	2301      	movs	r3, #1
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	e014      	b.n	80062c0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	4613      	mov	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d105      	bne.n	80062ba <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb27 	bl	8006908 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	3301      	adds	r3, #1
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d3e5      	bcc.n	8006296 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f006 fa62 	bl	800c798 <USB_ReadInterrupts>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062de:	d13b      	bne.n	8006358 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062e0:	2301      	movs	r3, #1
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	e02b      	b.n	800633e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	3340      	adds	r3, #64	; 0x40
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d115      	bne.n	8006338 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800630c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800630e:	2b00      	cmp	r3, #0
 8006310:	da12      	bge.n	8006338 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	333f      	adds	r3, #63	; 0x3f
 8006322:	2201      	movs	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800632e:	b2db      	uxtb	r3, r3
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fae8 	bl	8006908 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	3301      	adds	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	429a      	cmp	r2, r3
 8006346:	d3ce      	bcc.n	80062e6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695a      	ldr	r2, [r3, #20]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f006 fa1b 	bl	800c798 <USB_ReadInterrupts>
 8006362:	4603      	mov	r3, r0
 8006364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800636c:	d155      	bne.n	800641a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800636e:	2301      	movs	r3, #1
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
 8006372:	e045      	b.n	8006400 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d12e      	bne.n	80063fa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800639c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da2b      	bge.n	80063fa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80063ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d121      	bne.n	80063fa <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	4613      	mov	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063f6:	6053      	str	r3, [r2, #4]
            break;
 80063f8:	e007      	b.n	800640a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	3301      	adds	r3, #1
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	429a      	cmp	r2, r3
 8006408:	d3b4      	bcc.n	8006374 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f006 f9ba 	bl	800c798 <USB_ReadInterrupts>
 8006424:	4603      	mov	r3, r0
 8006426:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d10a      	bne.n	8006446 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f008 fdc3 	bl	800efbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f006 f9a4 	bl	800c798 <USB_ReadInterrupts>
 8006450:	4603      	mov	r3, r0
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b04      	cmp	r3, #4
 8006458:	d115      	bne.n	8006486 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f008 fdb3 	bl	800efd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6859      	ldr	r1, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	e000      	b.n	8006486 <HAL_PCD_IRQHandler+0x992>
      return;
 8006484:	bf00      	nop
    }
  }
}
 8006486:	3734      	adds	r7, #52	; 0x34
 8006488:	46bd      	mov	sp, r7
 800648a:	bd90      	pop	{r4, r7, pc}

0800648c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_PCD_SetAddress+0x1a>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e013      	b.n	80064ce <HAL_PCD_SetAddress+0x42>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	78fa      	ldrb	r2, [r7, #3]
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f006 f902 	bl	800c6c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	4608      	mov	r0, r1
 80064e0:	4611      	mov	r1, r2
 80064e2:	461a      	mov	r2, r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	70fb      	strb	r3, [r7, #3]
 80064e8:	460b      	mov	r3, r1
 80064ea:	803b      	strh	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da0f      	bge.n	800651c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	3338      	adds	r3, #56	; 0x38
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	3304      	adds	r3, #4
 8006512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	705a      	strb	r2, [r3, #1]
 800651a:	e00f      	b.n	800653c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 020f 	and.w	r2, r3, #15
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	3304      	adds	r3, #4
 8006534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	b2da      	uxtb	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006548:	883a      	ldrh	r2, [r7, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	78ba      	ldrb	r2, [r7, #2]
 8006552:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006566:	78bb      	ldrb	r3, [r7, #2]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d102      	bne.n	8006572 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_PCD_EP_Open+0xaa>
 800657c:	2302      	movs	r3, #2
 800657e:	e00e      	b.n	800659e <HAL_PCD_EP_Open+0xc8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68f9      	ldr	r1, [r7, #12]
 800658e:	4618      	mov	r0, r3
 8006590:	f005 f976 	bl	800b880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800659c:	7afb      	ldrb	r3, [r7, #11]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da0f      	bge.n	80065da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	4613      	mov	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	3338      	adds	r3, #56	; 0x38
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	3304      	adds	r3, #4
 80065d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	705a      	strb	r2, [r3, #1]
 80065d8:	e00f      	b.n	80065fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	3304      	adds	r3, #4
 80065f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_PCD_EP_Close+0x6e>
 8006610:	2302      	movs	r3, #2
 8006612:	e00e      	b.n	8006632 <HAL_PCD_EP_Close+0x8c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	4618      	mov	r0, r3
 8006624:	f005 f9b4 	bl	800b990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	460b      	mov	r3, r1
 8006648:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	3304      	adds	r3, #4
 8006662:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	b2da      	uxtb	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d102      	bne.n	8006696 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006696:	7afb      	ldrb	r3, [r7, #11]
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	f005 fc9b 	bl	800bfe8 <USB_EP0StartXfer>
 80066b2:	e008      	b.n	80066c6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	6979      	ldr	r1, [r7, #20]
 80066c2:	f005 fa41 	bl	800bb48 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	460b      	mov	r3, r1
 800670e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	f003 020f 	and.w	r2, r3, #15
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	3338      	adds	r3, #56	; 0x38
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	3304      	adds	r3, #4
 8006726:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2200      	movs	r2, #0
 8006738:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2201      	movs	r2, #1
 800673e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	b2da      	uxtb	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d102      	bne.n	800675a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	2b00      	cmp	r3, #0
 8006762:	d109      	bne.n	8006778 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	461a      	mov	r2, r3
 8006770:	6979      	ldr	r1, [r7, #20]
 8006772:	f005 fc39 	bl	800bfe8 <USB_EP0StartXfer>
 8006776:	e008      	b.n	800678a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	6979      	ldr	r1, [r7, #20]
 8006786:	f005 f9df 	bl	800bb48 <USB_EPStartXfer>
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	f003 020f 	and.w	r2, r3, #15
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d901      	bls.n	80067b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e050      	b.n	8006854 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da0f      	bge.n	80067da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	f003 020f 	and.w	r2, r3, #15
 80067c0:	4613      	mov	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	3338      	adds	r3, #56	; 0x38
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4413      	add	r3, r2
 80067ce:	3304      	adds	r3, #4
 80067d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	705a      	strb	r2, [r3, #1]
 80067d8:	e00d      	b.n	80067f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	4613      	mov	r3, r2
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	3304      	adds	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_PCD_EP_SetStall+0x82>
 8006812:	2302      	movs	r3, #2
 8006814:	e01e      	b.n	8006854 <HAL_PCD_EP_SetStall+0xc0>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68f9      	ldr	r1, [r7, #12]
 8006824:	4618      	mov	r0, r3
 8006826:	f005 fe7b 	bl	800c520 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	b2d9      	uxtb	r1, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006844:	461a      	mov	r2, r3
 8006846:	f006 f86d 	bl	800c924 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	f003 020f 	and.w	r2, r3, #15
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	429a      	cmp	r2, r3
 8006874:	d901      	bls.n	800687a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e042      	b.n	8006900 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800687a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800687e:	2b00      	cmp	r3, #0
 8006880:	da0f      	bge.n	80068a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	f003 020f 	and.w	r2, r3, #15
 8006888:	4613      	mov	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	3338      	adds	r3, #56	; 0x38
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	3304      	adds	r3, #4
 8006898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	705a      	strb	r2, [r3, #1]
 80068a0:	e00f      	b.n	80068c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	4613      	mov	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	4413      	add	r3, r2
 80068b8:	3304      	adds	r3, #4
 80068ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_PCD_EP_ClrStall+0x86>
 80068de:	2302      	movs	r3, #2
 80068e0:	e00e      	b.n	8006900 <HAL_PCD_EP_ClrStall+0xa4>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f005 fe83 	bl	800c5fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006918:	2b00      	cmp	r3, #0
 800691a:	da0c      	bge.n	8006936 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	f003 020f 	and.w	r2, r3, #15
 8006922:	4613      	mov	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	3338      	adds	r3, #56	; 0x38
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e00c      	b.n	8006950 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	f003 020f 	and.w	r2, r3, #15
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	3304      	adds	r3, #4
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68f9      	ldr	r1, [r7, #12]
 8006956:	4618      	mov	r0, r3
 8006958:	f005 fca2 	bl	800c2a0 <USB_EPStopXfer>
 800695c:	4603      	mov	r3, r0
 800695e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006960:	7afb      	ldrb	r3, [r7, #11]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b08a      	sub	sp, #40	; 0x28
 800696e:	af02      	add	r7, sp, #8
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	3338      	adds	r3, #56	; 0x38
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	3304      	adds	r3, #4
 8006990:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a1a      	ldr	r2, [r3, #32]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	429a      	cmp	r2, r3
 800699c:	d901      	bls.n	80069a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e06c      	b.n	8006a7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d902      	bls.n	80069be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3303      	adds	r3, #3
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069c6:	e02b      	b.n	8006a20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d902      	bls.n	80069e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3303      	adds	r3, #3
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6919      	ldr	r1, [r3, #16]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	4603      	mov	r3, r0
 8006a02:	6978      	ldr	r0, [r7, #20]
 8006a04:	f005 fcf6 	bl	800c3f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	441a      	add	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1a      	ldr	r2, [r3, #32]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	441a      	add	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d809      	bhi.n	8006a4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1a      	ldr	r2, [r3, #32]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d203      	bcs.n	8006a4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1be      	bne.n	80069c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d811      	bhi.n	8006a7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	6939      	ldr	r1, [r7, #16]
 8006a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a76:	4013      	ands	r3, r2
 8006a78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	333c      	adds	r3, #60	; 0x3c
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d17b      	bne.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d015      	beq.n	8006af0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	4a61      	ldr	r2, [pc, #388]	; (8006c4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f240 80b9 	bls.w	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80b3 	beq.w	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aec:	6093      	str	r3, [r2, #8]
 8006aee:	e0a7      	b.n	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b06:	461a      	mov	r2, r3
 8006b08:	2320      	movs	r3, #32
 8006b0a:	6093      	str	r3, [r2, #8]
 8006b0c:	e098      	b.n	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f040 8093 	bne.w	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4a4b      	ldr	r2, [pc, #300]	; (8006c4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d90f      	bls.n	8006b42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3e:	6093      	str	r3, [r2, #8]
 8006b40:	e07e      	b.n	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	0159      	lsls	r1, r3, #5
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	440b      	add	r3, r1
 8006b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d114      	bne.n	8006ba4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2101      	movs	r1, #1
 8006b90:	f005 fec8 	bl	800c924 <USB_EP0_OutStart>
 8006b94:	e006      	b.n	8006ba4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	441a      	add	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f008 f942 	bl	800ee34 <HAL_PCD_DataOutStageCallback>
 8006bb0:	e046      	b.n	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d124      	bne.n	8006c04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd6:	6093      	str	r3, [r2, #8]
 8006bd8:	e032      	b.n	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f008 f919 	bl	800ee34 <HAL_PCD_DataOutStageCallback>
 8006c02:	e01d      	b.n	8006c40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d114      	bne.n	8006c34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2100      	movs	r1, #0
 8006c30:	f005 fe78 	bl	800c924 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f008 f8fa 	bl	800ee34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	4f54300a 	.word	0x4f54300a
 8006c50:	4f54310a 	.word	0x4f54310a

08006c54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	333c      	adds	r3, #60	; 0x3c
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <PCD_EP_OutSetupPacket_int+0x88>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d90e      	bls.n	8006ca8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d009      	beq.n	8006ca8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ca6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f008 f8b1 	bl	800ee10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <PCD_EP_OutSetupPacket_int+0x88>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d90c      	bls.n	8006cd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d108      	bne.n	8006cd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2101      	movs	r1, #1
 8006ccc:	f005 fe2a 	bl	800c924 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	4f54300a 	.word	0x4f54300a

08006ce0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
 8006cec:	4613      	mov	r3, r2
 8006cee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006cfe:	883b      	ldrh	r3, [r7, #0]
 8006d00:	0419      	lsls	r1, r3, #16
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d0c:	e028      	b.n	8006d60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	0c1b      	lsrs	r3, r3, #16
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	4413      	add	r3, r2
 8006d1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
 8006d20:	e00d      	b.n	8006d3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	3340      	adds	r3, #64	; 0x40
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	0c1b      	lsrs	r3, r3, #16
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	4413      	add	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
 8006d3e:	7bfa      	ldrb	r2, [r7, #15]
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d3ec      	bcc.n	8006d22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d48:	883b      	ldrh	r3, [r7, #0]
 8006d4a:	0418      	lsls	r0, r3, #16
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6819      	ldr	r1, [r3, #0]
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	4302      	orrs	r2, r0
 8006d58:	3340      	adds	r3, #64	; 0x40
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	887a      	ldrh	r2, [r7, #2]
 8006d80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	10000003 	.word	0x10000003

08006dd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006df8:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <HAL_PWREx_ConfigSupply+0x70>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d00a      	beq.n	8006e1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e04:	4b16      	ldr	r3, [pc, #88]	; (8006e60 <HAL_PWREx_ConfigSupply+0x70>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d001      	beq.n	8006e16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e01f      	b.n	8006e56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e01d      	b.n	8006e56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_PWREx_ConfigSupply+0x70>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f023 0207 	bic.w	r2, r3, #7
 8006e22:	490f      	ldr	r1, [pc, #60]	; (8006e60 <HAL_PWREx_ConfigSupply+0x70>)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e2a:	f7fa fd51 	bl	80018d0 <HAL_GetTick>
 8006e2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e30:	e009      	b.n	8006e46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e32:	f7fa fd4d 	bl	80018d0 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e40:	d901      	bls.n	8006e46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e007      	b.n	8006e56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e46:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <HAL_PWREx_ConfigSupply+0x70>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e52:	d1ee      	bne.n	8006e32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	58024800 	.word	0x58024800

08006e64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4a04      	ldr	r2, [pc, #16]	; (8006e80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e72:	60d3      	str	r3, [r2, #12]
}
 8006e74:	bf00      	nop
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	58024800 	.word	0x58024800

08006e84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f000 bc1d 	b.w	80076d2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8087 	beq.w	8006fb4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ea6:	4b99      	ldr	r3, [pc, #612]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eb0:	4b96      	ldr	r3, [pc, #600]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d007      	beq.n	8006ecc <HAL_RCC_OscConfig+0x48>
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	2b18      	cmp	r3, #24
 8006ec0:	d110      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x60>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d10b      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ecc:	4b8f      	ldr	r3, [pc, #572]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d06c      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x12e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d168      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e3f6      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eec:	d106      	bne.n	8006efc <HAL_RCC_OscConfig+0x78>
 8006eee:	4b87      	ldr	r3, [pc, #540]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a86      	ldr	r2, [pc, #536]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e02e      	b.n	8006f5a <HAL_RCC_OscConfig+0xd6>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <HAL_RCC_OscConfig+0x9a>
 8006f04:	4b81      	ldr	r3, [pc, #516]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a80      	ldr	r2, [pc, #512]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	4b7e      	ldr	r3, [pc, #504]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a7d      	ldr	r2, [pc, #500]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	e01d      	b.n	8006f5a <HAL_RCC_OscConfig+0xd6>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f26:	d10c      	bne.n	8006f42 <HAL_RCC_OscConfig+0xbe>
 8006f28:	4b78      	ldr	r3, [pc, #480]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a77      	ldr	r2, [pc, #476]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	4b75      	ldr	r3, [pc, #468]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a74      	ldr	r2, [pc, #464]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e00b      	b.n	8006f5a <HAL_RCC_OscConfig+0xd6>
 8006f42:	4b72      	ldr	r3, [pc, #456]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a71      	ldr	r2, [pc, #452]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	4b6f      	ldr	r3, [pc, #444]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a6e      	ldr	r2, [pc, #440]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f62:	f7fa fcb5 	bl	80018d0 <HAL_GetTick>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f6a:	f7fa fcb1 	bl	80018d0 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b64      	cmp	r3, #100	; 0x64
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e3aa      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f7c:	4b63      	ldr	r3, [pc, #396]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCC_OscConfig+0xe6>
 8006f88:	e014      	b.n	8006fb4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8a:	f7fa fca1 	bl	80018d0 <HAL_GetTick>
 8006f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f92:	f7fa fc9d 	bl	80018d0 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b64      	cmp	r3, #100	; 0x64
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e396      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fa4:	4b59      	ldr	r3, [pc, #356]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f0      	bne.n	8006f92 <HAL_RCC_OscConfig+0x10e>
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80cb 	beq.w	8007158 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc2:	4b52      	ldr	r3, [pc, #328]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fcc:	4b4f      	ldr	r3, [pc, #316]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x164>
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	2b18      	cmp	r3, #24
 8006fdc:	d156      	bne.n	800708c <HAL_RCC_OscConfig+0x208>
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f003 0303 	and.w	r3, r3, #3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d151      	bne.n	800708c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fe8:	4b48      	ldr	r3, [pc, #288]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <HAL_RCC_OscConfig+0x17c>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e368      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007000:	4b42      	ldr	r3, [pc, #264]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f023 0219 	bic.w	r2, r3, #25
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	493f      	ldr	r1, [pc, #252]	; (800710c <HAL_RCC_OscConfig+0x288>)
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007012:	f7fa fc5d 	bl	80018d0 <HAL_GetTick>
 8007016:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800701a:	f7fa fc59 	bl	80018d0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e352      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800702c:	4b37      	ldr	r3, [pc, #220]	; (800710c <HAL_RCC_OscConfig+0x288>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007038:	f7fa fc7a 	bl	8001930 <HAL_GetREVID>
 800703c:	4603      	mov	r3, r0
 800703e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007042:	4293      	cmp	r3, r2
 8007044:	d817      	bhi.n	8007076 <HAL_RCC_OscConfig+0x1f2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d108      	bne.n	8007060 <HAL_RCC_OscConfig+0x1dc>
 800704e:	4b2f      	ldr	r3, [pc, #188]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007056:	4a2d      	ldr	r2, [pc, #180]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800705c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800705e:	e07b      	b.n	8007158 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007060:	4b2a      	ldr	r3, [pc, #168]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	4927      	ldr	r1, [pc, #156]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007074:	e070      	b.n	8007158 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007076:	4b25      	ldr	r3, [pc, #148]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	061b      	lsls	r3, r3, #24
 8007084:	4921      	ldr	r1, [pc, #132]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007086:	4313      	orrs	r3, r2
 8007088:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800708a:	e065      	b.n	8007158 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d048      	beq.n	8007126 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007094:	4b1d      	ldr	r3, [pc, #116]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f023 0219 	bic.w	r2, r3, #25
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	491a      	ldr	r1, [pc, #104]	; (800710c <HAL_RCC_OscConfig+0x288>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a6:	f7fa fc13 	bl	80018d0 <HAL_GetTick>
 80070aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ae:	f7fa fc0f 	bl	80018d0 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e308      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070c0:	4b12      	ldr	r3, [pc, #72]	; (800710c <HAL_RCC_OscConfig+0x288>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070cc:	f7fa fc30 	bl	8001930 <HAL_GetREVID>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d81a      	bhi.n	8007110 <HAL_RCC_OscConfig+0x28c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b40      	cmp	r3, #64	; 0x40
 80070e0:	d108      	bne.n	80070f4 <HAL_RCC_OscConfig+0x270>
 80070e2:	4b0a      	ldr	r3, [pc, #40]	; (800710c <HAL_RCC_OscConfig+0x288>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80070ea:	4a08      	ldr	r2, [pc, #32]	; (800710c <HAL_RCC_OscConfig+0x288>)
 80070ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f0:	6053      	str	r3, [r2, #4]
 80070f2:	e031      	b.n	8007158 <HAL_RCC_OscConfig+0x2d4>
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <HAL_RCC_OscConfig+0x288>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	031b      	lsls	r3, r3, #12
 8007102:	4902      	ldr	r1, [pc, #8]	; (800710c <HAL_RCC_OscConfig+0x288>)
 8007104:	4313      	orrs	r3, r2
 8007106:	604b      	str	r3, [r1, #4]
 8007108:	e026      	b.n	8007158 <HAL_RCC_OscConfig+0x2d4>
 800710a:	bf00      	nop
 800710c:	58024400 	.word	0x58024400
 8007110:	4b9a      	ldr	r3, [pc, #616]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	061b      	lsls	r3, r3, #24
 800711e:	4997      	ldr	r1, [pc, #604]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007120:	4313      	orrs	r3, r2
 8007122:	604b      	str	r3, [r1, #4]
 8007124:	e018      	b.n	8007158 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007126:	4b95      	ldr	r3, [pc, #596]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a94      	ldr	r2, [pc, #592]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007132:	f7fa fbcd 	bl	80018d0 <HAL_GetTick>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800713a:	f7fa fbc9 	bl	80018d0 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e2c2      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800714c:	4b8b      	ldr	r3, [pc, #556]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f0      	bne.n	800713a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80a9 	beq.w	80072b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007166:	4b85      	ldr	r3, [pc, #532]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800716e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007170:	4b82      	ldr	r3, [pc, #520]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b08      	cmp	r3, #8
 800717a:	d007      	beq.n	800718c <HAL_RCC_OscConfig+0x308>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b18      	cmp	r3, #24
 8007180:	d13a      	bne.n	80071f8 <HAL_RCC_OscConfig+0x374>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d135      	bne.n	80071f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800718c:	4b7b      	ldr	r3, [pc, #492]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <HAL_RCC_OscConfig+0x320>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d001      	beq.n	80071a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e296      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071a4:	f7fa fbc4 	bl	8001930 <HAL_GetREVID>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d817      	bhi.n	80071e2 <HAL_RCC_OscConfig+0x35e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d108      	bne.n	80071cc <HAL_RCC_OscConfig+0x348>
 80071ba:	4b70      	ldr	r3, [pc, #448]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071c2:	4a6e      	ldr	r2, [pc, #440]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80071c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ca:	e075      	b.n	80072b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071cc:	4b6b      	ldr	r3, [pc, #428]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	069b      	lsls	r3, r3, #26
 80071da:	4968      	ldr	r1, [pc, #416]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071e0:	e06a      	b.n	80072b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071e2:	4b66      	ldr	r3, [pc, #408]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	061b      	lsls	r3, r3, #24
 80071f0:	4962      	ldr	r1, [pc, #392]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071f6:	e05f      	b.n	80072b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d042      	beq.n	8007286 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007200:	4b5e      	ldr	r3, [pc, #376]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a5d      	ldr	r2, [pc, #372]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720c:	f7fa fb60 	bl	80018d0 <HAL_GetTick>
 8007210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007214:	f7fa fb5c 	bl	80018d0 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e255      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007226:	4b55      	ldr	r3, [pc, #340]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0f0      	beq.n	8007214 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007232:	f7fa fb7d 	bl	8001930 <HAL_GetREVID>
 8007236:	4603      	mov	r3, r0
 8007238:	f241 0203 	movw	r2, #4099	; 0x1003
 800723c:	4293      	cmp	r3, r2
 800723e:	d817      	bhi.n	8007270 <HAL_RCC_OscConfig+0x3ec>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	2b20      	cmp	r3, #32
 8007246:	d108      	bne.n	800725a <HAL_RCC_OscConfig+0x3d6>
 8007248:	4b4c      	ldr	r3, [pc, #304]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007250:	4a4a      	ldr	r2, [pc, #296]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007256:	6053      	str	r3, [r2, #4]
 8007258:	e02e      	b.n	80072b8 <HAL_RCC_OscConfig+0x434>
 800725a:	4b48      	ldr	r3, [pc, #288]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	069b      	lsls	r3, r3, #26
 8007268:	4944      	ldr	r1, [pc, #272]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800726a:	4313      	orrs	r3, r2
 800726c:	604b      	str	r3, [r1, #4]
 800726e:	e023      	b.n	80072b8 <HAL_RCC_OscConfig+0x434>
 8007270:	4b42      	ldr	r3, [pc, #264]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	061b      	lsls	r3, r3, #24
 800727e:	493f      	ldr	r1, [pc, #252]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007280:	4313      	orrs	r3, r2
 8007282:	60cb      	str	r3, [r1, #12]
 8007284:	e018      	b.n	80072b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007286:	4b3d      	ldr	r3, [pc, #244]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3c      	ldr	r2, [pc, #240]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800728c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007292:	f7fa fb1d 	bl	80018d0 <HAL_GetTick>
 8007296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007298:	e008      	b.n	80072ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800729a:	f7fa fb19 	bl	80018d0 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e212      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072ac:	4b33      	ldr	r3, [pc, #204]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f0      	bne.n	800729a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d036      	beq.n	8007332 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d019      	beq.n	8007300 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072cc:	4b2b      	ldr	r3, [pc, #172]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80072ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d0:	4a2a      	ldr	r2, [pc, #168]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d8:	f7fa fafa 	bl	80018d0 <HAL_GetTick>
 80072dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072e0:	f7fa faf6 	bl	80018d0 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e1ef      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072f2:	4b22      	ldr	r3, [pc, #136]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 80072f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0f0      	beq.n	80072e0 <HAL_RCC_OscConfig+0x45c>
 80072fe:	e018      	b.n	8007332 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007300:	4b1e      	ldr	r3, [pc, #120]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007304:	4a1d      	ldr	r2, [pc, #116]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730c:	f7fa fae0 	bl	80018d0 <HAL_GetTick>
 8007310:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007314:	f7fa fadc 	bl	80018d0 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e1d5      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b00      	cmp	r3, #0
 800733c:	d039      	beq.n	80073b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01c      	beq.n	8007380 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a0c      	ldr	r2, [pc, #48]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800734c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007350:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007352:	f7fa fabd 	bl	80018d0 <HAL_GetTick>
 8007356:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800735a:	f7fa fab9 	bl	80018d0 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e1b2      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800736c:	4b03      	ldr	r3, [pc, #12]	; (800737c <HAL_RCC_OscConfig+0x4f8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f0      	beq.n	800735a <HAL_RCC_OscConfig+0x4d6>
 8007378:	e01b      	b.n	80073b2 <HAL_RCC_OscConfig+0x52e>
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007380:	4b9b      	ldr	r3, [pc, #620]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a9a      	ldr	r2, [pc, #616]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800738c:	f7fa faa0 	bl	80018d0 <HAL_GetTick>
 8007390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007394:	f7fa fa9c 	bl	80018d0 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e195      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073a6:	4b92      	ldr	r3, [pc, #584]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8081 	beq.w	80074c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073c0:	4b8c      	ldr	r3, [pc, #560]	; (80075f4 <HAL_RCC_OscConfig+0x770>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a8b      	ldr	r2, [pc, #556]	; (80075f4 <HAL_RCC_OscConfig+0x770>)
 80073c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073cc:	f7fa fa80 	bl	80018d0 <HAL_GetTick>
 80073d0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073d4:	f7fa fa7c 	bl	80018d0 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b64      	cmp	r3, #100	; 0x64
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e175      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073e6:	4b83      	ldr	r3, [pc, #524]	; (80075f4 <HAL_RCC_OscConfig+0x770>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0f0      	beq.n	80073d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d106      	bne.n	8007408 <HAL_RCC_OscConfig+0x584>
 80073fa:	4b7d      	ldr	r3, [pc, #500]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fe:	4a7c      	ldr	r2, [pc, #496]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	6713      	str	r3, [r2, #112]	; 0x70
 8007406:	e02d      	b.n	8007464 <HAL_RCC_OscConfig+0x5e0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10c      	bne.n	800742a <HAL_RCC_OscConfig+0x5a6>
 8007410:	4b77      	ldr	r3, [pc, #476]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007414:	4a76      	ldr	r2, [pc, #472]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	6713      	str	r3, [r2, #112]	; 0x70
 800741c:	4b74      	ldr	r3, [pc, #464]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	4a73      	ldr	r2, [pc, #460]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007422:	f023 0304 	bic.w	r3, r3, #4
 8007426:	6713      	str	r3, [r2, #112]	; 0x70
 8007428:	e01c      	b.n	8007464 <HAL_RCC_OscConfig+0x5e0>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b05      	cmp	r3, #5
 8007430:	d10c      	bne.n	800744c <HAL_RCC_OscConfig+0x5c8>
 8007432:	4b6f      	ldr	r3, [pc, #444]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	4a6e      	ldr	r2, [pc, #440]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007438:	f043 0304 	orr.w	r3, r3, #4
 800743c:	6713      	str	r3, [r2, #112]	; 0x70
 800743e:	4b6c      	ldr	r3, [pc, #432]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a6b      	ldr	r2, [pc, #428]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
 800744a:	e00b      	b.n	8007464 <HAL_RCC_OscConfig+0x5e0>
 800744c:	4b68      	ldr	r3, [pc, #416]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800744e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007450:	4a67      	ldr	r2, [pc, #412]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007452:	f023 0301 	bic.w	r3, r3, #1
 8007456:	6713      	str	r3, [r2, #112]	; 0x70
 8007458:	4b65      	ldr	r3, [pc, #404]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800745a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745c:	4a64      	ldr	r2, [pc, #400]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800745e:	f023 0304 	bic.w	r3, r3, #4
 8007462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d015      	beq.n	8007498 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746c:	f7fa fa30 	bl	80018d0 <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007472:	e00a      	b.n	800748a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007474:	f7fa fa2c 	bl	80018d0 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007482:	4293      	cmp	r3, r2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e123      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800748a:	4b59      	ldr	r3, [pc, #356]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0ee      	beq.n	8007474 <HAL_RCC_OscConfig+0x5f0>
 8007496:	e014      	b.n	80074c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007498:	f7fa fa1a 	bl	80018d0 <HAL_GetTick>
 800749c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800749e:	e00a      	b.n	80074b6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074a0:	f7fa fa16 	bl	80018d0 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e10d      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074b6:	4b4e      	ldr	r3, [pc, #312]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1ee      	bne.n	80074a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8102 	beq.w	80076d0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074cc:	4b48      	ldr	r3, [pc, #288]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074d4:	2b18      	cmp	r3, #24
 80074d6:	f000 80bd 	beq.w	8007654 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b02      	cmp	r3, #2
 80074e0:	f040 809e 	bne.w	8007620 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e4:	4b42      	ldr	r3, [pc, #264]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a41      	ldr	r2, [pc, #260]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80074ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fa f9ee 	bl	80018d0 <HAL_GetTick>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074f8:	f7fa f9ea 	bl	80018d0 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e0e3      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800750a:	4b39      	ldr	r3, [pc, #228]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f0      	bne.n	80074f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007516:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800751a:	4b37      	ldr	r3, [pc, #220]	; (80075f8 <HAL_RCC_OscConfig+0x774>)
 800751c:	4013      	ands	r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007526:	0112      	lsls	r2, r2, #4
 8007528:	430a      	orrs	r2, r1
 800752a:	4931      	ldr	r1, [pc, #196]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	628b      	str	r3, [r1, #40]	; 0x28
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	3b01      	subs	r3, #1
 8007536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	3b01      	subs	r3, #1
 8007540:	025b      	lsls	r3, r3, #9
 8007542:	b29b      	uxth	r3, r3
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	3b01      	subs	r3, #1
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	3b01      	subs	r3, #1
 800755a:	061b      	lsls	r3, r3, #24
 800755c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007560:	4923      	ldr	r1, [pc, #140]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007566:	4b22      	ldr	r3, [pc, #136]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4a21      	ldr	r2, [pc, #132]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007572:	4b1f      	ldr	r3, [pc, #124]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007576:	4b21      	ldr	r3, [pc, #132]	; (80075fc <HAL_RCC_OscConfig+0x778>)
 8007578:	4013      	ands	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800757e:	00d2      	lsls	r2, r2, #3
 8007580:	491b      	ldr	r1, [pc, #108]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007582:	4313      	orrs	r3, r2
 8007584:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007586:	4b1a      	ldr	r3, [pc, #104]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	f023 020c 	bic.w	r2, r3, #12
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	4917      	ldr	r1, [pc, #92]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 8007594:	4313      	orrs	r3, r2
 8007596:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007598:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	f023 0202 	bic.w	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	4912      	ldr	r1, [pc, #72]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075aa:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	4a0d      	ldr	r2, [pc, #52]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075c2:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	4a0a      	ldr	r2, [pc, #40]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80075ce:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	4a07      	ldr	r2, [pc, #28]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <HAL_RCC_OscConfig+0x76c>)
 80075e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e6:	f7fa f973 	bl	80018d0 <HAL_GetTick>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075ec:	e011      	b.n	8007612 <HAL_RCC_OscConfig+0x78e>
 80075ee:	bf00      	nop
 80075f0:	58024400 	.word	0x58024400
 80075f4:	58024800 	.word	0x58024800
 80075f8:	fffffc0c 	.word	0xfffffc0c
 80075fc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007600:	f7fa f966 	bl	80018d0 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e05f      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007612:	4b32      	ldr	r3, [pc, #200]	; (80076dc <HAL_RCC_OscConfig+0x858>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0x77c>
 800761e:	e057      	b.n	80076d0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007620:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <HAL_RCC_OscConfig+0x858>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2d      	ldr	r2, [pc, #180]	; (80076dc <HAL_RCC_OscConfig+0x858>)
 8007626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800762a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762c:	f7fa f950 	bl	80018d0 <HAL_GetTick>
 8007630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007634:	f7fa f94c 	bl	80018d0 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e045      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007646:	4b25      	ldr	r3, [pc, #148]	; (80076dc <HAL_RCC_OscConfig+0x858>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f0      	bne.n	8007634 <HAL_RCC_OscConfig+0x7b0>
 8007652:	e03d      	b.n	80076d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007654:	4b21      	ldr	r3, [pc, #132]	; (80076dc <HAL_RCC_OscConfig+0x858>)
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800765a:	4b20      	ldr	r3, [pc, #128]	; (80076dc <HAL_RCC_OscConfig+0x858>)
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b01      	cmp	r3, #1
 8007666:	d031      	beq.n	80076cc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f003 0203 	and.w	r2, r3, #3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007672:	429a      	cmp	r2, r3
 8007674:	d12a      	bne.n	80076cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	091b      	lsrs	r3, r3, #4
 800767a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007682:	429a      	cmp	r2, r3
 8007684:	d122      	bne.n	80076cc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007692:	429a      	cmp	r2, r3
 8007694:	d11a      	bne.n	80076cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	0a5b      	lsrs	r3, r3, #9
 800769a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d111      	bne.n	80076cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	0c1b      	lsrs	r3, r3, #16
 80076ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d108      	bne.n	80076cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	0e1b      	lsrs	r3, r3, #24
 80076be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3730      	adds	r7, #48	; 0x30
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	58024400 	.word	0x58024400

080076e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e19c      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076f4:	4b8a      	ldr	r3, [pc, #552]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d910      	bls.n	8007724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007702:	4b87      	ldr	r3, [pc, #540]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f023 020f 	bic.w	r2, r3, #15
 800770a:	4985      	ldr	r1, [pc, #532]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	4313      	orrs	r3, r2
 8007710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007712:	4b83      	ldr	r3, [pc, #524]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d001      	beq.n	8007724 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e184      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d010      	beq.n	8007752 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	4b7b      	ldr	r3, [pc, #492]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800773c:	429a      	cmp	r2, r3
 800773e:	d908      	bls.n	8007752 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007740:	4b78      	ldr	r3, [pc, #480]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	4975      	ldr	r1, [pc, #468]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 800774e:	4313      	orrs	r3, r2
 8007750:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d010      	beq.n	8007780 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695a      	ldr	r2, [r3, #20]
 8007762:	4b70      	ldr	r3, [pc, #448]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800776a:	429a      	cmp	r2, r3
 800776c:	d908      	bls.n	8007780 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800776e:	4b6d      	ldr	r3, [pc, #436]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	496a      	ldr	r1, [pc, #424]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 800777c:	4313      	orrs	r3, r2
 800777e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b00      	cmp	r3, #0
 800778a:	d010      	beq.n	80077ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699a      	ldr	r2, [r3, #24]
 8007790:	4b64      	ldr	r3, [pc, #400]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007798:	429a      	cmp	r2, r3
 800779a:	d908      	bls.n	80077ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800779c:	4b61      	ldr	r3, [pc, #388]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	495e      	ldr	r1, [pc, #376]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69da      	ldr	r2, [r3, #28]
 80077be:	4b59      	ldr	r3, [pc, #356]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d908      	bls.n	80077dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077ca:	4b56      	ldr	r3, [pc, #344]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	4953      	ldr	r1, [pc, #332]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d010      	beq.n	800780a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	4b4d      	ldr	r3, [pc, #308]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d908      	bls.n	800780a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f8:	4b4a      	ldr	r3, [pc, #296]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f023 020f 	bic.w	r2, r3, #15
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4947      	ldr	r1, [pc, #284]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007806:	4313      	orrs	r3, r2
 8007808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d055      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007816:	4b43      	ldr	r3, [pc, #268]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	4940      	ldr	r1, [pc, #256]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007824:	4313      	orrs	r3, r2
 8007826:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d107      	bne.n	8007840 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007830:	4b3c      	ldr	r3, [pc, #240]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d121      	bne.n	8007880 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e0f6      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d107      	bne.n	8007858 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007848:	4b36      	ldr	r3, [pc, #216]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d115      	bne.n	8007880 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0ea      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d107      	bne.n	8007870 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007860:	4b30      	ldr	r3, [pc, #192]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0de      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007870:	4b2c      	ldr	r3, [pc, #176]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e0d6      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007880:	4b28      	ldr	r3, [pc, #160]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f023 0207 	bic.w	r2, r3, #7
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	4925      	ldr	r1, [pc, #148]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 800788e:	4313      	orrs	r3, r2
 8007890:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007892:	f7fa f81d 	bl	80018d0 <HAL_GetTick>
 8007896:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007898:	e00a      	b.n	80078b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800789a:	f7fa f819 	bl	80018d0 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e0be      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b0:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	429a      	cmp	r2, r3
 80078c0:	d1eb      	bne.n	800789a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d010      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	4b14      	ldr	r3, [pc, #80]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	429a      	cmp	r2, r3
 80078dc:	d208      	bcs.n	80078f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f023 020f 	bic.w	r2, r3, #15
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	490e      	ldr	r1, [pc, #56]	; (8007924 <HAL_RCC_ClockConfig+0x244>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d214      	bcs.n	8007928 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fe:	4b08      	ldr	r3, [pc, #32]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f023 020f 	bic.w	r2, r3, #15
 8007906:	4906      	ldr	r1, [pc, #24]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	4313      	orrs	r3, r2
 800790c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800790e:	4b04      	ldr	r3, [pc, #16]	; (8007920 <HAL_RCC_ClockConfig+0x240>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d005      	beq.n	8007928 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e086      	b.n	8007a2e <HAL_RCC_ClockConfig+0x34e>
 8007920:	52002000 	.word	0x52002000
 8007924:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d010      	beq.n	8007956 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	4b3f      	ldr	r3, [pc, #252]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007940:	429a      	cmp	r2, r3
 8007942:	d208      	bcs.n	8007956 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007944:	4b3c      	ldr	r3, [pc, #240]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	4939      	ldr	r1, [pc, #228]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 8007952:	4313      	orrs	r3, r2
 8007954:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0308 	and.w	r3, r3, #8
 800795e:	2b00      	cmp	r3, #0
 8007960:	d010      	beq.n	8007984 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695a      	ldr	r2, [r3, #20]
 8007966:	4b34      	ldr	r3, [pc, #208]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800796e:	429a      	cmp	r2, r3
 8007970:	d208      	bcs.n	8007984 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007972:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	492e      	ldr	r1, [pc, #184]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 8007980:	4313      	orrs	r3, r2
 8007982:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d010      	beq.n	80079b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	4b28      	ldr	r3, [pc, #160]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800799c:	429a      	cmp	r2, r3
 800799e:	d208      	bcs.n	80079b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079a0:	4b25      	ldr	r3, [pc, #148]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	4922      	ldr	r1, [pc, #136]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d010      	beq.n	80079e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69da      	ldr	r2, [r3, #28]
 80079c2:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d208      	bcs.n	80079e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079ce:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	4917      	ldr	r1, [pc, #92]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80079e0:	f000 f834 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 80079e4:	4602      	mov	r2, r0
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	4912      	ldr	r1, [pc, #72]	; (8007a3c <HAL_RCC_ClockConfig+0x35c>)
 80079f2:	5ccb      	ldrb	r3, [r1, r3]
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079fe:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <HAL_RCC_ClockConfig+0x358>)
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	4a0d      	ldr	r2, [pc, #52]	; (8007a3c <HAL_RCC_ClockConfig+0x35c>)
 8007a08:	5cd3      	ldrb	r3, [r2, r3]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
 8007a14:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <HAL_RCC_ClockConfig+0x360>)
 8007a16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a18:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <HAL_RCC_ClockConfig+0x364>)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <HAL_RCC_ClockConfig+0x368>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7f9 ff0a 	bl	800183c <HAL_InitTick>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	0800f4b8 	.word	0x0800f4b8
 8007a40:	24000004 	.word	0x24000004
 8007a44:	24000000 	.word	0x24000000
 8007a48:	24000008 	.word	0x24000008

08007a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	; 0x24
 8007a50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a52:	4bb3      	ldr	r3, [pc, #716]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a5a:	2b18      	cmp	r3, #24
 8007a5c:	f200 8155 	bhi.w	8007d0a <HAL_RCC_GetSysClockFreq+0x2be>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007acd 	.word	0x08007acd
 8007a6c:	08007d0b 	.word	0x08007d0b
 8007a70:	08007d0b 	.word	0x08007d0b
 8007a74:	08007d0b 	.word	0x08007d0b
 8007a78:	08007d0b 	.word	0x08007d0b
 8007a7c:	08007d0b 	.word	0x08007d0b
 8007a80:	08007d0b 	.word	0x08007d0b
 8007a84:	08007d0b 	.word	0x08007d0b
 8007a88:	08007af3 	.word	0x08007af3
 8007a8c:	08007d0b 	.word	0x08007d0b
 8007a90:	08007d0b 	.word	0x08007d0b
 8007a94:	08007d0b 	.word	0x08007d0b
 8007a98:	08007d0b 	.word	0x08007d0b
 8007a9c:	08007d0b 	.word	0x08007d0b
 8007aa0:	08007d0b 	.word	0x08007d0b
 8007aa4:	08007d0b 	.word	0x08007d0b
 8007aa8:	08007af9 	.word	0x08007af9
 8007aac:	08007d0b 	.word	0x08007d0b
 8007ab0:	08007d0b 	.word	0x08007d0b
 8007ab4:	08007d0b 	.word	0x08007d0b
 8007ab8:	08007d0b 	.word	0x08007d0b
 8007abc:	08007d0b 	.word	0x08007d0b
 8007ac0:	08007d0b 	.word	0x08007d0b
 8007ac4:	08007d0b 	.word	0x08007d0b
 8007ac8:	08007aff 	.word	0x08007aff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007acc:	4b94      	ldr	r3, [pc, #592]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d009      	beq.n	8007aec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ad8:	4b91      	ldr	r3, [pc, #580]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	08db      	lsrs	r3, r3, #3
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	4a90      	ldr	r2, [pc, #576]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007aea:	e111      	b.n	8007d10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007aec:	4b8d      	ldr	r3, [pc, #564]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007aee:	61bb      	str	r3, [r7, #24]
    break;
 8007af0:	e10e      	b.n	8007d10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007af2:	4b8d      	ldr	r3, [pc, #564]	; (8007d28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007af4:	61bb      	str	r3, [r7, #24]
    break;
 8007af6:	e10b      	b.n	8007d10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007af8:	4b8c      	ldr	r3, [pc, #560]	; (8007d2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007afa:	61bb      	str	r3, [r7, #24]
    break;
 8007afc:	e108      	b.n	8007d10 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007afe:	4b88      	ldr	r3, [pc, #544]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007b08:	4b85      	ldr	r3, [pc, #532]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0c:	091b      	lsrs	r3, r3, #4
 8007b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b14:	4b82      	ldr	r3, [pc, #520]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b1e:	4b80      	ldr	r3, [pc, #512]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	fb02 f303 	mul.w	r3, r2, r3
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80e1 	beq.w	8007d04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	f000 8083 	beq.w	8007c50 <HAL_RCC_GetSysClockFreq+0x204>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	f200 80a1 	bhi.w	8007c94 <HAL_RCC_GetSysClockFreq+0x248>
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_RCC_GetSysClockFreq+0x114>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d056      	beq.n	8007c0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007b5e:	e099      	b.n	8007c94 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b60:	4b6f      	ldr	r3, [pc, #444]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d02d      	beq.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b6c:	4b6c      	ldr	r3, [pc, #432]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	08db      	lsrs	r3, r3, #3
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	4a6b      	ldr	r2, [pc, #428]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	4b62      	ldr	r3, [pc, #392]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007baa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007bc6:	e087      	b.n	8007cd8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007d34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bda:	4b51      	ldr	r3, [pc, #324]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c0a:	e065      	b.n	8007cd8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007d38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1e:	4b40      	ldr	r3, [pc, #256]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c4e:	e043      	b.n	8007cd8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007d3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c62:	4b2f      	ldr	r3, [pc, #188]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c92:	e021      	b.n	8007cd8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007d38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca6:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cd6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	0a5b      	lsrs	r3, r3, #9
 8007cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cfc:	ee17 3a90 	vmov	r3, s15
 8007d00:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007d02:	e005      	b.n	8007d10 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61bb      	str	r3, [r7, #24]
    break;
 8007d08:	e002      	b.n	8007d10 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d0c:	61bb      	str	r3, [r7, #24]
    break;
 8007d0e:	bf00      	nop
  }

  return sysclockfreq;
 8007d10:	69bb      	ldr	r3, [r7, #24]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3724      	adds	r7, #36	; 0x24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	58024400 	.word	0x58024400
 8007d24:	03d09000 	.word	0x03d09000
 8007d28:	003d0900 	.word	0x003d0900
 8007d2c:	00989680 	.word	0x00989680
 8007d30:	46000000 	.word	0x46000000
 8007d34:	4c742400 	.word	0x4c742400
 8007d38:	4a742400 	.word	0x4a742400
 8007d3c:	4b189680 	.word	0x4b189680

08007d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d46:	f7ff fe81 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	490f      	ldr	r1, [pc, #60]	; (8007d94 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d58:	5ccb      	ldrb	r3, [r1, r3]
 8007d5a:	f003 031f 	and.w	r3, r3, #31
 8007d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	4a09      	ldr	r2, [pc, #36]	; (8007d94 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d6e:	5cd3      	ldrb	r3, [r2, r3]
 8007d70:	f003 031f 	and.w	r3, r3, #31
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7a:	4a07      	ldr	r2, [pc, #28]	; (8007d98 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d7e:	4a07      	ldr	r2, [pc, #28]	; (8007d9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d86:	681b      	ldr	r3, [r3, #0]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	58024400 	.word	0x58024400
 8007d94:	0800f4b8 	.word	0x0800f4b8
 8007d98:	24000004 	.word	0x24000004
 8007d9c:	24000000 	.word	0x24000000

08007da0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dac:	2300      	movs	r3, #0
 8007dae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d03f      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dc4:	d02a      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007dc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dca:	d824      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd0:	d018      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd6:	d81e      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de0:	d007      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007de2:	e018      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de4:	4ba3      	ldr	r3, [pc, #652]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	4aa2      	ldr	r2, [pc, #648]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007df0:	e015      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	2102      	movs	r1, #2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fff9 	bl	8009df0 <RCCEx_PLL2_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e02:	e00c      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3324      	adds	r3, #36	; 0x24
 8007e08:	2102      	movs	r1, #2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 f8a2 	bl	8009f54 <RCCEx_PLL3_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e14:	e003      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1a:	e000      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e24:	4b93      	ldr	r3, [pc, #588]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e30:	4990      	ldr	r1, [pc, #576]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	650b      	str	r3, [r1, #80]	; 0x50
 8007e36:	e001      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d03d      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d826      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e50:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e6d 	.word	0x08007e6d
 8007e5c:	08007e7b 	.word	0x08007e7b
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	08007ea5 	.word	0x08007ea5
 8007e68:	08007ea5 	.word	0x08007ea5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b81      	ldr	r3, [pc, #516]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	4a80      	ldr	r2, [pc, #512]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e78:	e015      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 ffb5 	bl	8009df0 <RCCEx_PLL2_Config>
 8007e86:	4603      	mov	r3, r0
 8007e88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e8a:	e00c      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3324      	adds	r3, #36	; 0x24
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f002 f85e 	bl	8009f54 <RCCEx_PLL3_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e9c:	e003      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea2:	e000      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d109      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eac:	4b71      	ldr	r3, [pc, #452]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb0:	f023 0207 	bic.w	r2, r3, #7
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	496e      	ldr	r1, [pc, #440]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	650b      	str	r3, [r1, #80]	; 0x50
 8007ebe:	e001      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d042      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed8:	d02b      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ede:	d825      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ee0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ee2:	d028      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ee4:	2bc0      	cmp	r3, #192	; 0xc0
 8007ee6:	d821      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d016      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007eec:	2b80      	cmp	r3, #128	; 0x80
 8007eee:	d81d      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	d007      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007ef8:	e018      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007efa:	4b5e      	ldr	r3, [pc, #376]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	4a5d      	ldr	r2, [pc, #372]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f06:	e017      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 ff6e 	bl	8009df0 <RCCEx_PLL2_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f18:	e00e      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3324      	adds	r3, #36	; 0x24
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 f817 	bl	8009f54 <RCCEx_PLL3_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f2a:	e005      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f30:	e002      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007f32:	bf00      	nop
 8007f34:	e000      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f3e:	4b4d      	ldr	r3, [pc, #308]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f42:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4a:	494a      	ldr	r1, [pc, #296]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	650b      	str	r3, [r1, #80]	; 0x50
 8007f50:	e001      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d049      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f6c:	d030      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007f6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f72:	d82a      	bhi.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f78:	d02c      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f7e:	d824      	bhi.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f84:	d018      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f8a:	d81e      	bhi.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f94:	d007      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f96:	e018      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f98:	4b36      	ldr	r3, [pc, #216]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	4a35      	ldr	r2, [pc, #212]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fa4:	e017      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 ff1f 	bl	8009df0 <RCCEx_PLL2_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007fb6:	e00e      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3324      	adds	r3, #36	; 0x24
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 ffc8 	bl	8009f54 <RCCEx_PLL3_Config>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fc8:	e005      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007fce:	e002      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e000      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007fdc:	4b25      	ldr	r3, [pc, #148]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fea:	4922      	ldr	r1, [pc, #136]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	658b      	str	r3, [r1, #88]	; 0x58
 8007ff0:	e001      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d04b      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800800c:	d030      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800800e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008012:	d82a      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008014:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008018:	d02e      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800801a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800801e:	d824      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008024:	d018      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800802a:	d81e      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008034:	d007      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008036:	e018      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008038:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	4a0d      	ldr	r2, [pc, #52]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800803e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008044:	e019      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3304      	adds	r3, #4
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f001 fecf 	bl	8009df0 <RCCEx_PLL2_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008056:	e010      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3324      	adds	r3, #36	; 0x24
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f001 ff78 	bl	8009f54 <RCCEx_PLL3_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008068:	e007      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]
      break;
 800806e:	e004      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008070:	bf00      	nop
 8008072:	e002      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008074:	58024400 	.word	0x58024400
      break;
 8008078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008080:	4b99      	ldr	r3, [pc, #612]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800808e:	4996      	ldr	r1, [pc, #600]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008090:	4313      	orrs	r3, r2
 8008092:	658b      	str	r3, [r1, #88]	; 0x58
 8008094:	e001      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d032      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080aa:	2b30      	cmp	r3, #48	; 0x30
 80080ac:	d01c      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	d817      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d00c      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d813      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d016      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d10f      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c2:	4b89      	ldr	r3, [pc, #548]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c6:	4a88      	ldr	r2, [pc, #544]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80080ce:	e00e      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	2102      	movs	r1, #2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fe8a 	bl	8009df0 <RCCEx_PLL2_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80080e0:	e005      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	75fb      	strb	r3, [r7, #23]
      break;
 80080e6:	e002      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80080e8:	bf00      	nop
 80080ea:	e000      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80080ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d109      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80080f4:	4b7c      	ldr	r3, [pc, #496]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008100:	4979      	ldr	r1, [pc, #484]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008102:	4313      	orrs	r3, r2
 8008104:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008106:	e001      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d047      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008120:	d030      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008126:	d82a      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008128:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800812c:	d02c      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800812e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008132:	d824      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008138:	d018      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800813a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800813e:	d81e      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008148:	d007      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800814a:	e018      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800814c:	4b66      	ldr	r3, [pc, #408]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	4a65      	ldr	r2, [pc, #404]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008158:	e017      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3304      	adds	r3, #4
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f001 fe45 	bl	8009df0 <RCCEx_PLL2_Config>
 8008166:	4603      	mov	r3, r0
 8008168:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800816a:	e00e      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3324      	adds	r3, #36	; 0x24
 8008170:	2100      	movs	r1, #0
 8008172:	4618      	mov	r0, r3
 8008174:	f001 feee 	bl	8009f54 <RCCEx_PLL3_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800817c:	e005      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
      break;
 8008182:	e002      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008184:	bf00      	nop
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008190:	4b55      	ldr	r3, [pc, #340]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008194:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819c:	4952      	ldr	r1, [pc, #328]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	650b      	str	r3, [r1, #80]	; 0x50
 80081a2:	e001      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d049      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081bc:	d02e      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80081be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081c2:	d828      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081c8:	d02a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80081ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081ce:	d822      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081d4:	d026      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80081d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081da:	d81c      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e0:	d010      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80081e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e6:	d816      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01d      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80081ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f0:	d111      	bne.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	2101      	movs	r1, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 fdf9 	bl	8009df0 <RCCEx_PLL2_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008202:	e012      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3324      	adds	r3, #36	; 0x24
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fea2 	bl	8009f54 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008214:	e009      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	75fb      	strb	r3, [r7, #23]
      break;
 800821a:	e006      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800821c:	bf00      	nop
 800821e:	e004      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008220:	bf00      	nop
 8008222:	e002      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008230:	4b2d      	ldr	r3, [pc, #180]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008234:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823c:	492a      	ldr	r1, [pc, #168]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800823e:	4313      	orrs	r3, r2
 8008240:	650b      	str	r3, [r1, #80]	; 0x50
 8008242:	e001      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d04d      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800825a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800825e:	d02e      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008264:	d828      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d02a      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008270:	d822      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008276:	d026      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008278:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800827c:	d81c      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008282:	d010      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008288:	d816      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01d      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800828e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008292:	d111      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fda8 	bl	8009df0 <RCCEx_PLL2_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80082a4:	e012      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3324      	adds	r3, #36	; 0x24
 80082aa:	2101      	movs	r1, #1
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 fe51 	bl	8009f54 <RCCEx_PLL3_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80082b6:	e009      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
      break;
 80082bc:	e006      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082be:	bf00      	nop
 80082c0:	e004      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082c2:	bf00      	nop
 80082c4:	e002      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082c6:	bf00      	nop
 80082c8:	e000      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10c      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082e0:	4901      	ldr	r1, [pc, #4]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	658b      	str	r3, [r1, #88]	; 0x58
 80082e6:	e003      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80082e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d02f      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008304:	d00e      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800830a:	d814      	bhi.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800830c:	2b00      	cmp	r3, #0
 800830e:	d015      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008314:	d10f      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008316:	4baf      	ldr	r3, [pc, #700]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	4aae      	ldr	r2, [pc, #696]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800831c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008320:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008322:	e00c      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3304      	adds	r3, #4
 8008328:	2101      	movs	r1, #1
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fd60 	bl	8009df0 <RCCEx_PLL2_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008334:	e003      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	75fb      	strb	r3, [r7, #23]
      break;
 800833a:	e000      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800833c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008344:	4ba3      	ldr	r3, [pc, #652]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008348:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008350:	49a0      	ldr	r1, [pc, #640]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008352:	4313      	orrs	r3, r2
 8008354:	650b      	str	r3, [r1, #80]	; 0x50
 8008356:	e001      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d032      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836c:	2b03      	cmp	r3, #3
 800836e:	d81b      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008370:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	080083af 	.word	0x080083af
 800837c:	08008389 	.word	0x08008389
 8008380:	08008397 	.word	0x08008397
 8008384:	080083af 	.word	0x080083af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008388:	4b92      	ldr	r3, [pc, #584]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	4a91      	ldr	r2, [pc, #580]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800838e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008392:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008394:	e00c      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3304      	adds	r3, #4
 800839a:	2102      	movs	r1, #2
 800839c:	4618      	mov	r0, r3
 800839e:	f001 fd27 	bl	8009df0 <RCCEx_PLL2_Config>
 80083a2:	4603      	mov	r3, r0
 80083a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80083a6:	e003      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	75fb      	strb	r3, [r7, #23]
      break;
 80083ac:	e000      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80083ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d109      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083b6:	4b87      	ldr	r3, [pc, #540]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ba:	f023 0203 	bic.w	r2, r3, #3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c2:	4984      	ldr	r1, [pc, #528]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083c8:	e001      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 8086 	beq.w	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083dc:	4b7e      	ldr	r3, [pc, #504]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a7d      	ldr	r2, [pc, #500]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80083e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083e8:	f7f9 fa72 	bl	80018d0 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083ee:	e009      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083f0:	f7f9 fa6e 	bl	80018d0 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b64      	cmp	r3, #100	; 0x64
 80083fc:	d902      	bls.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	75fb      	strb	r3, [r7, #23]
        break;
 8008402:	e005      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008404:	4b74      	ldr	r3, [pc, #464]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0ef      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d166      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008416:	4b6f      	ldr	r3, [pc, #444]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008420:	4053      	eors	r3, r2
 8008422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008426:	2b00      	cmp	r3, #0
 8008428:	d013      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800842a:	4b6a      	ldr	r3, [pc, #424]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008432:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008434:	4b67      	ldr	r3, [pc, #412]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	4a66      	ldr	r2, [pc, #408]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800843a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800843e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008440:	4b64      	ldr	r3, [pc, #400]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008444:	4a63      	ldr	r2, [pc, #396]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800844a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800844c:	4a61      	ldr	r2, [pc, #388]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845c:	d115      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845e:	f7f9 fa37 	bl	80018d0 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008464:	e00b      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008466:	f7f9 fa33 	bl	80018d0 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	f241 3288 	movw	r2, #5000	; 0x1388
 8008474:	4293      	cmp	r3, r2
 8008476:	d902      	bls.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	75fb      	strb	r3, [r7, #23]
            break;
 800847c:	e005      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800847e:	4b55      	ldr	r3, [pc, #340]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0ed      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d126      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800849e:	d10d      	bne.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80084a0:	4b4c      	ldr	r3, [pc, #304]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084ae:	0919      	lsrs	r1, r3, #4
 80084b0:	4b4a      	ldr	r3, [pc, #296]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80084b2:	400b      	ands	r3, r1
 80084b4:	4947      	ldr	r1, [pc, #284]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	610b      	str	r3, [r1, #16]
 80084ba:	e005      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80084bc:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	4a44      	ldr	r2, [pc, #272]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80084c6:	6113      	str	r3, [r2, #16]
 80084c8:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084d6:	493f      	ldr	r1, [pc, #252]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	670b      	str	r3, [r1, #112]	; 0x70
 80084dc:	e004      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	75bb      	strb	r3, [r7, #22]
 80084e2:	e001      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 8085 	beq.w	8008600 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084fa:	2b28      	cmp	r3, #40	; 0x28
 80084fc:	d866      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	080085e1 	.word	0x080085e1
 8008508:	080085cd 	.word	0x080085cd
 800850c:	080085cd 	.word	0x080085cd
 8008510:	080085cd 	.word	0x080085cd
 8008514:	080085cd 	.word	0x080085cd
 8008518:	080085cd 	.word	0x080085cd
 800851c:	080085cd 	.word	0x080085cd
 8008520:	080085cd 	.word	0x080085cd
 8008524:	080085a9 	.word	0x080085a9
 8008528:	080085cd 	.word	0x080085cd
 800852c:	080085cd 	.word	0x080085cd
 8008530:	080085cd 	.word	0x080085cd
 8008534:	080085cd 	.word	0x080085cd
 8008538:	080085cd 	.word	0x080085cd
 800853c:	080085cd 	.word	0x080085cd
 8008540:	080085cd 	.word	0x080085cd
 8008544:	080085bb 	.word	0x080085bb
 8008548:	080085cd 	.word	0x080085cd
 800854c:	080085cd 	.word	0x080085cd
 8008550:	080085cd 	.word	0x080085cd
 8008554:	080085cd 	.word	0x080085cd
 8008558:	080085cd 	.word	0x080085cd
 800855c:	080085cd 	.word	0x080085cd
 8008560:	080085cd 	.word	0x080085cd
 8008564:	080085e1 	.word	0x080085e1
 8008568:	080085cd 	.word	0x080085cd
 800856c:	080085cd 	.word	0x080085cd
 8008570:	080085cd 	.word	0x080085cd
 8008574:	080085cd 	.word	0x080085cd
 8008578:	080085cd 	.word	0x080085cd
 800857c:	080085cd 	.word	0x080085cd
 8008580:	080085cd 	.word	0x080085cd
 8008584:	080085e1 	.word	0x080085e1
 8008588:	080085cd 	.word	0x080085cd
 800858c:	080085cd 	.word	0x080085cd
 8008590:	080085cd 	.word	0x080085cd
 8008594:	080085cd 	.word	0x080085cd
 8008598:	080085cd 	.word	0x080085cd
 800859c:	080085cd 	.word	0x080085cd
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	080085e1 	.word	0x080085e1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3304      	adds	r3, #4
 80085ac:	2101      	movs	r1, #1
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 fc1e 	bl	8009df0 <RCCEx_PLL2_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80085b8:	e013      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3324      	adds	r3, #36	; 0x24
 80085be:	2101      	movs	r1, #1
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fcc7 	bl	8009f54 <RCCEx_PLL3_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80085ca:	e00a      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	e007      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80085d2:	bf00      	nop
 80085d4:	58024400 	.word	0x58024400
 80085d8:	58024800 	.word	0x58024800
 80085dc:	00ffffcf 	.word	0x00ffffcf
      break;
 80085e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80085e8:	4b96      	ldr	r3, [pc, #600]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085f4:	4993      	ldr	r1, [pc, #588]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	654b      	str	r3, [r1, #84]	; 0x54
 80085fa:	e001      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d038      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008610:	2b05      	cmp	r3, #5
 8008612:	d821      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008614:	a201      	add	r2, pc, #4	; (adr r2, 800861c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	0800865f 	.word	0x0800865f
 8008620:	08008635 	.word	0x08008635
 8008624:	08008647 	.word	0x08008647
 8008628:	0800865f 	.word	0x0800865f
 800862c:	0800865f 	.word	0x0800865f
 8008630:	0800865f 	.word	0x0800865f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	2101      	movs	r1, #1
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fbd8 	bl	8009df0 <RCCEx_PLL2_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008644:	e00c      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3324      	adds	r3, #36	; 0x24
 800864a:	2101      	movs	r1, #1
 800864c:	4618      	mov	r0, r3
 800864e:	f001 fc81 	bl	8009f54 <RCCEx_PLL3_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008656:	e003      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
      break;
 800865c:	e000      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800865e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d109      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008666:	4b77      	ldr	r3, [pc, #476]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866a:	f023 0207 	bic.w	r2, r3, #7
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008672:	4974      	ldr	r1, [pc, #464]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008674:	4313      	orrs	r3, r2
 8008676:	654b      	str	r3, [r1, #84]	; 0x54
 8008678:	e001      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0304 	and.w	r3, r3, #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	d03a      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008690:	2b05      	cmp	r3, #5
 8008692:	d821      	bhi.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008694:	a201      	add	r2, pc, #4	; (adr r2, 800869c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086df 	.word	0x080086df
 80086a0:	080086b5 	.word	0x080086b5
 80086a4:	080086c7 	.word	0x080086c7
 80086a8:	080086df 	.word	0x080086df
 80086ac:	080086df 	.word	0x080086df
 80086b0:	080086df 	.word	0x080086df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3304      	adds	r3, #4
 80086b8:	2101      	movs	r1, #1
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fb98 	bl	8009df0 <RCCEx_PLL2_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80086c4:	e00c      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3324      	adds	r3, #36	; 0x24
 80086ca:	2101      	movs	r1, #1
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 fc41 	bl	8009f54 <RCCEx_PLL3_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80086d6:	e003      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	75fb      	strb	r3, [r7, #23]
      break;
 80086dc:	e000      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80086de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086e6:	4b57      	ldr	r3, [pc, #348]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80086e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ea:	f023 0207 	bic.w	r2, r3, #7
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f4:	4953      	ldr	r1, [pc, #332]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	658b      	str	r3, [r1, #88]	; 0x58
 80086fa:	e001      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b00      	cmp	r3, #0
 800870a:	d04b      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008716:	d02e      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800871c:	d828      	bhi.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800871e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008722:	d02a      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008728:	d822      	bhi.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800872a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800872e:	d026      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008730:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008734:	d81c      	bhi.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873a:	d010      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800873c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008740:	d816      	bhi.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01d      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800874a:	d111      	bne.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3304      	adds	r3, #4
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fb4c 	bl	8009df0 <RCCEx_PLL2_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800875c:	e012      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3324      	adds	r3, #36	; 0x24
 8008762:	2102      	movs	r1, #2
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fbf5 	bl	8009f54 <RCCEx_PLL3_Config>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800876e:	e009      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
      break;
 8008774:	e006      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008776:	bf00      	nop
 8008778:	e004      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800877a:	bf00      	nop
 800877c:	e002      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800878a:	4b2e      	ldr	r3, [pc, #184]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800878c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008798:	492a      	ldr	r1, [pc, #168]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800879a:	4313      	orrs	r3, r2
 800879c:	654b      	str	r3, [r1, #84]	; 0x54
 800879e:	e001      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d04d      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087ba:	d02e      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80087bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087c0:	d828      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c6:	d02a      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80087c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087cc:	d822      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087d2:	d026      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80087d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087d8:	d81c      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087de:	d010      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80087e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e4:	d816      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d01d      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80087ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ee:	d111      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	2100      	movs	r1, #0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 fafa 	bl	8009df0 <RCCEx_PLL2_Config>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008800:	e012      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3324      	adds	r3, #36	; 0x24
 8008806:	2102      	movs	r1, #2
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fba3 	bl	8009f54 <RCCEx_PLL3_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008812:	e009      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	75fb      	strb	r3, [r7, #23]
      break;
 8008818:	e006      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800881a:	bf00      	nop
 800881c:	e004      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800881e:	bf00      	nop
 8008820:	e002      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008822:	bf00      	nop
 8008824:	e000      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10c      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008832:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800883c:	4901      	ldr	r1, [pc, #4]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800883e:	4313      	orrs	r3, r2
 8008840:	658b      	str	r3, [r1, #88]	; 0x58
 8008842:	e003      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008854:	2b00      	cmp	r3, #0
 8008856:	d04b      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800885e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008862:	d02e      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008864:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008868:	d828      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800886a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800886e:	d02a      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008874:	d822      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008876:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800887a:	d026      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800887c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008880:	d81c      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008886:	d010      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800888c:	d816      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d01d      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008896:	d111      	bne.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3304      	adds	r3, #4
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 faa6 	bl	8009df0 <RCCEx_PLL2_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088a8:	e012      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3324      	adds	r3, #36	; 0x24
 80088ae:	2102      	movs	r1, #2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 fb4f 	bl	8009f54 <RCCEx_PLL3_Config>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088ba:	e009      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]
      break;
 80088c0:	e006      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088c2:	bf00      	nop
 80088c4:	e004      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088c6:	bf00      	nop
 80088c8:	e002      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10a      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80088d6:	4b9d      	ldr	r3, [pc, #628]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088e4:	4999      	ldr	r1, [pc, #612]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	658b      	str	r3, [r1, #88]	; 0x58
 80088ea:	e001      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0308 	and.w	r3, r3, #8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01a      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008906:	d10a      	bne.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3324      	adds	r3, #36	; 0x24
 800890c:	2102      	movs	r1, #2
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fb20 	bl	8009f54 <RCCEx_PLL3_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800891e:	4b8b      	ldr	r3, [pc, #556]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892c:	4987      	ldr	r1, [pc, #540]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800892e:	4313      	orrs	r3, r2
 8008930:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0310 	and.w	r3, r3, #16
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01a      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008948:	d10a      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2102      	movs	r1, #2
 8008950:	4618      	mov	r0, r3
 8008952:	f001 faff 	bl	8009f54 <RCCEx_PLL3_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008960:	4b7a      	ldr	r3, [pc, #488]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800896e:	4977      	ldr	r1, [pc, #476]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008970:	4313      	orrs	r3, r2
 8008972:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d034      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800898a:	d01d      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800898c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008990:	d817      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899a:	d009      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800899c:	e011      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3304      	adds	r3, #4
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f001 fa23 	bl	8009df0 <RCCEx_PLL2_Config>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089ae:	e00c      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3324      	adds	r3, #36	; 0x24
 80089b4:	2102      	movs	r1, #2
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 facc 	bl	8009f54 <RCCEx_PLL3_Config>
 80089bc:	4603      	mov	r3, r0
 80089be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089c0:	e003      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	75fb      	strb	r3, [r7, #23]
      break;
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80089c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089d0:	4b5e      	ldr	r3, [pc, #376]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089de:	495b      	ldr	r1, [pc, #364]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	658b      	str	r3, [r1, #88]	; 0x58
 80089e4:	e001      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d033      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a00:	d01c      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008a02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a06:	d816      	bhi.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a0c:	d003      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a12:	d007      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008a14:	e00f      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a16:	4b4d      	ldr	r3, [pc, #308]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	4a4c      	ldr	r2, [pc, #304]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a22:	e00c      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3324      	adds	r3, #36	; 0x24
 8008a28:	2101      	movs	r1, #1
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f001 fa92 	bl	8009f54 <RCCEx_PLL3_Config>
 8008a30:	4603      	mov	r3, r0
 8008a32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a34:	e003      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	75fb      	strb	r3, [r7, #23]
      break;
 8008a3a:	e000      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a44:	4b41      	ldr	r3, [pc, #260]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a52:	493e      	ldr	r1, [pc, #248]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	654b      	str	r3, [r1, #84]	; 0x54
 8008a58:	e001      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d029      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a76:	d007      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008a78:	e00f      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a7a:	4b34      	ldr	r3, [pc, #208]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	4a33      	ldr	r2, [pc, #204]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a86:	e00b      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 f9ae 	bl	8009df0 <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a98:	e002      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008aa6:	4b29      	ldr	r3, [pc, #164]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab2:	4926      	ldr	r1, [pc, #152]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ab8:	e001      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3324      	adds	r3, #36	; 0x24
 8008ace:	2102      	movs	r1, #2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 fa3f 	bl	8009f54 <RCCEx_PLL3_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d033      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008af4:	d017      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008afa:	d811      	bhi.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b00:	d013      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b06:	d80b      	bhi.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d010      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b10:	d106      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b12:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	4a0d      	ldr	r2, [pc, #52]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008b1e:	e007      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
      break;
 8008b24:	e004      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10c      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b42:	4902      	ldr	r1, [pc, #8]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	654b      	str	r3, [r1, #84]	; 0x54
 8008b48:	e004      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008b4a:	bf00      	nop
 8008b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b60:	4b31      	ldr	r3, [pc, #196]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6c:	492e      	ldr	r1, [pc, #184]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d009      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b7e:	4b2a      	ldr	r3, [pc, #168]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b8c:	4926      	ldr	r1, [pc, #152]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d008      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b9e:	4b22      	ldr	r3, [pc, #136]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008baa:	491f      	ldr	r1, [pc, #124]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00d      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bbc:	4b1a      	ldr	r3, [pc, #104]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	4a19      	ldr	r2, [pc, #100]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bc6:	6113      	str	r3, [r2, #16]
 8008bc8:	4b17      	ldr	r3, [pc, #92]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bca:	691a      	ldr	r2, [r3, #16]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008bd2:	4915      	ldr	r1, [pc, #84]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	da08      	bge.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008be0:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bec:	490e      	ldr	r1, [pc, #56]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bfe:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0c:	4906      	ldr	r1, [pc, #24]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008c12:	7dbb      	ldrb	r3, [r7, #22]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e000      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	58024400 	.word	0x58024400

08008c2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b090      	sub	sp, #64	; 0x40
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3a:	f040 8095 	bne.w	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008c3e:	4b97      	ldr	r3, [pc, #604]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	f200 8088 	bhi.w	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008c50:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008c6d 	.word	0x08008c6d
 8008c5c:	08008c95 	.word	0x08008c95
 8008c60:	08008cbd 	.word	0x08008cbd
 8008c64:	08008d59 	.word	0x08008d59
 8008c68:	08008ce5 	.word	0x08008ce5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c6c:	4b8b      	ldr	r3, [pc, #556]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c78:	d108      	bne.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 ff64 	bl	8009b4c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c88:	f000 bc94 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c90:	f000 bc90 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c94:	4b81      	ldr	r3, [pc, #516]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ca0:	d108      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ca2:	f107 0318 	add.w	r3, r7, #24
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fca8 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cb0:	f000 bc80 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cb8:	f000 bc7c 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cbc:	4b77      	ldr	r3, [pc, #476]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cc8:	d108      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cca:	f107 030c 	add.w	r3, r7, #12
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fde8 	bl	80098a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cd8:	f000 bc6c 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce0:	f000 bc68 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ce4:	4b6d      	ldr	r3, [pc, #436]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cee:	4b6b      	ldr	r3, [pc, #428]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d10c      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d109      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d00:	4b66      	ldr	r3, [pc, #408]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	08db      	lsrs	r3, r3, #3
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	4a65      	ldr	r2, [pc, #404]	; (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d12:	e01f      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d14:	4b61      	ldr	r3, [pc, #388]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d20:	d106      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d28:	d102      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d2a:	4b5e      	ldr	r3, [pc, #376]	; (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d2e:	e011      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d30:	4b5a      	ldr	r3, [pc, #360]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d3c:	d106      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d44:	d102      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d46:	4b58      	ldr	r3, [pc, #352]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d4a:	e003      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d50:	f000 bc30 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008d54:	f000 bc2e 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d58:	4b54      	ldr	r3, [pc, #336]	; (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d5c:	f000 bc2a 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d64:	f000 bc26 	b.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6e:	f040 809f 	bne.w	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008d72:	4b4a      	ldr	r3, [pc, #296]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d76:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008d7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d82:	d04d      	beq.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d8a:	f200 8084 	bhi.w	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	2bc0      	cmp	r3, #192	; 0xc0
 8008d92:	d07d      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	2bc0      	cmp	r3, #192	; 0xc0
 8008d98:	d87d      	bhi.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	2b80      	cmp	r3, #128	; 0x80
 8008d9e:	d02d      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	2b80      	cmp	r3, #128	; 0x80
 8008da4:	d877      	bhi.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	2b40      	cmp	r3, #64	; 0x40
 8008db0:	d012      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008db2:	e070      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008db4:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dc0:	d107      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fec0 	bl	8009b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dd0:	e3f0      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd6:	e3ed      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dd8:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008de4:	d107      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de6:	f107 0318 	add.w	r3, r7, #24
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fc06 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008df4:	e3de      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfa:	e3db      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dfc:	4b27      	ldr	r3, [pc, #156]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e08:	d107      	bne.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0a:	f107 030c 	add.w	r3, r7, #12
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fd48 	bl	80098a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e18:	e3cc      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1e:	e3c9      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e20:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d10c      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d109      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e3c:	4b17      	ldr	r3, [pc, #92]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	08db      	lsrs	r3, r3, #3
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	4a16      	ldr	r2, [pc, #88]	; (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e4e:	e01e      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e50:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e5c:	d106      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e64:	d102      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6a:	e010      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e78:	d106      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e80:	d102      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e82:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e86:	e002      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e8c:	e392      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008e8e:	e391      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e90:	4b06      	ldr	r3, [pc, #24]	; (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e94:	e38e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9a:	e38b      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	03d09000 	.word	0x03d09000
 8008ea4:	003d0900 	.word	0x003d0900
 8008ea8:	00989680 	.word	0x00989680
 8008eac:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb6:	f040 809c 	bne.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008eba:	4b9d      	ldr	r3, [pc, #628]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008ec2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008eca:	d054      	beq.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ed2:	f200 808b 	bhi.w	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008edc:	f000 8083 	beq.w	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ee6:	f200 8081 	bhi.w	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ef0:	d02f      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ef8:	d878      	bhi.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d004      	beq.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f06:	d012      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008f08:	e070      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f0a:	4b89      	ldr	r3, [pc, #548]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f16:	d107      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fe15 	bl	8009b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f26:	e345      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f2c:	e342      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f2e:	4b80      	ldr	r3, [pc, #512]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f3a:	d107      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3c:	f107 0318 	add.w	r3, r7, #24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fb5b 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f4a:	e333      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f50:	e330      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f52:	4b77      	ldr	r3, [pc, #476]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5e:	d107      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f60:	f107 030c 	add.w	r3, r7, #12
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fc9d 	bl	80098a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f6e:	e321      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f74:	e31e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f76:	4b6e      	ldr	r3, [pc, #440]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f7e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f80:	4b6b      	ldr	r3, [pc, #428]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	d10c      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f92:	4b67      	ldr	r3, [pc, #412]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	08db      	lsrs	r3, r3, #3
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	4a65      	ldr	r2, [pc, #404]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa4:	e01e      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fa6:	4b62      	ldr	r3, [pc, #392]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb2:	d106      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fba:	d102      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fbc:	4b5e      	ldr	r3, [pc, #376]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc0:	e010      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc2:	4b5b      	ldr	r3, [pc, #364]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fd8:	4b58      	ldr	r3, [pc, #352]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fdc:	e002      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fe2:	e2e7      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008fe4:	e2e6      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fe6:	4b56      	ldr	r3, [pc, #344]	; (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fea:	e2e3      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff0:	e2e0      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff8:	f040 80a7 	bne.w	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008ffc:	4b4c      	ldr	r3, [pc, #304]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009000:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009004:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800900c:	d055      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009014:	f200 8096 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800901e:	f000 8084 	beq.w	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009028:	f200 808c 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009032:	d030      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800903a:	f200 8083 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800904a:	d012      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800904c:	e07a      	b.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800904e:	4b38      	ldr	r3, [pc, #224]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800905a:	d107      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800905c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fd73 	bl	8009b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800906a:	e2a3      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009070:	e2a0      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009072:	4b2f      	ldr	r3, [pc, #188]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800907a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800907e:	d107      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009080:	f107 0318 	add.w	r3, r7, #24
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fab9 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800908e:	e291      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009094:	e28e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009096:	4b26      	ldr	r3, [pc, #152]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800909e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a2:	d107      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090a4:	f107 030c 	add.w	r3, r7, #12
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fbfb 	bl	80098a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090b2:	e27f      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b8:	e27c      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090ba:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090c4:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d10c      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80090d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d109      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090d6:	4b16      	ldr	r3, [pc, #88]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	08db      	lsrs	r3, r3, #3
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	4a14      	ldr	r2, [pc, #80]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e8:	e01e      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ea:	4b11      	ldr	r3, [pc, #68]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f6:	d106      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80090f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090fe:	d102      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009100:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009104:	e010      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009106:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009112:	d106      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800911a:	d102      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009126:	e245      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009128:	e244      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912e:	e241      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009130:	58024400 	.word	0x58024400
 8009134:	03d09000 	.word	0x03d09000
 8009138:	003d0900 	.word	0x003d0900
 800913c:	00989680 	.word	0x00989680
 8009140:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009148:	e234      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009150:	f040 809c 	bne.w	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009154:	4b9b      	ldr	r3, [pc, #620]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009158:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800915c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009164:	d054      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800916c:	f200 808b 	bhi.w	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009176:	f000 8083 	beq.w	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009180:	f200 8081 	bhi.w	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800918a:	d02f      	beq.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009192:	d878      	bhi.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800919a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a0:	d012      	beq.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80091a2:	e070      	b.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091a4:	4b87      	ldr	r3, [pc, #540]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b0:	d107      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fcc8 	bl	8009b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091c0:	e1f8      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c6:	e1f5      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c8:	4b7e      	ldr	r3, [pc, #504]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d4:	d107      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d6:	f107 0318 	add.w	r3, r7, #24
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fa0e 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091e4:	e1e6      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ea:	e1e3      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ec:	4b75      	ldr	r3, [pc, #468]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f8:	d107      	bne.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091fa:	f107 030c 	add.w	r3, r7, #12
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fb50 	bl	80098a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009208:	e1d4      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800920e:	e1d1      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009210:	4b6c      	ldr	r3, [pc, #432]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009218:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800921a:	4b6a      	ldr	r3, [pc, #424]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b04      	cmp	r3, #4
 8009224:	d10c      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009228:	2b00      	cmp	r3, #0
 800922a:	d109      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800922c:	4b65      	ldr	r3, [pc, #404]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	08db      	lsrs	r3, r3, #3
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	4a64      	ldr	r2, [pc, #400]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009238:	fa22 f303 	lsr.w	r3, r2, r3
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800923e:	e01e      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009240:	4b60      	ldr	r3, [pc, #384]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924c:	d106      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800924e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009254:	d102      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009256:	4b5d      	ldr	r3, [pc, #372]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800925a:	e010      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800925c:	4b59      	ldr	r3, [pc, #356]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009268:	d106      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009270:	d102      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009272:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009276:	e002      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800927c:	e19a      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800927e:	e199      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009280:	4b54      	ldr	r3, [pc, #336]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009284:	e196      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800928a:	e193      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009292:	d173      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009294:	4b4b      	ldr	r3, [pc, #300]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800929c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a4:	d02f      	beq.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092ac:	d863      	bhi.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80092ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ba:	d012      	beq.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80092bc:	e05b      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092be:	4b41      	ldr	r3, [pc, #260]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ca:	d107      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092cc:	f107 0318 	add.w	r3, r7, #24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f993 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092da:	e16b      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e0:	e168      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092e2:	4b38      	ldr	r3, [pc, #224]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092ee:	d107      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092f0:	f107 030c 	add.w	r3, r7, #12
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fad5 	bl	80098a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092fe:	e159      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009304:	e156      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009306:	4b2f      	ldr	r3, [pc, #188]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800930e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009310:	4b2c      	ldr	r3, [pc, #176]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b04      	cmp	r3, #4
 800931a:	d10c      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009322:	4b28      	ldr	r3, [pc, #160]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	08db      	lsrs	r3, r3, #3
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	4a26      	ldr	r2, [pc, #152]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800932e:	fa22 f303 	lsr.w	r3, r2, r3
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009334:	e01e      	b.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009336:	4b23      	ldr	r3, [pc, #140]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009342:	d106      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800934a:	d102      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800934c:	4b1f      	ldr	r3, [pc, #124]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009350:	e010      	b.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009352:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800935e:	d106      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009366:	d102      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009368:	4b19      	ldr	r3, [pc, #100]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800936a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800936c:	e002      	b.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009372:	e11f      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009374:	e11e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800937a:	e11b      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009382:	d13e      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009384:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800938c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d004      	beq.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939a:	d01d      	beq.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800939c:	e02e      	b.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093aa:	d107      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fbcb 	bl	8009b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093ba:	e0fb      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c0:	e0f8      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80093c2:	bf00      	nop
 80093c4:	58024400 	.word	0x58024400
 80093c8:	03d09000 	.word	0x03d09000
 80093cc:	003d0900 	.word	0x003d0900
 80093d0:	00989680 	.word	0x00989680
 80093d4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093d8:	4b79      	ldr	r3, [pc, #484]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093e4:	d107      	bne.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e6:	f107 0318 	add.w	r3, r7, #24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f906 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093f4:	e0de      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093fa:	e0db      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009400:	e0d8      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009408:	f040 8085 	bne.w	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800940c:	4b6c      	ldr	r3, [pc, #432]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800940e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009410:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009414:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800941c:	d06b      	beq.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009424:	d874      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942c:	d056      	beq.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009434:	d86c      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800943c:	d03b      	beq.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009444:	d864      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800944c:	d021      	beq.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009454:	d85c      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009462:	d004      	beq.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009464:	e054      	b.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009466:	f000 f8b3 	bl	80095d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800946a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800946c:	e0a2      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800946e:	4b54      	ldr	r3, [pc, #336]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800947a:	d107      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800947c:	f107 0318 	add.w	r3, r7, #24
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f8bb 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800948a:	e093      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009490:	e090      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009492:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800949a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800949e:	d107      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094a0:	f107 030c 	add.w	r3, r7, #12
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 f9fd 	bl	80098a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094ae:	e081      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b4:	e07e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094b6:	4b42      	ldr	r3, [pc, #264]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b04      	cmp	r3, #4
 80094c0:	d109      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c2:	4b3f      	ldr	r3, [pc, #252]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	08db      	lsrs	r3, r3, #3
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	4a3d      	ldr	r2, [pc, #244]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80094ce:	fa22 f303 	lsr.w	r3, r2, r3
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094d4:	e06e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094da:	e06b      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094dc:	4b38      	ldr	r3, [pc, #224]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e8:	d102      	bne.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80094ea:	4b37      	ldr	r3, [pc, #220]	; (80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80094ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094ee:	e061      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094f4:	e05e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094f6:	4b32      	ldr	r3, [pc, #200]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009502:	d102      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8009504:	4b31      	ldr	r3, [pc, #196]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009508:	e054      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800950e:	e051      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009514:	e04e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800951c:	d148      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800951e:	4b28      	ldr	r3, [pc, #160]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009526:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800952e:	d02a      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009536:	d838      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	2b00      	cmp	r3, #0
 800953c:	d004      	beq.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009544:	d00d      	beq.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8009546:	e030      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009548:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009554:	d102      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800955a:	e02b      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009560:	e028      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009562:	4b17      	ldr	r3, [pc, #92]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800956e:	d107      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009574:	4618      	mov	r0, r3
 8009576:	f000 fae9 	bl	8009b4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800957e:	e019      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009584:	e016      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009586:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800958e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009592:	d107      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009594:	f107 0318 	add.w	r3, r7, #24
 8009598:	4618      	mov	r0, r3
 800959a:	f000 f82f 	bl	80095fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095a2:	e007      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a8:	e004      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ae:	e001      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80095b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3740      	adds	r7, #64	; 0x40
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	58024400 	.word	0x58024400
 80095c4:	03d09000 	.word	0x03d09000
 80095c8:	003d0900 	.word	0x003d0900
 80095cc:	00989680 	.word	0x00989680

080095d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80095d4:	f7fe fbb4 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 80095d8:	4602      	mov	r2, r0
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	091b      	lsrs	r3, r3, #4
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	4904      	ldr	r1, [pc, #16]	; (80095f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095e6:	5ccb      	ldrb	r3, [r1, r3]
 80095e8:	f003 031f 	and.w	r3, r3, #31
 80095ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	58024400 	.word	0x58024400
 80095f8:	0800f4b8 	.word	0x0800f4b8

080095fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b089      	sub	sp, #36	; 0x24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009604:	4ba1      	ldr	r3, [pc, #644]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800960e:	4b9f      	ldr	r3, [pc, #636]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	0b1b      	lsrs	r3, r3, #12
 8009614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009618:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800961a:	4b9c      	ldr	r3, [pc, #624]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	091b      	lsrs	r3, r3, #4
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009626:	4b99      	ldr	r3, [pc, #612]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962a:	08db      	lsrs	r3, r3, #3
 800962c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	fb02 f303 	mul.w	r3, r2, r3
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 8111 	beq.w	800986c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	2b02      	cmp	r3, #2
 800964e:	f000 8083 	beq.w	8009758 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b02      	cmp	r3, #2
 8009656:	f200 80a1 	bhi.w	800979c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d056      	beq.n	8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009666:	e099      	b.n	800979c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009668:	4b88      	ldr	r3, [pc, #544]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d02d      	beq.n	80096d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009674:	4b85      	ldr	r3, [pc, #532]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	08db      	lsrs	r3, r3, #3
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	4a84      	ldr	r2, [pc, #528]	; (8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b7b      	ldr	r3, [pc, #492]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096ce:	e087      	b.n	80097e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e2:	4b6a      	ldr	r3, [pc, #424]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009712:	e065      	b.n	80097e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009726:	4b59      	ldr	r3, [pc, #356]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009736:	ed97 6a03 	vldr	s12, [r7, #12]
 800973a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800973e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800974a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009756:	e043      	b.n	80097e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009762:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80098a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800976a:	4b48      	ldr	r3, [pc, #288]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977a:	ed97 6a03 	vldr	s12, [r7, #12]
 800977e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800978a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800978e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800979a:	e021      	b.n	80097e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ae:	4b37      	ldr	r3, [pc, #220]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097be:	ed97 6a03 	vldr	s12, [r7, #12]
 80097c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097e0:	4b2a      	ldr	r3, [pc, #168]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e4:	0a5b      	lsrs	r3, r3, #9
 80097e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80097fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009806:	ee17 2a90 	vmov	r2, s15
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800980e:	4b1f      	ldr	r3, [pc, #124]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	0c1b      	lsrs	r3, r3, #16
 8009814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009824:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009828:	edd7 6a07 	vldr	s13, [r7, #28]
 800982c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009834:	ee17 2a90 	vmov	r2, s15
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800983c:	4b13      	ldr	r3, [pc, #76]	; (800988c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	0e1b      	lsrs	r3, r3, #24
 8009842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009856:	edd7 6a07 	vldr	s13, [r7, #28]
 800985a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800985e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009862:	ee17 2a90 	vmov	r2, s15
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800986a:	e008      	b.n	800987e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	609a      	str	r2, [r3, #8]
}
 800987e:	bf00      	nop
 8009880:	3724      	adds	r7, #36	; 0x24
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	58024400 	.word	0x58024400
 8009890:	03d09000 	.word	0x03d09000
 8009894:	46000000 	.word	0x46000000
 8009898:	4c742400 	.word	0x4c742400
 800989c:	4a742400 	.word	0x4a742400
 80098a0:	4b189680 	.word	0x4b189680

080098a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b089      	sub	sp, #36	; 0x24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098ac:	4ba1      	ldr	r3, [pc, #644]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80098b6:	4b9f      	ldr	r3, [pc, #636]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	0d1b      	lsrs	r3, r3, #20
 80098bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098c2:	4b9c      	ldr	r3, [pc, #624]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	0a1b      	lsrs	r3, r3, #8
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098ce:	4b99      	ldr	r3, [pc, #612]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d2:	08db      	lsrs	r3, r3, #3
 80098d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	fb02 f303 	mul.w	r3, r2, r3
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8111 	beq.w	8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	f000 8083 	beq.w	8009a00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	f200 80a1 	bhi.w	8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d056      	beq.n	80099bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800990e:	e099      	b.n	8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009910:	4b88      	ldr	r3, [pc, #544]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b00      	cmp	r3, #0
 800991a:	d02d      	beq.n	8009978 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800991c:	4b85      	ldr	r3, [pc, #532]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	08db      	lsrs	r3, r3, #3
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	4a84      	ldr	r2, [pc, #528]	; (8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009928:	fa22 f303 	lsr.w	r3, r2, r3
 800992c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009946:	4b7b      	ldr	r3, [pc, #492]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009956:	ed97 6a03 	vldr	s12, [r7, #12]
 800995a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800995e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800996a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009972:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009976:	e087      	b.n	8009a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998a:	4b6a      	ldr	r3, [pc, #424]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999a:	ed97 6a03 	vldr	s12, [r7, #12]
 800999e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ba:	e065      	b.n	8009a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ce:	4b59      	ldr	r3, [pc, #356]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099de:	ed97 6a03 	vldr	s12, [r7, #12]
 80099e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099fe:	e043      	b.n	8009a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a12:	4b48      	ldr	r3, [pc, #288]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a42:	e021      	b.n	8009a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a56:	4b37      	ldr	r3, [pc, #220]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a88:	4b2a      	ldr	r3, [pc, #168]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8c:	0a5b      	lsrs	r3, r3, #9
 8009a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aae:	ee17 2a90 	vmov	r2, s15
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009ab6:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	0c1b      	lsrs	r3, r3, #16
 8009abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac0:	ee07 3a90 	vmov	s15, r3
 8009ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009adc:	ee17 2a90 	vmov	r2, s15
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ae4:	4b13      	ldr	r3, [pc, #76]	; (8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	0e1b      	lsrs	r3, r3, #24
 8009aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b0a:	ee17 2a90 	vmov	r2, s15
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b12:	e008      	b.n	8009b26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	609a      	str	r2, [r3, #8]
}
 8009b26:	bf00      	nop
 8009b28:	3724      	adds	r7, #36	; 0x24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	58024400 	.word	0x58024400
 8009b38:	03d09000 	.word	0x03d09000
 8009b3c:	46000000 	.word	0x46000000
 8009b40:	4c742400 	.word	0x4c742400
 8009b44:	4a742400 	.word	0x4a742400
 8009b48:	4b189680 	.word	0x4b189680

08009b4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b089      	sub	sp, #36	; 0x24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b54:	4ba0      	ldr	r3, [pc, #640]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009b5e:	4b9e      	ldr	r3, [pc, #632]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b62:	091b      	lsrs	r3, r3, #4
 8009b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b6a:	4b9b      	ldr	r3, [pc, #620]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b74:	4b98      	ldr	r3, [pc, #608]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b78:	08db      	lsrs	r3, r3, #3
 8009b7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	fb02 f303 	mul.w	r3, r2, r3
 8009b84:	ee07 3a90 	vmov	s15, r3
 8009b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 8111 	beq.w	8009dba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	f000 8083 	beq.w	8009ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	f200 80a1 	bhi.w	8009cea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d056      	beq.n	8009c62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009bb4:	e099      	b.n	8009cea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb6:	4b88      	ldr	r3, [pc, #544]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0320 	and.w	r3, r3, #32
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d02d      	beq.n	8009c1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bc2:	4b85      	ldr	r3, [pc, #532]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	08db      	lsrs	r3, r3, #3
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	4a83      	ldr	r2, [pc, #524]	; (8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009bce:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	ee07 3a90 	vmov	s15, r3
 8009be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bec:	4b7a      	ldr	r3, [pc, #488]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf4:	ee07 3a90 	vmov	s15, r3
 8009bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009de0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c18:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c1c:	e087      	b.n	8009d2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	ee07 3a90 	vmov	s15, r3
 8009c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009de4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c30:	4b69      	ldr	r3, [pc, #420]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c38:	ee07 3a90 	vmov	s15, r3
 8009c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009de0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c60:	e065      	b.n	8009d2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009de8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c74:	4b58      	ldr	r3, [pc, #352]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7c:	ee07 3a90 	vmov	s15, r3
 8009c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009de0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ca4:	e043      	b.n	8009d2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	ee07 3a90 	vmov	s15, r3
 8009cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009dec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb8:	4b47      	ldr	r3, [pc, #284]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc0:	ee07 3a90 	vmov	s15, r3
 8009cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ccc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009de0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ce8:	e021      	b.n	8009d2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	ee07 3a90 	vmov	s15, r3
 8009cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009de4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfc:	4b36      	ldr	r3, [pc, #216]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009de0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009d2e:	4b2a      	ldr	r3, [pc, #168]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d32:	0a5b      	lsrs	r3, r3, #9
 8009d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d38:	ee07 3a90 	vmov	s15, r3
 8009d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d54:	ee17 2a90 	vmov	r2, s15
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009d5c:	4b1e      	ldr	r3, [pc, #120]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d60:	0c1b      	lsrs	r3, r3, #16
 8009d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d82:	ee17 2a90 	vmov	r2, s15
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009d8a:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	0e1b      	lsrs	r3, r3, #24
 8009d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d94:	ee07 3a90 	vmov	s15, r3
 8009d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db0:	ee17 2a90 	vmov	r2, s15
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009db8:	e008      	b.n	8009dcc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	3724      	adds	r7, #36	; 0x24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	03d09000 	.word	0x03d09000
 8009de0:	46000000 	.word	0x46000000
 8009de4:	4c742400 	.word	0x4c742400
 8009de8:	4a742400 	.word	0x4a742400
 8009dec:	4b189680 	.word	0x4b189680

08009df0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dfe:	4b53      	ldr	r3, [pc, #332]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	f003 0303 	and.w	r3, r3, #3
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d101      	bne.n	8009e0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e099      	b.n	8009f42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e0e:	4b4f      	ldr	r3, [pc, #316]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a4e      	ldr	r2, [pc, #312]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e1a:	f7f7 fd59 	bl	80018d0 <HAL_GetTick>
 8009e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e20:	e008      	b.n	8009e34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e22:	f7f7 fd55 	bl	80018d0 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d901      	bls.n	8009e34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e086      	b.n	8009f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e34:	4b45      	ldr	r3, [pc, #276]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1f0      	bne.n	8009e22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e40:	4b42      	ldr	r3, [pc, #264]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	031b      	lsls	r3, r3, #12
 8009e4e:	493f      	ldr	r1, [pc, #252]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	628b      	str	r3, [r1, #40]	; 0x28
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	025b      	lsls	r3, r3, #9
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	041b      	lsls	r3, r3, #16
 8009e72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e76:	431a      	orrs	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	061b      	lsls	r3, r3, #24
 8009e80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e84:	4931      	ldr	r1, [pc, #196]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e8a:	4b30      	ldr	r3, [pc, #192]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	492d      	ldr	r1, [pc, #180]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e9c:	4b2b      	ldr	r3, [pc, #172]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	f023 0220 	bic.w	r2, r3, #32
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	4928      	ldr	r1, [pc, #160]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009eae:	4b27      	ldr	r3, [pc, #156]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb2:	4a26      	ldr	r2, [pc, #152]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009eb4:	f023 0310 	bic.w	r3, r3, #16
 8009eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009eba:	4b24      	ldr	r3, [pc, #144]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ebe:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <RCCEx_PLL2_Config+0x160>)
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	69d2      	ldr	r2, [r2, #28]
 8009ec6:	00d2      	lsls	r2, r2, #3
 8009ec8:	4920      	ldr	r1, [pc, #128]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ece:	4b1f      	ldr	r3, [pc, #124]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	4a1e      	ldr	r2, [pc, #120]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009ed4:	f043 0310 	orr.w	r3, r3, #16
 8009ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d106      	bne.n	8009eee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ee0:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a19      	ldr	r2, [pc, #100]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009ee6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eec:	e00f      	b.n	8009f0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d106      	bne.n	8009f02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ef4:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	4a14      	ldr	r2, [pc, #80]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009efe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f00:	e005      	b.n	8009f0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f06:	4a11      	ldr	r2, [pc, #68]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f0e:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a0e      	ldr	r2, [pc, #56]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f1a:	f7f7 fcd9 	bl	80018d0 <HAL_GetTick>
 8009f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f20:	e008      	b.n	8009f34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f22:	f7f7 fcd5 	bl	80018d0 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d901      	bls.n	8009f34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e006      	b.n	8009f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f34:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <RCCEx_PLL2_Config+0x15c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0f0      	beq.n	8009f22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	58024400 	.word	0x58024400
 8009f50:	ffff0007 	.word	0xffff0007

08009f54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f62:	4b53      	ldr	r3, [pc, #332]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d101      	bne.n	8009f72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e099      	b.n	800a0a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f72:	4b4f      	ldr	r3, [pc, #316]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a4e      	ldr	r2, [pc, #312]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f7e:	f7f7 fca7 	bl	80018d0 <HAL_GetTick>
 8009f82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f84:	e008      	b.n	8009f98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f86:	f7f7 fca3 	bl	80018d0 <HAL_GetTick>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d901      	bls.n	8009f98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e086      	b.n	800a0a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f98:	4b45      	ldr	r3, [pc, #276]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f0      	bne.n	8009f86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009fa4:	4b42      	ldr	r3, [pc, #264]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	051b      	lsls	r3, r3, #20
 8009fb2:	493f      	ldr	r1, [pc, #252]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	628b      	str	r3, [r1, #40]	; 0x28
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	025b      	lsls	r3, r3, #9
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	041b      	lsls	r3, r3, #16
 8009fd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	061b      	lsls	r3, r3, #24
 8009fe4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fe8:	4931      	ldr	r1, [pc, #196]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fee:	4b30      	ldr	r3, [pc, #192]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	492d      	ldr	r1, [pc, #180]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a000:	4b2b      	ldr	r3, [pc, #172]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	4928      	ldr	r1, [pc, #160]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a012:	4b27      	ldr	r3, [pc, #156]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4a26      	ldr	r2, [pc, #152]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a01c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a01e:	4b24      	ldr	r3, [pc, #144]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a022:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <RCCEx_PLL3_Config+0x160>)
 800a024:	4013      	ands	r3, r2
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	69d2      	ldr	r2, [r2, #28]
 800a02a:	00d2      	lsls	r2, r2, #3
 800a02c:	4920      	ldr	r1, [pc, #128]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a032:	4b1f      	ldr	r3, [pc, #124]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a036:	4a1e      	ldr	r2, [pc, #120]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a03c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d106      	bne.n	800a052 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a044:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	4a19      	ldr	r2, [pc, #100]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a04a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a04e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a050:	e00f      	b.n	800a072 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d106      	bne.n	800a066 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	4a14      	ldr	r2, [pc, #80]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a05e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a062:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a064:	e005      	b.n	800a072 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a066:	4b12      	ldr	r3, [pc, #72]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06a:	4a11      	ldr	r2, [pc, #68]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a06c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a070:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a072:	4b0f      	ldr	r3, [pc, #60]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a0e      	ldr	r2, [pc, #56]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a07e:	f7f7 fc27 	bl	80018d0 <HAL_GetTick>
 800a082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a084:	e008      	b.n	800a098 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a086:	f7f7 fc23 	bl	80018d0 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	2b02      	cmp	r3, #2
 800a092:	d901      	bls.n	800a098 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e006      	b.n	800a0a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a098:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <RCCEx_PLL3_Config+0x15c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0f0      	beq.n	800a086 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	58024400 	.word	0x58024400
 800a0b4:	ffff0007 	.word	0xffff0007

0800a0b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e0f1      	b.n	800a2ae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a78      	ldr	r2, [pc, #480]	; (800a2b8 <HAL_SPI_Init+0x200>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00f      	beq.n	800a0fa <HAL_SPI_Init+0x42>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a77      	ldr	r2, [pc, #476]	; (800a2bc <HAL_SPI_Init+0x204>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00a      	beq.n	800a0fa <HAL_SPI_Init+0x42>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a75      	ldr	r2, [pc, #468]	; (800a2c0 <HAL_SPI_Init+0x208>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d005      	beq.n	800a0fa <HAL_SPI_Init+0x42>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	2b0f      	cmp	r3, #15
 800a0f4:	d901      	bls.n	800a0fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e0d9      	b.n	800a2ae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f8e2 	bl	800a2c4 <SPI_GetPacketSize>
 800a100:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a6c      	ldr	r2, [pc, #432]	; (800a2b8 <HAL_SPI_Init+0x200>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d00c      	beq.n	800a126 <HAL_SPI_Init+0x6e>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a6a      	ldr	r2, [pc, #424]	; (800a2bc <HAL_SPI_Init+0x204>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d007      	beq.n	800a126 <HAL_SPI_Init+0x6e>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a69      	ldr	r2, [pc, #420]	; (800a2c0 <HAL_SPI_Init+0x208>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d002      	beq.n	800a126 <HAL_SPI_Init+0x6e>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2b08      	cmp	r3, #8
 800a124:	d811      	bhi.n	800a14a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a12a:	4a63      	ldr	r2, [pc, #396]	; (800a2b8 <HAL_SPI_Init+0x200>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d009      	beq.n	800a144 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a61      	ldr	r2, [pc, #388]	; (800a2bc <HAL_SPI_Init+0x204>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d004      	beq.n	800a144 <HAL_SPI_Init+0x8c>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a60      	ldr	r2, [pc, #384]	; (800a2c0 <HAL_SPI_Init+0x208>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d104      	bne.n	800a14e <HAL_SPI_Init+0x96>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b10      	cmp	r3, #16
 800a148:	d901      	bls.n	800a14e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e0af      	b.n	800a2ae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d106      	bne.n	800a168 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7f7 f964 	bl	8001430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f022 0201 	bic.w	r2, r2, #1
 800a17e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a18a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a194:	d119      	bne.n	800a1ca <HAL_SPI_Init+0x112>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a19e:	d103      	bne.n	800a1a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d008      	beq.n	800a1ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10c      	bne.n	800a1ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a1b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1b8:	d107      	bne.n	800a1ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	69da      	ldr	r2, [r3, #28]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1dc:	ea42 0103 	orr.w	r1, r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	431a      	orrs	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	431a      	orrs	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	431a      	orrs	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a22a:	ea42 0103 	orr.w	r1, r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d113      	bne.n	800a26a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a254:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a268:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0201 	bic.w	r2, r2, #1
 800a278:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40013000 	.word	0x40013000
 800a2bc:	40003800 	.word	0x40003800
 800a2c0:	40003c00 	.word	0x40003c00

0800a2c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d0:	095b      	lsrs	r3, r3, #5
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	3307      	adds	r3, #7
 800a2e2:	08db      	lsrs	r3, r3, #3
 800a2e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e049      	b.n	800a3a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d106      	bne.n	800a326 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7f7 f8eb 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2202      	movs	r2, #2
 800a32a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	3304      	adds	r3, #4
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f000 fa09 	bl	800a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e049      	b.n	800a44e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d106      	bne.n	800a3d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f841 	bl	800a456 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	f000 f9b2 	bl	800a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a45e:	bf00      	nop
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a486:	2302      	movs	r3, #2
 800a488:	e066      	b.n	800a558 <HAL_TIM_OC_ConfigChannel+0xec>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b14      	cmp	r3, #20
 800a496:	d857      	bhi.n	800a548 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a498:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49e:	bf00      	nop
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a549 	.word	0x0800a549
 800a4a8:	0800a549 	.word	0x0800a549
 800a4ac:	0800a549 	.word	0x0800a549
 800a4b0:	0800a503 	.word	0x0800a503
 800a4b4:	0800a549 	.word	0x0800a549
 800a4b8:	0800a549 	.word	0x0800a549
 800a4bc:	0800a549 	.word	0x0800a549
 800a4c0:	0800a511 	.word	0x0800a511
 800a4c4:	0800a549 	.word	0x0800a549
 800a4c8:	0800a549 	.word	0x0800a549
 800a4cc:	0800a549 	.word	0x0800a549
 800a4d0:	0800a51f 	.word	0x0800a51f
 800a4d4:	0800a549 	.word	0x0800a549
 800a4d8:	0800a549 	.word	0x0800a549
 800a4dc:	0800a549 	.word	0x0800a549
 800a4e0:	0800a52d 	.word	0x0800a52d
 800a4e4:	0800a549 	.word	0x0800a549
 800a4e8:	0800a549 	.word	0x0800a549
 800a4ec:	0800a549 	.word	0x0800a549
 800a4f0:	0800a53b 	.word	0x0800a53b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 f9c2 	bl	800a884 <TIM_OC1_SetConfig>
      break;
 800a500:	e025      	b.n	800a54e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fa4b 	bl	800a9a4 <TIM_OC2_SetConfig>
      break;
 800a50e:	e01e      	b.n	800a54e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68b9      	ldr	r1, [r7, #8]
 800a516:	4618      	mov	r0, r3
 800a518:	f000 face 	bl	800aab8 <TIM_OC3_SetConfig>
      break;
 800a51c:	e017      	b.n	800a54e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fb4f 	bl	800abc8 <TIM_OC4_SetConfig>
      break;
 800a52a:	e010      	b.n	800a54e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	4618      	mov	r0, r3
 800a534:	f000 fbb2 	bl	800ac9c <TIM_OC5_SetConfig>
      break;
 800a538:	e009      	b.n	800a54e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68b9      	ldr	r1, [r7, #8]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 fc0f 	bl	800ad64 <TIM_OC6_SetConfig>
      break;
 800a546:	e002      	b.n	800a54e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	75fb      	strb	r3, [r7, #23]
      break;
 800a54c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_TIM_ConfigClockSource+0x1c>
 800a578:	2302      	movs	r3, #2
 800a57a:	e0dc      	b.n	800a736 <HAL_TIM_ConfigClockSource+0x1d6>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	4b6a      	ldr	r3, [pc, #424]	; (800a740 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a598:	4013      	ands	r3, r2
 800a59a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a64      	ldr	r2, [pc, #400]	; (800a744 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f000 80a9 	beq.w	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5b8:	4a62      	ldr	r2, [pc, #392]	; (800a744 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	f200 80ae 	bhi.w	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a5c0:	4a61      	ldr	r2, [pc, #388]	; (800a748 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	f000 80a1 	beq.w	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5c8:	4a5f      	ldr	r2, [pc, #380]	; (800a748 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	f200 80a6 	bhi.w	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a5d0:	4a5e      	ldr	r2, [pc, #376]	; (800a74c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	f000 8099 	beq.w	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5d8:	4a5c      	ldr	r2, [pc, #368]	; (800a74c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	f200 809e 	bhi.w	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a5e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5e4:	f000 8091 	beq.w	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5ec:	f200 8096 	bhi.w	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a5f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5f4:	f000 8089 	beq.w	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5fc:	f200 808e 	bhi.w	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a604:	d03e      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x124>
 800a606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a60a:	f200 8087 	bhi.w	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a612:	f000 8086 	beq.w	800a722 <HAL_TIM_ConfigClockSource+0x1c2>
 800a616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a61a:	d87f      	bhi.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a61c:	2b70      	cmp	r3, #112	; 0x70
 800a61e:	d01a      	beq.n	800a656 <HAL_TIM_ConfigClockSource+0xf6>
 800a620:	2b70      	cmp	r3, #112	; 0x70
 800a622:	d87b      	bhi.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a624:	2b60      	cmp	r3, #96	; 0x60
 800a626:	d050      	beq.n	800a6ca <HAL_TIM_ConfigClockSource+0x16a>
 800a628:	2b60      	cmp	r3, #96	; 0x60
 800a62a:	d877      	bhi.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a62c:	2b50      	cmp	r3, #80	; 0x50
 800a62e:	d03c      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x14a>
 800a630:	2b50      	cmp	r3, #80	; 0x50
 800a632:	d873      	bhi.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a634:	2b40      	cmp	r3, #64	; 0x40
 800a636:	d058      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x18a>
 800a638:	2b40      	cmp	r3, #64	; 0x40
 800a63a:	d86f      	bhi.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a63c:	2b30      	cmp	r3, #48	; 0x30
 800a63e:	d064      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a640:	2b30      	cmp	r3, #48	; 0x30
 800a642:	d86b      	bhi.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a644:	2b20      	cmp	r3, #32
 800a646:	d060      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a648:	2b20      	cmp	r3, #32
 800a64a:	d867      	bhi.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d05c      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a650:	2b10      	cmp	r3, #16
 800a652:	d05a      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x1aa>
 800a654:	e062      	b.n	800a71c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	6899      	ldr	r1, [r3, #8]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f000 fc61 	bl	800af2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	609a      	str	r2, [r3, #8]
      break;
 800a682:	e04f      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	6899      	ldr	r1, [r3, #8]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f000 fc4a 	bl	800af2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6a6:	609a      	str	r2, [r3, #8]
      break;
 800a6a8:	e03c      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6859      	ldr	r1, [r3, #4]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f000 fbba 	bl	800ae30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2150      	movs	r1, #80	; 0x50
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 fc14 	bl	800aef0 <TIM_ITRx_SetConfig>
      break;
 800a6c8:	e02c      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6859      	ldr	r1, [r3, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f000 fbd9 	bl	800ae8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2160      	movs	r1, #96	; 0x60
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fc04 	bl	800aef0 <TIM_ITRx_SetConfig>
      break;
 800a6e8:	e01c      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	6859      	ldr	r1, [r3, #4]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f000 fb9a 	bl	800ae30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2140      	movs	r1, #64	; 0x40
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fbf4 	bl	800aef0 <TIM_ITRx_SetConfig>
      break;
 800a708:	e00c      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4619      	mov	r1, r3
 800a714:	4610      	mov	r0, r2
 800a716:	f000 fbeb 	bl	800aef0 <TIM_ITRx_SetConfig>
      break;
 800a71a:	e003      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	73fb      	strb	r3, [r7, #15]
      break;
 800a720:	e000      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a734:	7bfb      	ldrb	r3, [r7, #15]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	ffceff88 	.word	0xffceff88
 800a744:	00100040 	.word	0x00100040
 800a748:	00100030 	.word	0x00100030
 800a74c:	00100020 	.word	0x00100020

0800a750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a40      	ldr	r2, [pc, #256]	; (800a864 <TIM_Base_SetConfig+0x114>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d013      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76e:	d00f      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a3d      	ldr	r2, [pc, #244]	; (800a868 <TIM_Base_SetConfig+0x118>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00b      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a3c      	ldr	r2, [pc, #240]	; (800a86c <TIM_Base_SetConfig+0x11c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d007      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a3b      	ldr	r2, [pc, #236]	; (800a870 <TIM_Base_SetConfig+0x120>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d003      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a3a      	ldr	r2, [pc, #232]	; (800a874 <TIM_Base_SetConfig+0x124>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d108      	bne.n	800a7a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a2f      	ldr	r2, [pc, #188]	; (800a864 <TIM_Base_SetConfig+0x114>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d01f      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b0:	d01b      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a2c      	ldr	r2, [pc, #176]	; (800a868 <TIM_Base_SetConfig+0x118>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d017      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a2b      	ldr	r2, [pc, #172]	; (800a86c <TIM_Base_SetConfig+0x11c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d013      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a2a      	ldr	r2, [pc, #168]	; (800a870 <TIM_Base_SetConfig+0x120>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00f      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a29      	ldr	r2, [pc, #164]	; (800a874 <TIM_Base_SetConfig+0x124>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d00b      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a28      	ldr	r2, [pc, #160]	; (800a878 <TIM_Base_SetConfig+0x128>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d007      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a27      	ldr	r2, [pc, #156]	; (800a87c <TIM_Base_SetConfig+0x12c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d003      	beq.n	800a7ea <TIM_Base_SetConfig+0x9a>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a26      	ldr	r2, [pc, #152]	; (800a880 <TIM_Base_SetConfig+0x130>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d108      	bne.n	800a7fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a10      	ldr	r2, [pc, #64]	; (800a864 <TIM_Base_SetConfig+0x114>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d00f      	beq.n	800a848 <TIM_Base_SetConfig+0xf8>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a12      	ldr	r2, [pc, #72]	; (800a874 <TIM_Base_SetConfig+0x124>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d00b      	beq.n	800a848 <TIM_Base_SetConfig+0xf8>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a11      	ldr	r2, [pc, #68]	; (800a878 <TIM_Base_SetConfig+0x128>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d007      	beq.n	800a848 <TIM_Base_SetConfig+0xf8>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a10      	ldr	r2, [pc, #64]	; (800a87c <TIM_Base_SetConfig+0x12c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d003      	beq.n	800a848 <TIM_Base_SetConfig+0xf8>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a0f      	ldr	r2, [pc, #60]	; (800a880 <TIM_Base_SetConfig+0x130>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d103      	bne.n	800a850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	691a      	ldr	r2, [r3, #16]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	615a      	str	r2, [r3, #20]
}
 800a856:	bf00      	nop
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	40010000 	.word	0x40010000
 800a868:	40000400 	.word	0x40000400
 800a86c:	40000800 	.word	0x40000800
 800a870:	40000c00 	.word	0x40000c00
 800a874:	40010400 	.word	0x40010400
 800a878:	40014000 	.word	0x40014000
 800a87c:	40014400 	.word	0x40014400
 800a880:	40014800 	.word	0x40014800

0800a884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	f023 0201 	bic.w	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4b37      	ldr	r3, [pc, #220]	; (800a98c <TIM_OC1_SetConfig+0x108>)
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f023 0302 	bic.w	r3, r3, #2
 800a8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a2d      	ldr	r2, [pc, #180]	; (800a990 <TIM_OC1_SetConfig+0x10c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d00f      	beq.n	800a900 <TIM_OC1_SetConfig+0x7c>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a2c      	ldr	r2, [pc, #176]	; (800a994 <TIM_OC1_SetConfig+0x110>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d00b      	beq.n	800a900 <TIM_OC1_SetConfig+0x7c>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a2b      	ldr	r2, [pc, #172]	; (800a998 <TIM_OC1_SetConfig+0x114>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d007      	beq.n	800a900 <TIM_OC1_SetConfig+0x7c>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a2a      	ldr	r2, [pc, #168]	; (800a99c <TIM_OC1_SetConfig+0x118>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d003      	beq.n	800a900 <TIM_OC1_SetConfig+0x7c>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a29      	ldr	r2, [pc, #164]	; (800a9a0 <TIM_OC1_SetConfig+0x11c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d10c      	bne.n	800a91a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f023 0308 	bic.w	r3, r3, #8
 800a906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f023 0304 	bic.w	r3, r3, #4
 800a918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a1c      	ldr	r2, [pc, #112]	; (800a990 <TIM_OC1_SetConfig+0x10c>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d00f      	beq.n	800a942 <TIM_OC1_SetConfig+0xbe>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a1b      	ldr	r2, [pc, #108]	; (800a994 <TIM_OC1_SetConfig+0x110>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d00b      	beq.n	800a942 <TIM_OC1_SetConfig+0xbe>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a1a      	ldr	r2, [pc, #104]	; (800a998 <TIM_OC1_SetConfig+0x114>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d007      	beq.n	800a942 <TIM_OC1_SetConfig+0xbe>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a19      	ldr	r2, [pc, #100]	; (800a99c <TIM_OC1_SetConfig+0x118>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d003      	beq.n	800a942 <TIM_OC1_SetConfig+0xbe>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a18      	ldr	r2, [pc, #96]	; (800a9a0 <TIM_OC1_SetConfig+0x11c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d111      	bne.n	800a966 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	4313      	orrs	r3, r2
 800a964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	621a      	str	r2, [r3, #32]
}
 800a980:	bf00      	nop
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	fffeff8f 	.word	0xfffeff8f
 800a990:	40010000 	.word	0x40010000
 800a994:	40010400 	.word	0x40010400
 800a998:	40014000 	.word	0x40014000
 800a99c:	40014400 	.word	0x40014400
 800a9a0:	40014800 	.word	0x40014800

0800a9a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	f023 0210 	bic.w	r2, r3, #16
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4b34      	ldr	r3, [pc, #208]	; (800aaa0 <TIM_OC2_SetConfig+0xfc>)
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	021b      	lsls	r3, r3, #8
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f023 0320 	bic.w	r3, r3, #32
 800a9ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a29      	ldr	r2, [pc, #164]	; (800aaa4 <TIM_OC2_SetConfig+0x100>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d003      	beq.n	800aa0c <TIM_OC2_SetConfig+0x68>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a28      	ldr	r2, [pc, #160]	; (800aaa8 <TIM_OC2_SetConfig+0x104>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d10d      	bne.n	800aa28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	011b      	lsls	r3, r3, #4
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a1e      	ldr	r2, [pc, #120]	; (800aaa4 <TIM_OC2_SetConfig+0x100>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d00f      	beq.n	800aa50 <TIM_OC2_SetConfig+0xac>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a1d      	ldr	r2, [pc, #116]	; (800aaa8 <TIM_OC2_SetConfig+0x104>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d00b      	beq.n	800aa50 <TIM_OC2_SetConfig+0xac>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a1c      	ldr	r2, [pc, #112]	; (800aaac <TIM_OC2_SetConfig+0x108>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d007      	beq.n	800aa50 <TIM_OC2_SetConfig+0xac>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a1b      	ldr	r2, [pc, #108]	; (800aab0 <TIM_OC2_SetConfig+0x10c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d003      	beq.n	800aa50 <TIM_OC2_SetConfig+0xac>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a1a      	ldr	r2, [pc, #104]	; (800aab4 <TIM_OC2_SetConfig+0x110>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d113      	bne.n	800aa78 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	feff8fff 	.word	0xfeff8fff
 800aaa4:	40010000 	.word	0x40010000
 800aaa8:	40010400 	.word	0x40010400
 800aaac:	40014000 	.word	0x40014000
 800aab0:	40014400 	.word	0x40014400
 800aab4:	40014800 	.word	0x40014800

0800aab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4b33      	ldr	r3, [pc, #204]	; (800abb0 <TIM_OC3_SetConfig+0xf8>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	021b      	lsls	r3, r3, #8
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a28      	ldr	r2, [pc, #160]	; (800abb4 <TIM_OC3_SetConfig+0xfc>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d003      	beq.n	800ab1e <TIM_OC3_SetConfig+0x66>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a27      	ldr	r2, [pc, #156]	; (800abb8 <TIM_OC3_SetConfig+0x100>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d10d      	bne.n	800ab3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	021b      	lsls	r3, r3, #8
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <TIM_OC3_SetConfig+0xfc>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00f      	beq.n	800ab62 <TIM_OC3_SetConfig+0xaa>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a1c      	ldr	r2, [pc, #112]	; (800abb8 <TIM_OC3_SetConfig+0x100>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00b      	beq.n	800ab62 <TIM_OC3_SetConfig+0xaa>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a1b      	ldr	r2, [pc, #108]	; (800abbc <TIM_OC3_SetConfig+0x104>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d007      	beq.n	800ab62 <TIM_OC3_SetConfig+0xaa>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a1a      	ldr	r2, [pc, #104]	; (800abc0 <TIM_OC3_SetConfig+0x108>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d003      	beq.n	800ab62 <TIM_OC3_SetConfig+0xaa>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a19      	ldr	r2, [pc, #100]	; (800abc4 <TIM_OC3_SetConfig+0x10c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d113      	bne.n	800ab8a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	011b      	lsls	r3, r3, #4
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	621a      	str	r2, [r3, #32]
}
 800aba4:	bf00      	nop
 800aba6:	371c      	adds	r7, #28
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	fffeff8f 	.word	0xfffeff8f
 800abb4:	40010000 	.word	0x40010000
 800abb8:	40010400 	.word	0x40010400
 800abbc:	40014000 	.word	0x40014000
 800abc0:	40014400 	.word	0x40014400
 800abc4:	40014800 	.word	0x40014800

0800abc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4b24      	ldr	r3, [pc, #144]	; (800ac84 <TIM_OC4_SetConfig+0xbc>)
 800abf4:	4013      	ands	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	031b      	lsls	r3, r3, #12
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a19      	ldr	r2, [pc, #100]	; (800ac88 <TIM_OC4_SetConfig+0xc0>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00f      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a18      	ldr	r2, [pc, #96]	; (800ac8c <TIM_OC4_SetConfig+0xc4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00b      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a17      	ldr	r2, [pc, #92]	; (800ac90 <TIM_OC4_SetConfig+0xc8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d007      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a16      	ldr	r2, [pc, #88]	; (800ac94 <TIM_OC4_SetConfig+0xcc>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d003      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a15      	ldr	r2, [pc, #84]	; (800ac98 <TIM_OC4_SetConfig+0xd0>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d109      	bne.n	800ac5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	019b      	lsls	r3, r3, #6
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	621a      	str	r2, [r3, #32]
}
 800ac76:	bf00      	nop
 800ac78:	371c      	adds	r7, #28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	feff8fff 	.word	0xfeff8fff
 800ac88:	40010000 	.word	0x40010000
 800ac8c:	40010400 	.word	0x40010400
 800ac90:	40014000 	.word	0x40014000
 800ac94:	40014400 	.word	0x40014400
 800ac98:	40014800 	.word	0x40014800

0800ac9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <TIM_OC5_SetConfig+0xb0>)
 800acc8:	4013      	ands	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	041b      	lsls	r3, r3, #16
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a18      	ldr	r2, [pc, #96]	; (800ad50 <TIM_OC5_SetConfig+0xb4>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d00f      	beq.n	800ad12 <TIM_OC5_SetConfig+0x76>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a17      	ldr	r2, [pc, #92]	; (800ad54 <TIM_OC5_SetConfig+0xb8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00b      	beq.n	800ad12 <TIM_OC5_SetConfig+0x76>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a16      	ldr	r2, [pc, #88]	; (800ad58 <TIM_OC5_SetConfig+0xbc>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d007      	beq.n	800ad12 <TIM_OC5_SetConfig+0x76>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a15      	ldr	r2, [pc, #84]	; (800ad5c <TIM_OC5_SetConfig+0xc0>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d003      	beq.n	800ad12 <TIM_OC5_SetConfig+0x76>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a14      	ldr	r2, [pc, #80]	; (800ad60 <TIM_OC5_SetConfig+0xc4>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d109      	bne.n	800ad26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	021b      	lsls	r3, r3, #8
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	621a      	str	r2, [r3, #32]
}
 800ad40:	bf00      	nop
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	fffeff8f 	.word	0xfffeff8f
 800ad50:	40010000 	.word	0x40010000
 800ad54:	40010400 	.word	0x40010400
 800ad58:	40014000 	.word	0x40014000
 800ad5c:	40014400 	.word	0x40014400
 800ad60:	40014800 	.word	0x40014800

0800ad64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4b22      	ldr	r3, [pc, #136]	; (800ae18 <TIM_OC6_SetConfig+0xb4>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	021b      	lsls	r3, r3, #8
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ada6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	051b      	lsls	r3, r3, #20
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a19      	ldr	r2, [pc, #100]	; (800ae1c <TIM_OC6_SetConfig+0xb8>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00f      	beq.n	800addc <TIM_OC6_SetConfig+0x78>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a18      	ldr	r2, [pc, #96]	; (800ae20 <TIM_OC6_SetConfig+0xbc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d00b      	beq.n	800addc <TIM_OC6_SetConfig+0x78>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a17      	ldr	r2, [pc, #92]	; (800ae24 <TIM_OC6_SetConfig+0xc0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d007      	beq.n	800addc <TIM_OC6_SetConfig+0x78>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a16      	ldr	r2, [pc, #88]	; (800ae28 <TIM_OC6_SetConfig+0xc4>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d003      	beq.n	800addc <TIM_OC6_SetConfig+0x78>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <TIM_OC6_SetConfig+0xc8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d109      	bne.n	800adf0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ade2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	029b      	lsls	r3, r3, #10
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4313      	orrs	r3, r2
 800adee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	621a      	str	r2, [r3, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	feff8fff 	.word	0xfeff8fff
 800ae1c:	40010000 	.word	0x40010000
 800ae20:	40010400 	.word	0x40010400
 800ae24:	40014000 	.word	0x40014000
 800ae28:	40014400 	.word	0x40014400
 800ae2c:	40014800 	.word	0x40014800

0800ae30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	f023 0201 	bic.w	r2, r3, #1
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	011b      	lsls	r3, r3, #4
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f023 030a 	bic.w	r3, r3, #10
 800ae6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	621a      	str	r2, [r3, #32]
}
 800ae82:	bf00      	nop
 800ae84:	371c      	adds	r7, #28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b087      	sub	sp, #28
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	f023 0210 	bic.w	r2, r3, #16
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aeb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	031b      	lsls	r3, r3, #12
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aeca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	011b      	lsls	r3, r3, #4
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	621a      	str	r2, [r3, #32]
}
 800aee2:	bf00      	nop
 800aee4:	371c      	adds	r7, #28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <TIM_ITRx_SetConfig+0x38>)
 800af04:	4013      	ands	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	f043 0307 	orr.w	r3, r3, #7
 800af12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	609a      	str	r2, [r3, #8]
}
 800af1a:	bf00      	nop
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	ffcfff8f 	.word	0xffcfff8f

0800af2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	021a      	lsls	r2, r3, #8
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	431a      	orrs	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	4313      	orrs	r3, r2
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	4313      	orrs	r3, r2
 800af58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	609a      	str	r2, [r3, #8]
}
 800af60:	bf00      	nop
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d101      	bne.n	800af84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af80:	2302      	movs	r3, #2
 800af82:	e06d      	b.n	800b060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2202      	movs	r2, #2
 800af90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a30      	ldr	r2, [pc, #192]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d004      	beq.n	800afb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a2f      	ldr	r2, [pc, #188]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d108      	bne.n	800afca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a20      	ldr	r2, [pc, #128]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d022      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff6:	d01d      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a1d      	ldr	r2, [pc, #116]	; (800b074 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d018      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a1c      	ldr	r2, [pc, #112]	; (800b078 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d013      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a1a      	ldr	r2, [pc, #104]	; (800b07c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d00e      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a15      	ldr	r2, [pc, #84]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d009      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a16      	ldr	r2, [pc, #88]	; (800b080 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d004      	beq.n	800b034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a15      	ldr	r2, [pc, #84]	; (800b084 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d10c      	bne.n	800b04e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b03a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	4313      	orrs	r3, r2
 800b044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	40010000 	.word	0x40010000
 800b070:	40010400 	.word	0x40010400
 800b074:	40000400 	.word	0x40000400
 800b078:	40000800 	.word	0x40000800
 800b07c:	40000c00 	.word	0x40000c00
 800b080:	40001800 	.word	0x40001800
 800b084:	40014000 	.word	0x40014000

0800b088 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e065      	b.n	800b170 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10a:	4313      	orrs	r3, r2
 800b10c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	041b      	lsls	r3, r3, #16
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a16      	ldr	r2, [pc, #88]	; (800b17c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d004      	beq.n	800b132 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a14      	ldr	r2, [pc, #80]	; (800b180 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d115      	bne.n	800b15e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	051b      	lsls	r3, r3, #20
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	69db      	ldr	r3, [r3, #28]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	40010000 	.word	0x40010000
 800b180:	40010400 	.word	0x40010400

0800b184 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b184:	b084      	sub	sp, #16
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	f107 001c 	add.w	r0, r7, #28
 800b192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d120      	bne.n	800b1de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68da      	ldr	r2, [r3, #12]
 800b1ac:	4b2a      	ldr	r3, [pc, #168]	; (800b258 <USB_CoreInit+0xd4>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d105      	bne.n	800b1d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f001 fc04 	bl	800c9e0 <USB_CoreReset>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73fb      	strb	r3, [r7, #15]
 800b1dc:	e01a      	b.n	800b214 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 fbf8 	bl	800c9e0 <USB_CoreReset>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d106      	bne.n	800b208 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	639a      	str	r2, [r3, #56]	; 0x38
 800b206:	e005      	b.n	800b214 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	2b01      	cmp	r3, #1
 800b218:	d116      	bne.n	800b248 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b228:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <USB_CoreInit+0xd8>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f043 0206 	orr.w	r2, r3, #6
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f043 0220 	orr.w	r2, r3, #32
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b248:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b254:	b004      	add	sp, #16
 800b256:	4770      	bx	lr
 800b258:	ffbdffbf 	.word	0xffbdffbf
 800b25c:	03ee0000 	.word	0x03ee0000

0800b260 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b260:	b480      	push	{r7}
 800b262:	b087      	sub	sp, #28
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d165      	bne.n	800b340 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4a41      	ldr	r2, [pc, #260]	; (800b37c <USB_SetTurnaroundTime+0x11c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d906      	bls.n	800b28a <USB_SetTurnaroundTime+0x2a>
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	4a40      	ldr	r2, [pc, #256]	; (800b380 <USB_SetTurnaroundTime+0x120>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d202      	bcs.n	800b28a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b284:	230f      	movs	r3, #15
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	e062      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	4a3c      	ldr	r2, [pc, #240]	; (800b380 <USB_SetTurnaroundTime+0x120>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d306      	bcc.n	800b2a0 <USB_SetTurnaroundTime+0x40>
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	4a3b      	ldr	r2, [pc, #236]	; (800b384 <USB_SetTurnaroundTime+0x124>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d202      	bcs.n	800b2a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b29a:	230e      	movs	r3, #14
 800b29c:	617b      	str	r3, [r7, #20]
 800b29e:	e057      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4a38      	ldr	r2, [pc, #224]	; (800b384 <USB_SetTurnaroundTime+0x124>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d306      	bcc.n	800b2b6 <USB_SetTurnaroundTime+0x56>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	4a37      	ldr	r2, [pc, #220]	; (800b388 <USB_SetTurnaroundTime+0x128>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d202      	bcs.n	800b2b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b2b0:	230d      	movs	r3, #13
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	e04c      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4a33      	ldr	r2, [pc, #204]	; (800b388 <USB_SetTurnaroundTime+0x128>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d306      	bcc.n	800b2cc <USB_SetTurnaroundTime+0x6c>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4a32      	ldr	r2, [pc, #200]	; (800b38c <USB_SetTurnaroundTime+0x12c>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d802      	bhi.n	800b2cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	e041      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4a2f      	ldr	r2, [pc, #188]	; (800b38c <USB_SetTurnaroundTime+0x12c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d906      	bls.n	800b2e2 <USB_SetTurnaroundTime+0x82>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4a2e      	ldr	r2, [pc, #184]	; (800b390 <USB_SetTurnaroundTime+0x130>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d802      	bhi.n	800b2e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b2dc:	230b      	movs	r3, #11
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	e036      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	4a2a      	ldr	r2, [pc, #168]	; (800b390 <USB_SetTurnaroundTime+0x130>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d906      	bls.n	800b2f8 <USB_SetTurnaroundTime+0x98>
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	4a29      	ldr	r2, [pc, #164]	; (800b394 <USB_SetTurnaroundTime+0x134>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d802      	bhi.n	800b2f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b2f2:	230a      	movs	r3, #10
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e02b      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4a26      	ldr	r2, [pc, #152]	; (800b394 <USB_SetTurnaroundTime+0x134>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d906      	bls.n	800b30e <USB_SetTurnaroundTime+0xae>
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	4a25      	ldr	r2, [pc, #148]	; (800b398 <USB_SetTurnaroundTime+0x138>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d202      	bcs.n	800b30e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b308:	2309      	movs	r3, #9
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	e020      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	4a21      	ldr	r2, [pc, #132]	; (800b398 <USB_SetTurnaroundTime+0x138>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d306      	bcc.n	800b324 <USB_SetTurnaroundTime+0xc4>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	4a20      	ldr	r2, [pc, #128]	; (800b39c <USB_SetTurnaroundTime+0x13c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d802      	bhi.n	800b324 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b31e:	2308      	movs	r3, #8
 800b320:	617b      	str	r3, [r7, #20]
 800b322:	e015      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4a1d      	ldr	r2, [pc, #116]	; (800b39c <USB_SetTurnaroundTime+0x13c>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d906      	bls.n	800b33a <USB_SetTurnaroundTime+0xda>
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	4a1c      	ldr	r2, [pc, #112]	; (800b3a0 <USB_SetTurnaroundTime+0x140>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d202      	bcs.n	800b33a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b334:	2307      	movs	r3, #7
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e00a      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b33a:	2306      	movs	r3, #6
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	e007      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b340:	79fb      	ldrb	r3, [r7, #7]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d102      	bne.n	800b34c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b346:	2309      	movs	r3, #9
 800b348:	617b      	str	r3, [r7, #20]
 800b34a:	e001      	b.n	800b350 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b34c:	2309      	movs	r3, #9
 800b34e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	029b      	lsls	r3, r3, #10
 800b364:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b368:	431a      	orrs	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	371c      	adds	r7, #28
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	00d8acbf 	.word	0x00d8acbf
 800b380:	00e4e1c0 	.word	0x00e4e1c0
 800b384:	00f42400 	.word	0x00f42400
 800b388:	01067380 	.word	0x01067380
 800b38c:	011a499f 	.word	0x011a499f
 800b390:	01312cff 	.word	0x01312cff
 800b394:	014ca43f 	.word	0x014ca43f
 800b398:	016e3600 	.word	0x016e3600
 800b39c:	01a6ab1f 	.word	0x01a6ab1f
 800b3a0:	01e84800 	.word	0x01e84800

0800b3a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f043 0201 	orr.w	r2, r3, #1
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f023 0201 	bic.w	r2, r3, #1
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b404:	78fb      	ldrb	r3, [r7, #3]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d115      	bne.n	800b436 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b416:	2001      	movs	r0, #1
 800b418:	f7f6 fa66 	bl	80018e8 <HAL_Delay>
      ms++;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 fa4b 	bl	800c8be <USB_GetMode>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d01e      	beq.n	800b46c <USB_SetCurrentMode+0x84>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b31      	cmp	r3, #49	; 0x31
 800b432:	d9f0      	bls.n	800b416 <USB_SetCurrentMode+0x2e>
 800b434:	e01a      	b.n	800b46c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b436:	78fb      	ldrb	r3, [r7, #3]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d115      	bne.n	800b468 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b448:	2001      	movs	r0, #1
 800b44a:	f7f6 fa4d 	bl	80018e8 <HAL_Delay>
      ms++;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3301      	adds	r3, #1
 800b452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fa32 	bl	800c8be <USB_GetMode>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d005      	beq.n	800b46c <USB_SetCurrentMode+0x84>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b31      	cmp	r3, #49	; 0x31
 800b464:	d9f0      	bls.n	800b448 <USB_SetCurrentMode+0x60>
 800b466:	e001      	b.n	800b46c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e005      	b.n	800b478 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b32      	cmp	r3, #50	; 0x32
 800b470:	d101      	bne.n	800b476 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e000      	b.n	800b478 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b480:	b084      	sub	sp, #16
 800b482:	b580      	push	{r7, lr}
 800b484:	b086      	sub	sp, #24
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b48e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b49a:	2300      	movs	r3, #0
 800b49c:	613b      	str	r3, [r7, #16]
 800b49e:	e009      	b.n	800b4b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	3340      	adds	r3, #64	; 0x40
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	613b      	str	r3, [r7, #16]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	2b0e      	cmp	r3, #14
 800b4b8:	d9f2      	bls.n	800b4a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d11c      	bne.n	800b4fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4ce:	f043 0302 	orr.w	r3, r3, #2
 800b4d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	e005      	b.n	800b506 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b50c:	461a      	mov	r2, r3
 800b50e:	2300      	movs	r3, #0
 800b510:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b518:	4619      	mov	r1, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b520:	461a      	mov	r2, r3
 800b522:	680b      	ldr	r3, [r1, #0]
 800b524:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d10c      	bne.n	800b546 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b532:	2100      	movs	r1, #0
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f965 	bl	800b804 <USB_SetDevSpeed>
 800b53a:	e008      	b.n	800b54e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b53c:	2101      	movs	r1, #1
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f960 	bl	800b804 <USB_SetDevSpeed>
 800b544:	e003      	b.n	800b54e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b546:	2103      	movs	r1, #3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f95b 	bl	800b804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b54e:	2110      	movs	r1, #16
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f8f3 	bl	800b73c <USB_FlushTxFifo>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f91f 	bl	800b7a4 <USB_FlushRxFifo>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b576:	461a      	mov	r2, r3
 800b578:	2300      	movs	r3, #0
 800b57a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b582:	461a      	mov	r2, r3
 800b584:	2300      	movs	r3, #0
 800b586:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b58e:	461a      	mov	r2, r3
 800b590:	2300      	movs	r3, #0
 800b592:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b594:	2300      	movs	r3, #0
 800b596:	613b      	str	r3, [r7, #16]
 800b598:	e043      	b.n	800b622 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5b0:	d118      	bne.n	800b5e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	e013      	b.n	800b5f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	015a      	lsls	r2, r3, #5
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	e008      	b.n	800b5f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b602:	461a      	mov	r2, r3
 800b604:	2300      	movs	r3, #0
 800b606:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b614:	461a      	mov	r2, r3
 800b616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b61a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	3301      	adds	r3, #1
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	429a      	cmp	r2, r3
 800b628:	d3b7      	bcc.n	800b59a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b62a:	2300      	movs	r3, #0
 800b62c:	613b      	str	r3, [r7, #16]
 800b62e:	e043      	b.n	800b6b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b646:	d118      	bne.n	800b67a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10a      	bne.n	800b664 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65a:	461a      	mov	r2, r3
 800b65c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	e013      	b.n	800b68c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	015a      	lsls	r2, r3, #5
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b670:	461a      	mov	r2, r3
 800b672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	e008      	b.n	800b68c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b686:	461a      	mov	r2, r3
 800b688:	2300      	movs	r3, #0
 800b68a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b698:	461a      	mov	r2, r3
 800b69a:	2300      	movs	r3, #0
 800b69c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	613b      	str	r3, [r7, #16]
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d3b7      	bcc.n	800b630 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b6e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d105      	bne.n	800b6f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	f043 0210 	orr.w	r2, r3, #16
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699a      	ldr	r2, [r3, #24]
 800b6f8:	4b0e      	ldr	r3, [pc, #56]	; (800b734 <USB_DevInit+0x2b4>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d005      	beq.n	800b712 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f043 0208 	orr.w	r2, r3, #8
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b714:	2b01      	cmp	r3, #1
 800b716:	d105      	bne.n	800b724 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	4b06      	ldr	r3, [pc, #24]	; (800b738 <USB_DevInit+0x2b8>)
 800b71e:	4313      	orrs	r3, r2
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b724:	7dfb      	ldrb	r3, [r7, #23]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b730:	b004      	add	sp, #16
 800b732:	4770      	bx	lr
 800b734:	803c3800 	.word	0x803c3800
 800b738:	40000004 	.word	0x40000004

0800b73c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	4a13      	ldr	r2, [pc, #76]	; (800b7a0 <USB_FlushTxFifo+0x64>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d901      	bls.n	800b75c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e01b      	b.n	800b794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	daf2      	bge.n	800b74a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b764:	2300      	movs	r3, #0
 800b766:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	019b      	lsls	r3, r3, #6
 800b76c:	f043 0220 	orr.w	r2, r3, #32
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4a08      	ldr	r2, [pc, #32]	; (800b7a0 <USB_FlushTxFifo+0x64>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d901      	bls.n	800b786 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b782:	2303      	movs	r3, #3
 800b784:	e006      	b.n	800b794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	f003 0320 	and.w	r3, r3, #32
 800b78e:	2b20      	cmp	r3, #32
 800b790:	d0f0      	beq.n	800b774 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	00030d40 	.word	0x00030d40

0800b7a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	4a11      	ldr	r2, [pc, #68]	; (800b800 <USB_FlushRxFifo+0x5c>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d901      	bls.n	800b7c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	e018      	b.n	800b7f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	daf2      	bge.n	800b7b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2210      	movs	r2, #16
 800b7d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	4a08      	ldr	r2, [pc, #32]	; (800b800 <USB_FlushRxFifo+0x5c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d901      	bls.n	800b7e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e006      	b.n	800b7f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	f003 0310 	and.w	r3, r3, #16
 800b7ee:	2b10      	cmp	r3, #16
 800b7f0:	d0f0      	beq.n	800b7d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr
 800b800:	00030d40 	.word	0x00030d40

0800b804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	78fb      	ldrb	r3, [r7, #3]
 800b81e:	68f9      	ldr	r1, [r7, #12]
 800b820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b824:	4313      	orrs	r3, r2
 800b826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3714      	adds	r7, #20
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b836:	b480      	push	{r7}
 800b838:	b087      	sub	sp, #28
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f003 0306 	and.w	r3, r3, #6
 800b84e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d102      	bne.n	800b85c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b856:	2300      	movs	r3, #0
 800b858:	75fb      	strb	r3, [r7, #23]
 800b85a:	e00a      	b.n	800b872 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d002      	beq.n	800b868 <USB_GetDevSpeed+0x32>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b06      	cmp	r3, #6
 800b866:	d102      	bne.n	800b86e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b868:	2302      	movs	r3, #2
 800b86a:	75fb      	strb	r3, [r7, #23]
 800b86c:	e001      	b.n	800b872 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b86e:	230f      	movs	r3, #15
 800b870:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b872:	7dfb      	ldrb	r3, [r7, #23]
}
 800b874:	4618      	mov	r0, r3
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d139      	bne.n	800b910 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a2:	69da      	ldr	r2, [r3, #28]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f003 030f 	and.w	r3, r3, #15
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	68f9      	ldr	r1, [r7, #12]
 800b8b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	015a      	lsls	r2, r3, #5
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d153      	bne.n	800b97c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	791b      	ldrb	r3, [r3, #4]
 800b8ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	059b      	lsls	r3, r3, #22
 800b8f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	0159      	lsls	r1, r3, #5
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	440b      	add	r3, r1
 800b902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b906:	4619      	mov	r1, r3
 800b908:	4b20      	ldr	r3, [pc, #128]	; (800b98c <USB_ActivateEndpoint+0x10c>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	600b      	str	r3, [r1, #0]
 800b90e:	e035      	b.n	800b97c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b916:	69da      	ldr	r2, [r3, #28]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	f003 030f 	and.w	r3, r3, #15
 800b920:	2101      	movs	r1, #1
 800b922:	fa01 f303 	lsl.w	r3, r1, r3
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	68f9      	ldr	r1, [r7, #12]
 800b92a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b92e:	4313      	orrs	r3, r2
 800b930:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d119      	bne.n	800b97c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	791b      	ldrb	r3, [r3, #4]
 800b962:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b964:	430b      	orrs	r3, r1
 800b966:	431a      	orrs	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	0159      	lsls	r1, r3, #5
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	440b      	add	r3, r1
 800b970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b974:	4619      	mov	r1, r3
 800b976:	4b05      	ldr	r3, [pc, #20]	; (800b98c <USB_ActivateEndpoint+0x10c>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	10008000 	.word	0x10008000

0800b990 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d161      	bne.n	800ba70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	015a      	lsls	r2, r3, #5
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9c2:	d11f      	bne.n	800ba04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	0151      	lsls	r1, r2, #5
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	440a      	add	r2, r1
 800b9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b9e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	0151      	lsls	r1, r2, #5
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	440a      	add	r2, r1
 800b9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	f003 030f 	and.w	r3, r3, #15
 800ba14:	2101      	movs	r1, #1
 800ba16:	fa01 f303 	lsl.w	r3, r1, r3
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	43db      	mvns	r3, r3
 800ba1e:	68f9      	ldr	r1, [r7, #12]
 800ba20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba24:	4013      	ands	r3, r2
 800ba26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2e:	69da      	ldr	r2, [r3, #28]
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	f003 030f 	and.w	r3, r3, #15
 800ba38:	2101      	movs	r1, #1
 800ba3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	43db      	mvns	r3, r3
 800ba42:	68f9      	ldr	r1, [r7, #12]
 800ba44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba48:	4013      	ands	r3, r2
 800ba4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	0159      	lsls	r1, r3, #5
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	440b      	add	r3, r1
 800ba62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba66:	4619      	mov	r1, r3
 800ba68:	4b35      	ldr	r3, [pc, #212]	; (800bb40 <USB_DeactivateEndpoint+0x1b0>)
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	600b      	str	r3, [r1, #0]
 800ba6e:	e060      	b.n	800bb32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba86:	d11f      	bne.n	800bac8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800baa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f003 030f 	and.w	r3, r3, #15
 800bad8:	2101      	movs	r1, #1
 800bada:	fa01 f303 	lsl.w	r3, r1, r3
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	43db      	mvns	r3, r3
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bae8:	4013      	ands	r3, r2
 800baea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	2101      	movs	r1, #1
 800bafe:	fa01 f303 	lsl.w	r3, r1, r3
 800bb02:	041b      	lsls	r3, r3, #16
 800bb04:	43db      	mvns	r3, r3
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	0159      	lsls	r1, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	440b      	add	r3, r1
 800bb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <USB_DeactivateEndpoint+0x1b4>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	ec337800 	.word	0xec337800
 800bb44:	eff37800 	.word	0xeff37800

0800bb48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08a      	sub	sp, #40	; 0x28
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	4613      	mov	r3, r2
 800bb54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	f040 8163 	bne.w	800be30 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d132      	bne.n	800bbd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb7e:	691a      	ldr	r2, [r3, #16]
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	0159      	lsls	r1, r3, #5
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	440b      	add	r3, r1
 800bb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4ba5      	ldr	r3, [pc, #660]	; (800be24 <USB_EPStartXfer+0x2dc>)
 800bb90:	4013      	ands	r3, r2
 800bb92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	015a      	lsls	r2, r3, #5
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	69ba      	ldr	r2, [r7, #24]
 800bba4:	0151      	lsls	r1, r2, #5
 800bba6:	69fa      	ldr	r2, [r7, #28]
 800bba8:	440a      	add	r2, r1
 800bbaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc0:	691a      	ldr	r2, [r3, #16]
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	0159      	lsls	r1, r3, #5
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	440b      	add	r3, r1
 800bbca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4b95      	ldr	r3, [pc, #596]	; (800be28 <USB_EPStartXfer+0x2e0>)
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	610b      	str	r3, [r1, #16]
 800bbd6:	e074      	b.n	800bcc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	015a      	lsls	r2, r3, #5
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe4:	691a      	ldr	r2, [r3, #16]
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	0159      	lsls	r1, r3, #5
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	440b      	add	r3, r1
 800bbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4b8c      	ldr	r3, [pc, #560]	; (800be28 <USB_EPStartXfer+0x2e0>)
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	015a      	lsls	r2, r3, #5
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4413      	add	r3, r2
 800bc02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc06:	691a      	ldr	r2, [r3, #16]
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	0159      	lsls	r1, r3, #5
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	440b      	add	r3, r1
 800bc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc14:	4619      	mov	r1, r3
 800bc16:	4b83      	ldr	r3, [pc, #524]	; (800be24 <USB_EPStartXfer+0x2dc>)
 800bc18:	4013      	ands	r3, r2
 800bc1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	015a      	lsls	r2, r3, #5
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	4413      	add	r3, r2
 800bc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	6999      	ldr	r1, [r3, #24]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	440b      	add	r3, r1
 800bc34:	1e59      	subs	r1, r3, #1
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc40:	4b7a      	ldr	r3, [pc, #488]	; (800be2c <USB_EPStartXfer+0x2e4>)
 800bc42:	400b      	ands	r3, r1
 800bc44:	69b9      	ldr	r1, [r7, #24]
 800bc46:	0148      	lsls	r0, r1, #5
 800bc48:	69f9      	ldr	r1, [r7, #28]
 800bc4a:	4401      	add	r1, r0
 800bc4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc50:	4313      	orrs	r3, r2
 800bc52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc60:	691a      	ldr	r2, [r3, #16]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc6a:	69b9      	ldr	r1, [r7, #24]
 800bc6c:	0148      	lsls	r0, r1, #5
 800bc6e:	69f9      	ldr	r1, [r7, #28]
 800bc70:	4401      	add	r1, r0
 800bc72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc76:	4313      	orrs	r3, r2
 800bc78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	791b      	ldrb	r3, [r3, #4]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d11f      	bne.n	800bcc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	0151      	lsls	r1, r2, #5
 800bc94:	69fa      	ldr	r2, [r7, #28]
 800bc96:	440a      	add	r2, r1
 800bc98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bca0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	69ba      	ldr	r2, [r7, #24]
 800bcb2:	0151      	lsls	r1, r2, #5
 800bcb4:	69fa      	ldr	r2, [r7, #28]
 800bcb6:	440a      	add	r2, r1
 800bcb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d14b      	bne.n	800bd60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d009      	beq.n	800bce4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	461a      	mov	r2, r3
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	791b      	ldrb	r3, [r3, #4]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d128      	bne.n	800bd3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d110      	bne.n	800bd1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	015a      	lsls	r2, r3, #5
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	4413      	add	r3, r2
 800bd04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	0151      	lsls	r1, r2, #5
 800bd0e:	69fa      	ldr	r2, [r7, #28]
 800bd10:	440a      	add	r2, r1
 800bd12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd1a:	6013      	str	r3, [r2, #0]
 800bd1c:	e00f      	b.n	800bd3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	69ba      	ldr	r2, [r7, #24]
 800bd2e:	0151      	lsls	r1, r2, #5
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	440a      	add	r2, r1
 800bd34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	0151      	lsls	r1, r2, #5
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	440a      	add	r2, r1
 800bd54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	e137      	b.n	800bfd0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	015a      	lsls	r2, r3, #5
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	4413      	add	r3, r2
 800bd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	69ba      	ldr	r2, [r7, #24]
 800bd70:	0151      	lsls	r1, r2, #5
 800bd72:	69fa      	ldr	r2, [r7, #28]
 800bd74:	440a      	add	r2, r1
 800bd76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	791b      	ldrb	r3, [r3, #4]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d015      	beq.n	800bdb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 811f 	beq.w	800bfd0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	f003 030f 	and.w	r3, r3, #15
 800bda2:	2101      	movs	r1, #1
 800bda4:	fa01 f303 	lsl.w	r3, r1, r3
 800bda8:	69f9      	ldr	r1, [r7, #28]
 800bdaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	634b      	str	r3, [r1, #52]	; 0x34
 800bdb2:	e10d      	b.n	800bfd0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d110      	bne.n	800bde6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	0151      	lsls	r1, r2, #5
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	440a      	add	r2, r1
 800bdda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e00f      	b.n	800be06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	015a      	lsls	r2, r3, #5
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	4413      	add	r3, r2
 800bdee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	69ba      	ldr	r2, [r7, #24]
 800bdf6:	0151      	lsls	r1, r2, #5
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	440a      	add	r2, r1
 800bdfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	6919      	ldr	r1, [r3, #16]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	699b      	ldr	r3, [r3, #24]
 800be12:	b298      	uxth	r0, r3
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	4603      	mov	r3, r0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 faea 	bl	800c3f4 <USB_WritePacket>
 800be20:	e0d6      	b.n	800bfd0 <USB_EPStartXfer+0x488>
 800be22:	bf00      	nop
 800be24:	e007ffff 	.word	0xe007ffff
 800be28:	fff80000 	.word	0xfff80000
 800be2c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3c:	691a      	ldr	r2, [r3, #16]
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	0159      	lsls	r1, r3, #5
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	440b      	add	r3, r1
 800be46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4a:	4619      	mov	r1, r3
 800be4c:	4b63      	ldr	r3, [pc, #396]	; (800bfdc <USB_EPStartXfer+0x494>)
 800be4e:	4013      	ands	r3, r2
 800be50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	015a      	lsls	r2, r3, #5
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	4413      	add	r3, r2
 800be5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	0159      	lsls	r1, r3, #5
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	440b      	add	r3, r1
 800be68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6c:	4619      	mov	r1, r3
 800be6e:	4b5c      	ldr	r3, [pc, #368]	; (800bfe0 <USB_EPStartXfer+0x498>)
 800be70:	4013      	ands	r3, r2
 800be72:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d123      	bne.n	800bec4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	015a      	lsls	r2, r3, #5
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	4413      	add	r3, r2
 800be84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be88:	691a      	ldr	r2, [r3, #16]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be92:	69b9      	ldr	r1, [r7, #24]
 800be94:	0148      	lsls	r0, r1, #5
 800be96:	69f9      	ldr	r1, [r7, #28]
 800be98:	4401      	add	r1, r0
 800be9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be9e:	4313      	orrs	r3, r2
 800bea0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	015a      	lsls	r2, r3, #5
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	4413      	add	r3, r2
 800beaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	69ba      	ldr	r2, [r7, #24]
 800beb2:	0151      	lsls	r1, r2, #5
 800beb4:	69fa      	ldr	r2, [r7, #28]
 800beb6:	440a      	add	r2, r1
 800beb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bec0:	6113      	str	r3, [r2, #16]
 800bec2:	e037      	b.n	800bf34 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	699a      	ldr	r2, [r3, #24]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	4413      	add	r3, r2
 800bece:	1e5a      	subs	r2, r3, #1
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	8afa      	ldrh	r2, [r7, #22]
 800bee0:	fb03 f202 	mul.w	r2, r3, r2
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	015a      	lsls	r2, r3, #5
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	4413      	add	r3, r2
 800bef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	8afb      	ldrh	r3, [r7, #22]
 800bef8:	04d9      	lsls	r1, r3, #19
 800befa:	4b3a      	ldr	r3, [pc, #232]	; (800bfe4 <USB_EPStartXfer+0x49c>)
 800befc:	400b      	ands	r3, r1
 800befe:	69b9      	ldr	r1, [r7, #24]
 800bf00:	0148      	lsls	r0, r1, #5
 800bf02:	69f9      	ldr	r1, [r7, #28]
 800bf04:	4401      	add	r1, r0
 800bf06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf1a:	691a      	ldr	r2, [r3, #16]
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	69db      	ldr	r3, [r3, #28]
 800bf20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf24:	69b9      	ldr	r1, [r7, #24]
 800bf26:	0148      	lsls	r0, r1, #5
 800bf28:	69f9      	ldr	r1, [r7, #28]
 800bf2a:	4401      	add	r1, r0
 800bf2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf30:	4313      	orrs	r3, r2
 800bf32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bf34:	79fb      	ldrb	r3, [r7, #7]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d10d      	bne.n	800bf56 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d009      	beq.n	800bf56 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6919      	ldr	r1, [r3, #16]
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	015a      	lsls	r2, r3, #5
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf52:	460a      	mov	r2, r1
 800bf54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	791b      	ldrb	r3, [r3, #4]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d128      	bne.n	800bfb0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d110      	bne.n	800bf90 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	015a      	lsls	r2, r3, #5
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	4413      	add	r3, r2
 800bf76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	0151      	lsls	r1, r2, #5
 800bf80:	69fa      	ldr	r2, [r7, #28]
 800bf82:	440a      	add	r2, r1
 800bf84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	e00f      	b.n	800bfb0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	69fa      	ldr	r2, [r7, #28]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	0151      	lsls	r1, r2, #5
 800bfc2:	69fa      	ldr	r2, [r7, #28]
 800bfc4:	440a      	add	r2, r1
 800bfc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3720      	adds	r7, #32
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	fff80000 	.word	0xfff80000
 800bfe0:	e007ffff 	.word	0xe007ffff
 800bfe4:	1ff80000 	.word	0x1ff80000

0800bfe8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	4613      	mov	r3, r2
 800bff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b01      	cmp	r3, #1
 800c006:	f040 80ce 	bne.w	800c1a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d132      	bne.n	800c078 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	015a      	lsls	r2, r3, #5
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	0159      	lsls	r1, r3, #5
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	440b      	add	r3, r1
 800c028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02c:	4619      	mov	r1, r3
 800c02e:	4b9a      	ldr	r3, [pc, #616]	; (800c298 <USB_EP0StartXfer+0x2b0>)
 800c030:	4013      	ands	r3, r2
 800c032:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	0151      	lsls	r1, r2, #5
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	440a      	add	r2, r1
 800c04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c04e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	015a      	lsls	r2, r3, #5
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	4413      	add	r3, r2
 800c05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	0159      	lsls	r1, r3, #5
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	440b      	add	r3, r1
 800c06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06e:	4619      	mov	r1, r3
 800c070:	4b8a      	ldr	r3, [pc, #552]	; (800c29c <USB_EP0StartXfer+0x2b4>)
 800c072:	4013      	ands	r3, r2
 800c074:	610b      	str	r3, [r1, #16]
 800c076:	e04e      	b.n	800c116 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	015a      	lsls	r2, r3, #5
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	4413      	add	r3, r2
 800c080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c084:	691a      	ldr	r2, [r3, #16]
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	0159      	lsls	r1, r3, #5
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	440b      	add	r3, r1
 800c08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c092:	4619      	mov	r1, r3
 800c094:	4b81      	ldr	r3, [pc, #516]	; (800c29c <USB_EP0StartXfer+0x2b4>)
 800c096:	4013      	ands	r3, r2
 800c098:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	015a      	lsls	r2, r3, #5
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a6:	691a      	ldr	r2, [r3, #16]
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	0159      	lsls	r1, r3, #5
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	440b      	add	r3, r1
 800c0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4b78      	ldr	r3, [pc, #480]	; (800c298 <USB_EP0StartXfer+0x2b0>)
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	699a      	ldr	r2, [r3, #24]
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d903      	bls.n	800c0d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	015a      	lsls	r2, r3, #5
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	0151      	lsls	r1, r2, #5
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	440a      	add	r2, r1
 800c0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fc:	691a      	ldr	r2, [r3, #16]
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	699b      	ldr	r3, [r3, #24]
 800c102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c106:	6939      	ldr	r1, [r7, #16]
 800c108:	0148      	lsls	r0, r1, #5
 800c10a:	6979      	ldr	r1, [r7, #20]
 800c10c:	4401      	add	r1, r0
 800c10e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c112:	4313      	orrs	r3, r2
 800c114:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d11e      	bne.n	800c15a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d009      	beq.n	800c138 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	015a      	lsls	r2, r3, #5
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	4413      	add	r3, r2
 800c12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c130:	461a      	mov	r2, r3
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	015a      	lsls	r2, r3, #5
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	4413      	add	r3, r2
 800c140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	0151      	lsls	r1, r2, #5
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	440a      	add	r2, r1
 800c14e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c152:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c156:	6013      	str	r3, [r2, #0]
 800c158:	e097      	b.n	800c28a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	015a      	lsls	r2, r3, #5
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	4413      	add	r3, r2
 800c162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	0151      	lsls	r1, r2, #5
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	440a      	add	r2, r1
 800c170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c174:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c178:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 8083 	beq.w	800c28a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	f003 030f 	and.w	r3, r3, #15
 800c194:	2101      	movs	r1, #1
 800c196:	fa01 f303 	lsl.w	r3, r1, r3
 800c19a:	6979      	ldr	r1, [r7, #20]
 800c19c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	634b      	str	r3, [r1, #52]	; 0x34
 800c1a4:	e071      	b.n	800c28a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b2:	691a      	ldr	r2, [r3, #16]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	0159      	lsls	r1, r3, #5
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	440b      	add	r3, r1
 800c1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	4b36      	ldr	r3, [pc, #216]	; (800c29c <USB_EP0StartXfer+0x2b4>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	015a      	lsls	r2, r3, #5
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d4:	691a      	ldr	r2, [r3, #16]
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	0159      	lsls	r1, r3, #5
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	440b      	add	r3, r1
 800c1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4b2c      	ldr	r3, [pc, #176]	; (800c298 <USB_EP0StartXfer+0x2b0>)
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	68da      	ldr	r2, [r3, #12]
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	015a      	lsls	r2, r3, #5
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	4413      	add	r3, r2
 800c20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	0151      	lsls	r1, r2, #5
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	440a      	add	r2, r1
 800c218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c21c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c22e:	691a      	ldr	r2, [r3, #16]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	69db      	ldr	r3, [r3, #28]
 800c234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c238:	6939      	ldr	r1, [r7, #16]
 800c23a:	0148      	lsls	r0, r1, #5
 800c23c:	6979      	ldr	r1, [r7, #20]
 800c23e:	4401      	add	r1, r0
 800c240:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c244:	4313      	orrs	r3, r2
 800c246:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d10d      	bne.n	800c26a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d009      	beq.n	800c26a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	6919      	ldr	r1, [r3, #16]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	015a      	lsls	r2, r3, #5
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	4413      	add	r3, r2
 800c262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c266:	460a      	mov	r2, r1
 800c268:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	0151      	lsls	r1, r2, #5
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	440a      	add	r2, r1
 800c280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c284:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c288:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	371c      	adds	r7, #28
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	e007ffff 	.word	0xe007ffff
 800c29c:	fff80000 	.word	0xfff80000

0800c2a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b087      	sub	sp, #28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	785b      	ldrb	r3, [r3, #1]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d14a      	bne.n	800c354 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2d6:	f040 8086 	bne.w	800c3e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	015a      	lsls	r2, r3, #5
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	7812      	ldrb	r2, [r2, #0]
 800c2ee:	0151      	lsls	r1, r2, #5
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	440a      	add	r2, r1
 800c2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c2fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	015a      	lsls	r2, r3, #5
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	4413      	add	r3, r2
 800c308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	7812      	ldrb	r2, [r2, #0]
 800c312:	0151      	lsls	r1, r2, #5
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	440a      	add	r2, r1
 800c318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c31c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3301      	adds	r3, #1
 800c326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c32e:	4293      	cmp	r3, r2
 800c330:	d902      	bls.n	800c338 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	75fb      	strb	r3, [r7, #23]
          break;
 800c336:	e056      	b.n	800c3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	015a      	lsls	r2, r3, #5
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	4413      	add	r3, r2
 800c342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c350:	d0e7      	beq.n	800c322 <USB_EPStopXfer+0x82>
 800c352:	e048      	b.n	800c3e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	015a      	lsls	r2, r3, #5
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	4413      	add	r3, r2
 800c35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c36c:	d13b      	bne.n	800c3e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	015a      	lsls	r2, r3, #5
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	4413      	add	r3, r2
 800c378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	7812      	ldrb	r2, [r2, #0]
 800c382:	0151      	lsls	r1, r2, #5
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	440a      	add	r2, r1
 800c388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c38c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c390:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	7812      	ldrb	r2, [r2, #0]
 800c3a6:	0151      	lsls	r1, r2, #5
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	440a      	add	r2, r1
 800c3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f242 7210 	movw	r2, #10000	; 0x2710
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d902      	bls.n	800c3cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	75fb      	strb	r3, [r7, #23]
          break;
 800c3ca:	e00c      	b.n	800c3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3e4:	d0e7      	beq.n	800c3b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	371c      	adds	r7, #28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b089      	sub	sp, #36	; 0x24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	4611      	mov	r1, r2
 800c400:	461a      	mov	r2, r3
 800c402:	460b      	mov	r3, r1
 800c404:	71fb      	strb	r3, [r7, #7]
 800c406:	4613      	mov	r3, r2
 800c408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c416:	2b00      	cmp	r3, #0
 800c418:	d123      	bne.n	800c462 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c41a:	88bb      	ldrh	r3, [r7, #4]
 800c41c:	3303      	adds	r3, #3
 800c41e:	089b      	lsrs	r3, r3, #2
 800c420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c422:	2300      	movs	r3, #0
 800c424:	61bb      	str	r3, [r7, #24]
 800c426:	e018      	b.n	800c45a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c428:	79fb      	ldrb	r3, [r7, #7]
 800c42a:	031a      	lsls	r2, r3, #12
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c434:	461a      	mov	r2, r3
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	3301      	adds	r3, #1
 800c440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	3301      	adds	r3, #1
 800c446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	3301      	adds	r3, #1
 800c44c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	3301      	adds	r3, #1
 800c452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	3301      	adds	r3, #1
 800c458:	61bb      	str	r3, [r7, #24]
 800c45a:	69ba      	ldr	r2, [r7, #24]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d3e2      	bcc.n	800c428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3724      	adds	r7, #36	; 0x24
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c470:	b480      	push	{r7}
 800c472:	b08b      	sub	sp, #44	; 0x2c
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	4613      	mov	r3, r2
 800c47c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c486:	88fb      	ldrh	r3, [r7, #6]
 800c488:	089b      	lsrs	r3, r3, #2
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	f003 0303 	and.w	r3, r3, #3
 800c494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c496:	2300      	movs	r3, #0
 800c498:	623b      	str	r3, [r7, #32]
 800c49a:	e014      	b.n	800c4c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	3301      	adds	r3, #1
 800c4be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	623b      	str	r3, [r7, #32]
 800c4c6:	6a3a      	ldr	r2, [r7, #32]
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d3e6      	bcc.n	800c49c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c4ce:	8bfb      	ldrh	r3, [r7, #30]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01e      	beq.n	800c512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4de:	461a      	mov	r2, r3
 800c4e0:	f107 0310 	add.w	r3, r7, #16
 800c4e4:	6812      	ldr	r2, [r2, #0]
 800c4e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	701a      	strb	r2, [r3, #0]
      i++;
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	3301      	adds	r3, #1
 800c504:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c506:	8bfb      	ldrh	r3, [r7, #30]
 800c508:	3b01      	subs	r3, #1
 800c50a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c50c:	8bfb      	ldrh	r3, [r7, #30]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1ea      	bne.n	800c4e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c514:	4618      	mov	r0, r3
 800c516:	372c      	adds	r7, #44	; 0x2c
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	785b      	ldrb	r3, [r3, #1]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d12c      	bne.n	800c596 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	db12      	blt.n	800c574 <USB_EPSetStall+0x54>
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00f      	beq.n	800c574 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	015a      	lsls	r2, r3, #5
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4413      	add	r3, r2
 800c55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	0151      	lsls	r1, r2, #5
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	440a      	add	r2, r1
 800c56a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c56e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c572:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	0151      	lsls	r1, r2, #5
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	440a      	add	r2, r1
 800c58a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c58e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	e02b      	b.n	800c5ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	015a      	lsls	r2, r3, #5
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	4413      	add	r3, r2
 800c59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	db12      	blt.n	800c5ce <USB_EPSetStall+0xae>
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00f      	beq.n	800c5ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	015a      	lsls	r2, r3, #5
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	0151      	lsls	r1, r2, #5
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	440a      	add	r2, r1
 800c5c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	015a      	lsls	r2, r3, #5
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	0151      	lsls	r1, r2, #5
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	440a      	add	r2, r1
 800c5e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3714      	adds	r7, #20
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	785b      	ldrb	r3, [r3, #1]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d128      	bne.n	800c66a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	015a      	lsls	r2, r3, #5
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	0151      	lsls	r1, r2, #5
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	440a      	add	r2, r1
 800c62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c636:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	791b      	ldrb	r3, [r3, #4]
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d003      	beq.n	800c648 <USB_EPClearStall+0x4c>
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	791b      	ldrb	r3, [r3, #4]
 800c644:	2b02      	cmp	r3, #2
 800c646:	d138      	bne.n	800c6ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	015a      	lsls	r2, r3, #5
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	0151      	lsls	r1, r2, #5
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	440a      	add	r2, r1
 800c65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	e027      	b.n	800c6ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	015a      	lsls	r2, r3, #5
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4413      	add	r3, r2
 800c672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	0151      	lsls	r1, r2, #5
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	440a      	add	r2, r1
 800c680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c688:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	791b      	ldrb	r3, [r3, #4]
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d003      	beq.n	800c69a <USB_EPClearStall+0x9e>
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	791b      	ldrb	r3, [r3, #4]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d10f      	bne.n	800c6ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	015a      	lsls	r2, r3, #5
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	0151      	lsls	r1, r2, #5
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	440a      	add	r2, r1
 800c6b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c6ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	78fb      	ldrb	r3, [r7, #3]
 800c6f6:	011b      	lsls	r3, r3, #4
 800c6f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c6fc:	68f9      	ldr	r1, [r7, #12]
 800c6fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c702:	4313      	orrs	r3, r2
 800c704:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c72e:	f023 0303 	bic.w	r3, r3, #3
 800c732:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c742:	f023 0302 	bic.w	r3, r3, #2
 800c746:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c756:	b480      	push	{r7}
 800c758:	b085      	sub	sp, #20
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c770:	f023 0303 	bic.w	r3, r3, #3
 800c774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c784:	f043 0302 	orr.w	r3, r3, #2
 800c788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	699b      	ldr	r3, [r3, #24]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7da:	69db      	ldr	r3, [r3, #28]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	4013      	ands	r3, r2
 800c7e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	0c1b      	lsrs	r3, r3, #16
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	4013      	ands	r3, r2
 800c814:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	b29b      	uxth	r3, r3
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c826:	b480      	push	{r7}
 800c828:	b085      	sub	sp, #20
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c836:	78fb      	ldrb	r3, [r7, #3]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	4013      	ands	r3, r2
 800c852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c854:	68bb      	ldr	r3, [r7, #8]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c862:	b480      	push	{r7}
 800c864:	b087      	sub	sp, #28
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c884:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c886:	78fb      	ldrb	r3, [r7, #3]
 800c888:	f003 030f 	and.w	r3, r3, #15
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	fa22 f303 	lsr.w	r3, r2, r3
 800c892:	01db      	lsls	r3, r3, #7
 800c894:	b2db      	uxtb	r3, r3
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	4313      	orrs	r3, r2
 800c89a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c89c:	78fb      	ldrb	r3, [r7, #3]
 800c89e:	015a      	lsls	r2, r3, #5
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	371c      	adds	r7, #28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b083      	sub	sp, #12
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	f003 0301 	and.w	r3, r3, #1
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
	...

0800c8dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	4b09      	ldr	r3, [pc, #36]	; (800c920 <USB_ActivateSetup+0x44>)
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c90c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	fffff800 	.word	0xfffff800

0800c924 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	460b      	mov	r3, r1
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	333c      	adds	r3, #60	; 0x3c
 800c93a:	3304      	adds	r3, #4
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	4a26      	ldr	r2, [pc, #152]	; (800c9dc <USB_EP0_OutStart+0xb8>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d90a      	bls.n	800c95e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c958:	d101      	bne.n	800c95e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	e037      	b.n	800c9ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c964:	461a      	mov	r2, r3
 800c966:	2300      	movs	r3, #0
 800c968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c97c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c98c:	f043 0318 	orr.w	r3, r3, #24
 800c990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c9a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c9a6:	7afb      	ldrb	r3, [r7, #11]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d10f      	bne.n	800c9cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c9ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	371c      	adds	r7, #28
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	4f54300a 	.word	0x4f54300a

0800c9e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	4a13      	ldr	r2, [pc, #76]	; (800ca44 <USB_CoreReset+0x64>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d901      	bls.n	800c9fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e01b      	b.n	800ca36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	daf2      	bge.n	800c9ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	f043 0201 	orr.w	r2, r3, #1
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4a09      	ldr	r2, [pc, #36]	; (800ca44 <USB_CoreReset+0x64>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d901      	bls.n	800ca28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca24:	2303      	movs	r3, #3
 800ca26:	e006      	b.n	800ca36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	f003 0301 	and.w	r3, r3, #1
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d0f0      	beq.n	800ca16 <USB_CoreReset+0x36>

  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	00030d40 	.word	0x00030d40

0800ca48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ca58:	f002 fc5a 	bl	800f310 <USBD_static_malloc>
 800ca5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d109      	bne.n	800ca78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	32b0      	adds	r2, #176	; 0xb0
 800ca6e:	2100      	movs	r1, #0
 800ca70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ca74:	2302      	movs	r3, #2
 800ca76:	e0d4      	b.n	800cc22 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ca78:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f002 fcbc 	bl	800f3fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	32b0      	adds	r2, #176	; 0xb0
 800ca8e:	68f9      	ldr	r1, [r7, #12]
 800ca90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	32b0      	adds	r2, #176	; 0xb0
 800ca9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	7c1b      	ldrb	r3, [r3, #16]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d138      	bne.n	800cb22 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cab0:	4b5e      	ldr	r3, [pc, #376]	; (800cc2c <USBD_CDC_Init+0x1e4>)
 800cab2:	7819      	ldrb	r1, [r3, #0]
 800cab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cab8:	2202      	movs	r2, #2
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f002 fb05 	bl	800f0ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cac0:	4b5a      	ldr	r3, [pc, #360]	; (800cc2c <USBD_CDC_Init+0x1e4>)
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	f003 020f 	and.w	r2, r3, #15
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	4613      	mov	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	440b      	add	r3, r1
 800cad4:	3324      	adds	r3, #36	; 0x24
 800cad6:	2201      	movs	r2, #1
 800cad8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cada:	4b55      	ldr	r3, [pc, #340]	; (800cc30 <USBD_CDC_Init+0x1e8>)
 800cadc:	7819      	ldrb	r1, [r3, #0]
 800cade:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cae2:	2202      	movs	r2, #2
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f002 faf0 	bl	800f0ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800caea:	4b51      	ldr	r3, [pc, #324]	; (800cc30 <USBD_CDC_Init+0x1e8>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	f003 020f 	and.w	r2, r3, #15
 800caf2:	6879      	ldr	r1, [r7, #4]
 800caf4:	4613      	mov	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	440b      	add	r3, r1
 800cafe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb02:	2201      	movs	r2, #1
 800cb04:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cb06:	4b4b      	ldr	r3, [pc, #300]	; (800cc34 <USBD_CDC_Init+0x1ec>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	f003 020f 	and.w	r2, r3, #15
 800cb0e:	6879      	ldr	r1, [r7, #4]
 800cb10:	4613      	mov	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	440b      	add	r3, r1
 800cb1a:	3326      	adds	r3, #38	; 0x26
 800cb1c:	2210      	movs	r2, #16
 800cb1e:	801a      	strh	r2, [r3, #0]
 800cb20:	e035      	b.n	800cb8e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cb22:	4b42      	ldr	r3, [pc, #264]	; (800cc2c <USBD_CDC_Init+0x1e4>)
 800cb24:	7819      	ldrb	r1, [r3, #0]
 800cb26:	2340      	movs	r3, #64	; 0x40
 800cb28:	2202      	movs	r2, #2
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f002 facd 	bl	800f0ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cb30:	4b3e      	ldr	r3, [pc, #248]	; (800cc2c <USBD_CDC_Init+0x1e4>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 020f 	and.w	r2, r3, #15
 800cb38:	6879      	ldr	r1, [r7, #4]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	440b      	add	r3, r1
 800cb44:	3324      	adds	r3, #36	; 0x24
 800cb46:	2201      	movs	r2, #1
 800cb48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb4a:	4b39      	ldr	r3, [pc, #228]	; (800cc30 <USBD_CDC_Init+0x1e8>)
 800cb4c:	7819      	ldrb	r1, [r3, #0]
 800cb4e:	2340      	movs	r3, #64	; 0x40
 800cb50:	2202      	movs	r2, #2
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f002 fab9 	bl	800f0ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb58:	4b35      	ldr	r3, [pc, #212]	; (800cc30 <USBD_CDC_Init+0x1e8>)
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	f003 020f 	and.w	r2, r3, #15
 800cb60:	6879      	ldr	r1, [r7, #4]
 800cb62:	4613      	mov	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	440b      	add	r3, r1
 800cb6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb70:	2201      	movs	r2, #1
 800cb72:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cb74:	4b2f      	ldr	r3, [pc, #188]	; (800cc34 <USBD_CDC_Init+0x1ec>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	f003 020f 	and.w	r2, r3, #15
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	440b      	add	r3, r1
 800cb88:	3326      	adds	r3, #38	; 0x26
 800cb8a:	2210      	movs	r2, #16
 800cb8c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cb8e:	4b29      	ldr	r3, [pc, #164]	; (800cc34 <USBD_CDC_Init+0x1ec>)
 800cb90:	7819      	ldrb	r1, [r3, #0]
 800cb92:	2308      	movs	r3, #8
 800cb94:	2203      	movs	r2, #3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f002 fa97 	bl	800f0ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cb9c:	4b25      	ldr	r3, [pc, #148]	; (800cc34 <USBD_CDC_Init+0x1ec>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	f003 020f 	and.w	r2, r3, #15
 800cba4:	6879      	ldr	r1, [r7, #4]
 800cba6:	4613      	mov	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	440b      	add	r3, r1
 800cbb0:	3324      	adds	r3, #36	; 0x24
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	33b0      	adds	r3, #176	; 0xb0
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cbec:	2302      	movs	r3, #2
 800cbee:	e018      	b.n	800cc22 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7c1b      	ldrb	r3, [r3, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbf8:	4b0d      	ldr	r3, [pc, #52]	; (800cc30 <USBD_CDC_Init+0x1e8>)
 800cbfa:	7819      	ldrb	r1, [r3, #0]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f002 fb4e 	bl	800f2a8 <USBD_LL_PrepareReceive>
 800cc0c:	e008      	b.n	800cc20 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc0e:	4b08      	ldr	r3, [pc, #32]	; (800cc30 <USBD_CDC_Init+0x1e8>)
 800cc10:	7819      	ldrb	r1, [r3, #0]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc18:	2340      	movs	r3, #64	; 0x40
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f002 fb44 	bl	800f2a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	24000097 	.word	0x24000097
 800cc30:	24000098 	.word	0x24000098
 800cc34:	24000099 	.word	0x24000099

0800cc38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cc44:	4b3a      	ldr	r3, [pc, #232]	; (800cd30 <USBD_CDC_DeInit+0xf8>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f002 fa63 	bl	800f116 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cc50:	4b37      	ldr	r3, [pc, #220]	; (800cd30 <USBD_CDC_DeInit+0xf8>)
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f003 020f 	and.w	r2, r3, #15
 800cc58:	6879      	ldr	r1, [r7, #4]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	4413      	add	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	440b      	add	r3, r1
 800cc64:	3324      	adds	r3, #36	; 0x24
 800cc66:	2200      	movs	r2, #0
 800cc68:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cc6a:	4b32      	ldr	r3, [pc, #200]	; (800cd34 <USBD_CDC_DeInit+0xfc>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f002 fa50 	bl	800f116 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cc76:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <USBD_CDC_DeInit+0xfc>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	f003 020f 	and.w	r2, r3, #15
 800cc7e:	6879      	ldr	r1, [r7, #4]
 800cc80:	4613      	mov	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	440b      	add	r3, r1
 800cc8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc8e:	2200      	movs	r2, #0
 800cc90:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cc92:	4b29      	ldr	r3, [pc, #164]	; (800cd38 <USBD_CDC_DeInit+0x100>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f002 fa3c 	bl	800f116 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cc9e:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <USBD_CDC_DeInit+0x100>)
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	f003 020f 	and.w	r2, r3, #15
 800cca6:	6879      	ldr	r1, [r7, #4]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4413      	add	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	440b      	add	r3, r1
 800ccb2:	3324      	adds	r3, #36	; 0x24
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ccb8:	4b1f      	ldr	r3, [pc, #124]	; (800cd38 <USBD_CDC_DeInit+0x100>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	f003 020f 	and.w	r2, r3, #15
 800ccc0:	6879      	ldr	r1, [r7, #4]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	440b      	add	r3, r1
 800cccc:	3326      	adds	r3, #38	; 0x26
 800ccce:	2200      	movs	r2, #0
 800ccd0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	32b0      	adds	r2, #176	; 0xb0
 800ccdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01f      	beq.n	800cd24 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	33b0      	adds	r3, #176	; 0xb0
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4413      	add	r3, r2
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	32b0      	adds	r2, #176	; 0xb0
 800cd02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f002 fb10 	bl	800f32c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	32b0      	adds	r2, #176	; 0xb0
 800cd16:	2100      	movs	r1, #0
 800cd18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	24000097 	.word	0x24000097
 800cd34:	24000098 	.word	0x24000098
 800cd38:	24000099 	.word	0x24000099

0800cd3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	32b0      	adds	r2, #176	; 0xb0
 800cd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd56:	2300      	movs	r3, #0
 800cd58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e0bf      	b.n	800ceec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d050      	beq.n	800ce1a <USBD_CDC_Setup+0xde>
 800cd78:	2b20      	cmp	r3, #32
 800cd7a:	f040 80af 	bne.w	800cedc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	88db      	ldrh	r3, [r3, #6]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d03a      	beq.n	800cdfc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	b25b      	sxtb	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	da1b      	bge.n	800cdc8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	33b0      	adds	r3, #176	; 0xb0
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4413      	add	r3, r2
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cda6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	88d2      	ldrh	r2, [r2, #6]
 800cdac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	88db      	ldrh	r3, [r3, #6]
 800cdb2:	2b07      	cmp	r3, #7
 800cdb4:	bf28      	it	cs
 800cdb6:	2307      	movcs	r3, #7
 800cdb8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	89fa      	ldrh	r2, [r7, #14]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f001 fd43 	bl	800e84c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cdc6:	e090      	b.n	800ceea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	785a      	ldrb	r2, [r3, #1]
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	88db      	ldrh	r3, [r3, #6]
 800cdd6:	2b3f      	cmp	r3, #63	; 0x3f
 800cdd8:	d803      	bhi.n	800cde2 <USBD_CDC_Setup+0xa6>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	88db      	ldrh	r3, [r3, #6]
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	e000      	b.n	800cde4 <USBD_CDC_Setup+0xa8>
 800cde2:	2240      	movs	r2, #64	; 0x40
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cdea:	6939      	ldr	r1, [r7, #16]
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f001 fd55 	bl	800e8a4 <USBD_CtlPrepareRx>
      break;
 800cdfa:	e076      	b.n	800ceea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	33b0      	adds	r3, #176	; 0xb0
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	7850      	ldrb	r0, [r2, #1]
 800ce12:	2200      	movs	r2, #0
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	4798      	blx	r3
      break;
 800ce18:	e067      	b.n	800ceea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	785b      	ldrb	r3, [r3, #1]
 800ce1e:	2b0b      	cmp	r3, #11
 800ce20:	d851      	bhi.n	800cec6 <USBD_CDC_Setup+0x18a>
 800ce22:	a201      	add	r2, pc, #4	; (adr r2, 800ce28 <USBD_CDC_Setup+0xec>)
 800ce24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce28:	0800ce59 	.word	0x0800ce59
 800ce2c:	0800ced5 	.word	0x0800ced5
 800ce30:	0800cec7 	.word	0x0800cec7
 800ce34:	0800cec7 	.word	0x0800cec7
 800ce38:	0800cec7 	.word	0x0800cec7
 800ce3c:	0800cec7 	.word	0x0800cec7
 800ce40:	0800cec7 	.word	0x0800cec7
 800ce44:	0800cec7 	.word	0x0800cec7
 800ce48:	0800cec7 	.word	0x0800cec7
 800ce4c:	0800cec7 	.word	0x0800cec7
 800ce50:	0800ce83 	.word	0x0800ce83
 800ce54:	0800cead 	.word	0x0800cead
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b03      	cmp	r3, #3
 800ce62:	d107      	bne.n	800ce74 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce64:	f107 030a 	add.w	r3, r7, #10
 800ce68:	2202      	movs	r2, #2
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f001 fced 	bl	800e84c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce72:	e032      	b.n	800ceda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f001 fc77 	bl	800e76a <USBD_CtlError>
            ret = USBD_FAIL;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	75fb      	strb	r3, [r7, #23]
          break;
 800ce80:	e02b      	b.n	800ceda <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d107      	bne.n	800ce9e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce8e:	f107 030d 	add.w	r3, r7, #13
 800ce92:	2201      	movs	r2, #1
 800ce94:	4619      	mov	r1, r3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f001 fcd8 	bl	800e84c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce9c:	e01d      	b.n	800ceda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 fc62 	bl	800e76a <USBD_CtlError>
            ret = USBD_FAIL;
 800cea6:	2303      	movs	r3, #3
 800cea8:	75fb      	strb	r3, [r7, #23]
          break;
 800ceaa:	e016      	b.n	800ceda <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	2b03      	cmp	r3, #3
 800ceb6:	d00f      	beq.n	800ced8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f001 fc55 	bl	800e76a <USBD_CtlError>
            ret = USBD_FAIL;
 800cec0:	2303      	movs	r3, #3
 800cec2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cec4:	e008      	b.n	800ced8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 fc4e 	bl	800e76a <USBD_CtlError>
          ret = USBD_FAIL;
 800cece:	2303      	movs	r3, #3
 800ced0:	75fb      	strb	r3, [r7, #23]
          break;
 800ced2:	e002      	b.n	800ceda <USBD_CDC_Setup+0x19e>
          break;
 800ced4:	bf00      	nop
 800ced6:	e008      	b.n	800ceea <USBD_CDC_Setup+0x1ae>
          break;
 800ced8:	bf00      	nop
      }
      break;
 800ceda:	e006      	b.n	800ceea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f001 fc43 	bl	800e76a <USBD_CtlError>
      ret = USBD_FAIL;
 800cee4:	2303      	movs	r3, #3
 800cee6:	75fb      	strb	r3, [r7, #23]
      break;
 800cee8:	bf00      	nop
  }

  return (uint8_t)ret;
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	460b      	mov	r3, r1
 800cefe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	32b0      	adds	r2, #176	; 0xb0
 800cf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	e065      	b.n	800cfea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	32b0      	adds	r2, #176	; 0xb0
 800cf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf2e:	78fb      	ldrb	r3, [r7, #3]
 800cf30:	f003 020f 	and.w	r2, r3, #15
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	4613      	mov	r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	440b      	add	r3, r1
 800cf40:	3318      	adds	r3, #24
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d02f      	beq.n	800cfa8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cf48:	78fb      	ldrb	r3, [r7, #3]
 800cf4a:	f003 020f 	and.w	r2, r3, #15
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	3318      	adds	r3, #24
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	78fb      	ldrb	r3, [r7, #3]
 800cf60:	f003 010f 	and.w	r1, r3, #15
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	460b      	mov	r3, r1
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	440b      	add	r3, r1
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4403      	add	r3, r0
 800cf70:	3348      	adds	r3, #72	; 0x48
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf78:	fb01 f303 	mul.w	r3, r1, r3
 800cf7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d112      	bne.n	800cfa8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cf82:	78fb      	ldrb	r3, [r7, #3]
 800cf84:	f003 020f 	and.w	r2, r3, #15
 800cf88:	6879      	ldr	r1, [r7, #4]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	440b      	add	r3, r1
 800cf94:	3318      	adds	r3, #24
 800cf96:	2200      	movs	r2, #0
 800cf98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf9a:	78f9      	ldrb	r1, [r7, #3]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f002 f960 	bl	800f266 <USBD_LL_Transmit>
 800cfa6:	e01f      	b.n	800cfe8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	33b0      	adds	r3, #176	; 0xb0
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4413      	add	r3, r2
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d010      	beq.n	800cfe8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	33b0      	adds	r3, #176	; 0xb0
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	4413      	add	r3, r2
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cfe4:	78fa      	ldrb	r2, [r7, #3]
 800cfe6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	460b      	mov	r3, r1
 800cffc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	32b0      	adds	r2, #176	; 0xb0
 800d008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d00c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	32b0      	adds	r2, #176	; 0xb0
 800d018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d020:	2303      	movs	r3, #3
 800d022:	e01a      	b.n	800d05a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f002 f95e 	bl	800f2ea <USBD_LL_GetRxDataSize>
 800d02e:	4602      	mov	r2, r0
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	33b0      	adds	r3, #176	; 0xb0
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d054:	4611      	mov	r1, r2
 800d056:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b084      	sub	sp, #16
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	32b0      	adds	r2, #176	; 0xb0
 800d074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d078:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d080:	2303      	movs	r3, #3
 800d082:	e025      	b.n	800d0d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	33b0      	adds	r3, #176	; 0xb0
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d01a      	beq.n	800d0ce <USBD_CDC_EP0_RxReady+0x6c>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d09e:	2bff      	cmp	r3, #255	; 0xff
 800d0a0:	d015      	beq.n	800d0ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	33b0      	adds	r3, #176	; 0xb0
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d0ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d0c2:	b292      	uxth	r2, r2
 800d0c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	22ff      	movs	r2, #255	; 0xff
 800d0ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d0e0:	2182      	movs	r1, #130	; 0x82
 800d0e2:	4818      	ldr	r0, [pc, #96]	; (800d144 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0e4:	f000 fd09 	bl	800dafa <USBD_GetEpDesc>
 800d0e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d0ea:	2101      	movs	r1, #1
 800d0ec:	4815      	ldr	r0, [pc, #84]	; (800d144 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0ee:	f000 fd04 	bl	800dafa <USBD_GetEpDesc>
 800d0f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0f4:	2181      	movs	r1, #129	; 0x81
 800d0f6:	4813      	ldr	r0, [pc, #76]	; (800d144 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0f8:	f000 fcff 	bl	800dafa <USBD_GetEpDesc>
 800d0fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2210      	movs	r2, #16
 800d108:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d006      	beq.n	800d11e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	2200      	movs	r2, #0
 800d114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d118:	711a      	strb	r2, [r3, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d006      	beq.n	800d132 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d12c:	711a      	strb	r2, [r3, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2243      	movs	r2, #67	; 0x43
 800d136:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d138:	4b02      	ldr	r3, [pc, #8]	; (800d144 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3718      	adds	r7, #24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	24000054 	.word	0x24000054

0800d148 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d150:	2182      	movs	r1, #130	; 0x82
 800d152:	4818      	ldr	r0, [pc, #96]	; (800d1b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d154:	f000 fcd1 	bl	800dafa <USBD_GetEpDesc>
 800d158:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d15a:	2101      	movs	r1, #1
 800d15c:	4815      	ldr	r0, [pc, #84]	; (800d1b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d15e:	f000 fccc 	bl	800dafa <USBD_GetEpDesc>
 800d162:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d164:	2181      	movs	r1, #129	; 0x81
 800d166:	4813      	ldr	r0, [pc, #76]	; (800d1b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d168:	f000 fcc7 	bl	800dafa <USBD_GetEpDesc>
 800d16c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	2210      	movs	r2, #16
 800d178:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d006      	beq.n	800d18e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	2200      	movs	r2, #0
 800d184:	711a      	strb	r2, [r3, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f042 0202 	orr.w	r2, r2, #2
 800d18c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d006      	beq.n	800d1a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	711a      	strb	r2, [r3, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f042 0202 	orr.w	r2, r2, #2
 800d1a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2243      	movs	r2, #67	; 0x43
 800d1a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1a8:	4b02      	ldr	r3, [pc, #8]	; (800d1b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	24000054 	.word	0x24000054

0800d1b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1c0:	2182      	movs	r1, #130	; 0x82
 800d1c2:	4818      	ldr	r0, [pc, #96]	; (800d224 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d1c4:	f000 fc99 	bl	800dafa <USBD_GetEpDesc>
 800d1c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	4815      	ldr	r0, [pc, #84]	; (800d224 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d1ce:	f000 fc94 	bl	800dafa <USBD_GetEpDesc>
 800d1d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d1d4:	2181      	movs	r1, #129	; 0x81
 800d1d6:	4813      	ldr	r0, [pc, #76]	; (800d224 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d1d8:	f000 fc8f 	bl	800dafa <USBD_GetEpDesc>
 800d1dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d002      	beq.n	800d1ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2210      	movs	r2, #16
 800d1e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1f8:	711a      	strb	r2, [r3, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d006      	beq.n	800d212 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2200      	movs	r2, #0
 800d208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d20c:	711a      	strb	r2, [r3, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2243      	movs	r2, #67	; 0x43
 800d216:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d218:	4b02      	ldr	r3, [pc, #8]	; (800d224 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3718      	adds	r7, #24
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	24000054 	.word	0x24000054

0800d228 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	220a      	movs	r2, #10
 800d234:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d236:	4b03      	ldr	r3, [pc, #12]	; (800d244 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d238:	4618      	mov	r0, r3
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr
 800d244:	24000010 	.word	0x24000010

0800d248 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d258:	2303      	movs	r3, #3
 800d25a:	e009      	b.n	800d270 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	33b0      	adds	r3, #176	; 0xb0
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b087      	sub	sp, #28
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	32b0      	adds	r2, #176	; 0xb0
 800d292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d296:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	e008      	b.n	800d2b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	371c      	adds	r7, #28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	32b0      	adds	r2, #176	; 0xb0
 800d2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d101      	bne.n	800d2e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	e004      	b.n	800d2ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3714      	adds	r7, #20
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
	...

0800d2fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	32b0      	adds	r2, #176	; 0xb0
 800d30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d312:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	32b0      	adds	r2, #176	; 0xb0
 800d31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	e018      	b.n	800d35c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7c1b      	ldrb	r3, [r3, #16]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10a      	bne.n	800d348 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d332:	4b0c      	ldr	r3, [pc, #48]	; (800d364 <USBD_CDC_ReceivePacket+0x68>)
 800d334:	7819      	ldrb	r1, [r3, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d33c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f001 ffb1 	bl	800f2a8 <USBD_LL_PrepareReceive>
 800d346:	e008      	b.n	800d35a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d348:	4b06      	ldr	r3, [pc, #24]	; (800d364 <USBD_CDC_ReceivePacket+0x68>)
 800d34a:	7819      	ldrb	r1, [r3, #0]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d352:	2340      	movs	r3, #64	; 0x40
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f001 ffa7 	bl	800f2a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	24000098 	.word	0x24000098

0800d368 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d101      	bne.n	800d380 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d37c:	2303      	movs	r3, #3
 800d37e:	e01f      	b.n	800d3c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d003      	beq.n	800d3a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	79fa      	ldrb	r2, [r7, #7]
 800d3b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f001 fe1d 	bl	800eff4 <USBD_LL_Init>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3718      	adds	r7, #24
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e025      	b.n	800d42c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	32ae      	adds	r2, #174	; 0xae
 800d3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00f      	beq.n	800d41c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	32ae      	adds	r2, #174	; 0xae
 800d406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	f107 020e 	add.w	r2, r7, #14
 800d410:	4610      	mov	r0, r2
 800d412:	4798      	blx	r3
 800d414:	4602      	mov	r2, r0
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d422:	1c5a      	adds	r2, r3, #1
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f001 fe29 	bl	800f094 <USBD_LL_Start>
 800d442:	4603      	mov	r3, r0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d454:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d456:	4618      	mov	r0, r3
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	460b      	mov	r3, r1
 800d46c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d009      	beq.n	800d490 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	78fa      	ldrb	r2, [r7, #3]
 800d486:	4611      	mov	r1, r2
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	4798      	blx	r3
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d490:	7bfb      	ldrb	r3, [r7, #15]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	78fa      	ldrb	r2, [r7, #3]
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	4798      	blx	r3
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d4c0:	2303      	movs	r3, #3
 800d4c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d4de:	6839      	ldr	r1, [r7, #0]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f001 f908 	bl	800e6f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d502:	f003 031f 	and.w	r3, r3, #31
 800d506:	2b02      	cmp	r3, #2
 800d508:	d01a      	beq.n	800d540 <USBD_LL_SetupStage+0x72>
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d822      	bhi.n	800d554 <USBD_LL_SetupStage+0x86>
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <USBD_LL_SetupStage+0x4a>
 800d512:	2b01      	cmp	r3, #1
 800d514:	d00a      	beq.n	800d52c <USBD_LL_SetupStage+0x5e>
 800d516:	e01d      	b.n	800d554 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d51e:	4619      	mov	r1, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fb5f 	bl	800dbe4 <USBD_StdDevReq>
 800d526:	4603      	mov	r3, r0
 800d528:	73fb      	strb	r3, [r7, #15]
      break;
 800d52a:	e020      	b.n	800d56e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d532:	4619      	mov	r1, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fbc7 	bl	800dcc8 <USBD_StdItfReq>
 800d53a:	4603      	mov	r3, r0
 800d53c:	73fb      	strb	r3, [r7, #15]
      break;
 800d53e:	e016      	b.n	800d56e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fc29 	bl	800dda0 <USBD_StdEPReq>
 800d54e:	4603      	mov	r3, r0
 800d550:	73fb      	strb	r3, [r7, #15]
      break;
 800d552:	e00c      	b.n	800d56e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d55a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f001 fdf6 	bl	800f154 <USBD_LL_StallEP>
 800d568:	4603      	mov	r3, r0
 800d56a:	73fb      	strb	r3, [r7, #15]
      break;
 800d56c:	bf00      	nop
  }

  return ret;
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	460b      	mov	r3, r1
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d58a:	7afb      	ldrb	r3, [r7, #11]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d16e      	bne.n	800d66e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	f040 8098 	bne.w	800d6d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	689a      	ldr	r2, [r3, #8]
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d913      	bls.n	800d5d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	1ad2      	subs	r2, r2, r3
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	68da      	ldr	r2, [r3, #12]
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	bf28      	it	cs
 800d5ca:	4613      	movcs	r3, r2
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f001 f984 	bl	800e8de <USBD_CtlContinueRx>
 800d5d6:	e07d      	b.n	800d6d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d5de:	f003 031f 	and.w	r3, r3, #31
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d014      	beq.n	800d610 <USBD_LL_DataOutStage+0x98>
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d81d      	bhi.n	800d626 <USBD_LL_DataOutStage+0xae>
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d002      	beq.n	800d5f4 <USBD_LL_DataOutStage+0x7c>
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d003      	beq.n	800d5fa <USBD_LL_DataOutStage+0x82>
 800d5f2:	e018      	b.n	800d626 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	75bb      	strb	r3, [r7, #22]
            break;
 800d5f8:	e018      	b.n	800d62c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d600:	b2db      	uxtb	r3, r3
 800d602:	4619      	mov	r1, r3
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 fa5e 	bl	800dac6 <USBD_CoreFindIF>
 800d60a:	4603      	mov	r3, r0
 800d60c:	75bb      	strb	r3, [r7, #22]
            break;
 800d60e:	e00d      	b.n	800d62c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d616:	b2db      	uxtb	r3, r3
 800d618:	4619      	mov	r1, r3
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f000 fa60 	bl	800dae0 <USBD_CoreFindEP>
 800d620:	4603      	mov	r3, r0
 800d622:	75bb      	strb	r3, [r7, #22]
            break;
 800d624:	e002      	b.n	800d62c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d626:	2300      	movs	r3, #0
 800d628:	75bb      	strb	r3, [r7, #22]
            break;
 800d62a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d62c:	7dbb      	ldrb	r3, [r7, #22]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d119      	bne.n	800d666 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d113      	bne.n	800d666 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d63e:	7dba      	ldrb	r2, [r7, #22]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	32ae      	adds	r2, #174	; 0xae
 800d644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00b      	beq.n	800d666 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d64e:	7dba      	ldrb	r2, [r7, #22]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d656:	7dba      	ldrb	r2, [r7, #22]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	32ae      	adds	r2, #174	; 0xae
 800d65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f001 f94a 	bl	800e900 <USBD_CtlSendStatus>
 800d66c:	e032      	b.n	800d6d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d66e:	7afb      	ldrb	r3, [r7, #11]
 800d670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d674:	b2db      	uxtb	r3, r3
 800d676:	4619      	mov	r1, r3
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f000 fa31 	bl	800dae0 <USBD_CoreFindEP>
 800d67e:	4603      	mov	r3, r0
 800d680:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d682:	7dbb      	ldrb	r3, [r7, #22]
 800d684:	2bff      	cmp	r3, #255	; 0xff
 800d686:	d025      	beq.n	800d6d4 <USBD_LL_DataOutStage+0x15c>
 800d688:	7dbb      	ldrb	r3, [r7, #22]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d122      	bne.n	800d6d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b03      	cmp	r3, #3
 800d698:	d117      	bne.n	800d6ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d69a:	7dba      	ldrb	r2, [r7, #22]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	32ae      	adds	r2, #174	; 0xae
 800d6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00f      	beq.n	800d6ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d6aa:	7dba      	ldrb	r2, [r7, #22]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d6b2:	7dba      	ldrb	r2, [r7, #22]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	32ae      	adds	r2, #174	; 0xae
 800d6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	7afa      	ldrb	r2, [r7, #11]
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	4798      	blx	r3
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d6ca:	7dfb      	ldrb	r3, [r7, #23]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
 800d6d2:	e000      	b.n	800d6d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b086      	sub	sp, #24
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	60f8      	str	r0, [r7, #12]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	607a      	str	r2, [r7, #4]
 800d6ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d6ec:	7afb      	ldrb	r3, [r7, #11]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d16f      	bne.n	800d7d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	3314      	adds	r3, #20
 800d6f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	d15a      	bne.n	800d7b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	689a      	ldr	r2, [r3, #8]
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d914      	bls.n	800d738 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	689a      	ldr	r2, [r3, #8]
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	1ad2      	subs	r2, r2, r3
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	461a      	mov	r2, r3
 800d722:	6879      	ldr	r1, [r7, #4]
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f001 f8ac 	bl	800e882 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d72a:	2300      	movs	r3, #0
 800d72c:	2200      	movs	r2, #0
 800d72e:	2100      	movs	r1, #0
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f001 fdb9 	bl	800f2a8 <USBD_LL_PrepareReceive>
 800d736:	e03f      	b.n	800d7b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	68da      	ldr	r2, [r3, #12]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	429a      	cmp	r2, r3
 800d742:	d11c      	bne.n	800d77e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d316      	bcc.n	800d77e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	685a      	ldr	r2, [r3, #4]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d20f      	bcs.n	800d77e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d75e:	2200      	movs	r2, #0
 800d760:	2100      	movs	r1, #0
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f001 f88d 	bl	800e882 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d770:	2300      	movs	r3, #0
 800d772:	2200      	movs	r2, #0
 800d774:	2100      	movs	r1, #0
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f001 fd96 	bl	800f2a8 <USBD_LL_PrepareReceive>
 800d77c:	e01c      	b.n	800d7b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d784:	b2db      	uxtb	r3, r3
 800d786:	2b03      	cmp	r3, #3
 800d788:	d10f      	bne.n	800d7aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d009      	beq.n	800d7aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7aa:	2180      	movs	r1, #128	; 0x80
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f001 fcd1 	bl	800f154 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f001 f8b7 	bl	800e926 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d03a      	beq.n	800d838 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f7ff fe42 	bl	800d44c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d7d0:	e032      	b.n	800d838 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d7d2:	7afb      	ldrb	r3, [r7, #11]
 800d7d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f97f 	bl	800dae0 <USBD_CoreFindEP>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	2bff      	cmp	r3, #255	; 0xff
 800d7ea:	d025      	beq.n	800d838 <USBD_LL_DataInStage+0x15a>
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d122      	bne.n	800d838 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	2b03      	cmp	r3, #3
 800d7fc:	d11c      	bne.n	800d838 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d7fe:	7dfa      	ldrb	r2, [r7, #23]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	32ae      	adds	r2, #174	; 0xae
 800d804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d014      	beq.n	800d838 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d80e:	7dfa      	ldrb	r2, [r7, #23]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d816:	7dfa      	ldrb	r2, [r7, #23]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	32ae      	adds	r2, #174	; 0xae
 800d81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	7afa      	ldrb	r2, [r7, #11]
 800d824:	4611      	mov	r1, r2
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	4798      	blx	r3
 800d82a:	4603      	mov	r3, r0
 800d82c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d82e:	7dbb      	ldrb	r3, [r7, #22]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d834:	7dbb      	ldrb	r3, [r7, #22]
 800d836:	e000      	b.n	800d83a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3718      	adds	r7, #24
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d014      	beq.n	800d8a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00e      	beq.n	800d8a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	6852      	ldr	r2, [r2, #4]
 800d896:	b2d2      	uxtb	r2, r2
 800d898:	4611      	mov	r1, r2
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	4798      	blx	r3
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d001      	beq.n	800d8a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8a8:	2340      	movs	r3, #64	; 0x40
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f001 fc0b 	bl	800f0ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2240      	movs	r2, #64	; 0x40
 800d8c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8c4:	2340      	movs	r3, #64	; 0x40
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2180      	movs	r1, #128	; 0x80
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f001 fbfd 	bl	800f0ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2240      	movs	r2, #64	; 0x40
 800d8da:	621a      	str	r2, [r3, #32]

  return ret;
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	78fa      	ldrb	r2, [r7, #3]
 800d8f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d914:	b2da      	uxtb	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2204      	movs	r2, #4
 800d920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d932:	b480      	push	{r7}
 800d934:	b083      	sub	sp, #12
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b04      	cmp	r3, #4
 800d944:	d106      	bne.n	800d954 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d962:	b580      	push	{r7, lr}
 800d964:	b082      	sub	sp, #8
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d970:	b2db      	uxtb	r3, r3
 800d972:	2b03      	cmp	r3, #3
 800d974:	d110      	bne.n	800d998 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00b      	beq.n	800d998 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d986:	69db      	ldr	r3, [r3, #28]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d992:	69db      	ldr	r3, [r3, #28]
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	32ae      	adds	r2, #174	; 0xae
 800d9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	e01c      	b.n	800d9fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b03      	cmp	r3, #3
 800d9ce:	d115      	bne.n	800d9fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	32ae      	adds	r2, #174	; 0xae
 800d9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9de:	6a1b      	ldr	r3, [r3, #32]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	32ae      	adds	r2, #174	; 0xae
 800d9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f2:	6a1b      	ldr	r3, [r3, #32]
 800d9f4:	78fa      	ldrb	r2, [r7, #3]
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	460b      	mov	r3, r1
 800da10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	32ae      	adds	r2, #174	; 0xae
 800da1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d101      	bne.n	800da28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800da24:	2303      	movs	r3, #3
 800da26:	e01c      	b.n	800da62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b03      	cmp	r3, #3
 800da32:	d115      	bne.n	800da60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	32ae      	adds	r2, #174	; 0xae
 800da3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00b      	beq.n	800da60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	32ae      	adds	r2, #174	; 0xae
 800da52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da58:	78fa      	ldrb	r2, [r7, #3]
 800da5a:	4611      	mov	r1, r2
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800da6a:	b480      	push	{r7}
 800da6c:	b083      	sub	sp, #12
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00e      	beq.n	800dabc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	6852      	ldr	r2, [r2, #4]
 800daaa:	b2d2      	uxtb	r2, r2
 800daac:	4611      	mov	r1, r2
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	4798      	blx	r3
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dab8:	2303      	movs	r3, #3
 800daba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	460b      	mov	r3, r1
 800dad0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dad2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800daec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800daee:	4618      	mov	r0, r3
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b086      	sub	sp, #24
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	460b      	mov	r3, r1
 800db04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	885b      	ldrh	r3, [r3, #2]
 800db16:	b29a      	uxth	r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	429a      	cmp	r2, r3
 800db20:	d920      	bls.n	800db64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	b29b      	uxth	r3, r3
 800db28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800db2a:	e013      	b.n	800db54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db2c:	f107 030a 	add.w	r3, r7, #10
 800db30:	4619      	mov	r1, r3
 800db32:	6978      	ldr	r0, [r7, #20]
 800db34:	f000 f81b 	bl	800db6e <USBD_GetNextDesc>
 800db38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	785b      	ldrb	r3, [r3, #1]
 800db3e:	2b05      	cmp	r3, #5
 800db40:	d108      	bne.n	800db54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	789b      	ldrb	r3, [r3, #2]
 800db4a:	78fa      	ldrb	r2, [r7, #3]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d008      	beq.n	800db62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800db50:	2300      	movs	r3, #0
 800db52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	885b      	ldrh	r3, [r3, #2]
 800db58:	b29a      	uxth	r2, r3
 800db5a:	897b      	ldrh	r3, [r7, #10]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d8e5      	bhi.n	800db2c <USBD_GetEpDesc+0x32>
 800db60:	e000      	b.n	800db64 <USBD_GetEpDesc+0x6a>
          break;
 800db62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800db64:	693b      	ldr	r3, [r7, #16]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db6e:	b480      	push	{r7}
 800db70:	b085      	sub	sp, #20
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	881a      	ldrh	r2, [r3, #0]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	b29b      	uxth	r3, r3
 800db86:	4413      	add	r3, r2
 800db88:	b29a      	uxth	r2, r3
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	461a      	mov	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4413      	add	r3, r2
 800db98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800db9a:	68fb      	ldr	r3, [r7, #12]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3714      	adds	r7, #20
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b087      	sub	sp, #28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dbc6:	8a3b      	ldrh	r3, [r7, #16]
 800dbc8:	021b      	lsls	r3, r3, #8
 800dbca:	b21a      	sxth	r2, r3
 800dbcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	b21b      	sxth	r3, r3
 800dbd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dbd6:	89fb      	ldrh	r3, [r7, #14]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	371c      	adds	r7, #28
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbfa:	2b40      	cmp	r3, #64	; 0x40
 800dbfc:	d005      	beq.n	800dc0a <USBD_StdDevReq+0x26>
 800dbfe:	2b40      	cmp	r3, #64	; 0x40
 800dc00:	d857      	bhi.n	800dcb2 <USBD_StdDevReq+0xce>
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00f      	beq.n	800dc26 <USBD_StdDevReq+0x42>
 800dc06:	2b20      	cmp	r3, #32
 800dc08:	d153      	bne.n	800dcb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	32ae      	adds	r2, #174	; 0xae
 800dc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	4798      	blx	r3
 800dc20:	4603      	mov	r3, r0
 800dc22:	73fb      	strb	r3, [r7, #15]
      break;
 800dc24:	e04a      	b.n	800dcbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	785b      	ldrb	r3, [r3, #1]
 800dc2a:	2b09      	cmp	r3, #9
 800dc2c:	d83b      	bhi.n	800dca6 <USBD_StdDevReq+0xc2>
 800dc2e:	a201      	add	r2, pc, #4	; (adr r2, 800dc34 <USBD_StdDevReq+0x50>)
 800dc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc34:	0800dc89 	.word	0x0800dc89
 800dc38:	0800dc9d 	.word	0x0800dc9d
 800dc3c:	0800dca7 	.word	0x0800dca7
 800dc40:	0800dc93 	.word	0x0800dc93
 800dc44:	0800dca7 	.word	0x0800dca7
 800dc48:	0800dc67 	.word	0x0800dc67
 800dc4c:	0800dc5d 	.word	0x0800dc5d
 800dc50:	0800dca7 	.word	0x0800dca7
 800dc54:	0800dc7f 	.word	0x0800dc7f
 800dc58:	0800dc71 	.word	0x0800dc71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 fa3c 	bl	800e0dc <USBD_GetDescriptor>
          break;
 800dc64:	e024      	b.n	800dcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fba1 	bl	800e3b0 <USBD_SetAddress>
          break;
 800dc6e:	e01f      	b.n	800dcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc70:	6839      	ldr	r1, [r7, #0]
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 fbe0 	bl	800e438 <USBD_SetConfig>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]
          break;
 800dc7c:	e018      	b.n	800dcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc7e:	6839      	ldr	r1, [r7, #0]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fc83 	bl	800e58c <USBD_GetConfig>
          break;
 800dc86:	e013      	b.n	800dcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fcb4 	bl	800e5f8 <USBD_GetStatus>
          break;
 800dc90:	e00e      	b.n	800dcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fce3 	bl	800e660 <USBD_SetFeature>
          break;
 800dc9a:	e009      	b.n	800dcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc9c:	6839      	ldr	r1, [r7, #0]
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 fd07 	bl	800e6b2 <USBD_ClrFeature>
          break;
 800dca4:	e004      	b.n	800dcb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 fd5e 	bl	800e76a <USBD_CtlError>
          break;
 800dcae:	bf00      	nop
      }
      break;
 800dcb0:	e004      	b.n	800dcbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fd58 	bl	800e76a <USBD_CtlError>
      break;
 800dcba:	bf00      	nop
  }

  return ret;
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop

0800dcc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcde:	2b40      	cmp	r3, #64	; 0x40
 800dce0:	d005      	beq.n	800dcee <USBD_StdItfReq+0x26>
 800dce2:	2b40      	cmp	r3, #64	; 0x40
 800dce4:	d852      	bhi.n	800dd8c <USBD_StdItfReq+0xc4>
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <USBD_StdItfReq+0x26>
 800dcea:	2b20      	cmp	r3, #32
 800dcec:	d14e      	bne.n	800dd8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	2b02      	cmp	r3, #2
 800dcfa:	d840      	bhi.n	800dd7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	889b      	ldrh	r3, [r3, #4]
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d836      	bhi.n	800dd74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	889b      	ldrh	r3, [r3, #4]
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7ff fed9 	bl	800dac6 <USBD_CoreFindIF>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd18:	7bbb      	ldrb	r3, [r7, #14]
 800dd1a:	2bff      	cmp	r3, #255	; 0xff
 800dd1c:	d01d      	beq.n	800dd5a <USBD_StdItfReq+0x92>
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d11a      	bne.n	800dd5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd24:	7bba      	ldrb	r2, [r7, #14]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	32ae      	adds	r2, #174	; 0xae
 800dd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00f      	beq.n	800dd54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dd34:	7bba      	ldrb	r2, [r7, #14]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd3c:	7bba      	ldrb	r2, [r7, #14]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	32ae      	adds	r2, #174	; 0xae
 800dd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	4798      	blx	r3
 800dd4e:	4603      	mov	r3, r0
 800dd50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd52:	e004      	b.n	800dd5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dd54:	2303      	movs	r3, #3
 800dd56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd58:	e001      	b.n	800dd5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	88db      	ldrh	r3, [r3, #6]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d110      	bne.n	800dd88 <USBD_StdItfReq+0xc0>
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d10d      	bne.n	800dd88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fdc7 	bl	800e900 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd72:	e009      	b.n	800dd88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fcf7 	bl	800e76a <USBD_CtlError>
          break;
 800dd7c:	e004      	b.n	800dd88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dd7e:	6839      	ldr	r1, [r7, #0]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 fcf2 	bl	800e76a <USBD_CtlError>
          break;
 800dd86:	e000      	b.n	800dd8a <USBD_StdItfReq+0xc2>
          break;
 800dd88:	bf00      	nop
      }
      break;
 800dd8a:	e004      	b.n	800dd96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fceb 	bl	800e76a <USBD_CtlError>
      break;
 800dd94:	bf00      	nop
  }

  return ret;
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	889b      	ldrh	r3, [r3, #4]
 800ddb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddbc:	2b40      	cmp	r3, #64	; 0x40
 800ddbe:	d007      	beq.n	800ddd0 <USBD_StdEPReq+0x30>
 800ddc0:	2b40      	cmp	r3, #64	; 0x40
 800ddc2:	f200 817f 	bhi.w	800e0c4 <USBD_StdEPReq+0x324>
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d02a      	beq.n	800de20 <USBD_StdEPReq+0x80>
 800ddca:	2b20      	cmp	r3, #32
 800ddcc:	f040 817a 	bne.w	800e0c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ddd0:	7bbb      	ldrb	r3, [r7, #14]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7ff fe83 	bl	800dae0 <USBD_CoreFindEP>
 800ddda:	4603      	mov	r3, r0
 800dddc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddde:	7b7b      	ldrb	r3, [r7, #13]
 800dde0:	2bff      	cmp	r3, #255	; 0xff
 800dde2:	f000 8174 	beq.w	800e0ce <USBD_StdEPReq+0x32e>
 800dde6:	7b7b      	ldrb	r3, [r7, #13]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f040 8170 	bne.w	800e0ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ddee:	7b7a      	ldrb	r2, [r7, #13]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ddf6:	7b7a      	ldrb	r2, [r7, #13]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	32ae      	adds	r2, #174	; 0xae
 800ddfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 8163 	beq.w	800e0ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de08:	7b7a      	ldrb	r2, [r7, #13]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	32ae      	adds	r2, #174	; 0xae
 800de0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	4798      	blx	r3
 800de1a:	4603      	mov	r3, r0
 800de1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de1e:	e156      	b.n	800e0ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	785b      	ldrb	r3, [r3, #1]
 800de24:	2b03      	cmp	r3, #3
 800de26:	d008      	beq.n	800de3a <USBD_StdEPReq+0x9a>
 800de28:	2b03      	cmp	r3, #3
 800de2a:	f300 8145 	bgt.w	800e0b8 <USBD_StdEPReq+0x318>
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f000 809b 	beq.w	800df6a <USBD_StdEPReq+0x1ca>
 800de34:	2b01      	cmp	r3, #1
 800de36:	d03c      	beq.n	800deb2 <USBD_StdEPReq+0x112>
 800de38:	e13e      	b.n	800e0b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b02      	cmp	r3, #2
 800de44:	d002      	beq.n	800de4c <USBD_StdEPReq+0xac>
 800de46:	2b03      	cmp	r3, #3
 800de48:	d016      	beq.n	800de78 <USBD_StdEPReq+0xd8>
 800de4a:	e02c      	b.n	800dea6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de4c:	7bbb      	ldrb	r3, [r7, #14]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00d      	beq.n	800de6e <USBD_StdEPReq+0xce>
 800de52:	7bbb      	ldrb	r3, [r7, #14]
 800de54:	2b80      	cmp	r3, #128	; 0x80
 800de56:	d00a      	beq.n	800de6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de58:	7bbb      	ldrb	r3, [r7, #14]
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f001 f979 	bl	800f154 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de62:	2180      	movs	r1, #128	; 0x80
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f001 f975 	bl	800f154 <USBD_LL_StallEP>
 800de6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de6c:	e020      	b.n	800deb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fc7a 	bl	800e76a <USBD_CtlError>
              break;
 800de76:	e01b      	b.n	800deb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	885b      	ldrh	r3, [r3, #2]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10e      	bne.n	800de9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de80:	7bbb      	ldrb	r3, [r7, #14]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00b      	beq.n	800de9e <USBD_StdEPReq+0xfe>
 800de86:	7bbb      	ldrb	r3, [r7, #14]
 800de88:	2b80      	cmp	r3, #128	; 0x80
 800de8a:	d008      	beq.n	800de9e <USBD_StdEPReq+0xfe>
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	88db      	ldrh	r3, [r3, #6]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d104      	bne.n	800de9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f001 f95b 	bl	800f154 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 fd2e 	bl	800e900 <USBD_CtlSendStatus>

              break;
 800dea4:	e004      	b.n	800deb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fc5e 	bl	800e76a <USBD_CtlError>
              break;
 800deae:	bf00      	nop
          }
          break;
 800deb0:	e107      	b.n	800e0c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b02      	cmp	r3, #2
 800debc:	d002      	beq.n	800dec4 <USBD_StdEPReq+0x124>
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d016      	beq.n	800def0 <USBD_StdEPReq+0x150>
 800dec2:	e04b      	b.n	800df5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dec4:	7bbb      	ldrb	r3, [r7, #14]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00d      	beq.n	800dee6 <USBD_StdEPReq+0x146>
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	2b80      	cmp	r3, #128	; 0x80
 800dece:	d00a      	beq.n	800dee6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f001 f93d 	bl	800f154 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800deda:	2180      	movs	r1, #128	; 0x80
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f001 f939 	bl	800f154 <USBD_LL_StallEP>
 800dee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dee4:	e040      	b.n	800df68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fc3e 	bl	800e76a <USBD_CtlError>
              break;
 800deee:	e03b      	b.n	800df68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	885b      	ldrh	r3, [r3, #2]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d136      	bne.n	800df66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800def8:	7bbb      	ldrb	r3, [r7, #14]
 800defa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800defe:	2b00      	cmp	r3, #0
 800df00:	d004      	beq.n	800df0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df02:	7bbb      	ldrb	r3, [r7, #14]
 800df04:	4619      	mov	r1, r3
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f001 f943 	bl	800f192 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fcf7 	bl	800e900 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df12:	7bbb      	ldrb	r3, [r7, #14]
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff fde2 	bl	800dae0 <USBD_CoreFindEP>
 800df1c:	4603      	mov	r3, r0
 800df1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df20:	7b7b      	ldrb	r3, [r7, #13]
 800df22:	2bff      	cmp	r3, #255	; 0xff
 800df24:	d01f      	beq.n	800df66 <USBD_StdEPReq+0x1c6>
 800df26:	7b7b      	ldrb	r3, [r7, #13]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d11c      	bne.n	800df66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800df2c:	7b7a      	ldrb	r2, [r7, #13]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800df34:	7b7a      	ldrb	r2, [r7, #13]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	32ae      	adds	r2, #174	; 0xae
 800df3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d010      	beq.n	800df66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df44:	7b7a      	ldrb	r2, [r7, #13]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	32ae      	adds	r2, #174	; 0xae
 800df4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	6839      	ldr	r1, [r7, #0]
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	4798      	blx	r3
 800df56:	4603      	mov	r3, r0
 800df58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800df5a:	e004      	b.n	800df66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800df5c:	6839      	ldr	r1, [r7, #0]
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fc03 	bl	800e76a <USBD_CtlError>
              break;
 800df64:	e000      	b.n	800df68 <USBD_StdEPReq+0x1c8>
              break;
 800df66:	bf00      	nop
          }
          break;
 800df68:	e0ab      	b.n	800e0c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2b02      	cmp	r3, #2
 800df74:	d002      	beq.n	800df7c <USBD_StdEPReq+0x1dc>
 800df76:	2b03      	cmp	r3, #3
 800df78:	d032      	beq.n	800dfe0 <USBD_StdEPReq+0x240>
 800df7a:	e097      	b.n	800e0ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df7c:	7bbb      	ldrb	r3, [r7, #14]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d007      	beq.n	800df92 <USBD_StdEPReq+0x1f2>
 800df82:	7bbb      	ldrb	r3, [r7, #14]
 800df84:	2b80      	cmp	r3, #128	; 0x80
 800df86:	d004      	beq.n	800df92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fbed 	bl	800e76a <USBD_CtlError>
                break;
 800df90:	e091      	b.n	800e0b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df96:	2b00      	cmp	r3, #0
 800df98:	da0b      	bge.n	800dfb2 <USBD_StdEPReq+0x212>
 800df9a:	7bbb      	ldrb	r3, [r7, #14]
 800df9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	3310      	adds	r3, #16
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	4413      	add	r3, r2
 800dfae:	3304      	adds	r3, #4
 800dfb0:	e00b      	b.n	800dfca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfb2:	7bbb      	ldrb	r3, [r7, #14]
 800dfb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfb8:	4613      	mov	r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4413      	add	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	3304      	adds	r3, #4
 800dfca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2202      	movs	r2, #2
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fc37 	bl	800e84c <USBD_CtlSendData>
              break;
 800dfde:	e06a      	b.n	800e0b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dfe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	da11      	bge.n	800e00c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dfe8:	7bbb      	ldrb	r3, [r7, #14]
 800dfea:	f003 020f 	and.w	r2, r3, #15
 800dfee:	6879      	ldr	r1, [r7, #4]
 800dff0:	4613      	mov	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	440b      	add	r3, r1
 800dffa:	3324      	adds	r3, #36	; 0x24
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d117      	bne.n	800e032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fbb0 	bl	800e76a <USBD_CtlError>
                  break;
 800e00a:	e054      	b.n	800e0b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e00c:	7bbb      	ldrb	r3, [r7, #14]
 800e00e:	f003 020f 	and.w	r2, r3, #15
 800e012:	6879      	ldr	r1, [r7, #4]
 800e014:	4613      	mov	r3, r2
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	4413      	add	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	440b      	add	r3, r1
 800e01e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e022:	881b      	ldrh	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d104      	bne.n	800e032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e028:	6839      	ldr	r1, [r7, #0]
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 fb9d 	bl	800e76a <USBD_CtlError>
                  break;
 800e030:	e041      	b.n	800e0b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e036:	2b00      	cmp	r3, #0
 800e038:	da0b      	bge.n	800e052 <USBD_StdEPReq+0x2b2>
 800e03a:	7bbb      	ldrb	r3, [r7, #14]
 800e03c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e040:	4613      	mov	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	3310      	adds	r3, #16
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	4413      	add	r3, r2
 800e04e:	3304      	adds	r3, #4
 800e050:	e00b      	b.n	800e06a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e052:	7bbb      	ldrb	r3, [r7, #14]
 800e054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	4413      	add	r3, r2
 800e068:	3304      	adds	r3, #4
 800e06a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e06c:	7bbb      	ldrb	r3, [r7, #14]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <USBD_StdEPReq+0x2d8>
 800e072:	7bbb      	ldrb	r3, [r7, #14]
 800e074:	2b80      	cmp	r3, #128	; 0x80
 800e076:	d103      	bne.n	800e080 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2200      	movs	r2, #0
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	e00e      	b.n	800e09e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e080:	7bbb      	ldrb	r3, [r7, #14]
 800e082:	4619      	mov	r1, r3
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f001 f8a3 	bl	800f1d0 <USBD_LL_IsStallEP>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d003      	beq.n	800e098 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2201      	movs	r2, #1
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	e002      	b.n	800e09e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2200      	movs	r2, #0
 800e09c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2202      	movs	r2, #2
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fbd1 	bl	800e84c <USBD_CtlSendData>
              break;
 800e0aa:	e004      	b.n	800e0b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e0ac:	6839      	ldr	r1, [r7, #0]
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fb5b 	bl	800e76a <USBD_CtlError>
              break;
 800e0b4:	bf00      	nop
          }
          break;
 800e0b6:	e004      	b.n	800e0c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fb55 	bl	800e76a <USBD_CtlError>
          break;
 800e0c0:	bf00      	nop
      }
      break;
 800e0c2:	e005      	b.n	800e0d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fb4f 	bl	800e76a <USBD_CtlError>
      break;
 800e0cc:	e000      	b.n	800e0d0 <USBD_StdEPReq+0x330>
      break;
 800e0ce:	bf00      	nop
  }

  return ret;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	885b      	ldrh	r3, [r3, #2]
 800e0f6:	0a1b      	lsrs	r3, r3, #8
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	2b06      	cmp	r3, #6
 800e0fe:	f200 8128 	bhi.w	800e352 <USBD_GetDescriptor+0x276>
 800e102:	a201      	add	r2, pc, #4	; (adr r2, 800e108 <USBD_GetDescriptor+0x2c>)
 800e104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e108:	0800e125 	.word	0x0800e125
 800e10c:	0800e13d 	.word	0x0800e13d
 800e110:	0800e17d 	.word	0x0800e17d
 800e114:	0800e353 	.word	0x0800e353
 800e118:	0800e353 	.word	0x0800e353
 800e11c:	0800e2f3 	.word	0x0800e2f3
 800e120:	0800e31f 	.word	0x0800e31f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	7c12      	ldrb	r2, [r2, #16]
 800e130:	f107 0108 	add.w	r1, r7, #8
 800e134:	4610      	mov	r0, r2
 800e136:	4798      	blx	r3
 800e138:	60f8      	str	r0, [r7, #12]
      break;
 800e13a:	e112      	b.n	800e362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	7c1b      	ldrb	r3, [r3, #16]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10d      	bne.n	800e160 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14c:	f107 0208 	add.w	r2, r7, #8
 800e150:	4610      	mov	r0, r2
 800e152:	4798      	blx	r3
 800e154:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	3301      	adds	r3, #1
 800e15a:	2202      	movs	r2, #2
 800e15c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e15e:	e100      	b.n	800e362 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e168:	f107 0208 	add.w	r2, r7, #8
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
 800e170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3301      	adds	r3, #1
 800e176:	2202      	movs	r2, #2
 800e178:	701a      	strb	r2, [r3, #0]
      break;
 800e17a:	e0f2      	b.n	800e362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	885b      	ldrh	r3, [r3, #2]
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b05      	cmp	r3, #5
 800e184:	f200 80ac 	bhi.w	800e2e0 <USBD_GetDescriptor+0x204>
 800e188:	a201      	add	r2, pc, #4	; (adr r2, 800e190 <USBD_GetDescriptor+0xb4>)
 800e18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18e:	bf00      	nop
 800e190:	0800e1a9 	.word	0x0800e1a9
 800e194:	0800e1dd 	.word	0x0800e1dd
 800e198:	0800e211 	.word	0x0800e211
 800e19c:	0800e245 	.word	0x0800e245
 800e1a0:	0800e279 	.word	0x0800e279
 800e1a4:	0800e2ad 	.word	0x0800e2ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	7c12      	ldrb	r2, [r2, #16]
 800e1c0:	f107 0108 	add.w	r1, r7, #8
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	4798      	blx	r3
 800e1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1ca:	e091      	b.n	800e2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 facb 	bl	800e76a <USBD_CtlError>
            err++;
 800e1d4:	7afb      	ldrb	r3, [r7, #11]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e1da:	e089      	b.n	800e2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00b      	beq.n	800e200 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	7c12      	ldrb	r2, [r2, #16]
 800e1f4:	f107 0108 	add.w	r1, r7, #8
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	4798      	blx	r3
 800e1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1fe:	e077      	b.n	800e2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fab1 	bl	800e76a <USBD_CtlError>
            err++;
 800e208:	7afb      	ldrb	r3, [r7, #11]
 800e20a:	3301      	adds	r3, #1
 800e20c:	72fb      	strb	r3, [r7, #11]
          break;
 800e20e:	e06f      	b.n	800e2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00b      	beq.n	800e234 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	7c12      	ldrb	r2, [r2, #16]
 800e228:	f107 0108 	add.w	r1, r7, #8
 800e22c:	4610      	mov	r0, r2
 800e22e:	4798      	blx	r3
 800e230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e232:	e05d      	b.n	800e2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fa97 	bl	800e76a <USBD_CtlError>
            err++;
 800e23c:	7afb      	ldrb	r3, [r7, #11]
 800e23e:	3301      	adds	r3, #1
 800e240:	72fb      	strb	r3, [r7, #11]
          break;
 800e242:	e055      	b.n	800e2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00b      	beq.n	800e268 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	7c12      	ldrb	r2, [r2, #16]
 800e25c:	f107 0108 	add.w	r1, r7, #8
 800e260:	4610      	mov	r0, r2
 800e262:	4798      	blx	r3
 800e264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e266:	e043      	b.n	800e2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e268:	6839      	ldr	r1, [r7, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fa7d 	bl	800e76a <USBD_CtlError>
            err++;
 800e270:	7afb      	ldrb	r3, [r7, #11]
 800e272:	3301      	adds	r3, #1
 800e274:	72fb      	strb	r3, [r7, #11]
          break;
 800e276:	e03b      	b.n	800e2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	7c12      	ldrb	r2, [r2, #16]
 800e290:	f107 0108 	add.w	r1, r7, #8
 800e294:	4610      	mov	r0, r2
 800e296:	4798      	blx	r3
 800e298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e29a:	e029      	b.n	800e2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fa63 	bl	800e76a <USBD_CtlError>
            err++;
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2aa:	e021      	b.n	800e2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00b      	beq.n	800e2d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	7c12      	ldrb	r2, [r2, #16]
 800e2c4:	f107 0108 	add.w	r1, r7, #8
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	4798      	blx	r3
 800e2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2ce:	e00f      	b.n	800e2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fa49 	bl	800e76a <USBD_CtlError>
            err++;
 800e2d8:	7afb      	ldrb	r3, [r7, #11]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e2de:	e007      	b.n	800e2f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fa41 	bl	800e76a <USBD_CtlError>
          err++;
 800e2e8:	7afb      	ldrb	r3, [r7, #11]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e2ee:	bf00      	nop
      }
      break;
 800e2f0:	e037      	b.n	800e362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	7c1b      	ldrb	r3, [r3, #16]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e302:	f107 0208 	add.w	r2, r7, #8
 800e306:	4610      	mov	r0, r2
 800e308:	4798      	blx	r3
 800e30a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e30c:	e029      	b.n	800e362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e30e:	6839      	ldr	r1, [r7, #0]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fa2a 	bl	800e76a <USBD_CtlError>
        err++;
 800e316:	7afb      	ldrb	r3, [r7, #11]
 800e318:	3301      	adds	r3, #1
 800e31a:	72fb      	strb	r3, [r7, #11]
      break;
 800e31c:	e021      	b.n	800e362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	7c1b      	ldrb	r3, [r3, #16]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10d      	bne.n	800e342 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32e:	f107 0208 	add.w	r2, r7, #8
 800e332:	4610      	mov	r0, r2
 800e334:	4798      	blx	r3
 800e336:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3301      	adds	r3, #1
 800e33c:	2207      	movs	r2, #7
 800e33e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e340:	e00f      	b.n	800e362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e342:	6839      	ldr	r1, [r7, #0]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fa10 	bl	800e76a <USBD_CtlError>
        err++;
 800e34a:	7afb      	ldrb	r3, [r7, #11]
 800e34c:	3301      	adds	r3, #1
 800e34e:	72fb      	strb	r3, [r7, #11]
      break;
 800e350:	e007      	b.n	800e362 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fa08 	bl	800e76a <USBD_CtlError>
      err++;
 800e35a:	7afb      	ldrb	r3, [r7, #11]
 800e35c:	3301      	adds	r3, #1
 800e35e:	72fb      	strb	r3, [r7, #11]
      break;
 800e360:	bf00      	nop
  }

  if (err != 0U)
 800e362:	7afb      	ldrb	r3, [r7, #11]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d11e      	bne.n	800e3a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	88db      	ldrh	r3, [r3, #6]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d016      	beq.n	800e39e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e370:	893b      	ldrh	r3, [r7, #8]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00e      	beq.n	800e394 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	88da      	ldrh	r2, [r3, #6]
 800e37a:	893b      	ldrh	r3, [r7, #8]
 800e37c:	4293      	cmp	r3, r2
 800e37e:	bf28      	it	cs
 800e380:	4613      	movcs	r3, r2
 800e382:	b29b      	uxth	r3, r3
 800e384:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e386:	893b      	ldrh	r3, [r7, #8]
 800e388:	461a      	mov	r2, r3
 800e38a:	68f9      	ldr	r1, [r7, #12]
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fa5d 	bl	800e84c <USBD_CtlSendData>
 800e392:	e009      	b.n	800e3a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f9e7 	bl	800e76a <USBD_CtlError>
 800e39c:	e004      	b.n	800e3a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 faae 	bl	800e900 <USBD_CtlSendStatus>
 800e3a4:	e000      	b.n	800e3a8 <USBD_GetDescriptor+0x2cc>
    return;
 800e3a6:	bf00      	nop
  }
}
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop

0800e3b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	889b      	ldrh	r3, [r3, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d131      	bne.n	800e426 <USBD_SetAddress+0x76>
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	88db      	ldrh	r3, [r3, #6]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d12d      	bne.n	800e426 <USBD_SetAddress+0x76>
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	885b      	ldrh	r3, [r3, #2]
 800e3ce:	2b7f      	cmp	r3, #127	; 0x7f
 800e3d0:	d829      	bhi.n	800e426 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	885b      	ldrh	r3, [r3, #2]
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b03      	cmp	r3, #3
 800e3e8:	d104      	bne.n	800e3f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f9bc 	bl	800e76a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3f2:	e01d      	b.n	800e430 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	7bfa      	ldrb	r2, [r7, #15]
 800e3f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 ff11 	bl	800f228 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fa7a 	bl	800e900 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d004      	beq.n	800e41c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2202      	movs	r2, #2
 800e416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e41a:	e009      	b.n	800e430 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e424:	e004      	b.n	800e430 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f99e 	bl	800e76a <USBD_CtlError>
  }
}
 800e42e:	bf00      	nop
 800e430:	bf00      	nop
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	885b      	ldrh	r3, [r3, #2]
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	4b4e      	ldr	r3, [pc, #312]	; (800e588 <USBD_SetConfig+0x150>)
 800e44e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e450:	4b4d      	ldr	r3, [pc, #308]	; (800e588 <USBD_SetConfig+0x150>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d905      	bls.n	800e464 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f985 	bl	800e76a <USBD_CtlError>
    return USBD_FAIL;
 800e460:	2303      	movs	r3, #3
 800e462:	e08c      	b.n	800e57e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	d002      	beq.n	800e476 <USBD_SetConfig+0x3e>
 800e470:	2b03      	cmp	r3, #3
 800e472:	d029      	beq.n	800e4c8 <USBD_SetConfig+0x90>
 800e474:	e075      	b.n	800e562 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e476:	4b44      	ldr	r3, [pc, #272]	; (800e588 <USBD_SetConfig+0x150>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d020      	beq.n	800e4c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e47e:	4b42      	ldr	r3, [pc, #264]	; (800e588 <USBD_SetConfig+0x150>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e488:	4b3f      	ldr	r3, [pc, #252]	; (800e588 <USBD_SetConfig+0x150>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7fe ffe7 	bl	800d462 <USBD_SetClassConfig>
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d008      	beq.n	800e4b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f962 	bl	800e76a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2202      	movs	r2, #2
 800e4aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4ae:	e065      	b.n	800e57c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fa25 	bl	800e900 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2203      	movs	r2, #3
 800e4ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e4be:	e05d      	b.n	800e57c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 fa1d 	bl	800e900 <USBD_CtlSendStatus>
      break;
 800e4c6:	e059      	b.n	800e57c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e4c8:	4b2f      	ldr	r3, [pc, #188]	; (800e588 <USBD_SetConfig+0x150>)
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d112      	bne.n	800e4f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e4d8:	4b2b      	ldr	r3, [pc, #172]	; (800e588 <USBD_SetConfig+0x150>)
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	461a      	mov	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e4e2:	4b29      	ldr	r3, [pc, #164]	; (800e588 <USBD_SetConfig+0x150>)
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7fe ffd6 	bl	800d49a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 fa06 	bl	800e900 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4f4:	e042      	b.n	800e57c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e4f6:	4b24      	ldr	r3, [pc, #144]	; (800e588 <USBD_SetConfig+0x150>)
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	429a      	cmp	r2, r3
 800e502:	d02a      	beq.n	800e55a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7fe ffc4 	bl	800d49a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e512:	4b1d      	ldr	r3, [pc, #116]	; (800e588 <USBD_SetConfig+0x150>)
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	461a      	mov	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e51c:	4b1a      	ldr	r3, [pc, #104]	; (800e588 <USBD_SetConfig+0x150>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	4619      	mov	r1, r3
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7fe ff9d 	bl	800d462 <USBD_SetClassConfig>
 800e528:	4603      	mov	r3, r0
 800e52a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e52c:	7bfb      	ldrb	r3, [r7, #15]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00f      	beq.n	800e552 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e532:	6839      	ldr	r1, [r7, #0]
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f918 	bl	800e76a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	4619      	mov	r1, r3
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7fe ffa9 	bl	800d49a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2202      	movs	r2, #2
 800e54c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e550:	e014      	b.n	800e57c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 f9d4 	bl	800e900 <USBD_CtlSendStatus>
      break;
 800e558:	e010      	b.n	800e57c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f9d0 	bl	800e900 <USBD_CtlSendStatus>
      break;
 800e560:	e00c      	b.n	800e57c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 f900 	bl	800e76a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e56a:	4b07      	ldr	r3, [pc, #28]	; (800e588 <USBD_SetConfig+0x150>)
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7fe ff92 	bl	800d49a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e576:	2303      	movs	r3, #3
 800e578:	73fb      	strb	r3, [r7, #15]
      break;
 800e57a:	bf00      	nop
  }

  return ret;
 800e57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	2400057c 	.word	0x2400057c

0800e58c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	88db      	ldrh	r3, [r3, #6]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d004      	beq.n	800e5a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f8e2 	bl	800e76a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e5a6:	e023      	b.n	800e5f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	dc02      	bgt.n	800e5ba <USBD_GetConfig+0x2e>
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dc03      	bgt.n	800e5c0 <USBD_GetConfig+0x34>
 800e5b8:	e015      	b.n	800e5e6 <USBD_GetConfig+0x5a>
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	d00b      	beq.n	800e5d6 <USBD_GetConfig+0x4a>
 800e5be:	e012      	b.n	800e5e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f93c 	bl	800e84c <USBD_CtlSendData>
        break;
 800e5d4:	e00c      	b.n	800e5f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	3304      	adds	r3, #4
 800e5da:	2201      	movs	r2, #1
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f934 	bl	800e84c <USBD_CtlSendData>
        break;
 800e5e4:	e004      	b.n	800e5f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e5e6:	6839      	ldr	r1, [r7, #0]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f8be 	bl	800e76a <USBD_CtlError>
        break;
 800e5ee:	bf00      	nop
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	3b01      	subs	r3, #1
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	d81e      	bhi.n	800e64e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	88db      	ldrh	r3, [r3, #6]
 800e614:	2b02      	cmp	r3, #2
 800e616:	d004      	beq.n	800e622 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e618:	6839      	ldr	r1, [r7, #0]
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 f8a5 	bl	800e76a <USBD_CtlError>
        break;
 800e620:	e01a      	b.n	800e658 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2201      	movs	r2, #1
 800e626:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d005      	beq.n	800e63e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	f043 0202 	orr.w	r2, r3, #2
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	330c      	adds	r3, #12
 800e642:	2202      	movs	r2, #2
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f900 	bl	800e84c <USBD_CtlSendData>
      break;
 800e64c:	e004      	b.n	800e658 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f88a 	bl	800e76a <USBD_CtlError>
      break;
 800e656:	bf00      	nop
  }
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	885b      	ldrh	r3, [r3, #2]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d107      	bne.n	800e682 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 f940 	bl	800e900 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e680:	e013      	b.n	800e6aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	885b      	ldrh	r3, [r3, #2]
 800e686:	2b02      	cmp	r3, #2
 800e688:	d10b      	bne.n	800e6a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	889b      	ldrh	r3, [r3, #4]
 800e68e:	0a1b      	lsrs	r3, r3, #8
 800e690:	b29b      	uxth	r3, r3
 800e692:	b2da      	uxtb	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f930 	bl	800e900 <USBD_CtlSendStatus>
}
 800e6a0:	e003      	b.n	800e6aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e6a2:	6839      	ldr	r1, [r7, #0]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f860 	bl	800e76a <USBD_CtlError>
}
 800e6aa:	bf00      	nop
 800e6ac:	3708      	adds	r7, #8
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b082      	sub	sp, #8
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
 800e6ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	d80b      	bhi.n	800e6e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	885b      	ldrh	r3, [r3, #2]
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d10c      	bne.n	800e6ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f910 	bl	800e900 <USBD_CtlSendStatus>
      }
      break;
 800e6e0:	e004      	b.n	800e6ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f840 	bl	800e76a <USBD_CtlError>
      break;
 800e6ea:	e000      	b.n	800e6ee <USBD_ClrFeature+0x3c>
      break;
 800e6ec:	bf00      	nop
  }
}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	781a      	ldrb	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3301      	adds	r3, #1
 800e710:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	781a      	ldrb	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	3301      	adds	r3, #1
 800e71e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f7ff fa41 	bl	800dba8 <SWAPBYTE>
 800e726:	4603      	mov	r3, r0
 800e728:	461a      	mov	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	3301      	adds	r3, #1
 800e732:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	3301      	adds	r3, #1
 800e738:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f7ff fa34 	bl	800dba8 <SWAPBYTE>
 800e740:	4603      	mov	r3, r0
 800e742:	461a      	mov	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3301      	adds	r3, #1
 800e74c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3301      	adds	r3, #1
 800e752:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff fa27 	bl	800dba8 <SWAPBYTE>
 800e75a:	4603      	mov	r3, r0
 800e75c:	461a      	mov	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	80da      	strh	r2, [r3, #6]
}
 800e762:	bf00      	nop
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e774:	2180      	movs	r1, #128	; 0x80
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f000 fcec 	bl	800f154 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e77c:	2100      	movs	r1, #0
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fce8 	bl	800f154 <USBD_LL_StallEP>
}
 800e784:	bf00      	nop
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e798:	2300      	movs	r3, #0
 800e79a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d036      	beq.n	800e810 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e7a6:	6938      	ldr	r0, [r7, #16]
 800e7a8:	f000 f836 	bl	800e818 <USBD_GetLen>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	005b      	lsls	r3, r3, #1
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e7ba:	7dfb      	ldrb	r3, [r7, #23]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	4413      	add	r3, r2
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	7812      	ldrb	r2, [r2, #0]
 800e7c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e7c6:	7dfb      	ldrb	r3, [r7, #23]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	2203      	movs	r2, #3
 800e7d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e7d6:	7dfb      	ldrb	r3, [r7, #23]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e7dc:	e013      	b.n	800e806 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e7de:	7dfb      	ldrb	r3, [r7, #23]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	693a      	ldr	r2, [r7, #16]
 800e7e6:	7812      	ldrb	r2, [r2, #0]
 800e7e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	613b      	str	r3, [r7, #16]
    idx++;
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e7f6:	7dfb      	ldrb	r3, [r7, #23]
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800e800:	7dfb      	ldrb	r3, [r7, #23]
 800e802:	3301      	adds	r3, #1
 800e804:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1e7      	bne.n	800e7de <USBD_GetString+0x52>
 800e80e:	e000      	b.n	800e812 <USBD_GetString+0x86>
    return;
 800e810:	bf00      	nop
  }
}
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e828:	e005      	b.n	800e836 <USBD_GetLen+0x1e>
  {
    len++;
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	3301      	adds	r3, #1
 800e82e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	3301      	adds	r3, #1
 800e834:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1f5      	bne.n	800e82a <USBD_GetLen+0x12>
  }

  return len;
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2202      	movs	r2, #2
 800e85c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	2100      	movs	r1, #0
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f000 fcf7 	bl	800f266 <USBD_LL_Transmit>

  return USBD_OK;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b084      	sub	sp, #16
 800e886:	af00      	add	r7, sp, #0
 800e888:	60f8      	str	r0, [r7, #12]
 800e88a:	60b9      	str	r1, [r7, #8]
 800e88c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	2100      	movs	r1, #0
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f000 fce6 	bl	800f266 <USBD_LL_Transmit>

  return USBD_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2203      	movs	r2, #3
 800e8b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	68ba      	ldr	r2, [r7, #8]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f000 fcea 	bl	800f2a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b084      	sub	sp, #16
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	60b9      	str	r1, [r7, #8]
 800e8e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 fcd9 	bl	800f2a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2204      	movs	r2, #4
 800e90c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e910:	2300      	movs	r3, #0
 800e912:	2200      	movs	r2, #0
 800e914:	2100      	movs	r1, #0
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 fca5 	bl	800f266 <USBD_LL_Transmit>

  return USBD_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b082      	sub	sp, #8
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2205      	movs	r2, #5
 800e932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e936:	2300      	movs	r3, #0
 800e938:	2200      	movs	r2, #0
 800e93a:	2100      	movs	r1, #0
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fcb3 	bl	800f2a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e950:	2200      	movs	r2, #0
 800e952:	4913      	ldr	r1, [pc, #76]	; (800e9a0 <MX_USB_DEVICE_Init+0x54>)
 800e954:	4813      	ldr	r0, [pc, #76]	; (800e9a4 <MX_USB_DEVICE_Init+0x58>)
 800e956:	f7fe fd07 	bl	800d368 <USBD_Init>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e960:	f7f2 fada 	bl	8000f18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e964:	4910      	ldr	r1, [pc, #64]	; (800e9a8 <MX_USB_DEVICE_Init+0x5c>)
 800e966:	480f      	ldr	r0, [pc, #60]	; (800e9a4 <MX_USB_DEVICE_Init+0x58>)
 800e968:	f7fe fd2e 	bl	800d3c8 <USBD_RegisterClass>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e972:	f7f2 fad1 	bl	8000f18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e976:	490d      	ldr	r1, [pc, #52]	; (800e9ac <MX_USB_DEVICE_Init+0x60>)
 800e978:	480a      	ldr	r0, [pc, #40]	; (800e9a4 <MX_USB_DEVICE_Init+0x58>)
 800e97a:	f7fe fc65 	bl	800d248 <USBD_CDC_RegisterInterface>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e984:	f7f2 fac8 	bl	8000f18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e988:	4806      	ldr	r0, [pc, #24]	; (800e9a4 <MX_USB_DEVICE_Init+0x58>)
 800e98a:	f7fe fd53 	bl	800d434 <USBD_Start>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d001      	beq.n	800e998 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e994:	f7f2 fac0 	bl	8000f18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e998:	f7f8 fa64 	bl	8006e64 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e99c:	bf00      	nop
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	240000b0 	.word	0x240000b0
 800e9a4:	24000580 	.word	0x24000580
 800e9a8:	2400001c 	.word	0x2400001c
 800e9ac:	2400009c 	.word	0x2400009c

0800e9b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4905      	ldr	r1, [pc, #20]	; (800e9cc <CDC_Init_FS+0x1c>)
 800e9b8:	4805      	ldr	r0, [pc, #20]	; (800e9d0 <CDC_Init_FS+0x20>)
 800e9ba:	f7fe fc5f 	bl	800d27c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e9be:	4905      	ldr	r1, [pc, #20]	; (800e9d4 <CDC_Init_FS+0x24>)
 800e9c0:	4803      	ldr	r0, [pc, #12]	; (800e9d0 <CDC_Init_FS+0x20>)
 800e9c2:	f7fe fc7d 	bl	800d2c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e9c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	2400105c 	.word	0x2400105c
 800e9d0:	24000580 	.word	0x24000580
 800e9d4:	2400085c 	.word	0x2400085c

0800e9d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e9dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	6039      	str	r1, [r7, #0]
 800e9f2:	71fb      	strb	r3, [r7, #7]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	2b23      	cmp	r3, #35	; 0x23
 800e9fc:	d84a      	bhi.n	800ea94 <CDC_Control_FS+0xac>
 800e9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ea04 <CDC_Control_FS+0x1c>)
 800ea00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea04:	0800ea95 	.word	0x0800ea95
 800ea08:	0800ea95 	.word	0x0800ea95
 800ea0c:	0800ea95 	.word	0x0800ea95
 800ea10:	0800ea95 	.word	0x0800ea95
 800ea14:	0800ea95 	.word	0x0800ea95
 800ea18:	0800ea95 	.word	0x0800ea95
 800ea1c:	0800ea95 	.word	0x0800ea95
 800ea20:	0800ea95 	.word	0x0800ea95
 800ea24:	0800ea95 	.word	0x0800ea95
 800ea28:	0800ea95 	.word	0x0800ea95
 800ea2c:	0800ea95 	.word	0x0800ea95
 800ea30:	0800ea95 	.word	0x0800ea95
 800ea34:	0800ea95 	.word	0x0800ea95
 800ea38:	0800ea95 	.word	0x0800ea95
 800ea3c:	0800ea95 	.word	0x0800ea95
 800ea40:	0800ea95 	.word	0x0800ea95
 800ea44:	0800ea95 	.word	0x0800ea95
 800ea48:	0800ea95 	.word	0x0800ea95
 800ea4c:	0800ea95 	.word	0x0800ea95
 800ea50:	0800ea95 	.word	0x0800ea95
 800ea54:	0800ea95 	.word	0x0800ea95
 800ea58:	0800ea95 	.word	0x0800ea95
 800ea5c:	0800ea95 	.word	0x0800ea95
 800ea60:	0800ea95 	.word	0x0800ea95
 800ea64:	0800ea95 	.word	0x0800ea95
 800ea68:	0800ea95 	.word	0x0800ea95
 800ea6c:	0800ea95 	.word	0x0800ea95
 800ea70:	0800ea95 	.word	0x0800ea95
 800ea74:	0800ea95 	.word	0x0800ea95
 800ea78:	0800ea95 	.word	0x0800ea95
 800ea7c:	0800ea95 	.word	0x0800ea95
 800ea80:	0800ea95 	.word	0x0800ea95
 800ea84:	0800ea95 	.word	0x0800ea95
 800ea88:	0800ea95 	.word	0x0800ea95
 800ea8c:	0800ea95 	.word	0x0800ea95
 800ea90:	0800ea95 	.word	0x0800ea95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea94:	bf00      	nop
  }

  return (USBD_OK);
 800ea96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eaae:	6879      	ldr	r1, [r7, #4]
 800eab0:	4805      	ldr	r0, [pc, #20]	; (800eac8 <CDC_Receive_FS+0x24>)
 800eab2:	f7fe fc05 	bl	800d2c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eab6:	4804      	ldr	r0, [pc, #16]	; (800eac8 <CDC_Receive_FS+0x24>)
 800eab8:	f7fe fc20 	bl	800d2fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eabc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	24000580 	.word	0x24000580

0800eacc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eacc:	b480      	push	{r7}
 800eace:	b087      	sub	sp, #28
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	4613      	mov	r3, r2
 800ead8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	371c      	adds	r7, #28
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
	...

0800eaf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	6039      	str	r1, [r7, #0]
 800eafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2212      	movs	r2, #18
 800eb00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb02:	4b03      	ldr	r3, [pc, #12]	; (800eb10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	240000cc 	.word	0x240000cc

0800eb14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	6039      	str	r1, [r7, #0]
 800eb1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	2204      	movs	r2, #4
 800eb24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb26:	4b03      	ldr	r3, [pc, #12]	; (800eb34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	240000e0 	.word	0x240000e0

0800eb38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	6039      	str	r1, [r7, #0]
 800eb42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb44:	79fb      	ldrb	r3, [r7, #7]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d105      	bne.n	800eb56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb4a:	683a      	ldr	r2, [r7, #0]
 800eb4c:	4907      	ldr	r1, [pc, #28]	; (800eb6c <USBD_FS_ProductStrDescriptor+0x34>)
 800eb4e:	4808      	ldr	r0, [pc, #32]	; (800eb70 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb50:	f7ff fe1c 	bl	800e78c <USBD_GetString>
 800eb54:	e004      	b.n	800eb60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	4904      	ldr	r1, [pc, #16]	; (800eb6c <USBD_FS_ProductStrDescriptor+0x34>)
 800eb5a:	4805      	ldr	r0, [pc, #20]	; (800eb70 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb5c:	f7ff fe16 	bl	800e78c <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb60:	4b02      	ldr	r3, [pc, #8]	; (800eb6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	2400185c 	.word	0x2400185c
 800eb70:	0800f470 	.word	0x0800f470

0800eb74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	6039      	str	r1, [r7, #0]
 800eb7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	4904      	ldr	r1, [pc, #16]	; (800eb94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb84:	4804      	ldr	r0, [pc, #16]	; (800eb98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb86:	f7ff fe01 	bl	800e78c <USBD_GetString>
  return USBD_StrDesc;
 800eb8a:	4b02      	ldr	r3, [pc, #8]	; (800eb94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	2400185c 	.word	0x2400185c
 800eb98:	0800f488 	.word	0x0800f488

0800eb9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	4603      	mov	r3, r0
 800eba4:	6039      	str	r1, [r7, #0]
 800eba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	221a      	movs	r2, #26
 800ebac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ebae:	f000 f843 	bl	800ec38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ebb2:	4b02      	ldr	r3, [pc, #8]	; (800ebbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	240000e4 	.word	0x240000e4

0800ebc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	6039      	str	r1, [r7, #0]
 800ebca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebcc:	79fb      	ldrb	r3, [r7, #7]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d105      	bne.n	800ebde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	4907      	ldr	r1, [pc, #28]	; (800ebf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebd6:	4808      	ldr	r0, [pc, #32]	; (800ebf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebd8:	f7ff fdd8 	bl	800e78c <USBD_GetString>
 800ebdc:	e004      	b.n	800ebe8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	4904      	ldr	r1, [pc, #16]	; (800ebf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebe2:	4805      	ldr	r0, [pc, #20]	; (800ebf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebe4:	f7ff fdd2 	bl	800e78c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebe8:	4b02      	ldr	r3, [pc, #8]	; (800ebf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	2400185c 	.word	0x2400185c
 800ebf8:	0800f49c 	.word	0x0800f49c

0800ebfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	4603      	mov	r3, r0
 800ec04:	6039      	str	r1, [r7, #0]
 800ec06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec08:	79fb      	ldrb	r3, [r7, #7]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d105      	bne.n	800ec1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	4907      	ldr	r1, [pc, #28]	; (800ec30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec12:	4808      	ldr	r0, [pc, #32]	; (800ec34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec14:	f7ff fdba 	bl	800e78c <USBD_GetString>
 800ec18:	e004      	b.n	800ec24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	4904      	ldr	r1, [pc, #16]	; (800ec30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec1e:	4805      	ldr	r0, [pc, #20]	; (800ec34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec20:	f7ff fdb4 	bl	800e78c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec24:	4b02      	ldr	r3, [pc, #8]	; (800ec30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	2400185c 	.word	0x2400185c
 800ec34:	0800f4a8 	.word	0x0800f4a8

0800ec38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec3e:	4b0f      	ldr	r3, [pc, #60]	; (800ec7c <Get_SerialNum+0x44>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec44:	4b0e      	ldr	r3, [pc, #56]	; (800ec80 <Get_SerialNum+0x48>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec4a:	4b0e      	ldr	r3, [pc, #56]	; (800ec84 <Get_SerialNum+0x4c>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4413      	add	r3, r2
 800ec56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d009      	beq.n	800ec72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec5e:	2208      	movs	r2, #8
 800ec60:	4909      	ldr	r1, [pc, #36]	; (800ec88 <Get_SerialNum+0x50>)
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f000 f814 	bl	800ec90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec68:	2204      	movs	r2, #4
 800ec6a:	4908      	ldr	r1, [pc, #32]	; (800ec8c <Get_SerialNum+0x54>)
 800ec6c:	68b8      	ldr	r0, [r7, #8]
 800ec6e:	f000 f80f 	bl	800ec90 <IntToUnicode>
  }
}
 800ec72:	bf00      	nop
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	1ff1e800 	.word	0x1ff1e800
 800ec80:	1ff1e804 	.word	0x1ff1e804
 800ec84:	1ff1e808 	.word	0x1ff1e808
 800ec88:	240000e6 	.word	0x240000e6
 800ec8c:	240000f6 	.word	0x240000f6

0800ec90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b087      	sub	sp, #28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eca2:	2300      	movs	r3, #0
 800eca4:	75fb      	strb	r3, [r7, #23]
 800eca6:	e027      	b.n	800ecf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	0f1b      	lsrs	r3, r3, #28
 800ecac:	2b09      	cmp	r3, #9
 800ecae:	d80b      	bhi.n	800ecc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	0f1b      	lsrs	r3, r3, #28
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	005b      	lsls	r3, r3, #1
 800ecba:	4619      	mov	r1, r3
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	440b      	add	r3, r1
 800ecc0:	3230      	adds	r2, #48	; 0x30
 800ecc2:	b2d2      	uxtb	r2, r2
 800ecc4:	701a      	strb	r2, [r3, #0]
 800ecc6:	e00a      	b.n	800ecde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	0f1b      	lsrs	r3, r3, #28
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	7dfb      	ldrb	r3, [r7, #23]
 800ecd0:	005b      	lsls	r3, r3, #1
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	440b      	add	r3, r1
 800ecd8:	3237      	adds	r2, #55	; 0x37
 800ecda:	b2d2      	uxtb	r2, r2
 800ecdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	011b      	lsls	r3, r3, #4
 800ece2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ece4:	7dfb      	ldrb	r3, [r7, #23]
 800ece6:	005b      	lsls	r3, r3, #1
 800ece8:	3301      	adds	r3, #1
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	4413      	add	r3, r2
 800ecee:	2200      	movs	r2, #0
 800ecf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecf2:	7dfb      	ldrb	r3, [r7, #23]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	75fb      	strb	r3, [r7, #23]
 800ecf8:	7dfa      	ldrb	r2, [r7, #23]
 800ecfa:	79fb      	ldrb	r3, [r7, #7]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d3d3      	bcc.n	800eca8 <IntToUnicode+0x18>
  }
}
 800ed00:	bf00      	nop
 800ed02:	bf00      	nop
 800ed04:	371c      	adds	r7, #28
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
	...

0800ed10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b0b8      	sub	sp, #224	; 0xe0
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	601a      	str	r2, [r3, #0]
 800ed20:	605a      	str	r2, [r3, #4]
 800ed22:	609a      	str	r2, [r3, #8]
 800ed24:	60da      	str	r2, [r3, #12]
 800ed26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ed28:	f107 0310 	add.w	r3, r7, #16
 800ed2c:	22bc      	movs	r2, #188	; 0xbc
 800ed2e:	2100      	movs	r1, #0
 800ed30:	4618      	mov	r0, r3
 800ed32:	f000 fb63 	bl	800f3fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a32      	ldr	r2, [pc, #200]	; (800ee04 <HAL_PCD_MspInit+0xf4>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d15d      	bne.n	800edfc <HAL_PCD_MspInit+0xec>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ed40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800ed46:	2301      	movs	r3, #1
 800ed48:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 15;
 800ed4a:	230f      	movs	r3, #15
 800ed4c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800ed4e:	2302      	movs	r3, #2
 800ed50:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800ed52:	2303      	movs	r3, #3
 800ed54:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 15;
 800ed56:	230f      	movs	r3, #15
 800ed58:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800ed5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ed5e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800ed60:	2300      	movs	r3, #0
 800ed62:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800ed64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ed6c:	f107 0310 	add.w	r3, r7, #16
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7f9 f815 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800ed7c:	f7f2 f8cc 	bl	8000f18 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ed80:	f7f8 f870 	bl	8006e64 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed84:	4b20      	ldr	r3, [pc, #128]	; (800ee08 <HAL_PCD_MspInit+0xf8>)
 800ed86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed8a:	4a1f      	ldr	r2, [pc, #124]	; (800ee08 <HAL_PCD_MspInit+0xf8>)
 800ed8c:	f043 0301 	orr.w	r3, r3, #1
 800ed90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed94:	4b1c      	ldr	r3, [pc, #112]	; (800ee08 <HAL_PCD_MspInit+0xf8>)
 800ed96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed9a:	f003 0301 	and.w	r3, r3, #1
 800ed9e:	60fb      	str	r3, [r7, #12]
 800eda0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eda2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eda6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edaa:	2302      	movs	r3, #2
 800edac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800edb6:	2300      	movs	r3, #0
 800edb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800edbc:	230a      	movs	r3, #10
 800edbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800edc6:	4619      	mov	r1, r3
 800edc8:	4810      	ldr	r0, [pc, #64]	; (800ee0c <HAL_PCD_MspInit+0xfc>)
 800edca:	f7f6 fa4b 	bl	8005264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800edce:	4b0e      	ldr	r3, [pc, #56]	; (800ee08 <HAL_PCD_MspInit+0xf8>)
 800edd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800edd4:	4a0c      	ldr	r2, [pc, #48]	; (800ee08 <HAL_PCD_MspInit+0xf8>)
 800edd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800edda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800edde:	4b0a      	ldr	r3, [pc, #40]	; (800ee08 <HAL_PCD_MspInit+0xf8>)
 800ede0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ede4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ede8:	60bb      	str	r3, [r7, #8]
 800edea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800edec:	2200      	movs	r2, #0
 800edee:	2100      	movs	r1, #0
 800edf0:	2065      	movs	r0, #101	; 0x65
 800edf2:	f7f4 f9dc 	bl	80031ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800edf6:	2065      	movs	r0, #101	; 0x65
 800edf8:	f7f4 f9f3 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800edfc:	bf00      	nop
 800edfe:	37e0      	adds	r7, #224	; 0xe0
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	40080000 	.word	0x40080000
 800ee08:	58024400 	.word	0x58024400
 800ee0c:	58020000 	.word	0x58020000

0800ee10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ee24:	4619      	mov	r1, r3
 800ee26:	4610      	mov	r0, r2
 800ee28:	f7fe fb51 	bl	800d4ce <USBD_LL_SetupStage>
}
 800ee2c:	bf00      	nop
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee46:	78fa      	ldrb	r2, [r7, #3]
 800ee48:	6879      	ldr	r1, [r7, #4]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	4413      	add	r3, r2
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	440b      	add	r3, r1
 800ee54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	78fb      	ldrb	r3, [r7, #3]
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	f7fe fb8b 	bl	800d578 <USBD_LL_DataOutStage>
}
 800ee62:	bf00      	nop
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
 800ee72:	460b      	mov	r3, r1
 800ee74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee7c:	78fa      	ldrb	r2, [r7, #3]
 800ee7e:	6879      	ldr	r1, [r7, #4]
 800ee80:	4613      	mov	r3, r2
 800ee82:	00db      	lsls	r3, r3, #3
 800ee84:	4413      	add	r3, r2
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	440b      	add	r3, r1
 800ee8a:	334c      	adds	r3, #76	; 0x4c
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	78fb      	ldrb	r3, [r7, #3]
 800ee90:	4619      	mov	r1, r3
 800ee92:	f7fe fc24 	bl	800d6de <USBD_LL_DataInStage>
}
 800ee96:	bf00      	nop
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b082      	sub	sp, #8
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fe fd58 	bl	800d962 <USBD_LL_SOF>
}
 800eeb2:	bf00      	nop
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b084      	sub	sp, #16
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eec2:	2301      	movs	r3, #1
 800eec4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d102      	bne.n	800eed4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eece:	2300      	movs	r3, #0
 800eed0:	73fb      	strb	r3, [r7, #15]
 800eed2:	e008      	b.n	800eee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d102      	bne.n	800eee2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eedc:	2301      	movs	r3, #1
 800eede:	73fb      	strb	r3, [r7, #15]
 800eee0:	e001      	b.n	800eee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eee2:	f7f2 f819 	bl	8000f18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeec:	7bfa      	ldrb	r2, [r7, #15]
 800eeee:	4611      	mov	r1, r2
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fe fcf8 	bl	800d8e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fe fca0 	bl	800d842 <USBD_LL_Reset>
}
 800ef02:	bf00      	nop
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
	...

0800ef0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe fcf3 	bl	800d906 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	6812      	ldr	r2, [r2, #0]
 800ef2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef32:	f043 0301 	orr.w	r3, r3, #1
 800ef36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a1b      	ldr	r3, [r3, #32]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d005      	beq.n	800ef4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef40:	4b04      	ldr	r3, [pc, #16]	; (800ef54 <HAL_PCD_SuspendCallback+0x48>)
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	4a03      	ldr	r2, [pc, #12]	; (800ef54 <HAL_PCD_SuspendCallback+0x48>)
 800ef46:	f043 0306 	orr.w	r3, r3, #6
 800ef4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef4c:	bf00      	nop
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	e000ed00 	.word	0xe000ed00

0800ef58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fce3 	bl	800d932 <USBD_LL_Resume>
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef86:	78fa      	ldrb	r2, [r7, #3]
 800ef88:	4611      	mov	r1, r2
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fd3b 	bl	800da06 <USBD_LL_IsoOUTIncomplete>
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efaa:	78fa      	ldrb	r2, [r7, #3]
 800efac:	4611      	mov	r1, r2
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fe fcf7 	bl	800d9a2 <USBD_LL_IsoINIncomplete>
}
 800efb4:	bf00      	nop
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe fd4d 	bl	800da6a <USBD_LL_DevConnected>
}
 800efd0:	bf00      	nop
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fe fd4a 	bl	800da80 <USBD_LL_DevDisconnected>
}
 800efec:	bf00      	nop
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d13e      	bne.n	800f082 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f004:	4a21      	ldr	r2, [pc, #132]	; (800f08c <USBD_LL_Init+0x98>)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a1f      	ldr	r2, [pc, #124]	; (800f08c <USBD_LL_Init+0x98>)
 800f010:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f014:	4b1d      	ldr	r3, [pc, #116]	; (800f08c <USBD_LL_Init+0x98>)
 800f016:	4a1e      	ldr	r2, [pc, #120]	; (800f090 <USBD_LL_Init+0x9c>)
 800f018:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f01a:	4b1c      	ldr	r3, [pc, #112]	; (800f08c <USBD_LL_Init+0x98>)
 800f01c:	2209      	movs	r2, #9
 800f01e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f020:	4b1a      	ldr	r3, [pc, #104]	; (800f08c <USBD_LL_Init+0x98>)
 800f022:	2202      	movs	r2, #2
 800f024:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f026:	4b19      	ldr	r3, [pc, #100]	; (800f08c <USBD_LL_Init+0x98>)
 800f028:	2200      	movs	r2, #0
 800f02a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f02c:	4b17      	ldr	r3, [pc, #92]	; (800f08c <USBD_LL_Init+0x98>)
 800f02e:	2202      	movs	r2, #2
 800f030:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f032:	4b16      	ldr	r3, [pc, #88]	; (800f08c <USBD_LL_Init+0x98>)
 800f034:	2200      	movs	r2, #0
 800f036:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f038:	4b14      	ldr	r3, [pc, #80]	; (800f08c <USBD_LL_Init+0x98>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f03e:	4b13      	ldr	r3, [pc, #76]	; (800f08c <USBD_LL_Init+0x98>)
 800f040:	2200      	movs	r2, #0
 800f042:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f044:	4b11      	ldr	r3, [pc, #68]	; (800f08c <USBD_LL_Init+0x98>)
 800f046:	2200      	movs	r2, #0
 800f048:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f04a:	4b10      	ldr	r3, [pc, #64]	; (800f08c <USBD_LL_Init+0x98>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f050:	4b0e      	ldr	r3, [pc, #56]	; (800f08c <USBD_LL_Init+0x98>)
 800f052:	2200      	movs	r2, #0
 800f054:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f056:	480d      	ldr	r0, [pc, #52]	; (800f08c <USBD_LL_Init+0x98>)
 800f058:	f7f6 fbf5 	bl	8005846 <HAL_PCD_Init>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f062:	f7f1 ff59 	bl	8000f18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f066:	2180      	movs	r1, #128	; 0x80
 800f068:	4808      	ldr	r0, [pc, #32]	; (800f08c <USBD_LL_Init+0x98>)
 800f06a:	f7f7 fe80 	bl	8006d6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f06e:	2240      	movs	r2, #64	; 0x40
 800f070:	2100      	movs	r1, #0
 800f072:	4806      	ldr	r0, [pc, #24]	; (800f08c <USBD_LL_Init+0x98>)
 800f074:	f7f7 fe34 	bl	8006ce0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f078:	2280      	movs	r2, #128	; 0x80
 800f07a:	2101      	movs	r1, #1
 800f07c:	4803      	ldr	r0, [pc, #12]	; (800f08c <USBD_LL_Init+0x98>)
 800f07e:	f7f7 fe2f 	bl	8006ce0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f082:	2300      	movs	r3, #0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	24001a5c 	.word	0x24001a5c
 800f090:	40080000 	.word	0x40080000

0800f094 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7f6 fcef 	bl	8005a8e <HAL_PCD_Start>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 f942 	bl	800f340 <USBD_Get_USB_Status>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	4608      	mov	r0, r1
 800f0d4:	4611      	mov	r1, r2
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	4603      	mov	r3, r0
 800f0da:	70fb      	strb	r3, [r7, #3]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	70bb      	strb	r3, [r7, #2]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f0f2:	78bb      	ldrb	r3, [r7, #2]
 800f0f4:	883a      	ldrh	r2, [r7, #0]
 800f0f6:	78f9      	ldrb	r1, [r7, #3]
 800f0f8:	f7f7 f9ed 	bl	80064d6 <HAL_PCD_EP_Open>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f100:	7bfb      	ldrb	r3, [r7, #15]
 800f102:	4618      	mov	r0, r3
 800f104:	f000 f91c 	bl	800f340 <USBD_Get_USB_Status>
 800f108:	4603      	mov	r3, r0
 800f10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f10c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3710      	adds	r7, #16
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}

0800f116 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f116:	b580      	push	{r7, lr}
 800f118:	b084      	sub	sp, #16
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
 800f11e:	460b      	mov	r3, r1
 800f120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f122:	2300      	movs	r3, #0
 800f124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f126:	2300      	movs	r3, #0
 800f128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f130:	78fa      	ldrb	r2, [r7, #3]
 800f132:	4611      	mov	r1, r2
 800f134:	4618      	mov	r0, r3
 800f136:	f7f7 fa36 	bl	80065a6 <HAL_PCD_EP_Close>
 800f13a:	4603      	mov	r3, r0
 800f13c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	4618      	mov	r0, r3
 800f142:	f000 f8fd 	bl	800f340 <USBD_Get_USB_Status>
 800f146:	4603      	mov	r3, r0
 800f148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f160:	2300      	movs	r3, #0
 800f162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f164:	2300      	movs	r3, #0
 800f166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f16e:	78fa      	ldrb	r2, [r7, #3]
 800f170:	4611      	mov	r1, r2
 800f172:	4618      	mov	r0, r3
 800f174:	f7f7 fb0e 	bl	8006794 <HAL_PCD_EP_SetStall>
 800f178:	4603      	mov	r3, r0
 800f17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f17c:	7bfb      	ldrb	r3, [r7, #15]
 800f17e:	4618      	mov	r0, r3
 800f180:	f000 f8de 	bl	800f340 <USBD_Get_USB_Status>
 800f184:	4603      	mov	r3, r0
 800f186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f188:	7bbb      	ldrb	r3, [r7, #14]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b084      	sub	sp, #16
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
 800f19a:	460b      	mov	r3, r1
 800f19c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1ac:	78fa      	ldrb	r2, [r7, #3]
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7f7 fb53 	bl	800685c <HAL_PCD_EP_ClrStall>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1ba:	7bfb      	ldrb	r3, [r7, #15]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f000 f8bf 	bl	800f340 <USBD_Get_USB_Status>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	da0b      	bge.n	800f204 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1ec:	78fb      	ldrb	r3, [r7, #3]
 800f1ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1f2:	68f9      	ldr	r1, [r7, #12]
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	00db      	lsls	r3, r3, #3
 800f1f8:	4413      	add	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	440b      	add	r3, r1
 800f1fe:	333e      	adds	r3, #62	; 0x3e
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	e00b      	b.n	800f21c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f204:	78fb      	ldrb	r3, [r7, #3]
 800f206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f20a:	68f9      	ldr	r1, [r7, #12]
 800f20c:	4613      	mov	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	4413      	add	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	440b      	add	r3, r1
 800f216:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f21a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3714      	adds	r7, #20
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f234:	2300      	movs	r3, #0
 800f236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f238:	2300      	movs	r3, #0
 800f23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f242:	78fa      	ldrb	r2, [r7, #3]
 800f244:	4611      	mov	r1, r2
 800f246:	4618      	mov	r0, r3
 800f248:	f7f7 f920 	bl	800648c <HAL_PCD_SetAddress>
 800f24c:	4603      	mov	r3, r0
 800f24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 f874 	bl	800f340 <USBD_Get_USB_Status>
 800f258:	4603      	mov	r3, r0
 800f25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b086      	sub	sp, #24
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	60f8      	str	r0, [r7, #12]
 800f26e:	607a      	str	r2, [r7, #4]
 800f270:	603b      	str	r3, [r7, #0]
 800f272:	460b      	mov	r3, r1
 800f274:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f276:	2300      	movs	r3, #0
 800f278:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f27a:	2300      	movs	r3, #0
 800f27c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f284:	7af9      	ldrb	r1, [r7, #11]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	f7f7 fa39 	bl	8006700 <HAL_PCD_EP_Transmit>
 800f28e:	4603      	mov	r3, r0
 800f290:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	4618      	mov	r0, r3
 800f296:	f000 f853 	bl	800f340 <USBD_Get_USB_Status>
 800f29a:	4603      	mov	r3, r0
 800f29c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f29e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3718      	adds	r7, #24
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b086      	sub	sp, #24
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	607a      	str	r2, [r7, #4]
 800f2b2:	603b      	str	r3, [r7, #0]
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f2c6:	7af9      	ldrb	r1, [r7, #11]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	f7f7 f9b5 	bl	800663a <HAL_PCD_EP_Receive>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2d4:	7dfb      	ldrb	r3, [r7, #23]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 f832 	bl	800f340 <USBD_Get_USB_Status>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3718      	adds	r7, #24
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2fc:	78fa      	ldrb	r2, [r7, #3]
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f7f7 f9e5 	bl	80066d0 <HAL_PCD_EP_GetRxCount>
 800f306:	4603      	mov	r3, r0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f318:	4b03      	ldr	r3, [pc, #12]	; (800f328 <USBD_static_malloc+0x18>)
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	370c      	adds	r7, #12
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	24001f68 	.word	0x24001f68

0800f32c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]

}
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	4603      	mov	r3, r0
 800f348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	2b03      	cmp	r3, #3
 800f352:	d817      	bhi.n	800f384 <USBD_Get_USB_Status+0x44>
 800f354:	a201      	add	r2, pc, #4	; (adr r2, 800f35c <USBD_Get_USB_Status+0x1c>)
 800f356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f35a:	bf00      	nop
 800f35c:	0800f36d 	.word	0x0800f36d
 800f360:	0800f373 	.word	0x0800f373
 800f364:	0800f379 	.word	0x0800f379
 800f368:	0800f37f 	.word	0x0800f37f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f36c:	2300      	movs	r3, #0
 800f36e:	73fb      	strb	r3, [r7, #15]
    break;
 800f370:	e00b      	b.n	800f38a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f372:	2303      	movs	r3, #3
 800f374:	73fb      	strb	r3, [r7, #15]
    break;
 800f376:	e008      	b.n	800f38a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f378:	2301      	movs	r3, #1
 800f37a:	73fb      	strb	r3, [r7, #15]
    break;
 800f37c:	e005      	b.n	800f38a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f37e:	2303      	movs	r3, #3
 800f380:	73fb      	strb	r3, [r7, #15]
    break;
 800f382:	e002      	b.n	800f38a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f384:	2303      	movs	r3, #3
 800f386:	73fb      	strb	r3, [r7, #15]
    break;
 800f388:	bf00      	nop
  }
  return usb_status;
 800f38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <__libc_init_array>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	4d0d      	ldr	r5, [pc, #52]	; (800f3d0 <__libc_init_array+0x38>)
 800f39c:	4c0d      	ldr	r4, [pc, #52]	; (800f3d4 <__libc_init_array+0x3c>)
 800f39e:	1b64      	subs	r4, r4, r5
 800f3a0:	10a4      	asrs	r4, r4, #2
 800f3a2:	2600      	movs	r6, #0
 800f3a4:	42a6      	cmp	r6, r4
 800f3a6:	d109      	bne.n	800f3bc <__libc_init_array+0x24>
 800f3a8:	4d0b      	ldr	r5, [pc, #44]	; (800f3d8 <__libc_init_array+0x40>)
 800f3aa:	4c0c      	ldr	r4, [pc, #48]	; (800f3dc <__libc_init_array+0x44>)
 800f3ac:	f000 f82e 	bl	800f40c <_init>
 800f3b0:	1b64      	subs	r4, r4, r5
 800f3b2:	10a4      	asrs	r4, r4, #2
 800f3b4:	2600      	movs	r6, #0
 800f3b6:	42a6      	cmp	r6, r4
 800f3b8:	d105      	bne.n	800f3c6 <__libc_init_array+0x2e>
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}
 800f3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3c0:	4798      	blx	r3
 800f3c2:	3601      	adds	r6, #1
 800f3c4:	e7ee      	b.n	800f3a4 <__libc_init_array+0xc>
 800f3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ca:	4798      	blx	r3
 800f3cc:	3601      	adds	r6, #1
 800f3ce:	e7f2      	b.n	800f3b6 <__libc_init_array+0x1e>
 800f3d0:	0800f4d0 	.word	0x0800f4d0
 800f3d4:	0800f4d0 	.word	0x0800f4d0
 800f3d8:	0800f4d0 	.word	0x0800f4d0
 800f3dc:	0800f4d4 	.word	0x0800f4d4

0800f3e0 <memcpy>:
 800f3e0:	440a      	add	r2, r1
 800f3e2:	4291      	cmp	r1, r2
 800f3e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f3e8:	d100      	bne.n	800f3ec <memcpy+0xc>
 800f3ea:	4770      	bx	lr
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3f6:	4291      	cmp	r1, r2
 800f3f8:	d1f9      	bne.n	800f3ee <memcpy+0xe>
 800f3fa:	bd10      	pop	{r4, pc}

0800f3fc <memset>:
 800f3fc:	4402      	add	r2, r0
 800f3fe:	4603      	mov	r3, r0
 800f400:	4293      	cmp	r3, r2
 800f402:	d100      	bne.n	800f406 <memset+0xa>
 800f404:	4770      	bx	lr
 800f406:	f803 1b01 	strb.w	r1, [r3], #1
 800f40a:	e7f9      	b.n	800f400 <memset+0x4>

0800f40c <_init>:
 800f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40e:	bf00      	nop
 800f410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f412:	bc08      	pop	{r3}
 800f414:	469e      	mov	lr, r3
 800f416:	4770      	bx	lr

0800f418 <_fini>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	bf00      	nop
 800f41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f41e:	bc08      	pop	{r3}
 800f420:	469e      	mov	lr, r3
 800f422:	4770      	bx	lr
