
Kvarkensat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08011558  08011558  00021558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011794  08011794  00021794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011798  08011798  00021798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  24000000  0801179c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000020b8  24000168  08011904  00030168  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24002220  08011904  00032220  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003d105  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005ee9  00000000  00000000  0006d29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000021c0  00000000  00000000  00073188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001fb8  00000000  00000000  00075348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003e4df  00000000  00000000  00077300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002aeb9  00000000  00000000  000b57df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00185dd6  00000000  00000000  000e0698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0026646e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009a74  00000000  00000000  002664c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000168 	.word	0x24000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011540 	.word	0x08011540

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400016c 	.word	0x2400016c
 80002dc:	08011540 	.word	0x08011540

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <write_register>:
uint32_t LO_FREQ = 324e6;

/*
 * Writes CMX register, addresses and values defined in main.h, refer to CMX994A datasheet
 */
void write_register(int reg, int val) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2101      	movs	r1, #1
 800038e:	480c      	ldr	r0, [pc, #48]	; (80003c0 <write_register+0x40>)
 8000390:	f005 fbda 	bl	8005b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 8000394:	1d39      	adds	r1, r7, #4
 8000396:	2364      	movs	r3, #100	; 0x64
 8000398:	2201      	movs	r2, #1
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <write_register+0x44>)
 800039c:	f00a fa4c 	bl	800a838 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&val, 1, 100);
 80003a0:	4639      	mov	r1, r7
 80003a2:	2364      	movs	r3, #100	; 0x64
 80003a4:	2201      	movs	r2, #1
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <write_register+0x44>)
 80003a8:	f00a fa46 	bl	800a838 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2101      	movs	r1, #1
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <write_register+0x40>)
 80003b2:	f005 fbc9 	bl	8005b48 <HAL_GPIO_WritePin>

}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58020400 	.word	0x58020400
 80003c4:	24000408 	.word	0x24000408

080003c8 <write_register_2>:
/*
 * Required for writing the 2-byte long register in CMX994E for I and Q offset voltages
 */
void write_register_2(int reg, int Qval, int Ival) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]

	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2101      	movs	r1, #1
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <write_register_2+0x50>)
 80003da:	f005 fbb5 	bl	8005b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 80003de:	f107 010c 	add.w	r1, r7, #12
 80003e2:	2364      	movs	r3, #100	; 0x64
 80003e4:	2201      	movs	r2, #1
 80003e6:	480d      	ldr	r0, [pc, #52]	; (800041c <write_register_2+0x54>)
 80003e8:	f00a fa26 	bl	800a838 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&Qval, 1, 100);
 80003ec:	f107 0108 	add.w	r1, r7, #8
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	2201      	movs	r2, #1
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <write_register_2+0x54>)
 80003f6:	f00a fa1f 	bl	800a838 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&Ival, 1, 100);
 80003fa:	1d39      	adds	r1, r7, #4
 80003fc:	2364      	movs	r3, #100	; 0x64
 80003fe:	2201      	movs	r2, #1
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <write_register_2+0x54>)
 8000402:	f00a fa19 	bl	800a838 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2101      	movs	r1, #1
 800040a:	4803      	ldr	r0, [pc, #12]	; (8000418 <write_register_2+0x50>)
 800040c:	f005 fb9c 	bl	8005b48 <HAL_GPIO_WritePin>

}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	58020400 	.word	0x58020400
 800041c:	24000408 	.word	0x24000408

08000420 <read_register>:

/*
 * Reads back CMX registers and prints them in binary through RTT
 */
uint8_t read_register(int reg) {
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	b08b      	sub	sp, #44	; 0x2c
 8000424:	af08      	add	r7, sp, #32
 8000426:	6078      	str	r0, [r7, #4]
	reg ^= 0xF0;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
 800042e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2101      	movs	r1, #1
 8000434:	483a      	ldr	r0, [pc, #232]	; (8000520 <read_register+0x100>)
 8000436:	f005 fb87 	bl	8005b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 800043a:	1d39      	adds	r1, r7, #4
 800043c:	2364      	movs	r3, #100	; 0x64
 800043e:	2201      	movs	r2, #1
 8000440:	4838      	ldr	r0, [pc, #224]	; (8000524 <read_register+0x104>)
 8000442:	f00a f9f9 	bl	800a838 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)spi_buf, 1, 100);
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	2201      	movs	r2, #1
 800044a:	4937      	ldr	r1, [pc, #220]	; (8000528 <read_register+0x108>)
 800044c:	4835      	ldr	r0, [pc, #212]	; (8000524 <read_register+0x104>)
 800044e:	f00a fbe5 	bl	800ac1c <HAL_SPI_Receive>
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2101      	movs	r1, #1
 8000456:	4832      	ldr	r0, [pc, #200]	; (8000520 <read_register+0x100>)
 8000458:	f005 fb76 	bl	8005b48 <HAL_GPIO_WritePin>
	printf("Register Address: %02x: read %02x = "BYTE_TO_BINARY_PATTERN"\n", reg, spi_buf[0], BYTE_TO_BINARY(spi_buf[0]));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	4b31      	ldr	r3, [pc, #196]	; (8000528 <read_register+0x108>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	469e      	mov	lr, r3
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <read_register+0x108>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	b25b      	sxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	da02      	bge.n	8000476 <read_register+0x56>
 8000470:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000474:	e001      	b.n	800047a <read_register+0x5a>
 8000476:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <read_register+0x108>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <read_register+0x6a>
 8000486:	2331      	movs	r3, #49	; 0x31
 8000488:	e000      	b.n	800048c <read_register+0x6c>
 800048a:	2330      	movs	r3, #48	; 0x30
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <read_register+0x108>)
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	f002 0220 	and.w	r2, r2, #32
 8000494:	2a00      	cmp	r2, #0
 8000496:	d001      	beq.n	800049c <read_register+0x7c>
 8000498:	2231      	movs	r2, #49	; 0x31
 800049a:	e000      	b.n	800049e <read_register+0x7e>
 800049c:	2230      	movs	r2, #48	; 0x30
 800049e:	4922      	ldr	r1, [pc, #136]	; (8000528 <read_register+0x108>)
 80004a0:	7809      	ldrb	r1, [r1, #0]
 80004a2:	f001 0110 	and.w	r1, r1, #16
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d001      	beq.n	80004ae <read_register+0x8e>
 80004aa:	2131      	movs	r1, #49	; 0x31
 80004ac:	e000      	b.n	80004b0 <read_register+0x90>
 80004ae:	2130      	movs	r1, #48	; 0x30
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <read_register+0x108>)
 80004b2:	7800      	ldrb	r0, [r0, #0]
 80004b4:	f000 0008 	and.w	r0, r0, #8
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d001      	beq.n	80004c0 <read_register+0xa0>
 80004bc:	2031      	movs	r0, #49	; 0x31
 80004be:	e000      	b.n	80004c2 <read_register+0xa2>
 80004c0:	2030      	movs	r0, #48	; 0x30
 80004c2:	4c19      	ldr	r4, [pc, #100]	; (8000528 <read_register+0x108>)
 80004c4:	7824      	ldrb	r4, [r4, #0]
 80004c6:	f004 0404 	and.w	r4, r4, #4
 80004ca:	2c00      	cmp	r4, #0
 80004cc:	d001      	beq.n	80004d2 <read_register+0xb2>
 80004ce:	2431      	movs	r4, #49	; 0x31
 80004d0:	e000      	b.n	80004d4 <read_register+0xb4>
 80004d2:	2430      	movs	r4, #48	; 0x30
 80004d4:	4d14      	ldr	r5, [pc, #80]	; (8000528 <read_register+0x108>)
 80004d6:	782d      	ldrb	r5, [r5, #0]
 80004d8:	f005 0502 	and.w	r5, r5, #2
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d001      	beq.n	80004e4 <read_register+0xc4>
 80004e0:	2531      	movs	r5, #49	; 0x31
 80004e2:	e000      	b.n	80004e6 <read_register+0xc6>
 80004e4:	2530      	movs	r5, #48	; 0x30
 80004e6:	4e10      	ldr	r6, [pc, #64]	; (8000528 <read_register+0x108>)
 80004e8:	7836      	ldrb	r6, [r6, #0]
 80004ea:	f006 0601 	and.w	r6, r6, #1
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d001      	beq.n	80004f6 <read_register+0xd6>
 80004f2:	2631      	movs	r6, #49	; 0x31
 80004f4:	e000      	b.n	80004f8 <read_register+0xd8>
 80004f6:	2630      	movs	r6, #48	; 0x30
 80004f8:	9606      	str	r6, [sp, #24]
 80004fa:	9505      	str	r5, [sp, #20]
 80004fc:	9404      	str	r4, [sp, #16]
 80004fe:	9003      	str	r0, [sp, #12]
 8000500:	9102      	str	r1, [sp, #8]
 8000502:	9201      	str	r2, [sp, #4]
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	4663      	mov	r3, ip
 8000508:	4672      	mov	r2, lr
 800050a:	6839      	ldr	r1, [r7, #0]
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <read_register+0x10c>)
 800050e:	f010 f8c1 	bl	8010694 <iprintf>
	return spi_buf[0];
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <read_register+0x108>)
 8000514:	781b      	ldrb	r3, [r3, #0]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	bf00      	nop
 8000520:	58020400 	.word	0x58020400
 8000524:	24000408 	.word	0x24000408
 8000528:	24000490 	.word	0x24000490
 800052c:	08011558 	.word	0x08011558

08000530 <demod_set_vco>:

/*
 * Sets the VCO frequency to the given input frequency by calculating and writing correct values to CMX register
 */
void demod_set_vco(uint32_t freq, uint32_t pll_r_div) { // TODO: Clean up
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	 // uint32_t pll_m = freq / demod_pll_step;
	 // uint32_t pll_r = (frequency_t)HSE_VALUE / demod_pll_step;

	  uint32_t pll_r = pll_r_div;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	617b      	str	r3, [r7, #20]
	  uint32_t pll_m = freq/10e6*pll_r_div;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	ee07 3a90 	vmov	s15, r3
 8000544:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000548:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80005c8 <demod_set_vco+0x98>
 800054c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	ee07 3a90 	vmov	s15, r3
 8000556:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800055a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800055e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000562:	ee17 3a90 	vmov	r3, s15
 8000566:	613b      	str	r3, [r7, #16]
	  const uint8_t pll_r_23 = pll_r & 0xFF;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	73fb      	strb	r3, [r7, #15]
	  const uint8_t pll_r_24 = (pll_r >> 8) & 0xFF;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	73bb      	strb	r3, [r7, #14]
	  // 0x23 has to be written before 0x24
	  write_register(CMX994A_PLLR23, pll_r_23);
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4619      	mov	r1, r3
 8000576:	2023      	movs	r0, #35	; 0x23
 8000578:	f7ff ff02 	bl	8000380 <write_register>
	  write_register(CMX994A_PLLR24, pll_r_24);
 800057c:	7bbb      	ldrb	r3, [r7, #14]
 800057e:	4619      	mov	r1, r3
 8000580:	2024      	movs	r0, #36	; 0x24
 8000582:	f7ff fefd 	bl	8000380 <write_register>
	  //printf("Set R register: $23: %02x, $24: %02x\n", pll_r_23, pll_r_24);
	  //read_register(CMX994A_PLLR23);
	  //read_register(CMX994A_PLLR24);
	  const uint8_t pll_m_20 = pll_m & 0xFF;
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	737b      	strb	r3, [r7, #13]
	  const uint8_t pll_m_21 = (pll_m >> 8) & 0xFF;
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	733b      	strb	r3, [r7, #12]
	  const uint8_t pll_m_22 = ((pll_m >> 16) & 0x07) | (1<<7) | (1<<5); // b5 = charge pump enable , b7 = Enable PLL
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80005a0:	72fb      	strb	r3, [r7, #11]
	  write_register(CMX994A_PLLM20, pll_m_20);
 80005a2:	7b7b      	ldrb	r3, [r7, #13]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2020      	movs	r0, #32
 80005a8:	f7ff feea 	bl	8000380 <write_register>
	  write_register(CMX994A_PLLM21, pll_m_21);
 80005ac:	7b3b      	ldrb	r3, [r7, #12]
 80005ae:	4619      	mov	r1, r3
 80005b0:	2021      	movs	r0, #33	; 0x21
 80005b2:	f7ff fee5 	bl	8000380 <write_register>
	  write_register(CMX994A_PLLM22, pll_m_22);
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	4619      	mov	r1, r3
 80005ba:	2022      	movs	r0, #34	; 0x22
 80005bc:	f7ff fee0 	bl	8000380 <write_register>
	  //printf("Set VCO: $20: %02x, $21: %02x, $22: %02x\n", pll_m_20, pll_m_21, pll_m_22);
	  //read_register(CMX994A_PLLM20);
	  //read_register(CMX994A_PLLM21);
	  //read_register(CMX994A_PLLM22);
}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	00000000 	.word	0x00000000
 80005cc:	416312d0 	.word	0x416312d0

080005d0 <demod_is_locked_2>:

/*
 * Check from register if VCO is frequency locked
 */
uint8_t demod_is_locked_2(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	return ( read_register(CMX994A_PLLM22) & (1<<6)) ? 0 : 1;
 80005d4:	2022      	movs	r0, #34	; 0x22
 80005d6:	f7ff ff23 	bl	8000420 <read_register>
 80005da:	4603      	mov	r3, r0
 80005dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf0c      	ite	eq
 80005e4:	2301      	moveq	r3, #1
 80005e6:	2300      	movne	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <configureRadio>:

void configureRadio(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
	   */
	  //General reset


	/* First Enable The Radio and give LDO time to settle */
	HAL_GPIO_WritePin(EN_3V0_GPIO_Port, EN_3V0_Pin, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2110      	movs	r1, #16
 80005fa:	4835      	ldr	r0, [pc, #212]	; (80006d0 <configureRadio+0xe0>)
 80005fc:	f005 faa4 	bl	8005b48 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000600:	20c8      	movs	r0, #200	; 0xc8
 8000602:	f001 fc31 	bl	8001e68 <HAL_Delay>

	/* Define all the registry values */
	uint8_t CMX994A_GCR_T = 0b10101111;
 8000606:	23af      	movs	r3, #175	; 0xaf
 8000608:	73fb      	strb	r3, [r7, #15]
	 * 	2 - PLL Enable		1
	 * 	1 - CBUS RX Enable	1 (ORred with GPIO RX Enable pin)
	 * 	0 - CBUS TX Enable  1 (Enables TX divider) (ORred with GPIO TX Enable pin)
	 * 	*/

	uint8_t CMX994A_RXR_T = 0b00000000;
 800060a:	2300      	movs	r3, #0
 800060c:	73bb      	strb	r3, [r7, #14]
	 * 5 - Disable LNA		0
	 * 4,3 - ACR Filter		00 for minimum BW , 10 for maximum BW
	 * 2 - DC Correction X	0 (0 for nominal , 1 for double)
	 * 1,0 - LO Divider		00 (divided by 2)
	 * */
	uint8_t CMX994A_OCR_T = 0b00000011;
 800060e:	2303      	movs	r3, #3
 8000610:	737b      	strb	r3, [r7, #13]
	 * 3 - Q path disable	0
	 * 2 - I path disable 	0
	 * 1,0 - LO phase corr	00 (enabled 00 , powered down 11)
	 * */

	uint8_t CMX994A_VCOCR_T = 0b00000011;
 8000612:	2303      	movs	r3, #3
 8000614:	733b      	strb	r3, [r7, #12]

	/* RX Offset register
	 * Recommended value from datasheet : 0x88
	 */
	// Experimentally found values for voltage offsets - the offset should be < 25 mV between each channels P and N.
	uint8_t CMX994A_RXOFFI_T = 0b00001001;
 8000616:	2309      	movs	r3, #9
 8000618:	72fb      	strb	r3, [r7, #11]
	uint8_t CMX994A_RXOFFQ_T = 0b00101010;
 800061a:	232a      	movs	r3, #42	; 0x2a
 800061c:	72bb      	strb	r3, [r7, #10]

	/* LNA Intermodulation Control Register
	 * Recommended value from datasheet (440 MHz : 0x3F , 100 MHz : 0x00 )
	 * Could be set to 0, as very low powers are expected at input
	 */
	uint8_t CMX994A_LNAIM_T = 0x10;
 800061e:	2310      	movs	r3, #16
 8000620:	727b      	strb	r3, [r7, #9]
	/*
	 *  Write registers with values from above
	 */

	  //printf("General reset\n");
	  write_register(CMX994A_GR, 0);
 8000622:	2100      	movs	r1, #0
 8000624:	2010      	movs	r0, #16
 8000626:	f7ff feab 	bl	8000380 <write_register>

	  //RX Control Register config
	  write_register(CMX994A_RXR, CMX994A_RXR_T);
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	4619      	mov	r1, r3
 800062e:	2012      	movs	r0, #18
 8000630:	f7ff fea6 	bl	8000380 <write_register>
	  //printf("RX Control Register configured: 00000001\n");
	  printf("RX Control Register read:  ");
 8000634:	4827      	ldr	r0, [pc, #156]	; (80006d4 <configureRadio+0xe4>)
 8000636:	f010 f82d 	bl	8010694 <iprintf>
	  read_register(CMX994A_RXR);
 800063a:	2012      	movs	r0, #18
 800063c:	f7ff fef0 	bl	8000420 <read_register>

	  //Options Control Register config
	  write_register(CMX994A_OCR, CMX994A_OCR_T);
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	4619      	mov	r1, r3
 8000644:	2015      	movs	r0, #21
 8000646:	f7ff fe9b 	bl	8000380 <write_register>
	  //printf("Options Control Register configured: 00000011\n");
	  printf("Options Control Register read:  ");
 800064a:	4823      	ldr	r0, [pc, #140]	; (80006d8 <configureRadio+0xe8>)
 800064c:	f010 f822 	bl	8010694 <iprintf>
	  read_register(CMX994A_OCR);
 8000650:	2015      	movs	r0, #21
 8000652:	f7ff fee5 	bl	8000420 <read_register>

	  //VCO Control Register config
	  write_register(CMX994A_VCOCR, CMX994A_VCOCR_T);//CMX994A_VCOCR_TXDIV1
 8000656:	7b3b      	ldrb	r3, [r7, #12]
 8000658:	4619      	mov	r1, r3
 800065a:	2025      	movs	r0, #37	; 0x25
 800065c:	f7ff fe90 	bl	8000380 <write_register>
	  //printf("VCO Control Register configured: 01100011\n");
	  printf("VCO Control Register read:  ");
 8000660:	481e      	ldr	r0, [pc, #120]	; (80006dc <configureRadio+0xec>)
 8000662:	f010 f817 	bl	8010694 <iprintf>
	  read_register(CMX994A_VCOCR);
 8000666:	2025      	movs	r0, #37	; 0x25
 8000668:	f7ff feda 	bl	8000420 <read_register>


	  //VCO Control Register config
	  write_register(CMX994A_LNAINT, CMX994A_LNAIM_T);
 800066c:	7a7b      	ldrb	r3, [r7, #9]
 800066e:	4619      	mov	r1, r3
 8000670:	2014      	movs	r0, #20
 8000672:	f7ff fe85 	bl	8000380 <write_register>
	  write_register_2(CMX994A_RXEXTOFF, CMX994A_RXOFFQ_T, CMX994A_RXOFFI_T);
 8000676:	7abb      	ldrb	r3, [r7, #10]
 8000678:	7afa      	ldrb	r2, [r7, #11]
 800067a:	4619      	mov	r1, r3
 800067c:	2017      	movs	r0, #23
 800067e:	f7ff fea3 	bl	80003c8 <write_register_2>
	  //HAL_GPIO_WritePin (DEMOD_TXEN_GPIO_Port, DEMOD_TXEN_Pin, GPIO_PIN_SET);
	  //HAL_GPIO_WritePin (DEMOD_RXEN_GPIO_Port, DEMOD_RXEN_Pin, GPIO_PIN_SET);


	  /* Write the VCO registers (R and M dividers for the VCO) */
	  uint32_t RVAL = 5000; // Make sure this value is used in the external filter design of the VCO !!
 8000682:	f241 3388 	movw	r3, #5000	; 0x1388
 8000686:	607b      	str	r3, [r7, #4]
	  demod_set_vco(LO_FREQ, RVAL);
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <configureRadio+0xf0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff4e 	bl	8000530 <demod_set_vco>

	  //General Control Register config (Write this register last as it will enable the VCO)
	  write_register(CMX994A_GCR, CMX994A_GCR_T);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4619      	mov	r1, r3
 8000698:	2011      	movs	r0, #17
 800069a:	f7ff fe71 	bl	8000380 <write_register>

	  //printf("General Control Register configured: 10111111\n");
	  printf("General Control Register read: ");
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <configureRadio+0xf4>)
 80006a0:	f00f fff8 	bl	8010694 <iprintf>
	  read_register(CMX994A_GCR);
 80006a4:	2011      	movs	r0, #17
 80006a6:	f7ff febb 	bl	8000420 <read_register>

	  HAL_Delay(10);
 80006aa:	200a      	movs	r0, #10
 80006ac:	f001 fbdc 	bl	8001e68 <HAL_Delay>

	  printf("Radio: PLL locked (1/0): %d \n", demod_is_locked_2());
 80006b0:	f7ff ff8e 	bl	80005d0 <demod_is_locked_2>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <configureRadio+0xf8>)
 80006ba:	f00f ffeb 	bl	8010694 <iprintf>
	  HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f001 fbd1 	bl	8001e68 <HAL_Delay>
			  demod_set_vco(200e6, RVAL);
			  HAL_Delay(5000);
		  }

	#endif
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58020000 	.word	0x58020000
 80006d4:	08011590 	.word	0x08011590
 80006d8:	080115ac 	.word	0x080115ac
 80006dc:	080115d0 	.word	0x080115d0
 80006e0:	24000000 	.word	0x24000000
 80006e4:	080115f0 	.word	0x080115f0
 80006e8:	08011610 	.word	0x08011610

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f001 fb27 	bl	8001d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f851 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fc7f 	bl	8000ffc <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fc5d 	bl	8000fbc <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000702:	f000 fa11 	bl	8000b28 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000706:	f000 fa73 	bl	8000bf0 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800070a:	f000 fad5 	bl	8000cb8 <MX_I2C1_Init>
  MX_I2C4_Init();
 800070e:	f000 fb13 	bl	8000d38 <MX_I2C4_Init>
  MX_SPI2_Init();
 8000712:	f000 fb51 	bl	8000db8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000716:	f000 f8c5 	bl	80008a4 <MX_ADC1_Init>
  MX_ADC3_Init();
 800071a:	f000 f99f 	bl	8000a5c <MX_ADC3_Init>
  MX_ADC2_Init();
 800071e:	f000 f93f 	bl	80009a0 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000722:	f00f fa51 	bl	800fbc8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000726:	f000 fb9d 	bl	8000e64 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // START RADIO RECEIVER
  printf("Hello space!");
 800072a:	4818      	ldr	r0, [pc, #96]	; (800078c <main+0xa0>)
 800072c:	f00f ffb2 	bl	8010694 <iprintf>
  configureRadio();
 8000730:	f7ff ff5e 	bl	80005f0 <configureRadio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* If no flags were set by interrupts, go back to sleep */
		if (!eventflags.dont_sleep)
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0xa4>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d022      	beq.n	8000788 <main+0x9c>
			continue;
		eventflags.dont_sleep = 0;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <main+0xa4>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

		/* Go through all flags to check which of them are up. Flags could indicate for example the need
		 * for data processing or */
		if (eventflags.tick) {
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <main+0xa4>)
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f2      	beq.n	8000738 <main+0x4c>
			eventflags.tick = 0;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0xa4>)
 8000754:	2200      	movs	r2, #0
 8000756:	705a      	strb	r2, [r3, #1]
			if ( demod_is_locked_2() ) {
 8000758:	f7ff ff3a 	bl	80005d0 <demod_is_locked_2>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0ea      	beq.n	8000738 <main+0x4c>
				GPIOW(CANLED, 1 & (a >> 8));	// Blink LED while system is running.
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	121b      	asrs	r3, r3, #8
 8000766:	b2db      	uxtb	r3, r3
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	2120      	movs	r1, #32
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <main+0xa8>)
 8000774:	f005 f9e8 	bl	8005b48 <HAL_GPIO_WritePin>
				printf("Blink num. %d\n", a);
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <main+0xac>)
 800077c:	f00f ff8a 	bl	8010694 <iprintf>
				++a;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	e7d7      	b.n	8000738 <main+0x4c>
			continue;
 8000788:	bf00      	nop
		if (!eventflags.dont_sleep)
 800078a:	e7d5      	b.n	8000738 <main+0x4c>
 800078c:	08011630 	.word	0x08011630
 8000790:	24000780 	.word	0x24000780
 8000794:	58020400 	.word	0x58020400
 8000798:	08011640 	.word	0x08011640

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	; 0x70
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	224c      	movs	r2, #76	; 0x4c
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00f ff6a 	bl	8010684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2220      	movs	r2, #32
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00f ff64 	bl	8010684 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007bc:	2002      	movs	r0, #2
 80007be:	f006 fdd9 	bl	8007374 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b34      	ldr	r3, [pc, #208]	; (8000898 <SystemClock_Config+0xfc>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a33      	ldr	r2, [pc, #204]	; (8000898 <SystemClock_Config+0xfc>)
 80007cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b31      	ldr	r3, [pc, #196]	; (8000898 <SystemClock_Config+0xfc>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	4b2f      	ldr	r3, [pc, #188]	; (800089c <SystemClock_Config+0x100>)
 80007de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e0:	4a2e      	ldr	r2, [pc, #184]	; (800089c <SystemClock_Config+0x100>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <SystemClock_Config+0x100>)
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f4:	bf00      	nop
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <SystemClock_Config+0xfc>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000802:	d1f8      	bne.n	80007f6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <SystemClock_Config+0x104>)
 8000806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000808:	f023 0303 	bic.w	r3, r3, #3
 800080c:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <SystemClock_Config+0x104>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	2302      	movs	r3, #2
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000832:	2308      	movs	r3, #8
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800083a:	230c      	movs	r3, #12
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800083e:	2300      	movs	r3, #0
 8000840:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4618      	mov	r0, r3
 800084c:	f006 fddc 	bl	8007408 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000856:	f000 fd7b 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	233f      	movs	r3, #63	; 0x3f
 800085c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000866:	2308      	movs	r3, #8
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2104      	movs	r1, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f007 f9ed 	bl	8007c60 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800088c:	f000 fd60 	bl	8001350 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3770      	adds	r7, #112	; 0x70
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58024800 	.word	0x58024800
 800089c:	58000400 	.word	0x58000400
 80008a0:	58024400 	.word	0x58024400

080008a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_ADC1_Init+0xec>)
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <MX_ADC1_Init+0xf0>)
 80008cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_ADC1_Init+0xec>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_ADC1_Init+0xec>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_ADC1_Init+0xec>)
 80008dc:	2204      	movs	r2, #4
 80008de:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_ADC1_Init+0xec>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_ADC1_Init+0xec>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_ADC1_Init+0xec>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_ADC1_Init+0xec>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_ADC1_Init+0xec>)
 80008fa:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_ADC1_Init+0xec>)
 8000902:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_ADC1_Init+0xec>)
 800090a:	2203      	movs	r2, #3
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_ADC1_Init+0xec>)
 8000910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_ADC1_Init+0xec>)
 8000918:	2200      	movs	r2, #0
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_ADC1_Init+0xec>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000924:	481a      	ldr	r0, [pc, #104]	; (8000990 <MX_ADC1_Init+0xec>)
 8000926:	f001 fc9d 	bl	8002264 <HAL_ADC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000930:	f000 fd0e 	bl	8001350 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000934:	2306      	movs	r3, #6
 8000936:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800093c:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <MX_ADC1_Init+0xec>)
 800094a:	f002 fd35 	bl	80033b8 <HAL_ADCEx_MultiModeConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000954:	f000 fcfc 	bl	8001350 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC1_Init+0xf4>)
 800095a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095c:	2306      	movs	r3, #6
 800095e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000960:	2303      	movs	r3, #3
 8000962:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_ADC1_Init+0xf8>)
 8000966:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000968:	2304      	movs	r3, #4
 800096a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_ADC1_Init+0xec>)
 800097a:	f002 f86b 	bl	8002a54 <HAL_ADC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000984:	f000 fce4 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000554 	.word	0x24000554
 8000994:	40022000 	.word	0x40022000
 8000998:	0c900008 	.word	0x0c900008
 800099c:	47ff0000 	.word	0x47ff0000

080009a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009ba:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <MX_ADC2_Init+0xb0>)
 80009bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009d8:	2200      	movs	r2, #0
 80009da:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009de:	2201      	movs	r2, #1
 80009e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_ADC2_Init+0xac>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_ADC2_Init+0xac>)
 8000a06:	f001 fc2d 	bl	8002264 <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000a10:	f000 fc9e 	bl	8001350 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_ADC2_Init+0xb4>)
 8000a16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a18:	2306      	movs	r3, #6
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_ADC2_Init+0xb8>)
 8000a22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a24:	2304      	movs	r3, #4
 8000a26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_ADC2_Init+0xac>)
 8000a36:	f002 f80d 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000a40:	f000 fc86 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	240004a4 	.word	0x240004a4
 8000a50:	40022100 	.word	0x40022100
 8000a54:	10c00010 	.word	0x10c00010
 8000a58:	47ff0000 	.word	0x47ff0000

08000a5c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a74:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000a76:	4a2a      	ldr	r2, [pc, #168]	; (8000b20 <MX_ADC3_Init+0xc4>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ad2:	4812      	ldr	r0, [pc, #72]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000ad4:	f001 fbc6 	bl	8002264 <HAL_ADC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ade:	f000 fc37 	bl	8001350 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_ADC3_Init+0xc8>)
 8000ae4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000aea:	2307      	movs	r3, #7
 8000aec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000af2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000af4:	2304      	movs	r3, #4
 8000af6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000b06:	f001 ffa5 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000b10:	f000 fc1e 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	240005b8 	.word	0x240005b8
 8000b20:	58026000 	.word	0x58026000
 8000b24:	cb840000 	.word	0xcb840000

08000b28 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b30:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b4a:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_FDCAN1_Init+0xc0>)
 8000bd6:	f004 fa9f 	bl	8005118 <HAL_FDCAN_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000be0:	f000 fbb6 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24000694 	.word	0x24000694
 8000bec:	4000a000 	.word	0x4000a000

08000bf0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <MX_FDCAN2_Init+0xc4>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_FDCAN2_Init+0xc0>)
 8000c9e:	f004 fa3b 	bl	8005118 <HAL_FDCAN_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ca8:	f000 fb52 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	24000784 	.word	0x24000784
 8000cb4:	4000a400 	.word	0x4000a400

08000cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f004 ff42 	bl	8005b7c <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 fb27 	bl	8001350 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f004 ffc9 	bl	8005c9c <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 fb1e 	bl	8001350 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f005 f80b 	bl	8005d32 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fb15 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000508 	.word	0x24000508
 8000d30:	40005400 	.word	0x40005400
 8000d34:	307075b1 	.word	0x307075b1

08000d38 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_I2C4_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <MX_I2C4_Init+0x7c>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d74:	f004 ff02 	bl	8005b7c <HAL_I2C_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d7e:	f000 fae7 	bl	8001350 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d86:	f004 ff89 	bl	8005c9c <HAL_I2CEx_ConfigAnalogFilter>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f000 fade 	bl	8001350 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d94:	2100      	movs	r1, #0
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_I2C4_Init+0x74>)
 8000d98:	f004 ffcb 	bl	8005d32 <HAL_I2CEx_ConfigDigitalFilter>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fad5 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	240003bc 	.word	0x240003bc
 8000db0:	58001c00 	.word	0x58001c00
 8000db4:	307075b1 	.word	0x307075b1

08000db8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dbe:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <MX_SPI2_Init+0xa8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000de4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000de8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000df0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e48:	f009 fbf0 	bl	800a62c <HAL_SPI_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000e52:	f000 fa7d 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000408 	.word	0x24000408
 8000e60:	40003800 	.word	0x40003800

08000e64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09a      	sub	sp, #104	; 0x68
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	222c      	movs	r2, #44	; 0x2c
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f00f fbf0 	bl	8010684 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ea4:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000ea6:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <MX_TIM1_Init+0x154>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eaa:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000eb8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ebc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed0:	4838      	ldr	r0, [pc, #224]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000ed2:	f00a fb50 	bl	800b576 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000edc:	f000 fa38 	bl	8001350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eea:	4619      	mov	r1, r3
 8000eec:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000eee:	f00a fc75 	bl	800b7dc <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ef8:	f000 fa2a 	bl	8001350 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000efc:	482d      	ldr	r0, [pc, #180]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000efe:	f00a fb91 	bl	800b624 <HAL_TIM_OC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f08:	f000 fa22 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000f20:	f00b f962 	bl	800c1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f2a:	f000 fa11 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f2e:	2330      	movs	r3, #48	; 0x30
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f36:	2300      	movs	r3, #0
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000f54:	f00a fbc8 	bl	800b6e8 <HAL_TIM_OC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f5e:	f000 f9f7 	bl	8001350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000f98:	f00b f9b4 	bl	800c304 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000fa2:	f000 f9d5 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <MX_TIM1_Init+0x150>)
 8000fa8:	f000 fce6 	bl	8001978 <HAL_TIM_MspPostInit>

}
 8000fac:	bf00      	nop
 8000fae:	3768      	adds	r7, #104	; 0x68
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000734 	.word	0x24000734
 8000fb8:	40010000 	.word	0x40010000

08000fbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <MX_DMA_Init+0x3c>)
 8000fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <MX_DMA_Init+0x3c>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_DMA_Init+0x3c>)
 8000fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2038      	movs	r0, #56	; 0x38
 8000fe6:	f002 fba0 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fea:	2038      	movs	r0, #56	; 0x38
 8000fec:	f002 fbb7 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	; 0x38
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001012:	4bbf      	ldr	r3, [pc, #764]	; (8001310 <MX_GPIO_Init+0x314>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	4abd      	ldr	r2, [pc, #756]	; (8001310 <MX_GPIO_Init+0x314>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001022:	4bbb      	ldr	r3, [pc, #748]	; (8001310 <MX_GPIO_Init+0x314>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	623b      	str	r3, [r7, #32]
 800102e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	4bb7      	ldr	r3, [pc, #732]	; (8001310 <MX_GPIO_Init+0x314>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	4ab6      	ldr	r2, [pc, #728]	; (8001310 <MX_GPIO_Init+0x314>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001040:	4bb3      	ldr	r3, [pc, #716]	; (8001310 <MX_GPIO_Init+0x314>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800104e:	4bb0      	ldr	r3, [pc, #704]	; (8001310 <MX_GPIO_Init+0x314>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	4aae      	ldr	r2, [pc, #696]	; (8001310 <MX_GPIO_Init+0x314>)
 8001056:	f043 0320 	orr.w	r3, r3, #32
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105e:	4bac      	ldr	r3, [pc, #688]	; (8001310 <MX_GPIO_Init+0x314>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	f003 0320 	and.w	r3, r3, #32
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106c:	4ba8      	ldr	r3, [pc, #672]	; (8001310 <MX_GPIO_Init+0x314>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001072:	4aa7      	ldr	r2, [pc, #668]	; (8001310 <MX_GPIO_Init+0x314>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107c:	4ba4      	ldr	r3, [pc, #656]	; (8001310 <MX_GPIO_Init+0x314>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4ba1      	ldr	r3, [pc, #644]	; (8001310 <MX_GPIO_Init+0x314>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a9f      	ldr	r2, [pc, #636]	; (8001310 <MX_GPIO_Init+0x314>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b9d      	ldr	r3, [pc, #628]	; (8001310 <MX_GPIO_Init+0x314>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b99      	ldr	r3, [pc, #612]	; (8001310 <MX_GPIO_Init+0x314>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a98      	ldr	r2, [pc, #608]	; (8001310 <MX_GPIO_Init+0x314>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b95      	ldr	r3, [pc, #596]	; (8001310 <MX_GPIO_Init+0x314>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c6:	4b92      	ldr	r3, [pc, #584]	; (8001310 <MX_GPIO_Init+0x314>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a90      	ldr	r2, [pc, #576]	; (8001310 <MX_GPIO_Init+0x314>)
 80010ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b8e      	ldr	r3, [pc, #568]	; (8001310 <MX_GPIO_Init+0x314>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e4:	4b8a      	ldr	r3, [pc, #552]	; (8001310 <MX_GPIO_Init+0x314>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a89      	ldr	r2, [pc, #548]	; (8001310 <MX_GPIO_Init+0x314>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b86      	ldr	r3, [pc, #536]	; (8001310 <MX_GPIO_Init+0x314>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V0_GPIO_Port, EN_3V0_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2110      	movs	r1, #16
 8001106:	4883      	ldr	r0, [pc, #524]	; (8001314 <MX_GPIO_Init+0x318>)
 8001108:	f004 fd1e 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_RESET_GPIO_Port, DEMOD_RESET_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2120      	movs	r1, #32
 8001110:	4880      	ldr	r0, [pc, #512]	; (8001314 <MX_GPIO_Init+0x318>)
 8001112:	f004 fd19 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2101      	movs	r1, #1
 800111a:	487f      	ldr	r0, [pc, #508]	; (8001318 <MX_GPIO_Init+0x31c>)
 800111c:	f004 fd14 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2126      	movs	r1, #38	; 0x26
 8001124:	487c      	ldr	r0, [pc, #496]	; (8001318 <MX_GPIO_Init+0x31c>)
 8001126:	f004 fd0f 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800112a:	2374      	movs	r3, #116	; 0x74
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800113a:	2305      	movs	r3, #5
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4875      	ldr	r0, [pc, #468]	; (800131c <MX_GPIO_Init+0x320>)
 8001146:	f004 fb4f 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 800114a:	230b      	movs	r3, #11
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	486f      	ldr	r0, [pc, #444]	; (800131c <MX_GPIO_Init+0x320>)
 800115e:	f004 fb43 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8001162:	f24e 33c2 	movw	r3, #58306	; 0xe3c2
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001168:	2303      	movs	r3, #3
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	486a      	ldr	r0, [pc, #424]	; (8001320 <MX_GPIO_Init+0x324>)
 8001178:	f004 fb36 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800117c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800118e:	230c      	movs	r3, #12
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4862      	ldr	r0, [pc, #392]	; (8001324 <MX_GPIO_Init+0x328>)
 800119a:	f004 fb25 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800119e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	485c      	ldr	r0, [pc, #368]	; (8001324 <MX_GPIO_Init+0x328>)
 80011b4:	f004 fb18 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80011b8:	230d      	movs	r3, #13
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c8:	230c      	movs	r3, #12
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4853      	ldr	r0, [pc, #332]	; (8001320 <MX_GPIO_Init+0x324>)
 80011d4:	f004 fb08 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011d8:	230f      	movs	r3, #15
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	484a      	ldr	r0, [pc, #296]	; (8001314 <MX_GPIO_Init+0x318>)
 80011ec:	f004 fafc 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_3V0_Pin DEMOD_RESET_Pin */
  GPIO_InitStruct.Pin = EN_3V0_Pin|DEMOD_RESET_Pin;
 80011f0:	2330      	movs	r3, #48	; 0x30
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	4843      	ldr	r0, [pc, #268]	; (8001314 <MX_GPIO_Init+0x318>)
 8001208:	f004 faee 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEMOD_CS_Pin DEMOD_RXEN_Pin DEMOD_TXEN_Pin CANLED_Pin */
  GPIO_InitStruct.Pin = DEMOD_CS_Pin|DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin;
 800120c:	2327      	movs	r3, #39	; 0x27
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	483d      	ldr	r0, [pc, #244]	; (8001318 <MX_GPIO_Init+0x31c>)
 8001224:	f004 fae0 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG4
                           PG5 PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001228:	f248 1337 	movw	r3, #33079	; 0x8137
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800123a:	230c      	movs	r3, #12
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	4838      	ldr	r0, [pc, #224]	; (8001328 <MX_GPIO_Init+0x32c>)
 8001246:	f004 facf 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800124a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800125c:	230c      	movs	r3, #12
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	482d      	ldr	r0, [pc, #180]	; (800131c <MX_GPIO_Init+0x320>)
 8001268:	f004 fabe 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800126c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4825      	ldr	r0, [pc, #148]	; (8001318 <MX_GPIO_Init+0x31c>)
 8001282:	f004 fab1 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD14
                           PD15 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001286:	f24c 7303 	movw	r3, #50947	; 0xc703
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001298:	230c      	movs	r3, #12
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	4822      	ldr	r0, [pc, #136]	; (800132c <MX_GPIO_Init+0x330>)
 80012a4:	f004 faa0 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012a8:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	481b      	ldr	r0, [pc, #108]	; (800132c <MX_GPIO_Init+0x330>)
 80012be:	f004 fa93 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 80012c2:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <MX_GPIO_Init+0x32c>)
 80012d8:	f004 fa86 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ee:	2307      	movs	r3, #7
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_GPIO_Init+0x318>)
 80012fa:	f004 fa75 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800130c:	e010      	b.n	8001330 <MX_GPIO_Init+0x334>
 800130e:	bf00      	nop
 8001310:	58024400 	.word	0x58024400
 8001314:	58020000 	.word	0x58020000
 8001318:	58020400 	.word	0x58020400
 800131c:	58021000 	.word	0x58021000
 8001320:	58020800 	.word	0x58020800
 8001324:	58021400 	.word	0x58021400
 8001328:	58021800 	.word	0x58021800
 800132c:	58020c00 	.word	0x58020c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001334:	2306      	movs	r3, #6
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_GPIO_Init+0x350>)
 8001340:	f004 fa52 	bl	80057e8 <HAL_GPIO_Init>

}
 8001344:	bf00      	nop
 8001346:	3738      	adds	r7, #56	; 0x38
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58020800 	.word	0x58020800

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_MspInit+0x30>)
 8001364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x30>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x30>)
 8001374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	58024400 	.word	0x58024400

08001390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a68      	ldr	r2, [pc, #416]	; (8001550 <HAL_ADC_MspInit+0x1c0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d175      	bne.n	800149e <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b2:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_ADC_MspInit+0x1c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a66      	ldr	r2, [pc, #408]	; (8001554 <HAL_ADC_MspInit+0x1c4>)
 80013ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013bc:	4b65      	ldr	r3, [pc, #404]	; (8001554 <HAL_ADC_MspInit+0x1c4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d10e      	bne.n	80013e2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80013c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ca:	4a63      	ldr	r2, [pc, #396]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80013cc:	f043 0320 	orr.w	r3, r3, #32
 80013d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d4:	4b60      	ldr	r3, [pc, #384]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80013d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b59      	ldr	r3, [pc, #356]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001400:	23c0      	movs	r3, #192	; 0xc0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4852      	ldr	r0, [pc, #328]	; (800155c <HAL_ADC_MspInit+0x1cc>)
 8001414:	f004 f9e8 	bl	80057e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001418:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 800141a:	4a52      	ldr	r2, [pc, #328]	; (8001564 <HAL_ADC_MspInit+0x1d4>)
 800141c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800141e:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001420:	2209      	movs	r2, #9
 8001422:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001424:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001436:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001438:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 800143a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800143e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001440:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001448:	4b45      	ldr	r3, [pc, #276]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 800144a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001450:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001456:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 800145a:	2204      	movs	r2, #4
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001460:	2203      	movs	r2, #3
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001464:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001470:	483b      	ldr	r0, [pc, #236]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001472:	f002 f98f 	bl	8003794 <HAL_DMA_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800147c:	f7ff ff68 	bl	8001350 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001484:	64da      	str	r2, [r3, #76]	; 0x4c
 8001486:	4a36      	ldr	r2, [pc, #216]	; (8001560 <HAL_ADC_MspInit+0x1d0>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2012      	movs	r0, #18
 8001492:	f002 f94a 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001496:	2012      	movs	r0, #18
 8001498:	f002 f961 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800149c:	e054      	b.n	8001548 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a31      	ldr	r2, [pc, #196]	; (8001568 <HAL_ADC_MspInit+0x1d8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d13b      	bne.n	8001520 <HAL_ADC_MspInit+0x190>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_ADC_MspInit+0x1c4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a29      	ldr	r2, [pc, #164]	; (8001554 <HAL_ADC_MspInit+0x1c4>)
 80014b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_ADC_MspInit+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10e      	bne.n	80014d8 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80014bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014c0:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80014cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014f6:	2330      	movs	r3, #48	; 0x30
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	2303      	movs	r3, #3
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <HAL_ADC_MspInit+0x1dc>)
 800150a:	f004 f96d 	bl	80057e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2012      	movs	r0, #18
 8001514:	f002 f909 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001518:	2012      	movs	r0, #18
 800151a:	f002 f920 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 800151e:	e013      	b.n	8001548 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <HAL_ADC_MspInit+0x1e0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10e      	bne.n	8001548 <HAL_ADC_MspInit+0x1b8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_ADC_MspInit+0x1c8>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
}
 8001548:	bf00      	nop
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40022000 	.word	0x40022000
 8001554:	24000184 	.word	0x24000184
 8001558:	58024400 	.word	0x58024400
 800155c:	58020000 	.word	0x58020000
 8001560:	2400061c 	.word	0x2400061c
 8001564:	40020410 	.word	0x40020410
 8001568:	40022100 	.word	0x40022100
 800156c:	58020800 	.word	0x58020800
 8001570:	58026000 	.word	0x58026000

08001574 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ba      	sub	sp, #232	; 0xe8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	22bc      	movs	r2, #188	; 0xbc
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f00f f875 	bl	8010684 <memset>
  if(hfdcan->Instance==FDCAN1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_FDCAN_MspInit+0x17c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d14e      	bne.n	8001642 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80015aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	4618      	mov	r0, r3
 80015b8:	f006 feb2 	bl	8008320 <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80015c2:	f7ff fec5 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80015c6:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_FDCAN_MspInit+0x180>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a49      	ldr	r2, [pc, #292]	; (80016f4 <HAL_FDCAN_MspInit+0x180>)
 80015ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_FDCAN_MspInit+0x180>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d10e      	bne.n	80015f6 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80015da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015de:	4a46      	ldr	r2, [pc, #280]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80015ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a3e      	ldr	r2, [pc, #248]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001614:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800162e:	2309      	movs	r3, #9
 8001630:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001638:	4619      	mov	r1, r3
 800163a:	4830      	ldr	r0, [pc, #192]	; (80016fc <HAL_FDCAN_MspInit+0x188>)
 800163c:	f004 f8d4 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001640:	e052      	b.n	80016e8 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_FDCAN_MspInit+0x18c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d14d      	bne.n	80016e8 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800164c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001650:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	4618      	mov	r0, r3
 8001660:	f006 fe5e 	bl	8008320 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 800166a:	f7ff fe71 	bl	8001350 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_FDCAN_MspInit+0x180>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <HAL_FDCAN_MspInit+0x180>)
 8001676:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_FDCAN_MspInit+0x180>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10e      	bne.n	800169e <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 8001682:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 8001692:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_FDCAN_MspInit+0x184>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80016bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80016d6:	2309      	movs	r3, #9
 80016d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_FDCAN_MspInit+0x188>)
 80016e4:	f004 f880 	bl	80057e8 <HAL_GPIO_Init>
}
 80016e8:	bf00      	nop
 80016ea:	37e8      	adds	r7, #232	; 0xe8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	4000a000 	.word	0x4000a000
 80016f4:	24000188 	.word	0x24000188
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58020400 	.word	0x58020400
 8001700:	4000a400 	.word	0x4000a400

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0ba      	sub	sp, #232	; 0xe8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	22bc      	movs	r2, #188	; 0xbc
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f00e ffad 	bl	8010684 <memset>
  if(hi2c->Instance==I2C1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a49      	ldr	r2, [pc, #292]	; (8001854 <HAL_I2C_MspInit+0x150>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d142      	bne.n	80017ba <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001734:	2308      	movs	r3, #8
 8001736:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f006 fdec 	bl	8008320 <HAL_RCCEx_PeriphCLKConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800174e:	f7ff fdff 	bl	8001350 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <HAL_I2C_MspInit+0x154>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	4a3f      	ldr	r2, [pc, #252]	; (8001858 <HAL_I2C_MspInit+0x154>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001762:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <HAL_I2C_MspInit+0x154>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001770:	23c0      	movs	r3, #192	; 0xc0
 8001772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177c:	2301      	movs	r3, #1
 800177e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001788:	2304      	movs	r3, #4
 800178a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001792:	4619      	mov	r1, r3
 8001794:	4831      	ldr	r0, [pc, #196]	; (800185c <HAL_I2C_MspInit+0x158>)
 8001796:	f004 f827 	bl	80057e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_I2C_MspInit+0x154>)
 800179c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a0:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <HAL_I2C_MspInit+0x154>)
 80017a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_I2C_MspInit+0x154>)
 80017ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80017b8:	e047      	b.n	800184a <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C4)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a28      	ldr	r2, [pc, #160]	; (8001860 <HAL_I2C_MspInit+0x15c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d142      	bne.n	800184a <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80017c4:	2310      	movs	r3, #16
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fda4 	bl	8008320 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80017de:	f7ff fdb7 	bl	8001350 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_I2C_MspInit+0x154>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_I2C_MspInit+0x154>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0x154>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001800:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001804:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001808:	2312      	movs	r3, #18
 800180a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180e:	2301      	movs	r3, #1
 8001810:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800181a:	2304      	movs	r3, #4
 800181c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001824:	4619      	mov	r1, r3
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <HAL_I2C_MspInit+0x160>)
 8001828:	f003 ffde 	bl	80057e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_I2C_MspInit+0x154>)
 800182e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_I2C_MspInit+0x154>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_I2C_MspInit+0x154>)
 800183e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
}
 800184a:	bf00      	nop
 800184c:	37e8      	adds	r7, #232	; 0xe8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	58024400 	.word	0x58024400
 800185c:	58020400 	.word	0x58020400
 8001860:	58001c00 	.word	0x58001c00
 8001864:	58020c00 	.word	0x58020c00

08001868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0b8      	sub	sp, #224	; 0xe0
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	22bc      	movs	r2, #188	; 0xbc
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f00e fefb 	bl	8010684 <memset>
  if(hspi->Instance==SPI2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_SPI_MspInit+0xc0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d142      	bne.n	800191e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800189e:	2300      	movs	r3, #0
 80018a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fd3a 	bl	8008320 <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80018b2:	f7ff fd4d 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_SPI_MspInit+0xc4>)
 80018b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_SPI_MspInit+0xc4>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_SPI_MspInit+0xc4>)
 80018c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_SPI_MspInit+0xc4>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	4a14      	ldr	r2, [pc, #80]	; (800192c <HAL_SPI_MspInit+0xc4>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_SPI_MspInit+0xc4>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80018f2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80018f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800190c:	2305      	movs	r3, #5
 800190e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_SPI_MspInit+0xc8>)
 800191a:	f003 ff65 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	37e0      	adds	r7, #224	; 0xe0
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40003800 	.word	0x40003800
 800192c:	58024400 	.word	0x58024400
 8001930:	58020400 	.word	0x58020400

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_TIM_Base_MspInit+0x3c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10e      	bne.n	8001964 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 8001948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 8001958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40010000 	.word	0x40010000
 8001974:	58024400 	.word	0x58024400

08001978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <HAL_TIM_MspPostInit+0x6c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d11f      	bne.n	80019da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_TIM_MspPostInit+0x70>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_TIM_MspPostInit+0x70>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_TIM_MspPostInit+0x70>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_TIM_MspPostInit+0x74>)
 80019d6:	f003 ff07 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40010000 	.word	0x40010000
 80019e8:	58024400 	.word	0x58024400
 80019ec:	58020000 	.word	0x58020000

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SET_EVENT(tick);
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Handler+0x18>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	705a      	strb	r2, [r3, #1]
 8001a42:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <SysTick_Handler+0x18>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 f9ee 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	24000780 	.word	0x24000780

08001a54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <ADC_IRQHandler+0x14>)
 8001a5a:	f000 fda3 	bl	80025a4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <ADC_IRQHandler+0x18>)
 8001a60:	f000 fda0 	bl	80025a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	24000554 	.word	0x24000554
 8001a6c:	240004a4 	.word	0x240004a4

08001a70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA2_Stream0_IRQHandler+0x10>)
 8001a76:	f002 f9e9 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2400061c 	.word	0x2400061c

08001a84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <OTG_FS_IRQHandler+0x10>)
 8001a8a:	f004 faf5 	bl	8006078 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	24001d04 	.word	0x24001d04

08001a98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aaa:	f3af 8000 	nop.w
 8001aae:	4601      	mov	r1, r0
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	b2ca      	uxtb	r2, r1
 8001ab8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf0      	blt.n	8001aaa <_read+0x12>
	}

return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e009      	b.n	8001af8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf1      	blt.n	8001ae4 <_write+0x12>
	}
	return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_close>:

int _close(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	return -1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	605a      	str	r2, [r3, #4]
	return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_isatty>:

int _isatty(int file)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f00e fd36 	bl	8010614 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	24080000 	.word	0x24080000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	2400018c 	.word	0x2400018c
 8001bdc:	24002220 	.word	0x24002220

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001be4:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <SystemInit+0xe4>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <SystemInit+0xe4>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <SystemInit+0xe8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	2b06      	cmp	r3, #6
 8001bfe:	d807      	bhi.n	8001c10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <SystemInit+0xe8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 030f 	bic.w	r3, r3, #15
 8001c08:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <SystemInit+0xe8>)
 8001c0a:	f043 0307 	orr.w	r3, r3, #7
 8001c0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <SystemInit+0xec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <SystemInit+0xec>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <SystemInit+0xec>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <SystemInit+0xec>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4929      	ldr	r1, [pc, #164]	; (8001ccc <SystemInit+0xec>)
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <SystemInit+0xf0>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <SystemInit+0xe8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <SystemInit+0xe8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 030f 	bic.w	r3, r3, #15
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <SystemInit+0xe8>)
 8001c44:	f043 0307 	orr.w	r3, r3, #7
 8001c48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <SystemInit+0xec>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <SystemInit+0xec>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <SystemInit+0xec>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <SystemInit+0xec>)
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <SystemInit+0xf4>)
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <SystemInit+0xec>)
 8001c64:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <SystemInit+0xf8>)
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <SystemInit+0xec>)
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <SystemInit+0xfc>)
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <SystemInit+0xec>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <SystemInit+0xec>)
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <SystemInit+0xfc>)
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <SystemInit+0xec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <SystemInit+0xec>)
 8001c82:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <SystemInit+0xfc>)
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <SystemInit+0xec>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <SystemInit+0xec>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <SystemInit+0xec>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <SystemInit+0xec>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <SystemInit+0x100>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <SystemInit+0x104>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001caa:	d202      	bcs.n	8001cb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <SystemInit+0x108>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <SystemInit+0x10c>)
 8001cb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001cb8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00
 8001cc8:	52002000 	.word	0x52002000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cd4:	02020200 	.word	0x02020200
 8001cd8:	01ff0000 	.word	0x01ff0000
 8001cdc:	01010280 	.word	0x01010280
 8001ce0:	5c001000 	.word	0x5c001000
 8001ce4:	ffff0000 	.word	0xffff0000
 8001ce8:	51008108 	.word	0x51008108
 8001cec:	52004000 	.word	0x52004000

08001cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cf4:	f7ff ff74 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfa:	490d      	ldr	r1, [pc, #52]	; (8001d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d10:	4c0a      	ldr	r4, [pc, #40]	; (8001d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f00e fc7f 	bl	8010620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d22:	f7fe fce3 	bl	80006ec <main>
  bx  lr
 8001d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d30:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8001d34:	0801179c 	.word	0x0801179c
  ldr r2, =_sbss
 8001d38:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8001d3c:	24002220 	.word	0x24002220

08001d40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC3_IRQHandler>
	...

08001d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f001 fce2 	bl	8003714 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d50:	f006 f93c 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_Init+0x68>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	4913      	ldr	r1, [pc, #76]	; (8001db0 <HAL_Init+0x6c>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_Init+0x68>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <HAL_Init+0x6c>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_Init+0x70>)
 8001d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_Init+0x74>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f814 	bl	8001dbc <HAL_InitTick>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e002      	b.n	8001da4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9e:	f7ff fadd 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58024400 	.word	0x58024400
 8001db0:	080116e4 	.word	0x080116e4
 8001db4:	24000008 	.word	0x24000008
 8001db8:	24000004 	.word	0x24000004

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_InitTick+0x60>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e021      	b.n	8001e14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_InitTick+0x64>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_InitTick+0x60>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fcc7 	bl	800377a <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f001 fc91 	bl	800372a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_InitTick+0x68>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	24000010 	.word	0x24000010
 8001e20:	24000004 	.word	0x24000004
 8001e24:	2400000c 	.word	0x2400000c

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	24000010 	.word	0x24000010
 8001e4c:	24000824 	.word	0x24000824

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	24000824 	.word	0x24000824

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	24000010 	.word	0x24000010

08001eb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetREVID+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	5c001000 	.word	0x5c001000

08001ec8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3360      	adds	r3, #96	; 0x60
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	611a      	str	r2, [r3, #16]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3360      	adds	r3, #96	; 0x60
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	601a      	str	r2, [r3, #0]
  }
}
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b087      	sub	sp, #28
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3330      	adds	r3, #48	; 0x30
 800200e:	461a      	mov	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	4413      	add	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	211f      	movs	r1, #31
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	401a      	ands	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 011f 	and.w	r1, r3, #31
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	431a      	orrs	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800204a:	bf00      	nop
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3314      	adds	r3, #20
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0e5b      	lsrs	r3, r3, #25
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0d1b      	lsrs	r3, r3, #20
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2107      	movs	r1, #7
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	0d1b      	lsrs	r3, r3, #20
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0318 	and.w	r3, r3, #24
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020f8:	40d9      	lsrs	r1, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	400b      	ands	r3, r1
 80020fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002102:	431a      	orrs	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	000fffff 	.word	0x000fffff

0800211c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 031f 	and.w	r3, r3, #31
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002162:	4013      	ands	r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6093      	str	r3, [r2, #8]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	5fffffc0 	.word	0x5fffffc0

08002178 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800218c:	d101      	bne.n	8002192 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	6fffffc0 	.word	0x6fffffc0

080021c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021dc:	d101      	bne.n	80021e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <LL_ADC_IsEnabled+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_IsEnabled+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d101      	bne.n	800222e <LL_ADC_REG_IsConversionOngoing+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b08      	cmp	r3, #8
 800224e:	d101      	bne.n	8002254 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e18e      	b.n	800259c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff f87f 	bl	8001390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff67 	bl	8002178 <LL_ADC_IsDeepPowerDownEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff4d 	bl	8002154 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff82 	bl	80021c8 <LL_ADC_IsInternalRegulatorEnabled>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d114      	bne.n	80022f4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff66 	bl	80021a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d4:	4b9a      	ldr	r3, [pc, #616]	; (8002540 <HAL_ADC_Init+0x2dc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	4a9a      	ldr	r2, [pc, #616]	; (8002544 <HAL_ADC_Init+0x2e0>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e6:	e002      	b.n	80022ee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff65 	bl	80021c8 <LL_ADC_IsInternalRegulatorEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10d      	bne.n	8002320 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff76 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 800232a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 8128 	bne.w	800258a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 8124 	bne.w	800258a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff4a 	bl	80021f0 <LL_ADC_IsEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d136      	bne.n	80023d0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a78      	ldr	r2, [pc, #480]	; (8002548 <HAL_ADC_Init+0x2e4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_ADC_Init+0x112>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_ADC_Init+0x2e8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10e      	bne.n	8002394 <HAL_ADC_Init+0x130>
 8002376:	4874      	ldr	r0, [pc, #464]	; (8002548 <HAL_ADC_Init+0x2e4>)
 8002378:	f7ff ff3a 	bl	80021f0 <LL_ADC_IsEnabled>
 800237c:	4604      	mov	r4, r0
 800237e:	4873      	ldr	r0, [pc, #460]	; (800254c <HAL_ADC_Init+0x2e8>)
 8002380:	f7ff ff36 	bl	80021f0 <LL_ADC_IsEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	4323      	orrs	r3, r4
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e008      	b.n	80023a6 <HAL_ADC_Init+0x142>
 8002394:	486e      	ldr	r0, [pc, #440]	; (8002550 <HAL_ADC_Init+0x2ec>)
 8002396:	f7ff ff2b 	bl	80021f0 <LL_ADC_IsEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a66      	ldr	r2, [pc, #408]	; (8002548 <HAL_ADC_Init+0x2e4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_ADC_Init+0x15a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a64      	ldr	r2, [pc, #400]	; (800254c <HAL_ADC_Init+0x2e8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x15e>
 80023be:	4a65      	ldr	r2, [pc, #404]	; (8002554 <HAL_ADC_Init+0x2f0>)
 80023c0:	e000      	b.n	80023c4 <HAL_ADC_Init+0x160>
 80023c2:	4a65      	ldr	r2, [pc, #404]	; (8002558 <HAL_ADC_Init+0x2f4>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f7ff fd7c 	bl	8001ec8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023d0:	f7ff fd6e 	bl	8001eb0 <HAL_GetREVID>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80023da:	4293      	cmp	r3, r2
 80023dc:	d914      	bls.n	8002408 <HAL_ADC_Init+0x1a4>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d110      	bne.n	8002408 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7d5b      	ldrb	r3, [r3, #21]
 80023ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7f1b      	ldrb	r3, [r3, #28]
 80023fc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023fe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002400:	f043 030c 	orr.w	r3, r3, #12
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	e00d      	b.n	8002424 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7d5b      	ldrb	r3, [r3, #21]
 800240c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002412:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002418:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7f1b      	ldrb	r3, [r3, #28]
 800241e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7f1b      	ldrb	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	3b01      	subs	r3, #1
 8002432:	045b      	lsls	r3, r3, #17
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_ADC_Init+0x2f8>)
 800245e:	4013      	ands	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	69b9      	ldr	r1, [r7, #24]
 8002466:	430b      	orrs	r3, r1
 8002468:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fed1 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 8002474:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fede 	bl	800223c <LL_ADC_INJ_IsConversionOngoing>
 8002480:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d14a      	bne.n	800251e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d147      	bne.n	800251e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7d1b      	ldrb	r3, [r3, #20]
 8002492:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_ADC_Init+0x2fc>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d11b      	bne.n	80024f2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_ADC_Init+0x300>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ce:	3a01      	subs	r2, #1
 80024d0:	0411      	lsls	r1, r2, #16
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024dc:	4311      	orrs	r1, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024e2:	430a      	orrs	r2, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	e007      	b.n	8002502 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fdeb 	bl	80030f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d120      	bne.n	8002568 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f023 010f 	bic.w	r1, r3, #15
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
 800253e:	e01b      	b.n	8002578 <HAL_ADC_Init+0x314>
 8002540:	24000004 	.word	0x24000004
 8002544:	053e2d63 	.word	0x053e2d63
 8002548:	40022000 	.word	0x40022000
 800254c:	40022100 	.word	0x40022100
 8002550:	58026000 	.word	0x58026000
 8002554:	40022300 	.word	0x40022300
 8002558:	58026300 	.word	0x58026300
 800255c:	fff0c003 	.word	0xfff0c003
 8002560:	ffffbffc 	.word	0xffffbffc
 8002564:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020f 	bic.w	r2, r2, #15
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f023 0303 	bic.w	r3, r3, #3
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
 8002588:	e007      	b.n	800259a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800259a:	7ffb      	ldrb	r3, [r7, #31]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3724      	adds	r7, #36	; 0x24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}

080025a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a87      	ldr	r2, [pc, #540]	; (80027e4 <HAL_ADC_IRQHandler+0x240>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_ADC_IRQHandler+0x30>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a86      	ldr	r2, [pc, #536]	; (80027e8 <HAL_ADC_IRQHandler+0x244>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x34>
 80025d4:	4b85      	ldr	r3, [pc, #532]	; (80027ec <HAL_ADC_IRQHandler+0x248>)
 80025d6:	e000      	b.n	80025da <HAL_ADC_IRQHandler+0x36>
 80025d8:	4b85      	ldr	r3, [pc, #532]	; (80027f0 <HAL_ADC_IRQHandler+0x24c>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fd9e 	bl	800211c <LL_ADC_GetMultimode>
 80025e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <HAL_ADC_IRQHandler+0x78>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fec8 	bl	80033a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2202      	movs	r2, #2
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <HAL_ADC_IRQHandler+0x8c>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8083 	beq.w	8002742 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d07d      	beq.n	8002742 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fcb8 	bl	8001fd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d062      	beq.n	8002734 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <HAL_ADC_IRQHandler+0x244>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d002      	beq.n	800267e <HAL_ADC_IRQHandler+0xda>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	e000      	b.n	8002680 <HAL_ADC_IRQHandler+0xdc>
 800267e:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_ADC_IRQHandler+0x240>)
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4293      	cmp	r3, r2
 8002686:	d008      	beq.n	800269a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b05      	cmp	r3, #5
 8002692:	d002      	beq.n	800269a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b09      	cmp	r3, #9
 8002698:	d104      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	e00c      	b.n	80026be <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a4f      	ldr	r2, [pc, #316]	; (80027e8 <HAL_ADC_IRQHandler+0x244>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d002      	beq.n	80026b4 <HAL_ADC_IRQHandler+0x110>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	e000      	b.n	80026b6 <HAL_ADC_IRQHandler+0x112>
 80026b4:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_ADC_IRQHandler+0x240>)
 80026b6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d135      	bne.n	8002734 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d12e      	bne.n	8002734 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fd9b 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11a      	bne.n	800271c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 020c 	bic.w	r2, r2, #12
 80026f4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d112      	bne.n	8002734 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
 800271a:	e00b      	b.n	8002734 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f96f 	bl	8002a18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	220c      	movs	r2, #12
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_ADC_IRQHandler+0x1b2>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10b      	bne.n	800276e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a0 	beq.w	80028a2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 809a 	beq.w	80028a2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fc63 	bl	8002056 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002790:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fc1e 	bl	8001fd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800279c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_ADC_IRQHandler+0x244>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d002      	beq.n	80027ae <HAL_ADC_IRQHandler+0x20a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e000      	b.n	80027b0 <HAL_ADC_IRQHandler+0x20c>
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_ADC_IRQHandler+0x240>)
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d008      	beq.n	80027ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d002      	beq.n	80027ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b07      	cmp	r3, #7
 80027c8:	d104      	bne.n	80027d4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	e014      	b.n	80027fe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a03      	ldr	r2, [pc, #12]	; (80027e8 <HAL_ADC_IRQHandler+0x244>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00a      	beq.n	80027f4 <HAL_ADC_IRQHandler+0x250>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e008      	b.n	80027f6 <HAL_ADC_IRQHandler+0x252>
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40022100 	.word	0x40022100
 80027ec:	40022300 	.word	0x40022300
 80027f0:	58026300 	.word	0x58026300
 80027f4:	4b84      	ldr	r3, [pc, #528]	; (8002a08 <HAL_ADC_IRQHandler+0x464>)
 80027f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d047      	beq.n	8002894 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <HAL_ADC_IRQHandler+0x27a>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d03f      	beq.n	8002894 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d13a      	bne.n	8002894 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d133      	bne.n	8002894 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d12e      	bne.n	8002894 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fcfe 	bl	800223c <LL_ADC_INJ_IsConversionOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11a      	bne.n	800287c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002854:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d112      	bne.n	8002894 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
 800287a:	e00b      	b.n	8002894 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f043 0210 	orr.w	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fd5d 	bl	8003354 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2260      	movs	r2, #96	; 0x60
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d011      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x32c>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8b2 	bl	8002a2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <HAL_ADC_IRQHandler+0x35c>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fd43 	bl	800337c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_ADC_IRQHandler+0x38c>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fd35 	bl	8003390 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d043      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x41e>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03e      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800294c:	2301      	movs	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	e021      	b.n	8002996 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <HAL_ADC_IRQHandler+0x464>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_ADC_IRQHandler+0x3c8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <HAL_ADC_IRQHandler+0x468>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_ADC_IRQHandler+0x3cc>
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_ADC_IRQHandler+0x46c>)
 800296e:	e000      	b.n	8002972 <HAL_ADC_IRQHandler+0x3ce>
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_ADC_IRQHandler+0x470>)
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fbe0 	bl	8002138 <LL_ADC_GetMultiDMATransfer>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800297e:	2301      	movs	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	e008      	b.n	8002996 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10e      	bne.n	80029ba <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	f043 0202 	orr.w	r2, r3, #2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f843 	bl	8002a40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2210      	movs	r2, #16
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d018      	beq.n	80029fe <HAL_ADC_IRQHandler+0x45a>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d013      	beq.n	80029fe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f043 0208 	orr.w	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fcb5 	bl	8003368 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80029fe:	bf00      	nop
 8002a00:	3728      	adds	r7, #40	; 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40022100 	.word	0x40022100
 8002a10:	40022300 	.word	0x40022300
 8002a14:	58026300 	.word	0x58026300

08002a18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b0a1      	sub	sp, #132	; 0x84
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a9d      	ldr	r2, [pc, #628]	; (8002ce4 <HAL_ADC_ConfigChannel+0x290>)
 8002a6e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x2a>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e321      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x66e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fbc3 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 8306 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d108      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x62>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2201      	movs	r2, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	e016      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x90>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2201      	movs	r2, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	69d1      	ldr	r1, [r2, #28]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	430b      	orrs	r3, r1
 8002af0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f7ff fa7d 	bl	8001ffe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fb84 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 8002b0e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fb91 	bl	800223c <LL_ADC_INJ_IsConversionOngoing>
 8002b1a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 80b3 	bne.w	8002c8a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 80af 	bne.w	8002c8a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6819      	ldr	r1, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f7ff fa9f 	bl	800207c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_ADC_ConfigChannel+0x294>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x110>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	e01d      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x14c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x136>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	e00a      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x14c>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d027      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb8:	f7ff f9ba 	bl	8001f30 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6919      	ldr	r1, [r3, #16]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	7e5b      	ldrb	r3, [r3, #25]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x17e>
 8002bcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bd0:	e000      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x180>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff f9e4 	bl	8001fa2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7e1b      	ldrb	r3, [r3, #24]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d102      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x19c>
 8002bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bee:	e000      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x19e>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f7ff f9bc 	bl	8001f70 <LL_ADC_SetDataRightShift>
 8002bf8:	e047      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	069b      	lsls	r3, r3, #26
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d107      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	069b      	lsls	r3, r3, #26
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d107      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c40:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	069b      	lsls	r3, r3, #26
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d107      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c64:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	069b      	lsls	r3, r3, #26
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d107      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c88:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff faae 	bl	80021f0 <LL_ADC_IsEnabled>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 820d 	bne.w	80030b6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f7ff fa13 	bl	80020d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <HAL_ADC_ConfigChannel+0x290>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	f040 8133 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d110      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x298>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	2b09      	cmp	r3, #9
 8002cd8:	bf94      	ite	ls
 8002cda:	2301      	movls	r3, #1
 8002cdc:	2300      	movhi	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e01e      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x2cc>
 8002ce2:	bf00      	nop
 8002ce4:	47ff0000 	.word	0x47ff0000
 8002ce8:	5c001000 	.word	0x5c001000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e003      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	bf94      	ite	ls
 8002d1a:	2301      	movls	r3, #1
 8002d1c:	2300      	movhi	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d079      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x2ec>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	3301      	adds	r3, #1
 8002d38:	069b      	lsls	r3, r3, #26
 8002d3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d3e:	e015      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x318>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d50:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	069b      	lsls	r3, r3, #26
 8002d68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x338>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	e017      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x368>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	ea42 0103 	orr.w	r1, r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x38e>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	051b      	lsls	r3, r3, #20
 8002de0:	e018      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x3c0>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e14:	430b      	orrs	r3, r1
 8002e16:	e07e      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x3e0>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	069b      	lsls	r3, r3, #26
 8002e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e32:	e015      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x40c>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	069b      	lsls	r3, r3, #26
 8002e5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x42c>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	3301      	adds	r3, #1
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	e017      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x45c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x488>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b1e      	subs	r3, #30
 8002ed4:	051b      	lsls	r3, r3, #20
 8002ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eda:	e01b      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x4c0>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	60fb      	str	r3, [r7, #12]
  return result;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e003      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 021f 	and.w	r2, r3, #31
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b1e      	subs	r3, #30
 8002f0e:	051b      	lsls	r3, r3, #20
 8002f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f14:	430b      	orrs	r3, r1
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	6892      	ldr	r2, [r2, #8]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7ff f8ae 	bl	800207c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f280 80c6 	bge.w	80030b6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_ADC_ConfigChannel+0x678>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x4ea>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a65      	ldr	r2, [pc, #404]	; (80030d0 <HAL_ADC_ConfigChannel+0x67c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x4ee>
 8002f3e:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_ADC_ConfigChannel+0x680>)
 8002f40:	e000      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x4f0>
 8002f42:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <HAL_ADC_ConfigChannel+0x684>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe ffe5 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 8002f4a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a5e      	ldr	r2, [pc, #376]	; (80030cc <HAL_ADC_ConfigChannel+0x678>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x50c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_ADC_ConfigChannel+0x67c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10e      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x52a>
 8002f60:	485a      	ldr	r0, [pc, #360]	; (80030cc <HAL_ADC_ConfigChannel+0x678>)
 8002f62:	f7ff f945 	bl	80021f0 <LL_ADC_IsEnabled>
 8002f66:	4604      	mov	r4, r0
 8002f68:	4859      	ldr	r0, [pc, #356]	; (80030d0 <HAL_ADC_ConfigChannel+0x67c>)
 8002f6a:	f7ff f941 	bl	80021f0 <LL_ADC_IsEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4323      	orrs	r3, r4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e008      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x53c>
 8002f7e:	4857      	ldr	r0, [pc, #348]	; (80030dc <HAL_ADC_ConfigChannel+0x688>)
 8002f80:	f7ff f936 	bl	80021f0 <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d07d      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_ADC_ConfigChannel+0x68c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d130      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x5ac>
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d12b      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a4b      	ldr	r2, [pc, #300]	; (80030dc <HAL_ADC_ConfigChannel+0x688>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	f040 8081 	bne.w	80030b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a44      	ldr	r2, [pc, #272]	; (80030cc <HAL_ADC_ConfigChannel+0x678>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x574>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a43      	ldr	r2, [pc, #268]	; (80030d0 <HAL_ADC_ConfigChannel+0x67c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x578>
 8002fc8:	4a42      	ldr	r2, [pc, #264]	; (80030d4 <HAL_ADC_ConfigChannel+0x680>)
 8002fca:	e000      	b.n	8002fce <HAL_ADC_ConfigChannel+0x57a>
 8002fcc:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_ADC_ConfigChannel+0x684>)
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f7fe ff89 	bl	8001eee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_ADC_ConfigChannel+0x690>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	4a41      	ldr	r2, [pc, #260]	; (80030e8 <HAL_ADC_ConfigChannel+0x694>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	3301      	adds	r3, #1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ff0:	e002      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f9      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffe:	e05a      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a39      	ldr	r2, [pc, #228]	; (80030ec <HAL_ADC_ConfigChannel+0x698>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d11e      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x5f4>
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a30      	ldr	r2, [pc, #192]	; (80030dc <HAL_ADC_ConfigChannel+0x688>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d14b      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_ADC_ConfigChannel+0x678>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_ADC_ConfigChannel+0x5de>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_ADC_ConfigChannel+0x67c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x5e2>
 8003032:	4a28      	ldr	r2, [pc, #160]	; (80030d4 <HAL_ADC_ConfigChannel+0x680>)
 8003034:	e000      	b.n	8003038 <HAL_ADC_ConfigChannel+0x5e4>
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <HAL_ADC_ConfigChannel+0x684>)
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7fe ff54 	bl	8001eee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003046:	e036      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <HAL_ADC_ConfigChannel+0x69c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d131      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d12c      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <HAL_ADC_ConfigChannel+0x688>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d127      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_ADC_ConfigChannel+0x678>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_ADC_ConfigChannel+0x626>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_ADC_ConfigChannel+0x67c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x62a>
 800307a:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <HAL_ADC_ConfigChannel+0x680>)
 800307c:	e000      	b.n	8003080 <HAL_ADC_ConfigChannel+0x62c>
 800307e:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_ADC_ConfigChannel+0x684>)
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7fe ff30 	bl	8001eee <LL_ADC_SetCommonPathInternalCh>
 800308e:	e012      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030a2:	e008      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3784      	adds	r7, #132	; 0x84
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40022100 	.word	0x40022100
 80030d4:	40022300 	.word	0x40022300
 80030d8:	58026300 	.word	0x58026300
 80030dc:	58026000 	.word	0x58026000
 80030e0:	cb840000 	.word	0xcb840000
 80030e4:	24000004 	.word	0x24000004
 80030e8:	053e2d63 	.word	0x053e2d63
 80030ec:	c7520000 	.word	0xc7520000
 80030f0:	cfb80000 	.word	0xcfb80000

080030f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a79      	ldr	r2, [pc, #484]	; (80032e8 <ADC_ConfigureBoostMode+0x1f4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <ADC_ConfigureBoostMode+0x1c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a78      	ldr	r2, [pc, #480]	; (80032ec <ADC_ConfigureBoostMode+0x1f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d109      	bne.n	8003124 <ADC_ConfigureBoostMode+0x30>
 8003110:	4b77      	ldr	r3, [pc, #476]	; (80032f0 <ADC_ConfigureBoostMode+0x1fc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <ADC_ConfigureBoostMode+0x42>
 8003124:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <ADC_ConfigureBoostMode+0x200>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01c      	beq.n	8003174 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800313a:	f005 f8c1 	bl	80082c0 <HAL_RCC_GetHCLKFreq>
 800313e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003148:	d010      	beq.n	800316c <ADC_ConfigureBoostMode+0x78>
 800314a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800314e:	d871      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x140>
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d002      	beq.n	800315c <ADC_ConfigureBoostMode+0x68>
 8003156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800315a:	d16b      	bne.n	8003234 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	60fb      	str	r3, [r7, #12]
        break;
 800316a:	e066      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
        break;
 8003172:	e062      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003174:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003178:	f006 f812 	bl	80091a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800317c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003186:	d051      	beq.n	800322c <ADC_ConfigureBoostMode+0x138>
 8003188:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800318c:	d854      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 800318e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003192:	d047      	beq.n	8003224 <ADC_ConfigureBoostMode+0x130>
 8003194:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003198:	d84e      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 800319a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800319e:	d03d      	beq.n	800321c <ADC_ConfigureBoostMode+0x128>
 80031a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031a4:	d848      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 80031a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031aa:	d033      	beq.n	8003214 <ADC_ConfigureBoostMode+0x120>
 80031ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b0:	d842      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 80031b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031b6:	d029      	beq.n	800320c <ADC_ConfigureBoostMode+0x118>
 80031b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031bc:	d83c      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 80031be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031c2:	d01a      	beq.n	80031fa <ADC_ConfigureBoostMode+0x106>
 80031c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031c8:	d836      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 80031ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031ce:	d014      	beq.n	80031fa <ADC_ConfigureBoostMode+0x106>
 80031d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031d4:	d830      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031da:	d00e      	beq.n	80031fa <ADC_ConfigureBoostMode+0x106>
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e0:	d82a      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 80031e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031e6:	d008      	beq.n	80031fa <ADC_ConfigureBoostMode+0x106>
 80031e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031ec:	d824      	bhi.n	8003238 <ADC_ConfigureBoostMode+0x144>
 80031ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f2:	d002      	beq.n	80031fa <ADC_ConfigureBoostMode+0x106>
 80031f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031f8:	d11e      	bne.n	8003238 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0c9b      	lsrs	r3, r3, #18
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	60fb      	str	r3, [r7, #12]
        break;
 800320a:	e016      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
        break;
 8003212:	e012      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	60fb      	str	r3, [r7, #12]
        break;
 800321a:	e00e      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	60fb      	str	r3, [r7, #12]
        break;
 8003222:	e00a      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	09db      	lsrs	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]
        break;
 800322a:	e006      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	60fb      	str	r3, [r7, #12]
        break;
 8003232:	e002      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
        break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003238:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800323a:	f7fe fe39 	bl	8001eb0 <HAL_GetREVID>
 800323e:	4603      	mov	r3, r0
 8003240:	f241 0203 	movw	r2, #4099	; 0x1003
 8003244:	4293      	cmp	r3, r2
 8003246:	d815      	bhi.n	8003274 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <ADC_ConfigureBoostMode+0x204>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d908      	bls.n	8003262 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003260:	e03e      	b.n	80032e0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003270:	609a      	str	r2, [r3, #8]
}
 8003272:	e035      	b.n	80032e0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <ADC_ConfigureBoostMode+0x208>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d808      	bhi.n	8003294 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003290:	609a      	str	r2, [r3, #8]
}
 8003292:	e025      	b.n	80032e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <ADC_ConfigureBoostMode+0x20c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d80a      	bhi.n	80032b2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	e016      	b.n	80032e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a13      	ldr	r2, [pc, #76]	; (8003304 <ADC_ConfigureBoostMode+0x210>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d80a      	bhi.n	80032d0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032cc:	609a      	str	r2, [r3, #8]
}
 80032ce:	e007      	b.n	80032e0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032de:	609a      	str	r2, [r3, #8]
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022100 	.word	0x40022100
 80032f0:	40022300 	.word	0x40022300
 80032f4:	58026300 	.word	0x58026300
 80032f8:	01312d00 	.word	0x01312d00
 80032fc:	005f5e10 	.word	0x005f5e10
 8003300:	00bebc20 	.word	0x00bebc20
 8003304:	017d7840 	.word	0x017d7840

08003308 <LL_ADC_IsEnabled>:
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <LL_ADC_IsEnabled+0x18>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <LL_ADC_IsEnabled+0x1a>
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_ADC_REG_IsConversionOngoing>:
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d101      	bne.n	8003346 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b09f      	sub	sp, #124	; 0x7c
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0be      	b.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a5c      	ldr	r2, [pc, #368]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d102      	bne.n	80033f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033f0:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	e001      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e09d      	b.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff87 	bl	800332e <LL_ADC_REG_IsConversionOngoing>
 8003420:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff81 	bl	800332e <LL_ADC_REG_IsConversionOngoing>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d17f      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003434:	2b00      	cmp	r3, #0
 8003436:	d17c      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a47      	ldr	r2, [pc, #284]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a46      	ldr	r2, [pc, #280]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800344c:	4b45      	ldr	r3, [pc, #276]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800344e:	e000      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003450:	4b45      	ldr	r3, [pc, #276]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003452:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d039      	beq.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800345c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	431a      	orrs	r2, r3
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3a      	ldr	r2, [pc, #232]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a38      	ldr	r2, [pc, #224]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10e      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003482:	4836      	ldr	r0, [pc, #216]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003484:	f7ff ff40 	bl	8003308 <LL_ADC_IsEnabled>
 8003488:	4604      	mov	r4, r0
 800348a:	4835      	ldr	r0, [pc, #212]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800348c:	f7ff ff3c 	bl	8003308 <LL_ADC_IsEnabled>
 8003490:	4603      	mov	r3, r0
 8003492:	4323      	orrs	r3, r4
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e008      	b.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80034a0:	4832      	ldr	r0, [pc, #200]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034a2:	f7ff ff31 	bl	8003308 <LL_ADC_IsEnabled>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d047      	beq.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034bc:	4013      	ands	r3, r2
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	6811      	ldr	r1, [r2, #0]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ce:	e03a      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10e      	bne.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80034f0:	481a      	ldr	r0, [pc, #104]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034f2:	f7ff ff09 	bl	8003308 <LL_ADC_IsEnabled>
 80034f6:	4604      	mov	r4, r0
 80034f8:	4819      	ldr	r0, [pc, #100]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034fa:	f7ff ff05 	bl	8003308 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	4323      	orrs	r3, r4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e008      	b.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800350e:	4817      	ldr	r0, [pc, #92]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003510:	f7ff fefa 	bl	8003308 <LL_ADC_IsEnabled>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800352a:	4013      	ands	r3, r2
 800352c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800352e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003530:	e009      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003544:	e000      	b.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003546:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003550:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003554:	4618      	mov	r0, r3
 8003556:	377c      	adds	r7, #124	; 0x7c
 8003558:	46bd      	mov	sp, r7
 800355a:	bd90      	pop	{r4, r7, pc}
 800355c:	40022000 	.word	0x40022000
 8003560:	40022100 	.word	0x40022100
 8003564:	40022300 	.word	0x40022300
 8003568:	58026300 	.word	0x58026300
 800356c:	58026000 	.word	0x58026000
 8003570:	fffff0e0 	.word	0xfffff0e0

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <__NVIC_SetPriorityGrouping+0x40>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00
 80035b8:	05fa0000 	.word	0x05fa0000

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e0:	d301      	bcc.n	80036e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00f      	b.n	8003706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <SysTick_Config+0x40>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ee:	210f      	movs	r1, #15
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f7ff ff8e 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <SysTick_Config+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SysTick_Config+0x40>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff29 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff40 	bl	80035bc <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff90 	bl	8003668 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5f 	bl	8003614 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff33 	bl	80035d8 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa4 	bl	80036d0 <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7fe fb58 	bl	8001e50 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e316      	b.n	8003dda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a66      	ldr	r2, [pc, #408]	; (800394c <HAL_DMA_Init+0x1b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a65      	ldr	r2, [pc, #404]	; (8003950 <HAL_DMA_Init+0x1bc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_DMA_Init+0x1c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a62      	ldr	r2, [pc, #392]	; (8003958 <HAL_DMA_Init+0x1c4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a60      	ldr	r2, [pc, #384]	; (800395c <HAL_DMA_Init+0x1c8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5f      	ldr	r2, [pc, #380]	; (8003960 <HAL_DMA_Init+0x1cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5d      	ldr	r2, [pc, #372]	; (8003964 <HAL_DMA_Init+0x1d0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5c      	ldr	r2, [pc, #368]	; (8003968 <HAL_DMA_Init+0x1d4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5a      	ldr	r2, [pc, #360]	; (800396c <HAL_DMA_Init+0x1d8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a59      	ldr	r2, [pc, #356]	; (8003970 <HAL_DMA_Init+0x1dc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_DMA_Init+0x1e0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a56      	ldr	r2, [pc, #344]	; (8003978 <HAL_DMA_Init+0x1e4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_DMA_Init+0x1e8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a53      	ldr	r2, [pc, #332]	; (8003980 <HAL_DMA_Init+0x1ec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_DMA_Init+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a50      	ldr	r2, [pc, #320]	; (8003988 <HAL_DMA_Init+0x1f4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Init+0xbc>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_DMA_Init+0xbe>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 813b 	beq.w	8003ace <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a37      	ldr	r2, [pc, #220]	; (800394c <HAL_DMA_Init+0x1b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_DMA_Init+0x1bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a34      	ldr	r2, [pc, #208]	; (8003954 <HAL_DMA_Init+0x1c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a33      	ldr	r2, [pc, #204]	; (8003958 <HAL_DMA_Init+0x1c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a31      	ldr	r2, [pc, #196]	; (800395c <HAL_DMA_Init+0x1c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_DMA_Init+0x1cc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_DMA_Init+0x1d0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2d      	ldr	r2, [pc, #180]	; (8003968 <HAL_DMA_Init+0x1d4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2b      	ldr	r2, [pc, #172]	; (800396c <HAL_DMA_Init+0x1d8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_DMA_Init+0x1dc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a28      	ldr	r2, [pc, #160]	; (8003974 <HAL_DMA_Init+0x1e0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a27      	ldr	r2, [pc, #156]	; (8003978 <HAL_DMA_Init+0x1e4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <HAL_DMA_Init+0x1e8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_DMA_Init+0x1ec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a22      	ldr	r2, [pc, #136]	; (8003984 <HAL_DMA_Init+0x1f0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a21      	ldr	r2, [pc, #132]	; (8003988 <HAL_DMA_Init+0x1f4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <HAL_DMA_Init+0x186>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e007      	b.n	800392a <HAL_DMA_Init+0x196>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800392a:	e02f      	b.n	800398c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392c:	f7fe fa90 	bl	8001e50 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b05      	cmp	r3, #5
 8003938:	d928      	bls.n	800398c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2203      	movs	r2, #3
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e246      	b.n	8003dda <HAL_DMA_Init+0x646>
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1c8      	bne.n	800392c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4b83      	ldr	r3, [pc, #524]	; (8003bb4 <HAL_DMA_Init+0x420>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d107      	bne.n	80039f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	4313      	orrs	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039f0:	4b71      	ldr	r3, [pc, #452]	; (8003bb8 <HAL_DMA_Init+0x424>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b71      	ldr	r3, [pc, #452]	; (8003bbc <HAL_DMA_Init+0x428>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fc:	d328      	bcc.n	8003a50 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b28      	cmp	r3, #40	; 0x28
 8003a04:	d903      	bls.n	8003a0e <HAL_DMA_Init+0x27a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0c:	d917      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b3e      	cmp	r3, #62	; 0x3e
 8003a14:	d903      	bls.n	8003a1e <HAL_DMA_Init+0x28a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b42      	cmp	r3, #66	; 0x42
 8003a1c:	d90f      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b46      	cmp	r3, #70	; 0x46
 8003a24:	d903      	bls.n	8003a2e <HAL_DMA_Init+0x29a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b48      	cmp	r3, #72	; 0x48
 8003a2c:	d907      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b4e      	cmp	r3, #78	; 0x4e
 8003a34:	d905      	bls.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b52      	cmp	r3, #82	; 0x52
 8003a3c:	d801      	bhi.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_Init+0x2b0>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d117      	bne.n	8003aaa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f001 f9b9 	bl	8004e04 <DMA_CheckFifoParam>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e197      	b.n	8003dda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f001 f8f4 	bl	8004ca0 <DMA_CalcBaseAndBitshift>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	223f      	movs	r2, #63	; 0x3f
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e0cd      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <HAL_DMA_Init+0x42c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a39      	ldr	r2, [pc, #228]	; (8003bc4 <HAL_DMA_Init+0x430>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <HAL_DMA_Init+0x434>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <HAL_DMA_Init+0x438>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <HAL_DMA_Init+0x43c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a33      	ldr	r2, [pc, #204]	; (8003bd4 <HAL_DMA_Init+0x440>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a32      	ldr	r2, [pc, #200]	; (8003bd8 <HAL_DMA_Init+0x444>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <HAL_DMA_Init+0x448>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x38e>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_Init+0x390>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <HAL_DMA_Init+0x42c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d021      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_DMA_Init+0x430>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01c      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_DMA_Init+0x434>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d017      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_DMA_Init+0x438>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d012      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_DMA_Init+0x43c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00d      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_DMA_Init+0x440>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d008      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_DMA_Init+0x444>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_DMA_Init+0x448>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_DMA_Init+0x44c>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d020      	beq.n	8003be4 <HAL_DMA_Init+0x450>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Init+0x41c>
 8003baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bae:	e01a      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e018      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bb4:	fe10803f 	.word	0xfe10803f
 8003bb8:	5c001000 	.word	0x5c001000
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	58025408 	.word	0x58025408
 8003bc4:	5802541c 	.word	0x5802541c
 8003bc8:	58025430 	.word	0x58025430
 8003bcc:	58025444 	.word	0x58025444
 8003bd0:	58025458 	.word	0x58025458
 8003bd4:	5802546c 	.word	0x5802546c
 8003bd8:	58025480 	.word	0x58025480
 8003bdc:	58025494 	.word	0x58025494
 8003be0:	fffe000f 	.word	0xfffe000f
 8003be4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	; (8003de4 <HAL_DMA_Init+0x650>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a6e      	ldr	r2, [pc, #440]	; (8003de8 <HAL_DMA_Init+0x654>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 f82f 	bl	8004ca0 <DMA_CalcBaseAndBitshift>
 8003c42:	4603      	mov	r3, r0
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	e008      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0b7      	b.n	8003dda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5f      	ldr	r2, [pc, #380]	; (8003dec <HAL_DMA_Init+0x658>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d072      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	; (8003df0 <HAL_DMA_Init+0x65c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d06d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	; (8003df4 <HAL_DMA_Init+0x660>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d068      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	; (8003df8 <HAL_DMA_Init+0x664>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d063      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a59      	ldr	r2, [pc, #356]	; (8003dfc <HAL_DMA_Init+0x668>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d05e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <HAL_DMA_Init+0x66c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d059      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a56      	ldr	r2, [pc, #344]	; (8003e04 <HAL_DMA_Init+0x670>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d054      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <HAL_DMA_Init+0x674>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d04f      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	; (8003e0c <HAL_DMA_Init+0x678>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d04a      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	; (8003e10 <HAL_DMA_Init+0x67c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d045      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a50      	ldr	r2, [pc, #320]	; (8003e14 <HAL_DMA_Init+0x680>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d040      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	; (8003e18 <HAL_DMA_Init+0x684>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d03b      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	; (8003e1c <HAL_DMA_Init+0x688>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d036      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <HAL_DMA_Init+0x68c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d031      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4a      	ldr	r2, [pc, #296]	; (8003e24 <HAL_DMA_Init+0x690>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d02c      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a48      	ldr	r2, [pc, #288]	; (8003e28 <HAL_DMA_Init+0x694>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d027      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <HAL_DMA_Init+0x698>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a45      	ldr	r2, [pc, #276]	; (8003e30 <HAL_DMA_Init+0x69c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a44      	ldr	r2, [pc, #272]	; (8003e34 <HAL_DMA_Init+0x6a0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d018      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	; (8003e38 <HAL_DMA_Init+0x6a4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <HAL_DMA_Init+0x6a8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3f      	ldr	r2, [pc, #252]	; (8003e40 <HAL_DMA_Init+0x6ac>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3e      	ldr	r2, [pc, #248]	; (8003e44 <HAL_DMA_Init+0x6b0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <HAL_DMA_Init+0x6b4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_DMA_Init+0x5ca>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_Init+0x5cc>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 f8c9 	bl	8004efc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d102      	bne.n	8003d78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_DMA_Init+0x624>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d80c      	bhi.n	8003db8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f001 f946 	bl	8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	a7fdabf8 	.word	0xa7fdabf8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020010 	.word	0x40020010
 8003df0:	40020028 	.word	0x40020028
 8003df4:	40020040 	.word	0x40020040
 8003df8:	40020058 	.word	0x40020058
 8003dfc:	40020070 	.word	0x40020070
 8003e00:	40020088 	.word	0x40020088
 8003e04:	400200a0 	.word	0x400200a0
 8003e08:	400200b8 	.word	0x400200b8
 8003e0c:	40020410 	.word	0x40020410
 8003e10:	40020428 	.word	0x40020428
 8003e14:	40020440 	.word	0x40020440
 8003e18:	40020458 	.word	0x40020458
 8003e1c:	40020470 	.word	0x40020470
 8003e20:	40020488 	.word	0x40020488
 8003e24:	400204a0 	.word	0x400204a0
 8003e28:	400204b8 	.word	0x400204b8
 8003e2c:	58025408 	.word	0x58025408
 8003e30:	5802541c 	.word	0x5802541c
 8003e34:	58025430 	.word	0x58025430
 8003e38:	58025444 	.word	0x58025444
 8003e3c:	58025458 	.word	0x58025458
 8003e40:	5802546c 	.word	0x5802546c
 8003e44:	58025480 	.word	0x58025480
 8003e48:	58025494 	.word	0x58025494

08003e4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e58:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_DMA_IRQHandler+0x1ac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a67      	ldr	r2, [pc, #412]	; (8003ffc <HAL_DMA_IRQHandler+0x1b0>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5f      	ldr	r2, [pc, #380]	; (8004000 <HAL_DMA_IRQHandler+0x1b4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04a      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_DMA_IRQHandler+0x1b8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d045      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5c      	ldr	r2, [pc, #368]	; (8004008 <HAL_DMA_IRQHandler+0x1bc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d040      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5a      	ldr	r2, [pc, #360]	; (800400c <HAL_DMA_IRQHandler+0x1c0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d03b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a59      	ldr	r2, [pc, #356]	; (8004010 <HAL_DMA_IRQHandler+0x1c4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d036      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a57      	ldr	r2, [pc, #348]	; (8004014 <HAL_DMA_IRQHandler+0x1c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_DMA_IRQHandler+0x1cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d02c      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_DMA_IRQHandler+0x1d0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_DMA_IRQHandler+0x1d4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_DMA_IRQHandler+0x1d8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_DMA_IRQHandler+0x1dc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4e      	ldr	r2, [pc, #312]	; (800402c <HAL_DMA_IRQHandler+0x1e0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_DMA_IRQHandler+0x1e4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a4b      	ldr	r2, [pc, #300]	; (8004034 <HAL_DMA_IRQHandler+0x1e8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <HAL_DMA_IRQHandler+0x1ec>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_DMA_IRQHandler+0x1f0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_DMA_IRQHandler+0xd6>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_IRQHandler+0xd8>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 842b 	beq.w	8004780 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2208      	movs	r2, #8
 8003f34:	409a      	lsls	r2, r3
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80a2 	beq.w	8004084 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <HAL_DMA_IRQHandler+0x1b4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04a      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_DMA_IRQHandler+0x1b8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d045      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <HAL_DMA_IRQHandler+0x1bc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d040      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <HAL_DMA_IRQHandler+0x1c0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d03b      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <HAL_DMA_IRQHandler+0x1c4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d036      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a27      	ldr	r2, [pc, #156]	; (8004014 <HAL_DMA_IRQHandler+0x1c8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d031      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a25      	ldr	r2, [pc, #148]	; (8004018 <HAL_DMA_IRQHandler+0x1cc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02c      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a24      	ldr	r2, [pc, #144]	; (800401c <HAL_DMA_IRQHandler+0x1d0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d027      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <HAL_DMA_IRQHandler+0x1d4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a21      	ldr	r2, [pc, #132]	; (8004024 <HAL_DMA_IRQHandler+0x1d8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01d      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_DMA_IRQHandler+0x1dc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_DMA_IRQHandler+0x1e0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_DMA_IRQHandler+0x1e4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <HAL_DMA_IRQHandler+0x1e8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_DMA_IRQHandler+0x1ec>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_DMA_IRQHandler+0x1f0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d12f      	bne.n	8004040 <HAL_DMA_IRQHandler+0x1f4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e02e      	b.n	8004054 <HAL_DMA_IRQHandler+0x208>
 8003ff6:	bf00      	nop
 8003ff8:	24000004 	.word	0x24000004
 8003ffc:	1b4e81b5 	.word	0x1b4e81b5
 8004000:	40020010 	.word	0x40020010
 8004004:	40020028 	.word	0x40020028
 8004008:	40020040 	.word	0x40020040
 800400c:	40020058 	.word	0x40020058
 8004010:	40020070 	.word	0x40020070
 8004014:	40020088 	.word	0x40020088
 8004018:	400200a0 	.word	0x400200a0
 800401c:	400200b8 	.word	0x400200b8
 8004020:	40020410 	.word	0x40020410
 8004024:	40020428 	.word	0x40020428
 8004028:	40020440 	.word	0x40020440
 800402c:	40020458 	.word	0x40020458
 8004030:	40020470 	.word	0x40020470
 8004034:	40020488 	.word	0x40020488
 8004038:	400204a0 	.word	0x400204a0
 800403c:	400204b8 	.word	0x400204b8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0204 	bic.w	r2, r2, #4
 8004066:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2208      	movs	r2, #8
 8004072:	409a      	lsls	r2, r3
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d06e      	beq.n	8004178 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a69      	ldr	r2, [pc, #420]	; (8004244 <HAL_DMA_IRQHandler+0x3f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d04a      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_IRQHandler+0x3fc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d045      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a66      	ldr	r2, [pc, #408]	; (800424c <HAL_DMA_IRQHandler+0x400>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d040      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_DMA_IRQHandler+0x404>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d03b      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_DMA_IRQHandler+0x408>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d036      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_DMA_IRQHandler+0x40c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d031      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_DMA_IRQHandler+0x410>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d02c      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5e      	ldr	r2, [pc, #376]	; (8004260 <HAL_DMA_IRQHandler+0x414>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d027      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <HAL_DMA_IRQHandler+0x418>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d022      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5b      	ldr	r2, [pc, #364]	; (8004268 <HAL_DMA_IRQHandler+0x41c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01d      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a5a      	ldr	r2, [pc, #360]	; (800426c <HAL_DMA_IRQHandler+0x420>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d018      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a58      	ldr	r2, [pc, #352]	; (8004270 <HAL_DMA_IRQHandler+0x424>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_DMA_IRQHandler+0x428>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00e      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a55      	ldr	r2, [pc, #340]	; (8004278 <HAL_DMA_IRQHandler+0x42c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a54      	ldr	r2, [pc, #336]	; (800427c <HAL_DMA_IRQHandler+0x430>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_DMA_IRQHandler+0x434>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10a      	bne.n	8004150 <HAL_DMA_IRQHandler+0x304>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e003      	b.n	8004158 <HAL_DMA_IRQHandler+0x30c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2201      	movs	r2, #1
 8004166:	409a      	lsls	r2, r3
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f043 0202 	orr.w	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2204      	movs	r2, #4
 8004182:	409a      	lsls	r2, r3
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 808f 	beq.w	80042ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <HAL_DMA_IRQHandler+0x3f8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d04a      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_DMA_IRQHandler+0x3fc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d045      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a29      	ldr	r2, [pc, #164]	; (800424c <HAL_DMA_IRQHandler+0x400>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d040      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a27      	ldr	r2, [pc, #156]	; (8004250 <HAL_DMA_IRQHandler+0x404>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d03b      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <HAL_DMA_IRQHandler+0x408>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d036      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_DMA_IRQHandler+0x40c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_DMA_IRQHandler+0x410>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d02c      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_DMA_IRQHandler+0x414>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d027      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a20      	ldr	r2, [pc, #128]	; (8004264 <HAL_DMA_IRQHandler+0x418>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_DMA_IRQHandler+0x41c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01d      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_DMA_IRQHandler+0x420>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_DMA_IRQHandler+0x424>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <HAL_DMA_IRQHandler+0x428>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_DMA_IRQHandler+0x42c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_DMA_IRQHandler+0x430>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_DMA_IRQHandler+0x434>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12a      	bne.n	8004284 <HAL_DMA_IRQHandler+0x438>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e023      	b.n	800428c <HAL_DMA_IRQHandler+0x440>
 8004244:	40020010 	.word	0x40020010
 8004248:	40020028 	.word	0x40020028
 800424c:	40020040 	.word	0x40020040
 8004250:	40020058 	.word	0x40020058
 8004254:	40020070 	.word	0x40020070
 8004258:	40020088 	.word	0x40020088
 800425c:	400200a0 	.word	0x400200a0
 8004260:	400200b8 	.word	0x400200b8
 8004264:	40020410 	.word	0x40020410
 8004268:	40020428 	.word	0x40020428
 800426c:	40020440 	.word	0x40020440
 8004270:	40020458 	.word	0x40020458
 8004274:	40020470 	.word	0x40020470
 8004278:	40020488 	.word	0x40020488
 800427c:	400204a0 	.word	0x400204a0
 8004280:	400204b8 	.word	0x400204b8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2204      	movs	r2, #4
 800429a:	409a      	lsls	r2, r3
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2210      	movs	r2, #16
 80042b6:	409a      	lsls	r2, r3
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a6 	beq.w	800440e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a85      	ldr	r2, [pc, #532]	; (80044dc <HAL_DMA_IRQHandler+0x690>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d04a      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a83      	ldr	r2, [pc, #524]	; (80044e0 <HAL_DMA_IRQHandler+0x694>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d045      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a82      	ldr	r2, [pc, #520]	; (80044e4 <HAL_DMA_IRQHandler+0x698>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d040      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a80      	ldr	r2, [pc, #512]	; (80044e8 <HAL_DMA_IRQHandler+0x69c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d03b      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7f      	ldr	r2, [pc, #508]	; (80044ec <HAL_DMA_IRQHandler+0x6a0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d036      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7d      	ldr	r2, [pc, #500]	; (80044f0 <HAL_DMA_IRQHandler+0x6a4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d031      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7c      	ldr	r2, [pc, #496]	; (80044f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d02c      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7a      	ldr	r2, [pc, #488]	; (80044f8 <HAL_DMA_IRQHandler+0x6ac>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d027      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a79      	ldr	r2, [pc, #484]	; (80044fc <HAL_DMA_IRQHandler+0x6b0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a77      	ldr	r2, [pc, #476]	; (8004500 <HAL_DMA_IRQHandler+0x6b4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01d      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a76      	ldr	r2, [pc, #472]	; (8004504 <HAL_DMA_IRQHandler+0x6b8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a74      	ldr	r2, [pc, #464]	; (8004508 <HAL_DMA_IRQHandler+0x6bc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a73      	ldr	r2, [pc, #460]	; (800450c <HAL_DMA_IRQHandler+0x6c0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a71      	ldr	r2, [pc, #452]	; (8004510 <HAL_DMA_IRQHandler+0x6c4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a70      	ldr	r2, [pc, #448]	; (8004514 <HAL_DMA_IRQHandler+0x6c8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6e      	ldr	r2, [pc, #440]	; (8004518 <HAL_DMA_IRQHandler+0x6cc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10a      	bne.n	8004378 <HAL_DMA_IRQHandler+0x52c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e009      	b.n	800438c <HAL_DMA_IRQHandler+0x540>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d03e      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2210      	movs	r2, #16
 800439a:	409a      	lsls	r2, r3
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d024      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	e01f      	b.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01b      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
 80043de:	e016      	b.n	800440e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0208 	bic.w	r2, r2, #8
 80043fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2220      	movs	r2, #32
 8004418:	409a      	lsls	r2, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8110 	beq.w	8004644 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <HAL_DMA_IRQHandler+0x690>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_DMA_IRQHandler+0x694>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <HAL_DMA_IRQHandler+0x698>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <HAL_DMA_IRQHandler+0x69c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <HAL_DMA_IRQHandler+0x6a0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <HAL_DMA_IRQHandler+0x6a4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_DMA_IRQHandler+0x6b0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_DMA_IRQHandler+0x6b4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <HAL_DMA_IRQHandler+0x6b8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <HAL_DMA_IRQHandler+0x6bc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <HAL_DMA_IRQHandler+0x6c0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a19      	ldr	r2, [pc, #100]	; (8004510 <HAL_DMA_IRQHandler+0x6c4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_DMA_IRQHandler+0x6c8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <HAL_DMA_IRQHandler+0x6cc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d12b      	bne.n	800451c <HAL_DMA_IRQHandler+0x6d0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e02a      	b.n	8004530 <HAL_DMA_IRQHandler+0x6e4>
 80044da:	bf00      	nop
 80044dc:	40020010 	.word	0x40020010
 80044e0:	40020028 	.word	0x40020028
 80044e4:	40020040 	.word	0x40020040
 80044e8:	40020058 	.word	0x40020058
 80044ec:	40020070 	.word	0x40020070
 80044f0:	40020088 	.word	0x40020088
 80044f4:	400200a0 	.word	0x400200a0
 80044f8:	400200b8 	.word	0x400200b8
 80044fc:	40020410 	.word	0x40020410
 8004500:	40020428 	.word	0x40020428
 8004504:	40020440 	.word	0x40020440
 8004508:	40020458 	.word	0x40020458
 800450c:	40020470 	.word	0x40020470
 8004510:	40020488 	.word	0x40020488
 8004514:	400204a0 	.word	0x400204a0
 8004518:	400204b8 	.word	0x400204b8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8087 	beq.w	8004644 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2220      	movs	r2, #32
 8004540:	409a      	lsls	r2, r3
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b04      	cmp	r3, #4
 8004550:	d139      	bne.n	80045c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0216 	bic.w	r2, r2, #22
 8004560:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_DMA_IRQHandler+0x736>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0208 	bic.w	r2, r2, #8
 8004590:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	223f      	movs	r2, #63	; 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 834a 	beq.w	8004c50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
          }
          return;
 80045c4:	e344      	b.n	8004c50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02c      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
 80045f2:	e027      	b.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d023      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
 8004604:	e01e      	b.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10f      	bne.n	8004634 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0210 	bic.w	r2, r2, #16
 8004622:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8306 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8088 	beq.w	800476c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a7a      	ldr	r2, [pc, #488]	; (8004854 <HAL_DMA_IRQHandler+0xa08>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04a      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a79      	ldr	r2, [pc, #484]	; (8004858 <HAL_DMA_IRQHandler+0xa0c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d045      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a77      	ldr	r2, [pc, #476]	; (800485c <HAL_DMA_IRQHandler+0xa10>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d040      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	; (8004860 <HAL_DMA_IRQHandler+0xa14>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d03b      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a74      	ldr	r2, [pc, #464]	; (8004864 <HAL_DMA_IRQHandler+0xa18>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d036      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_DMA_IRQHandler+0xa1c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d031      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a71      	ldr	r2, [pc, #452]	; (800486c <HAL_DMA_IRQHandler+0xa20>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02c      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a70      	ldr	r2, [pc, #448]	; (8004870 <HAL_DMA_IRQHandler+0xa24>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d027      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6e      	ldr	r2, [pc, #440]	; (8004874 <HAL_DMA_IRQHandler+0xa28>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6d      	ldr	r2, [pc, #436]	; (8004878 <HAL_DMA_IRQHandler+0xa2c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d01d      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6b      	ldr	r2, [pc, #428]	; (800487c <HAL_DMA_IRQHandler+0xa30>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	; (8004880 <HAL_DMA_IRQHandler+0xa34>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_DMA_IRQHandler+0xa38>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a67      	ldr	r2, [pc, #412]	; (8004888 <HAL_DMA_IRQHandler+0xa3c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a65      	ldr	r2, [pc, #404]	; (800488c <HAL_DMA_IRQHandler+0xa40>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a64      	ldr	r2, [pc, #400]	; (8004890 <HAL_DMA_IRQHandler+0xa44>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <HAL_DMA_IRQHandler+0x8ca>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e007      	b.n	8004726 <HAL_DMA_IRQHandler+0x8da>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	429a      	cmp	r2, r3
 8004730:	d307      	bcc.n	8004742 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f2      	bne.n	8004726 <HAL_DMA_IRQHandler+0x8da>
 8004740:	e000      	b.n	8004744 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004742:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2203      	movs	r2, #3
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800475a:	e003      	b.n	8004764 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8272 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
 800477e:	e26c      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a43      	ldr	r2, [pc, #268]	; (8004894 <HAL_DMA_IRQHandler+0xa48>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a42      	ldr	r2, [pc, #264]	; (8004898 <HAL_DMA_IRQHandler+0xa4c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d01d      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a40      	ldr	r2, [pc, #256]	; (800489c <HAL_DMA_IRQHandler+0xa50>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3f      	ldr	r2, [pc, #252]	; (80048a0 <HAL_DMA_IRQHandler+0xa54>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3d      	ldr	r2, [pc, #244]	; (80048a4 <HAL_DMA_IRQHandler+0xa58>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <HAL_DMA_IRQHandler+0xa5c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <HAL_DMA_IRQHandler+0xa60>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	; (80048b0 <HAL_DMA_IRQHandler+0xa64>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_IRQHandler+0x988>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_DMA_IRQHandler+0x98a>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 823f 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2204      	movs	r2, #4
 80047ee:	409a      	lsls	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80cd 	beq.w	8004994 <HAL_DMA_IRQHandler+0xb48>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80c7 	beq.w	8004994 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	2204      	movs	r2, #4
 8004810:	409a      	lsls	r2, r3
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d049      	beq.n	80048b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8210 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483c:	e20a      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8206 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004850:	e200      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
 8004852:	bf00      	nop
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d160      	bne.n	8004980 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a8c      	ldr	r2, [pc, #560]	; (8004af4 <HAL_DMA_IRQHandler+0xca8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d04a      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a8a      	ldr	r2, [pc, #552]	; (8004af8 <HAL_DMA_IRQHandler+0xcac>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d045      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a89      	ldr	r2, [pc, #548]	; (8004afc <HAL_DMA_IRQHandler+0xcb0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d040      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a87      	ldr	r2, [pc, #540]	; (8004b00 <HAL_DMA_IRQHandler+0xcb4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d03b      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a86      	ldr	r2, [pc, #536]	; (8004b04 <HAL_DMA_IRQHandler+0xcb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d036      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a84      	ldr	r2, [pc, #528]	; (8004b08 <HAL_DMA_IRQHandler+0xcbc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d031      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a83      	ldr	r2, [pc, #524]	; (8004b0c <HAL_DMA_IRQHandler+0xcc0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d02c      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a81      	ldr	r2, [pc, #516]	; (8004b10 <HAL_DMA_IRQHandler+0xcc4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d027      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a80      	ldr	r2, [pc, #512]	; (8004b14 <HAL_DMA_IRQHandler+0xcc8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d022      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7e      	ldr	r2, [pc, #504]	; (8004b18 <HAL_DMA_IRQHandler+0xccc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01d      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7d      	ldr	r2, [pc, #500]	; (8004b1c <HAL_DMA_IRQHandler+0xcd0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d018      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a7b      	ldr	r2, [pc, #492]	; (8004b20 <HAL_DMA_IRQHandler+0xcd4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7a      	ldr	r2, [pc, #488]	; (8004b24 <HAL_DMA_IRQHandler+0xcd8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a78      	ldr	r2, [pc, #480]	; (8004b28 <HAL_DMA_IRQHandler+0xcdc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a77      	ldr	r2, [pc, #476]	; (8004b2c <HAL_DMA_IRQHandler+0xce0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a75      	ldr	r2, [pc, #468]	; (8004b30 <HAL_DMA_IRQHandler+0xce4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <HAL_DMA_IRQHandler+0xb24>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0208 	bic.w	r2, r2, #8
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e007      	b.n	8004980 <HAL_DMA_IRQHandler+0xb34>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0204 	bic.w	r2, r2, #4
 800497e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8165 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004992:	e15f      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2202      	movs	r2, #2
 800499e:	409a      	lsls	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80c5 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xce8>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80bf 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2202      	movs	r2, #2
 80049c0:	409a      	lsls	r2, r3
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d018      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 813a 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ec:	e134      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8130 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a00:	e12a      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d168      	bne.n	8004ade <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a38      	ldr	r2, [pc, #224]	; (8004af4 <HAL_DMA_IRQHandler+0xca8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a37      	ldr	r2, [pc, #220]	; (8004af8 <HAL_DMA_IRQHandler+0xcac>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a35      	ldr	r2, [pc, #212]	; (8004afc <HAL_DMA_IRQHandler+0xcb0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <HAL_DMA_IRQHandler+0xcb4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <HAL_DMA_IRQHandler+0xcb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a31      	ldr	r2, [pc, #196]	; (8004b08 <HAL_DMA_IRQHandler+0xcbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <HAL_DMA_IRQHandler+0xcc0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2e      	ldr	r2, [pc, #184]	; (8004b10 <HAL_DMA_IRQHandler+0xcc4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <HAL_DMA_IRQHandler+0xcc8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <HAL_DMA_IRQHandler+0xccc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <HAL_DMA_IRQHandler+0xcd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <HAL_DMA_IRQHandler+0xcd4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <HAL_DMA_IRQHandler+0xcd8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <HAL_DMA_IRQHandler+0xcdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <HAL_DMA_IRQHandler+0xce0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_DMA_IRQHandler+0xce4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <HAL_DMA_IRQHandler+0xc72>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0214 	bic.w	r2, r2, #20
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e007      	b.n	8004ace <HAL_DMA_IRQHandler+0xc82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 020a 	bic.w	r2, r2, #10
 8004acc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80b8 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af0:	e0b2      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
 8004af2:	bf00      	nop
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8088 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8082 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a41      	ldr	r2, [pc, #260]	; (8004c60 <HAL_DMA_IRQHandler+0xe14>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d04a      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3f      	ldr	r2, [pc, #252]	; (8004c64 <HAL_DMA_IRQHandler+0xe18>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d045      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <HAL_DMA_IRQHandler+0xe1c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d040      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <HAL_DMA_IRQHandler+0xe20>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <HAL_DMA_IRQHandler+0xe24>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d036      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a39      	ldr	r2, [pc, #228]	; (8004c74 <HAL_DMA_IRQHandler+0xe28>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d031      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <HAL_DMA_IRQHandler+0xe2c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d02c      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	; (8004c7c <HAL_DMA_IRQHandler+0xe30>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d027      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a35      	ldr	r2, [pc, #212]	; (8004c80 <HAL_DMA_IRQHandler+0xe34>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <HAL_DMA_IRQHandler+0xe38>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a32      	ldr	r2, [pc, #200]	; (8004c88 <HAL_DMA_IRQHandler+0xe3c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d018      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_DMA_IRQHandler+0xe40>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	; (8004c90 <HAL_DMA_IRQHandler+0xe44>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_DMA_IRQHandler+0xe48>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <HAL_DMA_IRQHandler+0xe4c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_DMA_IRQHandler+0xe50>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <HAL_DMA_IRQHandler+0xdbc>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 021c 	bic.w	r2, r2, #28
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e007      	b.n	8004c18 <HAL_DMA_IRQHandler+0xdcc>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 020e 	bic.w	r2, r2, #14
 8004c16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	e004      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40020010 	.word	0x40020010
 8004c64:	40020028 	.word	0x40020028
 8004c68:	40020040 	.word	0x40020040
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	40020070 	.word	0x40020070
 8004c74:	40020088 	.word	0x40020088
 8004c78:	400200a0 	.word	0x400200a0
 8004c7c:	400200b8 	.word	0x400200b8
 8004c80:	40020410 	.word	0x40020410
 8004c84:	40020428 	.word	0x40020428
 8004c88:	40020440 	.word	0x40020440
 8004c8c:	40020458 	.word	0x40020458
 8004c90:	40020470 	.word	0x40020470
 8004c94:	40020488 	.word	0x40020488
 8004c98:	400204a0 	.word	0x400204a0
 8004c9c:	400204b8 	.word	0x400204b8

08004ca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a42      	ldr	r2, [pc, #264]	; (8004db8 <DMA_CalcBaseAndBitshift+0x118>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a41      	ldr	r2, [pc, #260]	; (8004dbc <DMA_CalcBaseAndBitshift+0x11c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x120>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3e      	ldr	r2, [pc, #248]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x128>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <DMA_CalcBaseAndBitshift+0x12c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a39      	ldr	r2, [pc, #228]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x130>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a38      	ldr	r2, [pc, #224]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x134>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a36      	ldr	r2, [pc, #216]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x138>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a35      	ldr	r2, [pc, #212]	; (8004ddc <DMA_CalcBaseAndBitshift+0x13c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a33      	ldr	r2, [pc, #204]	; (8004de0 <DMA_CalcBaseAndBitshift+0x140>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a32      	ldr	r2, [pc, #200]	; (8004de4 <DMA_CalcBaseAndBitshift+0x144>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a30      	ldr	r2, [pc, #192]	; (8004de8 <DMA_CalcBaseAndBitshift+0x148>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2f      	ldr	r2, [pc, #188]	; (8004dec <DMA_CalcBaseAndBitshift+0x14c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2d      	ldr	r2, [pc, #180]	; (8004df0 <DMA_CalcBaseAndBitshift+0x150>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <DMA_CalcBaseAndBitshift+0x154>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <DMA_CalcBaseAndBitshift+0xac>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <DMA_CalcBaseAndBitshift+0xae>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d024      	beq.n	8004d9c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	3b10      	subs	r3, #16
 8004d5a:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <DMA_CalcBaseAndBitshift+0x158>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <DMA_CalcBaseAndBitshift+0x15c>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d908      	bls.n	8004d8c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <DMA_CalcBaseAndBitshift+0x160>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	659a      	str	r2, [r3, #88]	; 0x58
 8004d8a:	e00d      	b.n	8004da8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <DMA_CalcBaseAndBitshift+0x160>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
 8004d9a:	e005      	b.n	8004da8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40020010 	.word	0x40020010
 8004dbc:	40020028 	.word	0x40020028
 8004dc0:	40020040 	.word	0x40020040
 8004dc4:	40020058 	.word	0x40020058
 8004dc8:	40020070 	.word	0x40020070
 8004dcc:	40020088 	.word	0x40020088
 8004dd0:	400200a0 	.word	0x400200a0
 8004dd4:	400200b8 	.word	0x400200b8
 8004dd8:	40020410 	.word	0x40020410
 8004ddc:	40020428 	.word	0x40020428
 8004de0:	40020440 	.word	0x40020440
 8004de4:	40020458 	.word	0x40020458
 8004de8:	40020470 	.word	0x40020470
 8004dec:	40020488 	.word	0x40020488
 8004df0:	400204a0 	.word	0x400204a0
 8004df4:	400204b8 	.word	0x400204b8
 8004df8:	aaaaaaab 	.word	0xaaaaaaab
 8004dfc:	080116f4 	.word	0x080116f4
 8004e00:	fffffc00 	.word	0xfffffc00

08004e04 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d120      	bne.n	8004e5a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d858      	bhi.n	8004ed2 <DMA_CheckFifoParam+0xce>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <DMA_CheckFifoParam+0x24>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e4b 	.word	0x08004e4b
 8004e30:	08004e39 	.word	0x08004e39
 8004e34:	08004ed3 	.word	0x08004ed3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d048      	beq.n	8004ed6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e48:	e045      	b.n	8004ed6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e52:	d142      	bne.n	8004eda <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e58:	e03f      	b.n	8004eda <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e62:	d123      	bne.n	8004eac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d838      	bhi.n	8004ede <DMA_CheckFifoParam+0xda>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <DMA_CheckFifoParam+0x70>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e8b 	.word	0x08004e8b
 8004e7c:	08004e85 	.word	0x08004e85
 8004e80:	08004e9d 	.word	0x08004e9d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
        break;
 8004e88:	e030      	b.n	8004eec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d025      	beq.n	8004ee2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e9a:	e022      	b.n	8004ee2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ea4:	d11f      	bne.n	8004ee6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eaa:	e01c      	b.n	8004ee6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d902      	bls.n	8004eba <DMA_CheckFifoParam+0xb6>
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d003      	beq.n	8004ec0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004eb8:	e018      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ebe:	e015      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
    break;
 8004ed0:	e00b      	b.n	8004eea <DMA_CheckFifoParam+0xe6>
        break;
 8004ed2:	bf00      	nop
 8004ed4:	e00a      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e008      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004eda:	bf00      	nop
 8004edc:	e006      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e004      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e002      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
    break;
 8004eea:	bf00      	nop
    }
  }

  return status;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop

08004efc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a36      	ldr	r2, [pc, #216]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01d      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a35      	ldr	r2, [pc, #212]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a33      	ldr	r2, [pc, #204]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a32      	ldr	r2, [pc, #200]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a30      	ldr	r2, [pc, #192]	; (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2f      	ldr	r2, [pc, #188]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a2d      	ldr	r2, [pc, #180]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01a      	beq.n	8004f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	3b08      	subs	r3, #8
 8004f6c:	4a28      	ldr	r2, [pc, #160]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4b26      	ldr	r3, [pc, #152]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	461a      	mov	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a24      	ldr	r2, [pc, #144]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	2201      	movs	r2, #1
 8004f92:	409a      	lsls	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f98:	e024      	b.n	8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	3b10      	subs	r3, #16
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d806      	bhi.n	8004fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4a1b      	ldr	r2, [pc, #108]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d902      	bls.n	8004fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4b18      	ldr	r3, [pc, #96]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	58025408 	.word	0x58025408
 8004ff4:	5802541c 	.word	0x5802541c
 8004ff8:	58025430 	.word	0x58025430
 8004ffc:	58025444 	.word	0x58025444
 8005000:	58025458 	.word	0x58025458
 8005004:	5802546c 	.word	0x5802546c
 8005008:	58025480 	.word	0x58025480
 800500c:	58025494 	.word	0x58025494
 8005010:	cccccccd 	.word	0xcccccccd
 8005014:	16009600 	.word	0x16009600
 8005018:	58025880 	.word	0x58025880
 800501c:	aaaaaaab 	.word	0xaaaaaaab
 8005020:	400204b8 	.word	0x400204b8
 8005024:	4002040f 	.word	0x4002040f
 8005028:	10008200 	.word	0x10008200
 800502c:	40020880 	.word	0x40020880

08005030 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04a      	beq.n	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d847      	bhi.n	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a24      	ldr	r2, [pc, #144]	; (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01d      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a21      	ldr	r2, [pc, #132]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4b17      	ldr	r3, [pc, #92]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050b8:	671a      	str	r2, [r3, #112]	; 0x70
 80050ba:	e009      	b.n	80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	461a      	mov	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a11      	ldr	r2, [pc, #68]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	2201      	movs	r2, #1
 80050d6:	409a      	lsls	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	58025408 	.word	0x58025408
 80050ec:	5802541c 	.word	0x5802541c
 80050f0:	58025430 	.word	0x58025430
 80050f4:	58025444 	.word	0x58025444
 80050f8:	58025458 	.word	0x58025458
 80050fc:	5802546c 	.word	0x5802546c
 8005100:	58025480 	.word	0x58025480
 8005104:	58025494 	.word	0x58025494
 8005108:	1600963f 	.word	0x1600963f
 800510c:	58025940 	.word	0x58025940
 8005110:	1000823f 	.word	0x1000823f
 8005114:	40020940 	.word	0x40020940

08005118 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b098      	sub	sp, #96	; 0x60
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005120:	4a84      	ldr	r2, [pc, #528]	; (8005334 <HAL_FDCAN_Init+0x21c>)
 8005122:	f107 030c 	add.w	r3, r7, #12
 8005126:	4611      	mov	r1, r2
 8005128:	224c      	movs	r2, #76	; 0x4c
 800512a:	4618      	mov	r0, r3
 800512c:	f00b fa9c 	bl	8010668 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e1ca      	b.n	80054d0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a7e      	ldr	r2, [pc, #504]	; (8005338 <HAL_FDCAN_Init+0x220>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d106      	bne.n	8005152 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800514c:	461a      	mov	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc fa04 	bl	8001574 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0210 	bic.w	r2, r2, #16
 800517a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800517c:	f7fc fe68 	bl	8001e50 <HAL_GetTick>
 8005180:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005182:	e014      	b.n	80051ae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005184:	f7fc fe64 	bl	8001e50 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b0a      	cmp	r3, #10
 8005190:	d90d      	bls.n	80051ae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005198:	f043 0201 	orr.w	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e190      	b.n	80054d0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d0e3      	beq.n	8005184 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051cc:	f7fc fe40 	bl	8001e50 <HAL_GetTick>
 80051d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80051d2:	e014      	b.n	80051fe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80051d4:	f7fc fe3c 	bl	8001e50 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b0a      	cmp	r3, #10
 80051e0:	d90d      	bls.n	80051fe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e8:	f043 0201 	orr.w	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e168      	b.n	80054d0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0e3      	beq.n	80051d4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0202 	orr.w	r2, r2, #2
 800521a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	7c1b      	ldrb	r3, [r3, #16]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d108      	bne.n	8005236 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005232:	619a      	str	r2, [r3, #24]
 8005234:	e007      	b.n	8005246 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005244:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	7c5b      	ldrb	r3, [r3, #17]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d108      	bne.n	8005260 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800525c:	619a      	str	r2, [r3, #24]
 800525e:	e007      	b.n	8005270 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800526e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7c9b      	ldrb	r3, [r3, #18]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d108      	bne.n	800528a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005286:	619a      	str	r2, [r3, #24]
 8005288:	e007      	b.n	800529a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005298:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80052be:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0210 	bic.w	r2, r2, #16
 80052ce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d108      	bne.n	80052ea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0204 	orr.w	r2, r2, #4
 80052e6:	619a      	str	r2, [r3, #24]
 80052e8:	e030      	b.n	800534c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d02c      	beq.n	800534c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d020      	beq.n	800533c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005308:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0210 	orr.w	r2, r2, #16
 8005318:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d114      	bne.n	800534c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699a      	ldr	r2, [r3, #24]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0220 	orr.w	r2, r2, #32
 8005330:	619a      	str	r2, [r3, #24]
 8005332:	e00b      	b.n	800534c <HAL_FDCAN_Init+0x234>
 8005334:	08011650 	.word	0x08011650
 8005338:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0220 	orr.w	r2, r2, #32
 800534a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	3b01      	subs	r3, #1
 8005352:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	3b01      	subs	r3, #1
 800535a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800535c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005364:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	3b01      	subs	r3, #1
 800536e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005374:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005376:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005380:	d115      	bne.n	80053ae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	3b01      	subs	r3, #1
 800538e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005390:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	3b01      	subs	r3, #1
 8005398:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800539a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	3b01      	subs	r3, #1
 80053a4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80053aa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80053ac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	4413      	add	r3, r2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d012      	beq.n	8005400 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80053e2:	f023 0107 	bic.w	r1, r3, #7
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053f0:	4413      	add	r3, r2
 80053f2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d012      	beq.n	800542e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005410:	f023 0107 	bic.w	r1, r3, #7
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800541e:	4413      	add	r3, r2
 8005420:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800543e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800544c:	4413      	add	r3, r2
 800544e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005452:	011a      	lsls	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	d013      	beq.n	800548e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800546e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800547c:	4413      	add	r3, r2
 800547e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005482:	021a      	lsls	r2, r3, #8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <HAL_FDCAN_Init+0x3c0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d107      	bne.n	80054a8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f022 0203 	bic.w	r2, r2, #3
 80054a6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f80b 	bl	80054dc <FDCAN_CalcultateRamBlockAddresses>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80054cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3760      	adds	r7, #96	; 0x60
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	4000a000 	.word	0x4000a000

080054dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80054f2:	4ba7      	ldr	r3, [pc, #668]	; (8005790 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	0091      	lsls	r1, r2, #2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	430b      	orrs	r3, r1
 8005500:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	041a      	lsls	r2, r3, #16
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	4413      	add	r3, r2
 8005528:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005532:	4b97      	ldr	r3, [pc, #604]	; (8005790 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005534:	4013      	ands	r3, r2
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	0091      	lsls	r1, r2, #2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	430b      	orrs	r3, r1
 8005540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005554:	041a      	lsls	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	4413      	add	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005574:	4b86      	ldr	r3, [pc, #536]	; (8005790 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005576:	4013      	ands	r3, r2
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	0091      	lsls	r1, r2, #2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	430b      	orrs	r3, r1
 8005582:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800558e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	041a      	lsls	r2, r3, #16
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80055bc:	4b74      	ldr	r3, [pc, #464]	; (8005790 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	0091      	lsls	r1, r2, #2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055de:	041a      	lsls	r2, r3, #16
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	4413      	add	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005604:	4b62      	ldr	r3, [pc, #392]	; (8005790 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005606:	4013      	ands	r3, r2
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	0091      	lsls	r1, r2, #2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	430b      	orrs	r3, r1
 8005612:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005630:	4b57      	ldr	r3, [pc, #348]	; (8005790 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005632:	4013      	ands	r3, r2
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	0091      	lsls	r1, r2, #2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	430b      	orrs	r3, r1
 800563e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800564a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	041a      	lsls	r2, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	4413      	add	r3, r2
 8005668:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005672:	4b47      	ldr	r3, [pc, #284]	; (8005790 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005674:	4013      	ands	r3, r2
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	0091      	lsls	r1, r2, #2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	430b      	orrs	r3, r1
 8005680:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800568c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	041a      	lsls	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056a8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b0:	061a      	lsls	r2, r3, #24
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c0:	4b34      	ldr	r3, [pc, #208]	; (8005794 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80056c2:	4413      	add	r3, r2
 80056c4:	009a      	lsls	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	441a      	add	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	4a04      	ldr	r2, [pc, #16]	; (8005798 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d915      	bls.n	80057b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800578c:	e006      	b.n	800579c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800578e:	bf00      	nop
 8005790:	ffff0003 	.word	0xffff0003
 8005794:	10002b00 	.word	0x10002b00
 8005798:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2203      	movs	r2, #3
 80057b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e010      	b.n	80057da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e005      	b.n	80057cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3304      	adds	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d3f3      	bcc.n	80057c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop

080057e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	; 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057f6:	4b89      	ldr	r3, [pc, #548]	; (8005a1c <HAL_GPIO_Init+0x234>)
 80057f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057fa:	e194      	b.n	8005b26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	2101      	movs	r1, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	4013      	ands	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 8186 	beq.w	8005b20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d005      	beq.n	800582c <HAL_GPIO_Init+0x44>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d130      	bne.n	800588e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4013      	ands	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005862:	2201      	movs	r2, #1
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	f003 0201 	and.w	r2, r3, #1
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d017      	beq.n	80058ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	2203      	movs	r2, #3
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d123      	bne.n	800591e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	08da      	lsrs	r2, r3, #3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3208      	adds	r2, #8
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	220f      	movs	r2, #15
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	08da      	lsrs	r2, r3, #3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3208      	adds	r2, #8
 8005918:	69b9      	ldr	r1, [r7, #24]
 800591a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	2203      	movs	r2, #3
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f003 0203 	and.w	r2, r3, #3
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4313      	orrs	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80e0 	beq.w	8005b20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_GPIO_Init+0x238>)
 8005962:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005966:	4a2e      	ldr	r2, [pc, #184]	; (8005a20 <HAL_GPIO_Init+0x238>)
 8005968:	f043 0302 	orr.w	r3, r3, #2
 800596c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005970:	4b2b      	ldr	r3, [pc, #172]	; (8005a20 <HAL_GPIO_Init+0x238>)
 8005972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800597e:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <HAL_GPIO_Init+0x23c>)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	089b      	lsrs	r3, r3, #2
 8005984:	3302      	adds	r3, #2
 8005986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	220f      	movs	r2, #15
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <HAL_GPIO_Init+0x240>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d052      	beq.n	8005a50 <HAL_GPIO_Init+0x268>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1f      	ldr	r2, [pc, #124]	; (8005a2c <HAL_GPIO_Init+0x244>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d031      	beq.n	8005a16 <HAL_GPIO_Init+0x22e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <HAL_GPIO_Init+0x248>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d02b      	beq.n	8005a12 <HAL_GPIO_Init+0x22a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_GPIO_Init+0x24c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d025      	beq.n	8005a0e <HAL_GPIO_Init+0x226>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <HAL_GPIO_Init+0x250>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01f      	beq.n	8005a0a <HAL_GPIO_Init+0x222>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <HAL_GPIO_Init+0x254>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d019      	beq.n	8005a06 <HAL_GPIO_Init+0x21e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <HAL_GPIO_Init+0x258>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_GPIO_Init+0x21a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <HAL_GPIO_Init+0x25c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00d      	beq.n	80059fe <HAL_GPIO_Init+0x216>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <HAL_GPIO_Init+0x260>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <HAL_GPIO_Init+0x212>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_GPIO_Init+0x264>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_GPIO_Init+0x20e>
 80059f2:	2309      	movs	r3, #9
 80059f4:	e02d      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 80059f6:	230a      	movs	r3, #10
 80059f8:	e02b      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 80059fa:	2308      	movs	r3, #8
 80059fc:	e029      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 80059fe:	2307      	movs	r3, #7
 8005a00:	e027      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 8005a02:	2306      	movs	r3, #6
 8005a04:	e025      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 8005a06:	2305      	movs	r3, #5
 8005a08:	e023      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	e021      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e01f      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e01d      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e01b      	b.n	8005a52 <HAL_GPIO_Init+0x26a>
 8005a1a:	bf00      	nop
 8005a1c:	58000080 	.word	0x58000080
 8005a20:	58024400 	.word	0x58024400
 8005a24:	58000400 	.word	0x58000400
 8005a28:	58020000 	.word	0x58020000
 8005a2c:	58020400 	.word	0x58020400
 8005a30:	58020800 	.word	0x58020800
 8005a34:	58020c00 	.word	0x58020c00
 8005a38:	58021000 	.word	0x58021000
 8005a3c:	58021400 	.word	0x58021400
 8005a40:	58021800 	.word	0x58021800
 8005a44:	58021c00 	.word	0x58021c00
 8005a48:	58022000 	.word	0x58022000
 8005a4c:	58022400 	.word	0x58022400
 8005a50:	2300      	movs	r3, #0
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	f002 0203 	and.w	r2, r2, #3
 8005a58:	0092      	lsls	r2, r2, #2
 8005a5a:	4093      	lsls	r3, r2
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a62:	4938      	ldr	r1, [pc, #224]	; (8005b44 <HAL_GPIO_Init+0x35c>)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	3302      	adds	r3, #2
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4013      	ands	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	43db      	mvns	r3, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f ae63 	bne.w	80057fc <HAL_GPIO_Init+0x14>
  }
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	3724      	adds	r7, #36	; 0x24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	58000400 	.word	0x58000400

08005b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
 8005b54:	4613      	mov	r3, r2
 8005b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b58:	787b      	ldrb	r3, [r7, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b5e:	887a      	ldrh	r2, [r7, #2]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b64:	e003      	b.n	8005b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b66:	887b      	ldrh	r3, [r7, #2]
 8005b68:	041a      	lsls	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	619a      	str	r2, [r3, #24]
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07f      	b.n	8005c8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb fdae 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	; 0x24
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	e006      	b.n	8005c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d104      	bne.n	8005c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <HAL_I2C_Init+0x11c>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	02008000 	.word	0x02008000

08005c9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d138      	bne.n	8005d24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e032      	b.n	8005d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	; 0x24
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6819      	ldr	r1, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d139      	bne.n	8005dbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e033      	b.n	8005dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	; 0x24
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e000      	b.n	8005dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dcc:	b08f      	sub	sp, #60	; 0x3c
 8005dce:	af0a      	add	r7, sp, #40	; 0x28
 8005dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e116      	b.n	800600a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f00a f8c8 	bl	800ff8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f006 fc11 	bl	800c642 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	687e      	ldr	r6, [r7, #4]
 8005e28:	466d      	mov	r5, sp
 8005e2a:	f106 0410 	add.w	r4, r6, #16
 8005e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e3e:	1d33      	adds	r3, r6, #4
 8005e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e42:	6838      	ldr	r0, [r7, #0]
 8005e44:	f006 fadc 	bl	800c400 <USB_CoreInit>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0d7      	b.n	800600a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f006 fbff 	bl	800c664 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	e04a      	b.n	8005f02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	333d      	adds	r3, #61	; 0x3d
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	333c      	adds	r3, #60	; 0x3c
 8005e90:	7bfa      	ldrb	r2, [r7, #15]
 8005e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e94:	7bfa      	ldrb	r2, [r7, #15]
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	b298      	uxth	r0, r3
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	3344      	adds	r3, #68	; 0x44
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	3340      	adds	r3, #64	; 0x40
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3348      	adds	r3, #72	; 0x48
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	334c      	adds	r3, #76	; 0x4c
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3354      	adds	r3, #84	; 0x54
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	3301      	adds	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d3af      	bcc.n	8005e6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	e044      	b.n	8005f9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f12:	7bfa      	ldrb	r2, [r7, #15]
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f3a:	7bfa      	ldrb	r2, [r7, #15]
 8005f3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f80:	7bfa      	ldrb	r2, [r7, #15]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	7bfa      	ldrb	r2, [r7, #15]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d3b5      	bcc.n	8005f12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	687e      	ldr	r6, [r7, #4]
 8005fae:	466d      	mov	r5, sp
 8005fb0:	f106 0410 	add.w	r4, r6, #16
 8005fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fc4:	1d33      	adds	r3, r6, #4
 8005fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f006 fb97 	bl	800c6fc <USB_DevInit>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e014      	b.n	800600a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d102      	bne.n	8005ffe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 f98b 	bl	8007314 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f007 fce5 	bl	800d9d2 <USB_DevDisconnect>

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006012 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_PCD_Start+0x1c>
 800602a:	2302      	movs	r3, #2
 800602c:	e020      	b.n	8006070 <HAL_PCD_Start+0x5e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	2b01      	cmp	r3, #1
 800603c:	d109      	bne.n	8006052 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006042:	2b01      	cmp	r3, #1
 8006044:	d005      	beq.n	8006052 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f006 fae2 	bl	800c620 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f007 fc95 	bl	800d990 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b08d      	sub	sp, #52	; 0x34
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f007 fd53 	bl	800db3a <USB_GetMode>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	f040 84b7 	bne.w	8006a0a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f007 fcb7 	bl	800da14 <USB_ReadInterrupts>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 84ad 	beq.w	8006a08 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f007 fca4 	bl	800da14 <USB_ReadInterrupts>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d107      	bne.n	80060e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f002 0202 	and.w	r2, r2, #2
 80060e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f007 fc92 	bl	800da14 <USB_ReadInterrupts>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b10      	cmp	r3, #16
 80060f8:	d161      	bne.n	80061be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0210 	bic.w	r2, r2, #16
 8006108:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	f003 020f 	and.w	r2, r3, #15
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	3304      	adds	r3, #4
 8006128:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	0c5b      	lsrs	r3, r3, #17
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	2b02      	cmp	r3, #2
 8006134:	d124      	bne.n	8006180 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800613c:	4013      	ands	r3, r2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d035      	beq.n	80061ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800614c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006150:	b29b      	uxth	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	6a38      	ldr	r0, [r7, #32]
 8006156:	f007 fac9 	bl	800d6ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	091b      	lsrs	r3, r3, #4
 8006162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006166:	441a      	add	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	091b      	lsrs	r3, r3, #4
 8006174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006178:	441a      	add	r2, r3
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
 800617e:	e016      	b.n	80061ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	0c5b      	lsrs	r3, r3, #17
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	2b06      	cmp	r3, #6
 800618a:	d110      	bne.n	80061ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006192:	2208      	movs	r2, #8
 8006194:	4619      	mov	r1, r3
 8006196:	6a38      	ldr	r0, [r7, #32]
 8006198:	f007 faa8 	bl	800d6ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a8:	441a      	add	r2, r3
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699a      	ldr	r2, [r3, #24]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0210 	orr.w	r2, r2, #16
 80061bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f007 fc26 	bl	800da14 <USB_ReadInterrupts>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061d2:	f040 80a7 	bne.w	8006324 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f007 fc2b 	bl	800da3a <USB_ReadDevAllOutEpInterrupt>
 80061e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80061e6:	e099      	b.n	800631c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 808e 	beq.w	8006310 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	4611      	mov	r1, r2
 80061fe:	4618      	mov	r0, r3
 8006200:	f007 fc4f 	bl	800daa2 <USB_ReadDevOutEPInterrupt>
 8006204:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00c      	beq.n	800622a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	461a      	mov	r2, r3
 800621e:	2301      	movs	r3, #1
 8006220:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 feef 	bl	8007008 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00c      	beq.n	800624e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	461a      	mov	r2, r3
 8006242:	2308      	movs	r3, #8
 8006244:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 ffc5 	bl	80071d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	2310      	movs	r3, #16
 8006268:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d030      	beq.n	80062d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	d109      	bne.n	8006294 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800628e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006292:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006296:	4613      	mov	r3, r2
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	4413      	add	r3, r2
 80062a6:	3304      	adds	r3, #4
 80062a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	78db      	ldrb	r3, [r3, #3]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d108      	bne.n	80062c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2200      	movs	r2, #0
 80062b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f009 ff96 	bl	80101f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	461a      	mov	r2, r3
 80062d2:	2302      	movs	r3, #2
 80062d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	461a      	mov	r2, r3
 80062ee:	2320      	movs	r3, #32
 80062f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	461a      	mov	r2, r3
 800630a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800630e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	3301      	adds	r3, #1
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	2b00      	cmp	r3, #0
 8006320:	f47f af62 	bne.w	80061e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f007 fb73 	bl	800da14 <USB_ReadInterrupts>
 800632e:	4603      	mov	r3, r0
 8006330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006334:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006338:	f040 80db 	bne.w	80064f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f007 fb94 	bl	800da6e <USB_ReadDevAllInEpInterrupt>
 8006346:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800634c:	e0cd      	b.n	80064ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80c2 	beq.w	80064de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f007 fbba 	bl	800dade <USB_ReadDevInEPInterrupt>
 800636a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d057      	beq.n	8006426 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	2201      	movs	r2, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	43db      	mvns	r3, r3
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006396:	4013      	ands	r3, r2
 8006398:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	461a      	mov	r2, r3
 80063a8:	2301      	movs	r3, #1
 80063aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d132      	bne.n	800641a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	334c      	adds	r3, #76	; 0x4c
 80063c4:	6819      	ldr	r1, [r3, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4403      	add	r3, r0
 80063d4:	3348      	adds	r3, #72	; 0x48
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4419      	add	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4403      	add	r3, r0
 80063e8:	334c      	adds	r3, #76	; 0x4c
 80063ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d113      	bne.n	800641a <HAL_PCD_IRQHandler+0x3a2>
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f6:	4613      	mov	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	3354      	adds	r3, #84	; 0x54
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006412:	461a      	mov	r2, r3
 8006414:	2101      	movs	r1, #1
 8006416:	f007 fbc3 	bl	800dba0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f009 fe60 	bl	80100e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	461a      	mov	r2, r3
 800643e:	2308      	movs	r3, #8
 8006440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	461a      	mov	r2, r3
 800645a:	2310      	movs	r3, #16
 800645c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	461a      	mov	r2, r3
 8006476:	2340      	movs	r3, #64	; 0x40
 8006478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d023      	beq.n	80064cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006486:	6a38      	ldr	r0, [r7, #32]
 8006488:	f006 fa96 	bl	800c9b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800648c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648e:	4613      	mov	r3, r2
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	3338      	adds	r3, #56	; 0x38
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	4413      	add	r3, r2
 800649c:	3304      	adds	r3, #4
 800649e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	78db      	ldrb	r3, [r3, #3]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d108      	bne.n	80064ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2200      	movs	r2, #0
 80064ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f009 fead 	bl	8010214 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	461a      	mov	r2, r3
 80064c8:	2302      	movs	r3, #2
 80064ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80064d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fd08 	bl	8006eee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	3301      	adds	r3, #1
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f af2e 	bne.w	800634e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f007 fa8c 	bl	800da14 <USB_ReadInterrupts>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006506:	d122      	bne.n	800654e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006522:	2b01      	cmp	r3, #1
 8006524:	d108      	bne.n	8006538 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800652e:	2100      	movs	r1, #0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 ff13 	bl	800735c <HAL_PCDEx_LPM_Callback>
 8006536:	e002      	b.n	800653e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f009 fe4b 	bl	80101d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800654c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f007 fa5e 	bl	800da14 <USB_ReadInterrupts>
 8006558:	4603      	mov	r3, r0
 800655a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006562:	d112      	bne.n	800658a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b01      	cmp	r3, #1
 8006572:	d102      	bne.n	800657a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f009 fe07 	bl	8010188 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695a      	ldr	r2, [r3, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006588:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f007 fa40 	bl	800da14 <USB_ReadInterrupts>
 8006594:	4603      	mov	r3, r0
 8006596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800659a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800659e:	d121      	bne.n	80065e4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80065ae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d111      	bne.n	80065de <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c8:	089b      	lsrs	r3, r3, #2
 80065ca:	f003 020f 	and.w	r2, r3, #15
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80065d4:	2101      	movs	r1, #1
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fec0 	bl	800735c <HAL_PCDEx_LPM_Callback>
 80065dc:	e002      	b.n	80065e4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f009 fdd2 	bl	8010188 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f007 fa13 	bl	800da14 <USB_ReadInterrupts>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f8:	f040 80b7 	bne.w	800676a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2110      	movs	r1, #16
 8006616:	4618      	mov	r0, r3
 8006618:	f006 f9ce 	bl	800c9b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800661c:	2300      	movs	r3, #0
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006620:	e046      	b.n	80066b0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	461a      	mov	r2, r3
 8006630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006634:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006654:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006662:	461a      	mov	r2, r3
 8006664:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006668:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	440a      	add	r2, r1
 8006680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006688:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	3301      	adds	r3, #1
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3b3      	bcc.n	8006622 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d016      	beq.n	8006704 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e6:	f043 030b 	orr.w	r3, r3, #11
 80066ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fc:	f043 030b 	orr.w	r3, r3, #11
 8006700:	6453      	str	r3, [r2, #68]	; 0x44
 8006702:	e015      	b.n	8006730 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	4619      	mov	r1, r3
 8006714:	f242 032b 	movw	r3, #8235	; 0x202b
 8006718:	4313      	orrs	r3, r2
 800671a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672a:	f043 030b 	orr.w	r3, r3, #11
 800672e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006742:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006754:	461a      	mov	r2, r3
 8006756:	f007 fa23 	bl	800dba0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f007 f950 	bl	800da14 <USB_ReadInterrupts>
 8006774:	4603      	mov	r3, r0
 8006776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800677a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800677e:	d124      	bne.n	80067ca <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f007 f9e7 	bl	800db58 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f006 f98f 	bl	800cab2 <USB_GetDevSpeed>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681c      	ldr	r4, [r3, #0]
 80067a0:	f001 fd8e 	bl	80082c0 <HAL_RCC_GetHCLKFreq>
 80067a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	4620      	mov	r0, r4
 80067b0:	f005 fe94 	bl	800c4dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f009 fcbe 	bl	8010136 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f007 f920 	bl	800da14 <USB_ReadInterrupts>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d10a      	bne.n	80067f4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f009 fc9b 	bl	801011a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f002 0208 	and.w	r2, r2, #8
 80067f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f007 f90b 	bl	800da14 <USB_ReadInterrupts>
 80067fe:	4603      	mov	r3, r0
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	d122      	bne.n	800684e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006814:	2301      	movs	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
 8006818:	e014      	b.n	8006844 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681e:	4613      	mov	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d105      	bne.n	800683e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	b2db      	uxtb	r3, r3
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb27 	bl	8006e8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	3301      	adds	r3, #1
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	429a      	cmp	r2, r3
 800684c:	d3e5      	bcc.n	800681a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f007 f8de 	bl	800da14 <USB_ReadInterrupts>
 8006858:	4603      	mov	r3, r0
 800685a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800685e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006862:	d13b      	bne.n	80068dc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006864:	2301      	movs	r3, #1
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
 8006868:	e02b      	b.n	80068c2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	4613      	mov	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	3340      	adds	r3, #64	; 0x40
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d115      	bne.n	80068bc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006890:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006892:	2b00      	cmp	r3, #0
 8006894:	da12      	bge.n	80068bc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	333f      	adds	r3, #63	; 0x3f
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fae8 	bl	8006e8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	3301      	adds	r3, #1
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d3ce      	bcc.n	800686a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80068da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f007 f897 	bl	800da14 <USB_ReadInterrupts>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068f0:	d155      	bne.n	800699e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068f2:	2301      	movs	r3, #1
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
 80068f6:	e045      	b.n	8006984 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	4613      	mov	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d12e      	bne.n	800697e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006920:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006922:	2b00      	cmp	r3, #0
 8006924:	da2b      	bge.n	800697e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006932:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006936:	429a      	cmp	r2, r3
 8006938:	d121      	bne.n	800697e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693e:	4613      	mov	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800694c:	2201      	movs	r2, #1
 800694e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800697a:	6053      	str	r3, [r2, #4]
            break;
 800697c:	e007      	b.n	800698e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	3301      	adds	r3, #1
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698a:	429a      	cmp	r2, r3
 800698c:	d3b4      	bcc.n	80068f8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800699c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f007 f836 	bl	800da14 <USB_ReadInterrupts>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b2:	d10a      	bne.n	80069ca <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f009 fc3f 	bl	8010238 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80069c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f007 f820 	bl	800da14 <USB_ReadInterrupts>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d115      	bne.n	8006a0a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f009 fc2f 	bl	8010254 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6859      	ldr	r1, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	e000      	b.n	8006a0a <HAL_PCD_IRQHandler+0x992>
      return;
 8006a08:	bf00      	nop
    }
  }
}
 8006a0a:	3734      	adds	r7, #52	; 0x34
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd90      	pop	{r4, r7, pc}

08006a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_PCD_SetAddress+0x1a>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e013      	b.n	8006a52 <HAL_PCD_SetAddress+0x42>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	78fa      	ldrb	r2, [r7, #3]
 8006a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	78fa      	ldrb	r2, [r7, #3]
 8006a40:	4611      	mov	r1, r2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f006 ff7e 	bl	800d944 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	4608      	mov	r0, r1
 8006a64:	4611      	mov	r1, r2
 8006a66:	461a      	mov	r2, r3
 8006a68:	4603      	mov	r3, r0
 8006a6a:	70fb      	strb	r3, [r7, #3]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	803b      	strh	r3, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da0f      	bge.n	8006aa0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	f003 020f 	and.w	r2, r3, #15
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	3338      	adds	r3, #56	; 0x38
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	4413      	add	r3, r2
 8006a94:	3304      	adds	r3, #4
 8006a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	705a      	strb	r2, [r3, #1]
 8006a9e:	e00f      	b.n	8006ac0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	f003 020f 	and.w	r2, r3, #15
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006acc:	883a      	ldrh	r2, [r7, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	78ba      	ldrb	r2, [r7, #2]
 8006ad6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006aea:	78bb      	ldrb	r3, [r7, #2]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d102      	bne.n	8006af6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_PCD_EP_Open+0xaa>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e00e      	b.n	8006b22 <HAL_PCD_EP_Open+0xc8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68f9      	ldr	r1, [r7, #12]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f005 fff2 	bl	800cafc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	da0f      	bge.n	8006b5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	f003 020f 	and.w	r2, r3, #15
 8006b44:	4613      	mov	r3, r2
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	3338      	adds	r3, #56	; 0x38
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4413      	add	r3, r2
 8006b52:	3304      	adds	r3, #4
 8006b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	705a      	strb	r2, [r3, #1]
 8006b5c:	e00f      	b.n	8006b7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	f003 020f 	and.w	r2, r3, #15
 8006b64:	4613      	mov	r3, r2
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	4413      	add	r3, r2
 8006b74:	3304      	adds	r3, #4
 8006b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_PCD_EP_Close+0x6e>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e00e      	b.n	8006bb6 <HAL_PCD_EP_Close+0x8c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68f9      	ldr	r1, [r7, #12]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f006 f830 	bl	800cc0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b086      	sub	sp, #24
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	f003 020f 	and.w	r2, r3, #15
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	3304      	adds	r3, #4
 8006be6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d102      	bne.n	8006c1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6979      	ldr	r1, [r7, #20]
 8006c32:	f006 fb17 	bl	800d264 <USB_EP0StartXfer>
 8006c36:	e008      	b.n	8006c4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	f006 f8bd 	bl	800cdc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	f003 020f 	and.w	r2, r3, #15
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006c76:	681b      	ldr	r3, [r3, #0]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	460b      	mov	r3, r1
 8006c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c94:	7afb      	ldrb	r3, [r7, #11]
 8006c96:	f003 020f 	and.w	r2, r3, #15
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	3338      	adds	r3, #56	; 0x38
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3304      	adds	r3, #4
 8006caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d102      	bne.n	8006cde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d109      	bne.n	8006cfc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6979      	ldr	r1, [r7, #20]
 8006cf6:	f006 fab5 	bl	800d264 <USB_EP0StartXfer>
 8006cfa:	e008      	b.n	8006d0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	6979      	ldr	r1, [r7, #20]
 8006d0a:	f006 f85b 	bl	800cdc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	f003 020f 	and.w	r2, r3, #15
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d901      	bls.n	8006d36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e050      	b.n	8006dd8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da0f      	bge.n	8006d5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	3338      	adds	r3, #56	; 0x38
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	3304      	adds	r3, #4
 8006d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	705a      	strb	r2, [r3, #1]
 8006d5c:	e00d      	b.n	8006d7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	4613      	mov	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	4413      	add	r3, r2
 8006d70:	3304      	adds	r3, #4
 8006d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <HAL_PCD_EP_SetStall+0x82>
 8006d96:	2302      	movs	r3, #2
 8006d98:	e01e      	b.n	8006dd8 <HAL_PCD_EP_SetStall+0xc0>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f006 fcf7 	bl	800d79c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	b2d9      	uxtb	r1, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f006 fee9 	bl	800dba0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d901      	bls.n	8006dfe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e042      	b.n	8006e84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	da0f      	bge.n	8006e26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	f003 020f 	and.w	r2, r3, #15
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	3338      	adds	r3, #56	; 0x38
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	705a      	strb	r2, [r3, #1]
 8006e24:	e00f      	b.n	8006e46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	f003 020f 	and.w	r2, r3, #15
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_PCD_EP_ClrStall+0x86>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e00e      	b.n	8006e84 <HAL_PCD_EP_ClrStall+0xa4>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f006 fcff 	bl	800d878 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da0c      	bge.n	8006eba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	f003 020f 	and.w	r2, r3, #15
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	3338      	adds	r3, #56	; 0x38
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e00c      	b.n	8006ed4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68f9      	ldr	r1, [r7, #12]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f006 fb1e 	bl	800d51c <USB_EPStopXfer>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b08a      	sub	sp, #40	; 0x28
 8006ef2:	af02      	add	r7, sp, #8
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	3338      	adds	r3, #56	; 0x38
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	3304      	adds	r3, #4
 8006f14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1a      	ldr	r2, [r3, #32]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d901      	bls.n	8006f26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e06c      	b.n	8007000 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d902      	bls.n	8006f42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	3303      	adds	r3, #3
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f4a:	e02b      	b.n	8006fa4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d902      	bls.n	8006f68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3303      	adds	r3, #3
 8006f6c:	089b      	lsrs	r3, r3, #2
 8006f6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6919      	ldr	r1, [r3, #16]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	4603      	mov	r3, r0
 8006f86:	6978      	ldr	r0, [r7, #20]
 8006f88:	f006 fb72 	bl	800d670 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	441a      	add	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1a      	ldr	r2, [r3, #32]
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	441a      	add	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d809      	bhi.n	8006fce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1a      	ldr	r2, [r3, #32]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d203      	bcs.n	8006fce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1be      	bne.n	8006f4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d811      	bhi.n	8006ffe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	6939      	ldr	r1, [r7, #16]
 8006ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	333c      	adds	r3, #60	; 0x3c
 8007020:	3304      	adds	r3, #4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d17b      	bne.n	8007136 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d015      	beq.n	8007074 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4a61      	ldr	r2, [pc, #388]	; (80071d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	f240 80b9 	bls.w	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80b3 	beq.w	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	461a      	mov	r2, r3
 800706c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007070:	6093      	str	r3, [r2, #8]
 8007072:	e0a7      	b.n	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708a:	461a      	mov	r2, r3
 800708c:	2320      	movs	r3, #32
 800708e:	6093      	str	r3, [r2, #8]
 8007090:	e098      	b.n	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007098:	2b00      	cmp	r3, #0
 800709a:	f040 8093 	bne.w	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4a4b      	ldr	r2, [pc, #300]	; (80071d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d90f      	bls.n	80070c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	461a      	mov	r2, r3
 80070be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c2:	6093      	str	r3, [r2, #8]
 80070c4:	e07e      	b.n	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	4413      	add	r3, r2
 80070d8:	3304      	adds	r3, #4
 80070da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	0159      	lsls	r1, r3, #5
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	440b      	add	r3, r1
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d114      	bne.n	8007128 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007110:	461a      	mov	r2, r3
 8007112:	2101      	movs	r1, #1
 8007114:	f006 fd44 	bl	800dba0 <USB_EP0_OutStart>
 8007118:	e006      	b.n	8007128 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	441a      	add	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f008 ffbe 	bl	80100b0 <HAL_PCD_DataOutStageCallback>
 8007134:	e046      	b.n	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d124      	bne.n	8007188 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	461a      	mov	r2, r3
 8007156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800715a:	6093      	str	r3, [r2, #8]
 800715c:	e032      	b.n	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	461a      	mov	r2, r3
 8007176:	2320      	movs	r3, #32
 8007178:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f008 ff95 	bl	80100b0 <HAL_PCD_DataOutStageCallback>
 8007186:	e01d      	b.n	80071c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d114      	bne.n	80071b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d108      	bne.n	80071b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071b0:	461a      	mov	r2, r3
 80071b2:	2100      	movs	r1, #0
 80071b4:	f006 fcf4 	bl	800dba0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f008 ff76 	bl	80100b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	4f54300a 	.word	0x4f54300a
 80071d4:	4f54310a 	.word	0x4f54310a

080071d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	333c      	adds	r3, #60	; 0x3c
 80071f0:	3304      	adds	r3, #4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <PCD_EP_OutSetupPacket_int+0x88>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d90e      	bls.n	800722c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	461a      	mov	r2, r3
 8007226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f008 ff2d 	bl	801008c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <PCD_EP_OutSetupPacket_int+0x88>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d90c      	bls.n	8007254 <PCD_EP_OutSetupPacket_int+0x7c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d108      	bne.n	8007254 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800724c:	461a      	mov	r2, r3
 800724e:	2101      	movs	r1, #1
 8007250:	f006 fca6 	bl	800dba0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	4f54300a 	.word	0x4f54300a

08007264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
 8007270:	4613      	mov	r3, r2
 8007272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007282:	883b      	ldrh	r3, [r7, #0]
 8007284:	0419      	lsls	r1, r3, #16
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	430a      	orrs	r2, r1
 800728e:	629a      	str	r2, [r3, #40]	; 0x28
 8007290:	e028      	b.n	80072e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4413      	add	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
 80072a4:	e00d      	b.n	80072c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	3340      	adds	r3, #64	; 0x40
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	4413      	add	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	3301      	adds	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
 80072c2:	7bfa      	ldrb	r2, [r7, #15]
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d3ec      	bcc.n	80072a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80072cc:	883b      	ldrh	r3, [r7, #0]
 80072ce:	0418      	lsls	r0, r3, #16
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6819      	ldr	r1, [r3, #0]
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	4302      	orrs	r2, r0
 80072dc:	3340      	adds	r3, #64	; 0x40
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	887a      	ldrh	r2, [r7, #2]
 8007304:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_PCDEx_ActivateLPM+0x44>)
 8007344:	4313      	orrs	r3, r2
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	10000003 	.word	0x10000003

0800735c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800737c:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <HAL_PWREx_ConfigSupply+0x70>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b04      	cmp	r3, #4
 8007386:	d00a      	beq.n	800739e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007388:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <HAL_PWREx_ConfigSupply+0x70>)
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d001      	beq.n	800739a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e01f      	b.n	80073da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e01d      	b.n	80073da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800739e:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <HAL_PWREx_ConfigSupply+0x70>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f023 0207 	bic.w	r2, r3, #7
 80073a6:	490f      	ldr	r1, [pc, #60]	; (80073e4 <HAL_PWREx_ConfigSupply+0x70>)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80073ae:	f7fa fd4f 	bl	8001e50 <HAL_GetTick>
 80073b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073b4:	e009      	b.n	80073ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073b6:	f7fa fd4b 	bl	8001e50 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073c4:	d901      	bls.n	80073ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e007      	b.n	80073da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <HAL_PWREx_ConfigSupply+0x70>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d6:	d1ee      	bne.n	80073b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	58024800 	.word	0x58024800

080073e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80073f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073f6:	60d3      	str	r3, [r2, #12]
}
 80073f8:	bf00      	nop
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	58024800 	.word	0x58024800

08007408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08c      	sub	sp, #48	; 0x30
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f000 bc1c 	b.w	8007c54 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8087 	beq.w	8007538 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800742a:	4b9e      	ldr	r3, [pc, #632]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007434:	4b9b      	ldr	r3, [pc, #620]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	2b10      	cmp	r3, #16
 800743e:	d007      	beq.n	8007450 <HAL_RCC_OscConfig+0x48>
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	2b18      	cmp	r3, #24
 8007444:	d110      	bne.n	8007468 <HAL_RCC_OscConfig+0x60>
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d10b      	bne.n	8007468 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007450:	4b94      	ldr	r3, [pc, #592]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d06c      	beq.n	8007536 <HAL_RCC_OscConfig+0x12e>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d168      	bne.n	8007536 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e3f5      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007470:	d106      	bne.n	8007480 <HAL_RCC_OscConfig+0x78>
 8007472:	4b8c      	ldr	r3, [pc, #560]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a8b      	ldr	r2, [pc, #556]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	e02e      	b.n	80074de <HAL_RCC_OscConfig+0xd6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10c      	bne.n	80074a2 <HAL_RCC_OscConfig+0x9a>
 8007488:	4b86      	ldr	r3, [pc, #536]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a85      	ldr	r2, [pc, #532]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800748e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	4b83      	ldr	r3, [pc, #524]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a82      	ldr	r2, [pc, #520]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800749a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e01d      	b.n	80074de <HAL_RCC_OscConfig+0xd6>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074aa:	d10c      	bne.n	80074c6 <HAL_RCC_OscConfig+0xbe>
 80074ac:	4b7d      	ldr	r3, [pc, #500]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a7c      	ldr	r2, [pc, #496]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	4b7a      	ldr	r3, [pc, #488]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a79      	ldr	r2, [pc, #484]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	e00b      	b.n	80074de <HAL_RCC_OscConfig+0xd6>
 80074c6:	4b77      	ldr	r3, [pc, #476]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a76      	ldr	r2, [pc, #472]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	4b74      	ldr	r3, [pc, #464]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a73      	ldr	r2, [pc, #460]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80074d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d013      	beq.n	800750e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e6:	f7fa fcb3 	bl	8001e50 <HAL_GetTick>
 80074ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ec:	e008      	b.n	8007500 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074ee:	f7fa fcaf 	bl	8001e50 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b64      	cmp	r3, #100	; 0x64
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e3a9      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007500:	4b68      	ldr	r3, [pc, #416]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0f0      	beq.n	80074ee <HAL_RCC_OscConfig+0xe6>
 800750c:	e014      	b.n	8007538 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750e:	f7fa fc9f 	bl	8001e50 <HAL_GetTick>
 8007512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007514:	e008      	b.n	8007528 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007516:	f7fa fc9b 	bl	8001e50 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b64      	cmp	r3, #100	; 0x64
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e395      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007528:	4b5e      	ldr	r3, [pc, #376]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f0      	bne.n	8007516 <HAL_RCC_OscConfig+0x10e>
 8007534:	e000      	b.n	8007538 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007536:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80ca 	beq.w	80076da <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007546:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800754e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007550:	4b54      	ldr	r3, [pc, #336]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <HAL_RCC_OscConfig+0x164>
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2b18      	cmp	r3, #24
 8007560:	d156      	bne.n	8007610 <HAL_RCC_OscConfig+0x208>
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d151      	bne.n	8007610 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800756c:	4b4d      	ldr	r3, [pc, #308]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <HAL_RCC_OscConfig+0x17c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e367      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007584:	4b47      	ldr	r3, [pc, #284]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f023 0219 	bic.w	r2, r3, #25
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4944      	ldr	r1, [pc, #272]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007596:	f7fa fc5b 	bl	8001e50 <HAL_GetTick>
 800759a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800759e:	f7fa fc57 	bl	8001e50 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e351      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075b0:	4b3c      	ldr	r3, [pc, #240]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0f0      	beq.n	800759e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075bc:	f7fa fc78 	bl	8001eb0 <HAL_GetREVID>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d817      	bhi.n	80075fa <HAL_RCC_OscConfig+0x1f2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d108      	bne.n	80075e4 <HAL_RCC_OscConfig+0x1dc>
 80075d2:	4b34      	ldr	r3, [pc, #208]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80075da:	4a32      	ldr	r2, [pc, #200]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80075dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075e2:	e07a      	b.n	80076da <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e4:	4b2f      	ldr	r3, [pc, #188]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	031b      	lsls	r3, r3, #12
 80075f2:	492c      	ldr	r1, [pc, #176]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075f8:	e06f      	b.n	80076da <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075fa:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	061b      	lsls	r3, r3, #24
 8007608:	4926      	ldr	r1, [pc, #152]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800760a:	4313      	orrs	r3, r2
 800760c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800760e:	e064      	b.n	80076da <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d047      	beq.n	80076a8 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007618:	4b22      	ldr	r3, [pc, #136]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f023 0219 	bic.w	r2, r3, #25
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	491f      	ldr	r1, [pc, #124]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007626:	4313      	orrs	r3, r2
 8007628:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762a:	f7fa fc11 	bl	8001e50 <HAL_GetTick>
 800762e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007630:	e008      	b.n	8007644 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007632:	f7fa fc0d 	bl	8001e50 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e307      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007644:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0f0      	beq.n	8007632 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007650:	f7fa fc2e 	bl	8001eb0 <HAL_GetREVID>
 8007654:	4603      	mov	r3, r0
 8007656:	f241 0203 	movw	r2, #4099	; 0x1003
 800765a:	4293      	cmp	r3, r2
 800765c:	d817      	bhi.n	800768e <HAL_RCC_OscConfig+0x286>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d108      	bne.n	8007678 <HAL_RCC_OscConfig+0x270>
 8007666:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800766e:	4a0d      	ldr	r2, [pc, #52]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	e030      	b.n	80076da <HAL_RCC_OscConfig+0x2d2>
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	031b      	lsls	r3, r3, #12
 8007686:	4907      	ldr	r1, [pc, #28]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007688:	4313      	orrs	r3, r2
 800768a:	604b      	str	r3, [r1, #4]
 800768c:	e025      	b.n	80076da <HAL_RCC_OscConfig+0x2d2>
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	061b      	lsls	r3, r3, #24
 800769c:	4901      	ldr	r1, [pc, #4]	; (80076a4 <HAL_RCC_OscConfig+0x29c>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	604b      	str	r3, [r1, #4]
 80076a2:	e01a      	b.n	80076da <HAL_RCC_OscConfig+0x2d2>
 80076a4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076a8:	4b9e      	ldr	r3, [pc, #632]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a9d      	ldr	r2, [pc, #628]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b4:	f7fa fbcc 	bl	8001e50 <HAL_GetTick>
 80076b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076ba:	e008      	b.n	80076ce <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076bc:	f7fa fbc8 	bl	8001e50 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e2c2      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076ce:	4b95      	ldr	r3, [pc, #596]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f0      	bne.n	80076bc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 80a9 	beq.w	800783a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076e8:	4b8e      	ldr	r3, [pc, #568]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076f2:	4b8c      	ldr	r3, [pc, #560]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d007      	beq.n	800770e <HAL_RCC_OscConfig+0x306>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b18      	cmp	r3, #24
 8007702:	d13a      	bne.n	800777a <HAL_RCC_OscConfig+0x372>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b01      	cmp	r3, #1
 800770c:	d135      	bne.n	800777a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800770e:	4b85      	ldr	r3, [pc, #532]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007716:	2b00      	cmp	r3, #0
 8007718:	d005      	beq.n	8007726 <HAL_RCC_OscConfig+0x31e>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	2b80      	cmp	r3, #128	; 0x80
 8007720:	d001      	beq.n	8007726 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e296      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007726:	f7fa fbc3 	bl	8001eb0 <HAL_GetREVID>
 800772a:	4603      	mov	r3, r0
 800772c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007730:	4293      	cmp	r3, r2
 8007732:	d817      	bhi.n	8007764 <HAL_RCC_OscConfig+0x35c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	2b20      	cmp	r3, #32
 800773a:	d108      	bne.n	800774e <HAL_RCC_OscConfig+0x346>
 800773c:	4b79      	ldr	r3, [pc, #484]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007744:	4a77      	ldr	r2, [pc, #476]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800774a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800774c:	e075      	b.n	800783a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800774e:	4b75      	ldr	r3, [pc, #468]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	069b      	lsls	r3, r3, #26
 800775c:	4971      	ldr	r1, [pc, #452]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 800775e:	4313      	orrs	r3, r2
 8007760:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007762:	e06a      	b.n	800783a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007764:	4b6f      	ldr	r3, [pc, #444]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	061b      	lsls	r3, r3, #24
 8007772:	496c      	ldr	r1, [pc, #432]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007774:	4313      	orrs	r3, r2
 8007776:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007778:	e05f      	b.n	800783a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d042      	beq.n	8007808 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007782:	4b68      	ldr	r3, [pc, #416]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a67      	ldr	r2, [pc, #412]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778e:	f7fa fb5f 	bl	8001e50 <HAL_GetTick>
 8007792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007794:	e008      	b.n	80077a8 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007796:	f7fa fb5b 	bl	8001e50 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e255      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077a8:	4b5e      	ldr	r3, [pc, #376]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0f0      	beq.n	8007796 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077b4:	f7fa fb7c 	bl	8001eb0 <HAL_GetREVID>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80077be:	4293      	cmp	r3, r2
 80077c0:	d817      	bhi.n	80077f2 <HAL_RCC_OscConfig+0x3ea>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d108      	bne.n	80077dc <HAL_RCC_OscConfig+0x3d4>
 80077ca:	4b56      	ldr	r3, [pc, #344]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077d2:	4a54      	ldr	r2, [pc, #336]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80077d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077d8:	6053      	str	r3, [r2, #4]
 80077da:	e02e      	b.n	800783a <HAL_RCC_OscConfig+0x432>
 80077dc:	4b51      	ldr	r3, [pc, #324]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	069b      	lsls	r3, r3, #26
 80077ea:	494e      	ldr	r1, [pc, #312]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	604b      	str	r3, [r1, #4]
 80077f0:	e023      	b.n	800783a <HAL_RCC_OscConfig+0x432>
 80077f2:	4b4c      	ldr	r3, [pc, #304]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	061b      	lsls	r3, r3, #24
 8007800:	4948      	ldr	r1, [pc, #288]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007802:	4313      	orrs	r3, r2
 8007804:	60cb      	str	r3, [r1, #12]
 8007806:	e018      	b.n	800783a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007808:	4b46      	ldr	r3, [pc, #280]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a45      	ldr	r2, [pc, #276]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 800780e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007814:	f7fa fb1c 	bl	8001e50 <HAL_GetTick>
 8007818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800781c:	f7fa fb18 	bl	8001e50 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e212      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800782e:	4b3d      	ldr	r3, [pc, #244]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d036      	beq.n	80078b4 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d019      	beq.n	8007882 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800784e:	4b35      	ldr	r3, [pc, #212]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007852:	4a34      	ldr	r2, [pc, #208]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007854:	f043 0301 	orr.w	r3, r3, #1
 8007858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785a:	f7fa faf9 	bl	8001e50 <HAL_GetTick>
 800785e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007862:	f7fa faf5 	bl	8001e50 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e1ef      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007874:	4b2b      	ldr	r3, [pc, #172]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <HAL_RCC_OscConfig+0x45a>
 8007880:	e018      	b.n	80078b4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007882:	4b28      	ldr	r3, [pc, #160]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007886:	4a27      	ldr	r2, [pc, #156]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788e:	f7fa fadf 	bl	8001e50 <HAL_GetTick>
 8007892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007896:	f7fa fadb 	bl	8001e50 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e1d5      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078a8:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80078aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f0      	bne.n	8007896 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d039      	beq.n	8007934 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d019      	beq.n	80078fc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078c8:	4b16      	ldr	r3, [pc, #88]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a15      	ldr	r2, [pc, #84]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80078ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078d4:	f7fa fabc 	bl	8001e50 <HAL_GetTick>
 80078d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078dc:	f7fa fab8 	bl	8001e50 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e1b2      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078ee:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <HAL_RCC_OscConfig+0x4d4>
 80078fa:	e01b      	b.n	8007934 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a08      	ldr	r2, [pc, #32]	; (8007924 <HAL_RCC_OscConfig+0x51c>)
 8007902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007906:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007908:	f7fa faa2 	bl	8001e50 <HAL_GetTick>
 800790c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800790e:	e00b      	b.n	8007928 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007910:	f7fa fa9e 	bl	8001e50 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d904      	bls.n	8007928 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e198      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007928:	4ba3      	ldr	r3, [pc, #652]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1ed      	bne.n	8007910 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8081 	beq.w	8007a44 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007942:	4b9e      	ldr	r3, [pc, #632]	; (8007bbc <HAL_RCC_OscConfig+0x7b4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a9d      	ldr	r2, [pc, #628]	; (8007bbc <HAL_RCC_OscConfig+0x7b4>)
 8007948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800794e:	f7fa fa7f 	bl	8001e50 <HAL_GetTick>
 8007952:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007954:	e008      	b.n	8007968 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007956:	f7fa fa7b 	bl	8001e50 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b64      	cmp	r3, #100	; 0x64
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e175      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007968:	4b94      	ldr	r3, [pc, #592]	; (8007bbc <HAL_RCC_OscConfig+0x7b4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0f0      	beq.n	8007956 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d106      	bne.n	800798a <HAL_RCC_OscConfig+0x582>
 800797c:	4b8e      	ldr	r3, [pc, #568]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 800797e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007980:	4a8d      	ldr	r2, [pc, #564]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	6713      	str	r3, [r2, #112]	; 0x70
 8007988:	e02d      	b.n	80079e6 <HAL_RCC_OscConfig+0x5de>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10c      	bne.n	80079ac <HAL_RCC_OscConfig+0x5a4>
 8007992:	4b89      	ldr	r3, [pc, #548]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007996:	4a88      	ldr	r2, [pc, #544]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	6713      	str	r3, [r2, #112]	; 0x70
 800799e:	4b86      	ldr	r3, [pc, #536]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a2:	4a85      	ldr	r2, [pc, #532]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079a4:	f023 0304 	bic.w	r3, r3, #4
 80079a8:	6713      	str	r3, [r2, #112]	; 0x70
 80079aa:	e01c      	b.n	80079e6 <HAL_RCC_OscConfig+0x5de>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	d10c      	bne.n	80079ce <HAL_RCC_OscConfig+0x5c6>
 80079b4:	4b80      	ldr	r3, [pc, #512]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b8:	4a7f      	ldr	r2, [pc, #508]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079ba:	f043 0304 	orr.w	r3, r3, #4
 80079be:	6713      	str	r3, [r2, #112]	; 0x70
 80079c0:	4b7d      	ldr	r3, [pc, #500]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c4:	4a7c      	ldr	r2, [pc, #496]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	6713      	str	r3, [r2, #112]	; 0x70
 80079cc:	e00b      	b.n	80079e6 <HAL_RCC_OscConfig+0x5de>
 80079ce:	4b7a      	ldr	r3, [pc, #488]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	4a79      	ldr	r2, [pc, #484]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	6713      	str	r3, [r2, #112]	; 0x70
 80079da:	4b77      	ldr	r3, [pc, #476]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	4a76      	ldr	r2, [pc, #472]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 80079e0:	f023 0304 	bic.w	r3, r3, #4
 80079e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d015      	beq.n	8007a1a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ee:	f7fa fa2f 	bl	8001e50 <HAL_GetTick>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079f4:	e00a      	b.n	8007a0c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f6:	f7fa fa2b 	bl	8001e50 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e123      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a0c:	4b6a      	ldr	r3, [pc, #424]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0ee      	beq.n	80079f6 <HAL_RCC_OscConfig+0x5ee>
 8007a18:	e014      	b.n	8007a44 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a1a:	f7fa fa19 	bl	8001e50 <HAL_GetTick>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a20:	e00a      	b.n	8007a38 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a22:	f7fa fa15 	bl	8001e50 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e10d      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a38:	4b5f      	ldr	r3, [pc, #380]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1ee      	bne.n	8007a22 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8102 	beq.w	8007c52 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a4e:	4b5a      	ldr	r3, [pc, #360]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a56:	2b18      	cmp	r3, #24
 8007a58:	f000 80bd 	beq.w	8007bd6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	f040 8095 	bne.w	8007b90 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a66:	4b54      	ldr	r3, [pc, #336]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a53      	ldr	r2, [pc, #332]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a72:	f7fa f9ed 	bl	8001e50 <HAL_GetTick>
 8007a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a78:	e008      	b.n	8007a8c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a7a:	f7fa f9e9 	bl	8001e50 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e0e3      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a8c:	4b4a      	ldr	r3, [pc, #296]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f0      	bne.n	8007a7a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a98:	4b47      	ldr	r3, [pc, #284]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a9c:	4b48      	ldr	r3, [pc, #288]	; (8007bc0 <HAL_RCC_OscConfig+0x7b8>)
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007aa8:	0112      	lsls	r2, r2, #4
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	4942      	ldr	r1, [pc, #264]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	628b      	str	r3, [r1, #40]	; 0x28
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	025b      	lsls	r3, r3, #9
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	3b01      	subs	r3, #1
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ada:	3b01      	subs	r3, #1
 8007adc:	061b      	lsls	r3, r3, #24
 8007ade:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ae2:	4935      	ldr	r1, [pc, #212]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007ae8:	4b33      	ldr	r3, [pc, #204]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a32      	ldr	r2, [pc, #200]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007af4:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af8:	4b32      	ldr	r3, [pc, #200]	; (8007bc4 <HAL_RCC_OscConfig+0x7bc>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b00:	00d2      	lsls	r2, r2, #3
 8007b02:	492d      	ldr	r1, [pc, #180]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b08:	4b2b      	ldr	r3, [pc, #172]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	f023 020c 	bic.w	r2, r3, #12
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	4928      	ldr	r1, [pc, #160]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b1a:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	f023 0202 	bic.w	r2, r3, #2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b26:	4924      	ldr	r1, [pc, #144]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b2c:	4b22      	ldr	r3, [pc, #136]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a21      	ldr	r2, [pc, #132]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b38:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b44:	4b1c      	ldr	r3, [pc, #112]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	4a1b      	ldr	r2, [pc, #108]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b50:	4b19      	ldr	r3, [pc, #100]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b5c:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7fa f972 	bl	8001e50 <HAL_GetTick>
 8007b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b70:	f7fa f96e 	bl	8001e50 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e068      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f0      	beq.n	8007b70 <HAL_RCC_OscConfig+0x768>
 8007b8e:	e060      	b.n	8007c52 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b90:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a08      	ldr	r2, [pc, #32]	; (8007bb8 <HAL_RCC_OscConfig+0x7b0>)
 8007b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fa f958 	bl	8001e50 <HAL_GetTick>
 8007ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ba2:	e011      	b.n	8007bc8 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba4:	f7fa f954 	bl	8001e50 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d90a      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e04e      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
 8007bb6:	bf00      	nop
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	58024800 	.word	0x58024800
 8007bc0:	fffffc0c 	.word	0xfffffc0c
 8007bc4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bc8:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <HAL_RCC_OscConfig+0x854>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e7      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x79c>
 8007bd4:	e03d      	b.n	8007c52 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bd6:	4b21      	ldr	r3, [pc, #132]	; (8007c5c <HAL_RCC_OscConfig+0x854>)
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bdc:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <HAL_RCC_OscConfig+0x854>)
 8007bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d031      	beq.n	8007c4e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f003 0203 	and.w	r2, r3, #3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d12a      	bne.n	8007c4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	091b      	lsrs	r3, r3, #4
 8007bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d122      	bne.n	8007c4e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d11a      	bne.n	8007c4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	0a5b      	lsrs	r3, r3, #9
 8007c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d111      	bne.n	8007c4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	0c1b      	lsrs	r3, r3, #16
 8007c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d108      	bne.n	8007c4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	0e1b      	lsrs	r3, r3, #24
 8007c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d001      	beq.n	8007c52 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3730      	adds	r7, #48	; 0x30
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	58024400 	.word	0x58024400

08007c60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e19c      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c74:	4b8a      	ldr	r3, [pc, #552]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d910      	bls.n	8007ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c82:	4b87      	ldr	r3, [pc, #540]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 020f 	bic.w	r2, r3, #15
 8007c8a:	4985      	ldr	r1, [pc, #532]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c92:	4b83      	ldr	r3, [pc, #524]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d001      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e184      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d010      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	4b7b      	ldr	r3, [pc, #492]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d908      	bls.n	8007cd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cc0:	4b78      	ldr	r3, [pc, #480]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	4975      	ldr	r1, [pc, #468]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d010      	beq.n	8007d00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	4b70      	ldr	r3, [pc, #448]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d908      	bls.n	8007d00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cee:	4b6d      	ldr	r3, [pc, #436]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	496a      	ldr	r1, [pc, #424]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d010      	beq.n	8007d2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	4b64      	ldr	r3, [pc, #400]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d908      	bls.n	8007d2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d1c:	4b61      	ldr	r3, [pc, #388]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	495e      	ldr	r1, [pc, #376]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d010      	beq.n	8007d5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69da      	ldr	r2, [r3, #28]
 8007d3e:	4b59      	ldr	r3, [pc, #356]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d908      	bls.n	8007d5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d4a:	4b56      	ldr	r3, [pc, #344]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	4953      	ldr	r1, [pc, #332]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d010      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	4b4d      	ldr	r3, [pc, #308]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d908      	bls.n	8007d8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d78:	4b4a      	ldr	r3, [pc, #296]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f023 020f 	bic.w	r2, r3, #15
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	4947      	ldr	r1, [pc, #284]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d055      	beq.n	8007e42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d96:	4b43      	ldr	r3, [pc, #268]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	4940      	ldr	r1, [pc, #256]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d107      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007db0:	4b3c      	ldr	r3, [pc, #240]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d121      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e0f6      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d107      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dc8:	4b36      	ldr	r3, [pc, #216]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d115      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0ea      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d107      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007de0:	4b30      	ldr	r3, [pc, #192]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e0de      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007df0:	4b2c      	ldr	r3, [pc, #176]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e0d6      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e00:	4b28      	ldr	r3, [pc, #160]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f023 0207 	bic.w	r2, r3, #7
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4925      	ldr	r1, [pc, #148]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e12:	f7fa f81d 	bl	8001e50 <HAL_GetTick>
 8007e16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e18:	e00a      	b.n	8007e30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e1a:	f7fa f819 	bl	8001e50 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e0be      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e30:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d1eb      	bne.n	8007e1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d010      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d208      	bcs.n	8007e70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e5e:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	f023 020f 	bic.w	r2, r3, #15
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	490e      	ldr	r1, [pc, #56]	; (8007ea4 <HAL_RCC_ClockConfig+0x244>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d214      	bcs.n	8007ea8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e7e:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f023 020f 	bic.w	r2, r3, #15
 8007e86:	4906      	ldr	r1, [pc, #24]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8e:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <HAL_RCC_ClockConfig+0x240>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d005      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e086      	b.n	8007fae <HAL_RCC_ClockConfig+0x34e>
 8007ea0:	52002000 	.word	0x52002000
 8007ea4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	4b3f      	ldr	r3, [pc, #252]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d208      	bcs.n	8007ed6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ec4:	4b3c      	ldr	r3, [pc, #240]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4939      	ldr	r1, [pc, #228]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d010      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	4b34      	ldr	r3, [pc, #208]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d208      	bcs.n	8007f04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ef2:	4b31      	ldr	r3, [pc, #196]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	492e      	ldr	r1, [pc, #184]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	4b28      	ldr	r3, [pc, #160]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d208      	bcs.n	8007f32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f20:	4b25      	ldr	r3, [pc, #148]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	4922      	ldr	r1, [pc, #136]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d010      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69da      	ldr	r2, [r3, #28]
 8007f42:	4b1d      	ldr	r3, [pc, #116]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d208      	bcs.n	8007f60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f4e:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	4917      	ldr	r1, [pc, #92]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f60:	f000 f834 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 8007f64:	4602      	mov	r2, r0
 8007f66:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	0a1b      	lsrs	r3, r3, #8
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	4912      	ldr	r1, [pc, #72]	; (8007fbc <HAL_RCC_ClockConfig+0x35c>)
 8007f72:	5ccb      	ldrb	r3, [r1, r3]
 8007f74:	f003 031f 	and.w	r3, r3, #31
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f7e:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <HAL_RCC_ClockConfig+0x358>)
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <HAL_RCC_ClockConfig+0x35c>)
 8007f88:	5cd3      	ldrb	r3, [r2, r3]
 8007f8a:	f003 031f 	and.w	r3, r3, #31
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <HAL_RCC_ClockConfig+0x360>)
 8007f96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f98:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <HAL_RCC_ClockConfig+0x364>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <HAL_RCC_ClockConfig+0x368>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7f9 ff0a 	bl	8001dbc <HAL_InitTick>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	080116e4 	.word	0x080116e4
 8007fc0:	24000008 	.word	0x24000008
 8007fc4:	24000004 	.word	0x24000004
 8007fc8:	2400000c 	.word	0x2400000c

08007fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b089      	sub	sp, #36	; 0x24
 8007fd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd2:	4bb3      	ldr	r3, [pc, #716]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fda:	2b18      	cmp	r3, #24
 8007fdc:	f200 8155 	bhi.w	800828a <HAL_RCC_GetSysClockFreq+0x2be>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	0800804d 	.word	0x0800804d
 8007fec:	0800828b 	.word	0x0800828b
 8007ff0:	0800828b 	.word	0x0800828b
 8007ff4:	0800828b 	.word	0x0800828b
 8007ff8:	0800828b 	.word	0x0800828b
 8007ffc:	0800828b 	.word	0x0800828b
 8008000:	0800828b 	.word	0x0800828b
 8008004:	0800828b 	.word	0x0800828b
 8008008:	08008073 	.word	0x08008073
 800800c:	0800828b 	.word	0x0800828b
 8008010:	0800828b 	.word	0x0800828b
 8008014:	0800828b 	.word	0x0800828b
 8008018:	0800828b 	.word	0x0800828b
 800801c:	0800828b 	.word	0x0800828b
 8008020:	0800828b 	.word	0x0800828b
 8008024:	0800828b 	.word	0x0800828b
 8008028:	08008079 	.word	0x08008079
 800802c:	0800828b 	.word	0x0800828b
 8008030:	0800828b 	.word	0x0800828b
 8008034:	0800828b 	.word	0x0800828b
 8008038:	0800828b 	.word	0x0800828b
 800803c:	0800828b 	.word	0x0800828b
 8008040:	0800828b 	.word	0x0800828b
 8008044:	0800828b 	.word	0x0800828b
 8008048:	0800807f 	.word	0x0800807f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800804c:	4b94      	ldr	r3, [pc, #592]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d009      	beq.n	800806c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008058:	4b91      	ldr	r3, [pc, #580]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	08db      	lsrs	r3, r3, #3
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	4a90      	ldr	r2, [pc, #576]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800806a:	e111      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800806c:	4b8d      	ldr	r3, [pc, #564]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800806e:	61bb      	str	r3, [r7, #24]
    break;
 8008070:	e10e      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008072:	4b8d      	ldr	r3, [pc, #564]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008074:	61bb      	str	r3, [r7, #24]
    break;
 8008076:	e10b      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008078:	4b8c      	ldr	r3, [pc, #560]	; (80082ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800807a:	61bb      	str	r3, [r7, #24]
    break;
 800807c:	e108      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800807e:	4b88      	ldr	r3, [pc, #544]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008088:	4b85      	ldr	r3, [pc, #532]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008092:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008094:	4b82      	ldr	r3, [pc, #520]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800809e:	4b80      	ldr	r3, [pc, #512]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a2:	08db      	lsrs	r3, r3, #3
 80080a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80e1 	beq.w	8008284 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	f000 8083 	beq.w	80081d0 <HAL_RCC_GetSysClockFreq+0x204>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	f200 80a1 	bhi.w	8008214 <HAL_RCC_GetSysClockFreq+0x248>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_RCC_GetSysClockFreq+0x114>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d056      	beq.n	800818c <HAL_RCC_GetSysClockFreq+0x1c0>
 80080de:	e099      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e0:	4b6f      	ldr	r3, [pc, #444]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d02d      	beq.n	8008148 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080ec:	4b6c      	ldr	r3, [pc, #432]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	08db      	lsrs	r3, r3, #3
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	4a6b      	ldr	r2, [pc, #428]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	ee07 3a90 	vmov	s15, r3
 8008104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008116:	4b62      	ldr	r3, [pc, #392]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008126:	ed97 6a02 	vldr	s12, [r7, #8]
 800812a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800812e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008142:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008146:	e087      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815a:	4b51      	ldr	r3, [pc, #324]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008162:	ee07 3a90 	vmov	s15, r3
 8008166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816a:	ed97 6a02 	vldr	s12, [r7, #8]
 800816e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800818a:	e065      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008196:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800819a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819e:	4b40      	ldr	r3, [pc, #256]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80081b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ce:	e043      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80081de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e2:	4b2f      	ldr	r3, [pc, #188]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008212:	e021      	b.n	8008258 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008236:	ed97 6a02 	vldr	s12, [r7, #8]
 800823a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80082b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008256:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008258:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800825a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825c:	0a5b      	lsrs	r3, r3, #9
 800825e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008262:	3301      	adds	r3, #1
 8008264:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008270:	edd7 6a07 	vldr	s13, [r7, #28]
 8008274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827c:	ee17 3a90 	vmov	r3, s15
 8008280:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008282:	e005      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	61bb      	str	r3, [r7, #24]
    break;
 8008288:	e002      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800828c:	61bb      	str	r3, [r7, #24]
    break;
 800828e:	bf00      	nop
  }

  return sysclockfreq;
 8008290:	69bb      	ldr	r3, [r7, #24]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3724      	adds	r7, #36	; 0x24
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	58024400 	.word	0x58024400
 80082a4:	03d09000 	.word	0x03d09000
 80082a8:	003d0900 	.word	0x003d0900
 80082ac:	00989680 	.word	0x00989680
 80082b0:	46000000 	.word	0x46000000
 80082b4:	4c742400 	.word	0x4c742400
 80082b8:	4a742400 	.word	0x4a742400
 80082bc:	4b189680 	.word	0x4b189680

080082c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082c6:	f7ff fe81 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 80082ca:	4602      	mov	r2, r0
 80082cc:	4b10      	ldr	r3, [pc, #64]	; (8008310 <HAL_RCC_GetHCLKFreq+0x50>)
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	490f      	ldr	r1, [pc, #60]	; (8008314 <HAL_RCC_GetHCLKFreq+0x54>)
 80082d8:	5ccb      	ldrb	r3, [r1, r3]
 80082da:	f003 031f 	and.w	r3, r3, #31
 80082de:	fa22 f303 	lsr.w	r3, r2, r3
 80082e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082e4:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <HAL_RCC_GetHCLKFreq+0x50>)
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	4a09      	ldr	r2, [pc, #36]	; (8008314 <HAL_RCC_GetHCLKFreq+0x54>)
 80082ee:	5cd3      	ldrb	r3, [r2, r3]
 80082f0:	f003 031f 	and.w	r3, r3, #31
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	fa22 f303 	lsr.w	r3, r2, r3
 80082fa:	4a07      	ldr	r2, [pc, #28]	; (8008318 <HAL_RCC_GetHCLKFreq+0x58>)
 80082fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082fe:	4a07      	ldr	r2, [pc, #28]	; (800831c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008304:	4b04      	ldr	r3, [pc, #16]	; (8008318 <HAL_RCC_GetHCLKFreq+0x58>)
 8008306:	681b      	ldr	r3, [r3, #0]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	58024400 	.word	0x58024400
 8008314:	080116e4 	.word	0x080116e4
 8008318:	24000008 	.word	0x24000008
 800831c:	24000004 	.word	0x24000004

08008320 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008328:	2300      	movs	r3, #0
 800832a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800832c:	2300      	movs	r3, #0
 800832e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d03f      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008340:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008344:	d02a      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008346:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800834a:	d824      	bhi.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800834c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008350:	d018      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008356:	d81e      	bhi.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800835c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008360:	d007      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008362:	e018      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008364:	4bab      	ldr	r3, [pc, #684]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	4aaa      	ldr	r2, [pc, #680]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800836a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800836e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008370:	e015      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3304      	adds	r3, #4
 8008376:	2102      	movs	r1, #2
 8008378:	4618      	mov	r0, r3
 800837a:	f001 fff3 	bl	800a364 <RCCEx_PLL2_Config>
 800837e:	4603      	mov	r3, r0
 8008380:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008382:	e00c      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3324      	adds	r3, #36	; 0x24
 8008388:	2102      	movs	r1, #2
 800838a:	4618      	mov	r0, r3
 800838c:	f002 f89c 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008394:	e003      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	75fb      	strb	r3, [r7, #23]
      break;
 800839a:	e000      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800839c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083a4:	4b9b      	ldr	r3, [pc, #620]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083b0:	4998      	ldr	r1, [pc, #608]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	650b      	str	r3, [r1, #80]	; 0x50
 80083b6:	e001      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d03d      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d826      	bhi.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083ed 	.word	0x080083ed
 80083dc:	080083fb 	.word	0x080083fb
 80083e0:	0800840d 	.word	0x0800840d
 80083e4:	08008425 	.word	0x08008425
 80083e8:	08008425 	.word	0x08008425
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ec:	4b89      	ldr	r3, [pc, #548]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	4a88      	ldr	r2, [pc, #544]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083f8:	e015      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3304      	adds	r3, #4
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f001 ffaf 	bl	800a364 <RCCEx_PLL2_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800840a:	e00c      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3324      	adds	r3, #36	; 0x24
 8008410:	2100      	movs	r1, #0
 8008412:	4618      	mov	r0, r3
 8008414:	f002 f858 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008418:	4603      	mov	r3, r0
 800841a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800841c:	e003      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	75fb      	strb	r3, [r7, #23]
      break;
 8008422:	e000      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d109      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800842c:	4b79      	ldr	r3, [pc, #484]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800842e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008430:	f023 0207 	bic.w	r2, r3, #7
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008438:	4976      	ldr	r1, [pc, #472]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800843a:	4313      	orrs	r3, r2
 800843c:	650b      	str	r3, [r1, #80]	; 0x50
 800843e:	e001      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800844c:	2b00      	cmp	r3, #0
 800844e:	d042      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008458:	d02b      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800845a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845e:	d825      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008460:	2bc0      	cmp	r3, #192	; 0xc0
 8008462:	d028      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008464:	2bc0      	cmp	r3, #192	; 0xc0
 8008466:	d821      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008468:	2b80      	cmp	r3, #128	; 0x80
 800846a:	d016      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d81d      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d007      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008478:	e018      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800847a:	4b66      	ldr	r3, [pc, #408]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847e:	4a65      	ldr	r2, [pc, #404]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008484:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008486:	e017      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3304      	adds	r3, #4
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f001 ff68 	bl	800a364 <RCCEx_PLL2_Config>
 8008494:	4603      	mov	r3, r0
 8008496:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008498:	e00e      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3324      	adds	r3, #36	; 0x24
 800849e:	2100      	movs	r1, #0
 80084a0:	4618      	mov	r0, r3
 80084a2:	f002 f811 	bl	800a4c8 <RCCEx_PLL3_Config>
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80084aa:	e005      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
      break;
 80084b0:	e002      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80084b2:	bf00      	nop
 80084b4:	e000      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80084b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80084be:	4b55      	ldr	r3, [pc, #340]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ca:	4952      	ldr	r1, [pc, #328]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	650b      	str	r3, [r1, #80]	; 0x50
 80084d0:	e001      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d049      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ec:	d030      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80084ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084f2:	d82a      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80084f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084f8:	d02c      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80084fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084fe:	d824      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008504:	d018      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800850a:	d81e      	bhi.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008514:	d007      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008516:	e018      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008518:	4b3e      	ldr	r3, [pc, #248]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	4a3d      	ldr	r2, [pc, #244]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800851e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008524:	e017      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3304      	adds	r3, #4
 800852a:	2100      	movs	r1, #0
 800852c:	4618      	mov	r0, r3
 800852e:	f001 ff19 	bl	800a364 <RCCEx_PLL2_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008536:	e00e      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3324      	adds	r3, #36	; 0x24
 800853c:	2100      	movs	r1, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f001 ffc2 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008544:	4603      	mov	r3, r0
 8008546:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008548:	e005      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]
      break;
 800854e:	e002      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008550:	bf00      	nop
 8008552:	e000      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800855c:	4b2d      	ldr	r3, [pc, #180]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800855e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008560:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800856a:	492a      	ldr	r1, [pc, #168]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800856c:	4313      	orrs	r3, r2
 800856e:	658b      	str	r3, [r1, #88]	; 0x58
 8008570:	e001      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800857e:	2b00      	cmp	r3, #0
 8008580:	d04c      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800858c:	d030      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800858e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008592:	d82a      	bhi.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008594:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008598:	d02c      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800859a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800859e:	d824      	bhi.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085a4:	d018      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80085a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085aa:	d81e      	bhi.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80085b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085b4:	d007      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80085b6:	e018      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b8:	4b16      	ldr	r3, [pc, #88]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	4a15      	ldr	r2, [pc, #84]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085c4:	e017      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3304      	adds	r3, #4
 80085ca:	2100      	movs	r1, #0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 fec9 	bl	800a364 <RCCEx_PLL2_Config>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80085d6:	e00e      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3324      	adds	r3, #36	; 0x24
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 ff72 	bl	800a4c8 <RCCEx_PLL3_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085e8:	e005      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	75fb      	strb	r3, [r7, #23]
      break;
 80085ee:	e002      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80085f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10d      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80085fc:	4b05      	ldr	r3, [pc, #20]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008600:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800860a:	4902      	ldr	r1, [pc, #8]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800860c:	4313      	orrs	r3, r2
 800860e:	658b      	str	r3, [r1, #88]	; 0x58
 8008610:	e004      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008612:	bf00      	nop
 8008614:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d032      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862c:	2b30      	cmp	r3, #48	; 0x30
 800862e:	d01c      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008630:	2b30      	cmp	r3, #48	; 0x30
 8008632:	d817      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008634:	2b20      	cmp	r3, #32
 8008636:	d00c      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008638:	2b20      	cmp	r3, #32
 800863a:	d813      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d016      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008640:	2b10      	cmp	r3, #16
 8008642:	d10f      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008644:	4baf      	ldr	r3, [pc, #700]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	4aae      	ldr	r2, [pc, #696]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800864a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800864e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008650:	e00e      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3304      	adds	r3, #4
 8008656:	2102      	movs	r1, #2
 8008658:	4618      	mov	r0, r3
 800865a:	f001 fe83 	bl	800a364 <RCCEx_PLL2_Config>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008662:	e005      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	75fb      	strb	r3, [r7, #23]
      break;
 8008668:	e002      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800866a:	bf00      	nop
 800866c:	e000      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800866e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008676:	4ba3      	ldr	r3, [pc, #652]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008682:	49a0      	ldr	r1, [pc, #640]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008684:	4313      	orrs	r3, r2
 8008686:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008688:	e001      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d047      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800869e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a2:	d030      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80086a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a8:	d82a      	bhi.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086ae:	d02c      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80086b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086b4:	d824      	bhi.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ba:	d018      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80086bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c0:	d81e      	bhi.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ca:	d007      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80086cc:	e018      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ce:	4b8d      	ldr	r3, [pc, #564]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	4a8c      	ldr	r2, [pc, #560]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086da:	e017      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	2100      	movs	r1, #0
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 fe3e 	bl	800a364 <RCCEx_PLL2_Config>
 80086e8:	4603      	mov	r3, r0
 80086ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086ec:	e00e      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3324      	adds	r3, #36	; 0x24
 80086f2:	2100      	movs	r1, #0
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fee7 	bl	800a4c8 <RCCEx_PLL3_Config>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086fe:	e005      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	75fb      	strb	r3, [r7, #23]
      break;
 8008704:	e002      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800870a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008712:	4b7c      	ldr	r3, [pc, #496]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008716:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871e:	4979      	ldr	r1, [pc, #484]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008720:	4313      	orrs	r3, r2
 8008722:	650b      	str	r3, [r1, #80]	; 0x50
 8008724:	e001      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d049      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800873a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800873e:	d02e      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008744:	d828      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008746:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800874a:	d02a      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800874c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008750:	d822      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008752:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008756:	d026      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008758:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800875c:	d81c      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800875e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008762:	d010      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008768:	d816      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01d      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800876e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008772:	d111      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	2101      	movs	r1, #1
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fdf2 	bl	800a364 <RCCEx_PLL2_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008784:	e012      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3324      	adds	r3, #36	; 0x24
 800878a:	2101      	movs	r1, #1
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fe9b 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008796:	e009      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]
      break;
 800879c:	e006      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800879e:	bf00      	nop
 80087a0:	e004      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80087a2:	bf00      	nop
 80087a4:	e002      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80087a6:	bf00      	nop
 80087a8:	e000      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80087aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80087b2:	4b54      	ldr	r3, [pc, #336]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087be:	4951      	ldr	r1, [pc, #324]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	650b      	str	r3, [r1, #80]	; 0x50
 80087c4:	e001      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d04b      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087e0:	d02e      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80087e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087e6:	d828      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ec:	d02a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80087ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f2:	d822      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087f8:	d026      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80087fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087fe:	d81c      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008804:	d010      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880a:	d816      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01d      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008814:	d111      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	3304      	adds	r3, #4
 800881a:	2101      	movs	r1, #1
 800881c:	4618      	mov	r0, r3
 800881e:	f001 fda1 	bl	800a364 <RCCEx_PLL2_Config>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008826:	e012      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3324      	adds	r3, #36	; 0x24
 800882c:	2101      	movs	r1, #1
 800882e:	4618      	mov	r0, r3
 8008830:	f001 fe4a 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008838:	e009      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]
      break;
 800883e:	e006      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008840:	bf00      	nop
 8008842:	e004      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008844:	bf00      	nop
 8008846:	e002      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008848:	bf00      	nop
 800884a:	e000      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800884c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008854:	4b2b      	ldr	r3, [pc, #172]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008858:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008862:	4928      	ldr	r1, [pc, #160]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008864:	4313      	orrs	r3, r2
 8008866:	658b      	str	r3, [r1, #88]	; 0x58
 8008868:	e001      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d02f      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008882:	d00e      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008888:	d814      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d015      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800888e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008892:	d10f      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008894:	4b1b      	ldr	r3, [pc, #108]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800889a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800889e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088a0:	e00c      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3304      	adds	r3, #4
 80088a6:	2101      	movs	r1, #1
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 fd5b 	bl	800a364 <RCCEx_PLL2_Config>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088b2:	e003      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	75fb      	strb	r3, [r7, #23]
      break;
 80088b8:	e000      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80088ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088c2:	4b10      	ldr	r3, [pc, #64]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ce:	490d      	ldr	r1, [pc, #52]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	650b      	str	r3, [r1, #80]	; 0x50
 80088d4:	e001      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d033      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d81c      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	0800892f 	.word	0x0800892f
 80088f8:	08008909 	.word	0x08008909
 80088fc:	08008917 	.word	0x08008917
 8008900:	0800892f 	.word	0x0800892f
 8008904:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008908:	4bb8      	ldr	r3, [pc, #736]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	4ab7      	ldr	r2, [pc, #732]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800890e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008914:	e00c      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3304      	adds	r3, #4
 800891a:	2102      	movs	r1, #2
 800891c:	4618      	mov	r0, r3
 800891e:	f001 fd21 	bl	800a364 <RCCEx_PLL2_Config>
 8008922:	4603      	mov	r3, r0
 8008924:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008926:	e003      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
      break;
 800892c:	e000      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800892e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008936:	4bad      	ldr	r3, [pc, #692]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893a:	f023 0203 	bic.w	r2, r3, #3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	49aa      	ldr	r1, [pc, #680]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008944:	4313      	orrs	r3, r2
 8008946:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008948:	e001      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8086 	beq.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800895c:	4ba4      	ldr	r3, [pc, #656]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4aa3      	ldr	r2, [pc, #652]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008968:	f7f9 fa72 	bl	8001e50 <HAL_GetTick>
 800896c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800896e:	e009      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008970:	f7f9 fa6e 	bl	8001e50 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b64      	cmp	r3, #100	; 0x64
 800897c:	d902      	bls.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	75fb      	strb	r3, [r7, #23]
        break;
 8008982:	e005      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008984:	4b9a      	ldr	r3, [pc, #616]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0ef      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d166      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008996:	4b95      	ldr	r3, [pc, #596]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089a0:	4053      	eors	r3, r2
 80089a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d013      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089aa:	4b90      	ldr	r3, [pc, #576]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089b4:	4b8d      	ldr	r3, [pc, #564]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b8:	4a8c      	ldr	r2, [pc, #560]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089c0:	4b8a      	ldr	r3, [pc, #552]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c4:	4a89      	ldr	r2, [pc, #548]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089cc:	4a87      	ldr	r2, [pc, #540]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089dc:	d115      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089de:	f7f9 fa37 	bl	8001e50 <HAL_GetTick>
 80089e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e4:	e00b      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e6:	f7f9 fa33 	bl	8001e50 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d902      	bls.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	75fb      	strb	r3, [r7, #23]
            break;
 80089fc:	e005      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089fe:	4b7b      	ldr	r3, [pc, #492]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0ed      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d126      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a1e:	d10d      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008a20:	4b72      	ldr	r3, [pc, #456]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a2e:	0919      	lsrs	r1, r3, #4
 8008a30:	4b70      	ldr	r3, [pc, #448]	; (8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008a32:	400b      	ands	r3, r1
 8008a34:	496d      	ldr	r1, [pc, #436]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	610b      	str	r3, [r1, #16]
 8008a3a:	e005      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008a3c:	4b6b      	ldr	r3, [pc, #428]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	4a6a      	ldr	r2, [pc, #424]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a46:	6113      	str	r3, [r2, #16]
 8008a48:	4b68      	ldr	r3, [pc, #416]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a56:	4965      	ldr	r1, [pc, #404]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	670b      	str	r3, [r1, #112]	; 0x70
 8008a5c:	e004      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	75bb      	strb	r3, [r7, #22]
 8008a62:	e001      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d07e      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a78:	2b28      	cmp	r3, #40	; 0x28
 8008a7a:	d867      	bhi.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008b53 	.word	0x08008b53
 8008a88:	08008b4d 	.word	0x08008b4d
 8008a8c:	08008b4d 	.word	0x08008b4d
 8008a90:	08008b4d 	.word	0x08008b4d
 8008a94:	08008b4d 	.word	0x08008b4d
 8008a98:	08008b4d 	.word	0x08008b4d
 8008a9c:	08008b4d 	.word	0x08008b4d
 8008aa0:	08008b4d 	.word	0x08008b4d
 8008aa4:	08008b29 	.word	0x08008b29
 8008aa8:	08008b4d 	.word	0x08008b4d
 8008aac:	08008b4d 	.word	0x08008b4d
 8008ab0:	08008b4d 	.word	0x08008b4d
 8008ab4:	08008b4d 	.word	0x08008b4d
 8008ab8:	08008b4d 	.word	0x08008b4d
 8008abc:	08008b4d 	.word	0x08008b4d
 8008ac0:	08008b4d 	.word	0x08008b4d
 8008ac4:	08008b3b 	.word	0x08008b3b
 8008ac8:	08008b4d 	.word	0x08008b4d
 8008acc:	08008b4d 	.word	0x08008b4d
 8008ad0:	08008b4d 	.word	0x08008b4d
 8008ad4:	08008b4d 	.word	0x08008b4d
 8008ad8:	08008b4d 	.word	0x08008b4d
 8008adc:	08008b4d 	.word	0x08008b4d
 8008ae0:	08008b4d 	.word	0x08008b4d
 8008ae4:	08008b53 	.word	0x08008b53
 8008ae8:	08008b4d 	.word	0x08008b4d
 8008aec:	08008b4d 	.word	0x08008b4d
 8008af0:	08008b4d 	.word	0x08008b4d
 8008af4:	08008b4d 	.word	0x08008b4d
 8008af8:	08008b4d 	.word	0x08008b4d
 8008afc:	08008b4d 	.word	0x08008b4d
 8008b00:	08008b4d 	.word	0x08008b4d
 8008b04:	08008b53 	.word	0x08008b53
 8008b08:	08008b4d 	.word	0x08008b4d
 8008b0c:	08008b4d 	.word	0x08008b4d
 8008b10:	08008b4d 	.word	0x08008b4d
 8008b14:	08008b4d 	.word	0x08008b4d
 8008b18:	08008b4d 	.word	0x08008b4d
 8008b1c:	08008b4d 	.word	0x08008b4d
 8008b20:	08008b4d 	.word	0x08008b4d
 8008b24:	08008b53 	.word	0x08008b53
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fc18 	bl	800a364 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b38:	e00c      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3324      	adds	r3, #36	; 0x24
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 fcc1 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b4a:	e003      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b50:	e000      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b5a:	4b24      	ldr	r3, [pc, #144]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b66:	4921      	ldr	r1, [pc, #132]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	654b      	str	r3, [r1, #84]	; 0x54
 8008b6c:	e001      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d03e      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d820      	bhi.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008b86:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008bcf 	.word	0x08008bcf
 8008b90:	08008ba5 	.word	0x08008ba5
 8008b94:	08008bb7 	.word	0x08008bb7
 8008b98:	08008bcf 	.word	0x08008bcf
 8008b9c:	08008bcf 	.word	0x08008bcf
 8008ba0:	08008bcf 	.word	0x08008bcf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	2101      	movs	r1, #1
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 fbda 	bl	800a364 <RCCEx_PLL2_Config>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bb4:	e00c      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3324      	adds	r3, #36	; 0x24
 8008bba:	2101      	movs	r1, #1
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 fc83 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bc6:	e003      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	75fb      	strb	r3, [r7, #23]
      break;
 8008bcc:	e000      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d110      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008bd6:	4b05      	ldr	r3, [pc, #20]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bda:	f023 0207 	bic.w	r2, r3, #7
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be2:	4902      	ldr	r1, [pc, #8]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	654b      	str	r3, [r1, #84]	; 0x54
 8008be8:	e008      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	58024800 	.word	0x58024800
 8008bf4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d039      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0e:	2b05      	cmp	r3, #5
 8008c10:	d820      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c5b 	.word	0x08008c5b
 8008c1c:	08008c31 	.word	0x08008c31
 8008c20:	08008c43 	.word	0x08008c43
 8008c24:	08008c5b 	.word	0x08008c5b
 8008c28:	08008c5b 	.word	0x08008c5b
 8008c2c:	08008c5b 	.word	0x08008c5b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	2101      	movs	r1, #1
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 fb94 	bl	800a364 <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c40:	e00c      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3324      	adds	r3, #36	; 0x24
 8008c46:	2101      	movs	r1, #1
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f001 fc3d 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]
      break;
 8008c58:	e000      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c62:	4bb7      	ldr	r3, [pc, #732]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c66:	f023 0207 	bic.w	r2, r3, #7
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c70:	49b3      	ldr	r1, [pc, #716]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	658b      	str	r3, [r1, #88]	; 0x58
 8008c76:	e001      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0320 	and.w	r3, r3, #32
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d04b      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c92:	d02e      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c98:	d828      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9e:	d02a      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca4:	d822      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008ca6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008caa:	d026      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008cac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cb0:	d81c      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cb6:	d010      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cbc:	d816      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01d      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cc6:	d111      	bne.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fb48 	bl	800a364 <RCCEx_PLL2_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cd8:	e012      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3324      	adds	r3, #36	; 0x24
 8008cde:	2102      	movs	r1, #2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 fbf1 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cea:	e009      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf0:	e006      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008cf2:	bf00      	nop
 8008cf4:	e004      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008cf6:	bf00      	nop
 8008cf8:	e002      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008cfa:	bf00      	nop
 8008cfc:	e000      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d06:	4b8e      	ldr	r3, [pc, #568]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d14:	498a      	ldr	r1, [pc, #552]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	654b      	str	r3, [r1, #84]	; 0x54
 8008d1a:	e001      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d04b      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d36:	d02e      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008d38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d3c:	d828      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d42:	d02a      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d48:	d822      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d4e:	d026      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008d50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d54:	d81c      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d5a:	d010      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d60:	d816      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01d      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d6a:	d111      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	2100      	movs	r1, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 faf6 	bl	800a364 <RCCEx_PLL2_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d7c:	e012      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3324      	adds	r3, #36	; 0x24
 8008d82:	2102      	movs	r1, #2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 fb9f 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d8e:	e009      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
      break;
 8008d94:	e006      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d96:	bf00      	nop
 8008d98:	e004      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d9a:	bf00      	nop
 8008d9c:	e002      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d9e:	bf00      	nop
 8008da0:	e000      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10a      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008daa:	4b65      	ldr	r3, [pc, #404]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008db8:	4961      	ldr	r1, [pc, #388]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	658b      	str	r3, [r1, #88]	; 0x58
 8008dbe:	e001      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d04b      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dd6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008dda:	d02e      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008ddc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008de0:	d828      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de6:	d02a      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dec:	d822      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008dee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008df2:	d026      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008df4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008df8:	d81c      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dfe:	d010      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e04:	d816      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01d      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e0e:	d111      	bne.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 faa4 	bl	800a364 <RCCEx_PLL2_Config>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e20:	e012      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3324      	adds	r3, #36	; 0x24
 8008e26:	2102      	movs	r1, #2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fb4d 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e32:	e009      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	e006      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e004      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e3e:	bf00      	nop
 8008e40:	e002      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e42:	bf00      	nop
 8008e44:	e000      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10a      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e4e:	4b3c      	ldr	r3, [pc, #240]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e5c:	4938      	ldr	r1, [pc, #224]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	658b      	str	r3, [r1, #88]	; 0x58
 8008e62:	e001      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01a      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7e:	d10a      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3324      	adds	r3, #36	; 0x24
 8008e84:	2102      	movs	r1, #2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 fb1e 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e96:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea4:	4926      	ldr	r1, [pc, #152]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01a      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec0:	d10a      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3324      	adds	r3, #36	; 0x24
 8008ec6:	2102      	movs	r1, #2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fafd 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ed8:	4b19      	ldr	r3, [pc, #100]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ee6:	4916      	ldr	r1, [pc, #88]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d036      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f02:	d01f      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f08:	d817      	bhi.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f12:	d009      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008f14:	e011      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 fa21 	bl	800a364 <RCCEx_PLL2_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f26:	e00e      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3324      	adds	r3, #36	; 0x24
 8008f2c:	2102      	movs	r1, #2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 faca 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f38:	e005      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f3e:	e002      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008f40:	58024400 	.word	0x58024400
      break;
 8008f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f4c:	4b93      	ldr	r3, [pc, #588]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f5a:	4990      	ldr	r1, [pc, #576]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	658b      	str	r3, [r1, #88]	; 0x58
 8008f60:	e001      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d033      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f7c:	d01c      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008f7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f82:	d816      	bhi.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f88:	d003      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f8e:	d007      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008f90:	e00f      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f92:	4b82      	ldr	r3, [pc, #520]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	4a81      	ldr	r2, [pc, #516]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f9e:	e00c      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3324      	adds	r3, #36	; 0x24
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 fa8e 	bl	800a4c8 <RCCEx_PLL3_Config>
 8008fac:	4603      	mov	r3, r0
 8008fae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008fb0:	e003      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb6:	e000      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fc0:	4b76      	ldr	r3, [pc, #472]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fce:	4973      	ldr	r1, [pc, #460]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	654b      	str	r3, [r1, #84]	; 0x54
 8008fd4:	e001      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d029      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff2:	d007      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008ff4:	e00f      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff6:	4b69      	ldr	r3, [pc, #420]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	4a68      	ldr	r2, [pc, #416]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009000:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009002:	e00b      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	2102      	movs	r1, #2
 800900a:	4618      	mov	r0, r3
 800900c:	f001 f9aa 	bl	800a364 <RCCEx_PLL2_Config>
 8009010:	4603      	mov	r3, r0
 8009012:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009014:	e002      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	75fb      	strb	r3, [r7, #23]
      break;
 800901a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009022:	4b5e      	ldr	r3, [pc, #376]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	495b      	ldr	r1, [pc, #364]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009030:	4313      	orrs	r3, r2
 8009032:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009034:	e001      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3324      	adds	r3, #36	; 0x24
 800904a:	2102      	movs	r1, #2
 800904c:	4618      	mov	r0, r3
 800904e:	f001 fa3b 	bl	800a4c8 <RCCEx_PLL3_Config>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d030      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800906c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009070:	d017      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009076:	d811      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800907c:	d013      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800907e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009082:	d80b      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d010      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908c:	d106      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800908e:	4b43      	ldr	r3, [pc, #268]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009092:	4a42      	ldr	r2, [pc, #264]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009098:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800909a:	e007      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	75fb      	strb	r3, [r7, #23]
      break;
 80090a0:	e004      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80090a2:	bf00      	nop
 80090a4:	e002      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80090a6:	bf00      	nop
 80090a8:	e000      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80090aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d109      	bne.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090b2:	4b3a      	ldr	r3, [pc, #232]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090be:	4937      	ldr	r1, [pc, #220]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	654b      	str	r3, [r1, #84]	; 0x54
 80090c4:	e001      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d008      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090d6:	4b31      	ldr	r3, [pc, #196]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e2:	492e      	ldr	r1, [pc, #184]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d009      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80090f4:	4b29      	ldr	r3, [pc, #164]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009102:	4926      	ldr	r1, [pc, #152]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009104:	4313      	orrs	r3, r2
 8009106:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009114:	4b21      	ldr	r3, [pc, #132]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009118:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009120:	491e      	ldr	r1, [pc, #120]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009122:	4313      	orrs	r3, r2
 8009124:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00d      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009132:	4b1a      	ldr	r3, [pc, #104]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	4a19      	ldr	r2, [pc, #100]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009138:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800913c:	6113      	str	r3, [r2, #16]
 800913e:	4b17      	ldr	r3, [pc, #92]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009140:	691a      	ldr	r2, [r3, #16]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009148:	4914      	ldr	r1, [pc, #80]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800914a:	4313      	orrs	r3, r2
 800914c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	da08      	bge.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800915a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009162:	490e      	ldr	r1, [pc, #56]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009164:	4313      	orrs	r3, r2
 8009166:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d009      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009174:	4b09      	ldr	r3, [pc, #36]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009182:	4906      	ldr	r1, [pc, #24]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009184:	4313      	orrs	r3, r2
 8009186:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009188:	7dbb      	ldrb	r3, [r7, #22]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	e000      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	58024400 	.word	0x58024400

080091a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b090      	sub	sp, #64	; 0x40
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ae:	f040 8095 	bne.w	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80091b2:	4bae      	ldr	r3, [pc, #696]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	633b      	str	r3, [r7, #48]	; 0x30
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	2b04      	cmp	r3, #4
 80091c0:	f200 8088 	bhi.w	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80091c4:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ca:	bf00      	nop
 80091cc:	080091e1 	.word	0x080091e1
 80091d0:	08009209 	.word	0x08009209
 80091d4:	08009231 	.word	0x08009231
 80091d8:	080092cd 	.word	0x080092cd
 80091dc:	08009259 	.word	0x08009259

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091e0:	4ba2      	ldr	r3, [pc, #648]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091ec:	d108      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 ff64 	bl	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091fc:	f000 bc95 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009204:	f000 bc91 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009208:	4b98      	ldr	r3, [pc, #608]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009214:	d108      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0318 	add.w	r3, r7, #24
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fca8 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009224:	f000 bc81 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800922c:	f000 bc7d 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009230:	4b8e      	ldr	r3, [pc, #568]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923c:	d108      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800923e:	f107 030c 	add.w	r3, r7, #12
 8009242:	4618      	mov	r0, r3
 8009244:	f000 fde8 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800924c:	f000 bc6d 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009254:	f000 bc69 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009258:	4b84      	ldr	r3, [pc, #528]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800925a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009260:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009262:	4b82      	ldr	r3, [pc, #520]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b04      	cmp	r3, #4
 800926c:	d10c      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800926e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009270:	2b00      	cmp	r3, #0
 8009272:	d109      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009274:	4b7d      	ldr	r3, [pc, #500]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	08db      	lsrs	r3, r3, #3
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	4a7c      	ldr	r2, [pc, #496]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009280:	fa22 f303 	lsr.w	r3, r2, r3
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009286:	e01f      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009288:	4b78      	ldr	r3, [pc, #480]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009294:	d106      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800929c:	d102      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800929e:	4b75      	ldr	r3, [pc, #468]	; (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a2:	e011      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092a4:	4b71      	ldr	r3, [pc, #452]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092b0:	d106      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092b8:	d102      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092ba:	4b6f      	ldr	r3, [pc, #444]	; (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80092bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092be:	e003      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092c4:	f000 bc31 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092c8:	f000 bc2f 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092cc:	4b6b      	ldr	r3, [pc, #428]	; (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d0:	f000 bc2b 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d8:	f000 bc27 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092e2:	f040 8095 	bne.w	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80092e6:	4b61      	ldr	r3, [pc, #388]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80092e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80092ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f6:	d04d      	beq.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092fe:	f200 8084 	bhi.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	2bc0      	cmp	r3, #192	; 0xc0
 8009306:	d07d      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	2bc0      	cmp	r3, #192	; 0xc0
 800930c:	d87d      	bhi.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	2b80      	cmp	r3, #128	; 0x80
 8009312:	d02d      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	2b80      	cmp	r3, #128	; 0x80
 8009318:	d877      	bhi.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	2b00      	cmp	r3, #0
 800931e:	d003      	beq.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d012      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009326:	e070      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009328:	4b50      	ldr	r3, [pc, #320]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009334:	d107      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fec0 	bl	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009344:	e3f1      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800934a:	e3ee      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800934c:	4b47      	ldr	r3, [pc, #284]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009358:	d107      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935a:	f107 0318 	add.w	r3, r7, #24
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fc06 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009368:	e3df      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800936e:	e3dc      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009370:	4b3e      	ldr	r3, [pc, #248]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800937c:	d107      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800937e:	f107 030c 	add.w	r3, r7, #12
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fd48 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800938c:	e3cd      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009392:	e3ca      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009394:	4b35      	ldr	r3, [pc, #212]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800939c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800939e:	4b33      	ldr	r3, [pc, #204]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0304 	and.w	r3, r3, #4
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d10c      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80093aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d109      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093b0:	4b2e      	ldr	r3, [pc, #184]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	08db      	lsrs	r3, r3, #3
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	4a2d      	ldr	r2, [pc, #180]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
 80093c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c2:	e01e      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093c4:	4b29      	ldr	r3, [pc, #164]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d0:	d106      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093d8:	d102      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80093da:	4b26      	ldr	r3, [pc, #152]	; (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093de:	e010      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093e0:	4b22      	ldr	r3, [pc, #136]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093ec:	d106      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80093ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093f4:	d102      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093f6:	4b20      	ldr	r3, [pc, #128]	; (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093fa:	e002      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009400:	e393      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009402:	e392      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009404:	4b1d      	ldr	r3, [pc, #116]	; (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009408:	e38f      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800940e:	e38c      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009416:	f040 80a7 	bne.w	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800941a:	4b14      	ldr	r3, [pc, #80]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800941c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009422:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800942a:	d05f      	beq.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009432:	f200 8096 	bhi.w	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800943c:	f000 808e 	beq.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009446:	f200 808c 	bhi.w	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009450:	d03a      	beq.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009458:	f200 8083 	bhi.w	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00e      	beq.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009468:	d01c      	beq.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800946a:	e07a      	b.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800946c:	58024400 	.word	0x58024400
 8009470:	03d09000 	.word	0x03d09000
 8009474:	003d0900 	.word	0x003d0900
 8009478:	00989680 	.word	0x00989680
 800947c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009480:	4baa      	ldr	r3, [pc, #680]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800948c:	d107      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800948e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fe14 	bl	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800949c:	e345      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094a2:	e342      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a4:	4ba1      	ldr	r3, [pc, #644]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b0:	d107      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b2:	f107 0318 	add.w	r3, r7, #24
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fb5a 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094c0:	e333      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094c6:	e330      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094c8:	4b98      	ldr	r3, [pc, #608]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d4:	d107      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d6:	f107 030c 	add.w	r3, r7, #12
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fc9c 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094e4:	e321      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ea:	e31e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094ec:	4b8f      	ldr	r3, [pc, #572]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094f6:	4b8d      	ldr	r3, [pc, #564]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d10c      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009508:	4b88      	ldr	r3, [pc, #544]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	08db      	lsrs	r3, r3, #3
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	4a87      	ldr	r2, [pc, #540]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009514:	fa22 f303 	lsr.w	r3, r2, r3
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800951a:	e01e      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800951c:	4b83      	ldr	r3, [pc, #524]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009528:	d106      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800952a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009530:	d102      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009532:	4b80      	ldr	r3, [pc, #512]	; (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009536:	e010      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009538:	4b7c      	ldr	r3, [pc, #496]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009544:	d106      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800954c:	d102      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800954e:	4b7a      	ldr	r3, [pc, #488]	; (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009552:	e002      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009558:	e2e7      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800955a:	e2e6      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800955c:	4b77      	ldr	r3, [pc, #476]	; (800973c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009560:	e2e3      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009566:	e2e0      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800956e:	f040 809c 	bne.w	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009572:	4b6e      	ldr	r3, [pc, #440]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009576:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800957a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009582:	d054      	beq.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800958a:	f200 808b 	bhi.w	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009594:	f000 8083 	beq.w	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800959e:	f200 8081 	bhi.w	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095a8:	d02f      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095b0:	d878      	bhi.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095be:	d012      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80095c0:	e070      	b.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095c2:	4b5a      	ldr	r3, [pc, #360]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ce:	d107      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fd73 	bl	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095de:	e2a4      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e4:	e2a1      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095e6:	4b51      	ldr	r3, [pc, #324]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095f2:	d107      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095f4:	f107 0318 	add.w	r3, r7, #24
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fab9 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009602:	e292      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009608:	e28f      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800960a:	4b48      	ldr	r3, [pc, #288]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009616:	d107      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fbfb 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009626:	e280      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800962c:	e27d      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800962e:	4b3f      	ldr	r3, [pc, #252]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009636:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009638:	4b3c      	ldr	r3, [pc, #240]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b04      	cmp	r3, #4
 8009642:	d10c      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009646:	2b00      	cmp	r3, #0
 8009648:	d109      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800964a:	4b38      	ldr	r3, [pc, #224]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	08db      	lsrs	r3, r3, #3
 8009650:	f003 0303 	and.w	r3, r3, #3
 8009654:	4a36      	ldr	r2, [pc, #216]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009656:	fa22 f303 	lsr.w	r3, r2, r3
 800965a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800965c:	e01e      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800965e:	4b33      	ldr	r3, [pc, #204]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800966a:	d106      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009672:	d102      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009674:	4b2f      	ldr	r3, [pc, #188]	; (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009678:	e010      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800967a:	4b2c      	ldr	r3, [pc, #176]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009686:	d106      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800968e:	d102      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009690:	4b29      	ldr	r3, [pc, #164]	; (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009694:	e002      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800969a:	e246      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800969c:	e245      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800969e:	4b27      	ldr	r3, [pc, #156]	; (800973c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a2:	e242      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a8:	e23f      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b0:	f040 80a8 	bne.w	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80096b4:	4b1d      	ldr	r3, [pc, #116]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80096bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c4:	d060      	beq.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096cc:	f200 8097 	bhi.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096d6:	f000 808f 	beq.w	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096e0:	f200 808d 	bhi.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ea:	d03b      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096f2:	f200 8084 	bhi.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009702:	d01d      	beq.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009704:	e07b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800970e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009712:	d107      	bne.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fcd1 	bl	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009722:	e202      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009728:	e1ff      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800972a:	bf00      	nop
 800972c:	58024400 	.word	0x58024400
 8009730:	03d09000 	.word	0x03d09000
 8009734:	003d0900 	.word	0x003d0900
 8009738:	00989680 	.word	0x00989680
 800973c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009740:	4ba3      	ldr	r3, [pc, #652]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800974c:	d107      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974e:	f107 0318 	add.w	r3, r7, #24
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fa0c 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800975c:	e1e5      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009762:	e1e2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009764:	4b9a      	ldr	r3, [pc, #616]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800976c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009770:	d107      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009772:	f107 030c 	add.w	r3, r7, #12
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fb4e 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009780:	e1d3      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009786:	e1d0      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009788:	4b91      	ldr	r3, [pc, #580]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800978a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009790:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009792:	4b8f      	ldr	r3, [pc, #572]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b04      	cmp	r3, #4
 800979c:	d10c      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800979e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d109      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097a4:	4b8a      	ldr	r3, [pc, #552]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	08db      	lsrs	r3, r3, #3
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	4a89      	ldr	r2, [pc, #548]	; (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80097b0:	fa22 f303 	lsr.w	r3, r2, r3
 80097b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b6:	e01e      	b.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097b8:	4b85      	ldr	r3, [pc, #532]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c4:	d106      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097cc:	d102      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80097ce:	4b82      	ldr	r3, [pc, #520]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80097d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d2:	e010      	b.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097d4:	4b7e      	ldr	r3, [pc, #504]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097e0:	d106      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80097e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e8:	d102      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80097ea:	4b7c      	ldr	r3, [pc, #496]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ee:	e002      	b.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80097f4:	e199      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097f6:	e198      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80097f8:	4b79      	ldr	r3, [pc, #484]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80097fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097fc:	e195      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80097fe:	2300      	movs	r3, #0
 8009800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009802:	e192      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800980a:	d173      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800980c:	4b70      	ldr	r3, [pc, #448]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800980e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009814:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800981c:	d02f      	beq.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009824:	d863      	bhi.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	2b00      	cmp	r3, #0
 800982a:	d004      	beq.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009832:	d012      	beq.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009834:	e05b      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009836:	4b66      	ldr	r3, [pc, #408]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800983e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009842:	d107      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009844:	f107 0318 	add.w	r3, r7, #24
 8009848:	4618      	mov	r0, r3
 800984a:	f000 f991 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009852:	e16a      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009858:	e167      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800985a:	4b5d      	ldr	r3, [pc, #372]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009866:	d107      	bne.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009868:	f107 030c 	add.w	r3, r7, #12
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fad3 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009876:	e158      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800987c:	e155      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800987e:	4b54      	ldr	r3, [pc, #336]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009882:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009886:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009888:	4b51      	ldr	r3, [pc, #324]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b04      	cmp	r3, #4
 8009892:	d10c      	bne.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009896:	2b00      	cmp	r3, #0
 8009898:	d109      	bne.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800989a:	4b4d      	ldr	r3, [pc, #308]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	08db      	lsrs	r3, r3, #3
 80098a0:	f003 0303 	and.w	r3, r3, #3
 80098a4:	4a4b      	ldr	r2, [pc, #300]	; (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80098a6:	fa22 f303 	lsr.w	r3, r2, r3
 80098aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ac:	e01e      	b.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098ae:	4b48      	ldr	r3, [pc, #288]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ba:	d106      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80098bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c2:	d102      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80098c4:	4b44      	ldr	r3, [pc, #272]	; (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098c8:	e010      	b.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098ca:	4b41      	ldr	r3, [pc, #260]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098d6:	d106      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80098d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098de:	d102      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80098e0:	4b3e      	ldr	r3, [pc, #248]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e4:	e002      	b.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80098ea:	e11e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80098ec:	e11d      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098f2:	e11a      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098fa:	d133      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80098fc:	4b34      	ldr	r3, [pc, #208]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009904:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009912:	d012      	beq.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009914:	e023      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009916:	4b2e      	ldr	r3, [pc, #184]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800991e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009922:	d107      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fbc9 	bl	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009932:	e0fa      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009938:	e0f7      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800993a:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009946:	d107      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009948:	f107 0318 	add.w	r3, r7, #24
 800994c:	4618      	mov	r0, r3
 800994e:	f000 f90f 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009956:	e0e8      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800995c:	e0e5      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009962:	e0e2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800996a:	f040 808f 	bne.w	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800996e:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009972:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009976:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800997e:	d075      	beq.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009986:	d87e      	bhi.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800998e:	d060      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009996:	d876      	bhi.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800999e:	d045      	beq.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099a6:	d86e      	bhi.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ae:	d02b      	beq.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099b6:	d866      	bhi.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099c4:	d00e      	beq.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80099c6:	e05e      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80099c8:	f000 f8bc 	bl	8009b44 <HAL_RCCEx_GetD3PCLK1Freq>
 80099cc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80099ce:	e0ac      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80099d0:	58024400 	.word	0x58024400
 80099d4:	03d09000 	.word	0x03d09000
 80099d8:	003d0900 	.word	0x003d0900
 80099dc:	00989680 	.word	0x00989680
 80099e0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099e4:	4b53      	ldr	r3, [pc, #332]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099f0:	d107      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099f2:	f107 0318 	add.w	r3, r7, #24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 f8ba 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a00:	e093      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a06:	e090      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a08:	4b4a      	ldr	r3, [pc, #296]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a14:	d107      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a16:	f107 030c 	add.w	r3, r7, #12
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f9fc 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a24:	e081      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a2a:	e07e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a2c:	4b41      	ldr	r3, [pc, #260]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0304 	and.w	r3, r3, #4
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d109      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a38:	4b3e      	ldr	r3, [pc, #248]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	08db      	lsrs	r3, r3, #3
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	4a3d      	ldr	r2, [pc, #244]	; (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a4a:	e06e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a50:	e06b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a52:	4b38      	ldr	r3, [pc, #224]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a5e:	d102      	bne.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009a60:	4b36      	ldr	r3, [pc, #216]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a64:	e061      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a6a:	e05e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a6c:	4b31      	ldr	r3, [pc, #196]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a78:	d102      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009a7a:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a7e:	e054      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a84:	e051      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a8a:	e04e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a92:	d148      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009a94:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a9c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa4:	d02a      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aac:	d838      	bhi.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d004      	beq.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aba:	d00d      	beq.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009abc:	e030      	b.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009abe:	4b1d      	ldr	r3, [pc, #116]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aca:	d102      	bne.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009acc:	4b1c      	ldr	r3, [pc, #112]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009ace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ad0:	e02b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ad6:	e028      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ad8:	4b16      	ldr	r3, [pc, #88]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ae4:	d107      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fae8 	bl	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009af4:	e019      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009afa:	e016      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b08:	d107      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b0a:	f107 0318 	add.w	r3, r7, #24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f82e 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b18:	e007      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b1e:	e004      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b24:	e001      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3740      	adds	r7, #64	; 0x40
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	58024400 	.word	0x58024400
 8009b38:	03d09000 	.word	0x03d09000
 8009b3c:	003d0900 	.word	0x003d0900
 8009b40:	00989680 	.word	0x00989680

08009b44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b48:	f7fe fbba 	bl	80082c0 <HAL_RCC_GetHCLKFreq>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	091b      	lsrs	r3, r3, #4
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	4904      	ldr	r1, [pc, #16]	; (8009b6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b5a:	5ccb      	ldrb	r3, [r1, r3]
 8009b5c:	f003 031f 	and.w	r3, r3, #31
 8009b60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	58024400 	.word	0x58024400
 8009b6c:	080116e4 	.word	0x080116e4

08009b70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b089      	sub	sp, #36	; 0x24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b78:	4ba1      	ldr	r3, [pc, #644]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009b82:	4b9f      	ldr	r3, [pc, #636]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	0b1b      	lsrs	r3, r3, #12
 8009b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b8e:	4b9c      	ldr	r3, [pc, #624]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	091b      	lsrs	r3, r3, #4
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b9a:	4b99      	ldr	r3, [pc, #612]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9e:	08db      	lsrs	r3, r3, #3
 8009ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	fb02 f303 	mul.w	r3, r2, r3
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 8111 	beq.w	8009de0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	f000 8083 	beq.w	8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	f200 80a1 	bhi.w	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d056      	beq.n	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009bda:	e099      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bdc:	4b88      	ldr	r3, [pc, #544]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02d      	beq.n	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009be8:	4b85      	ldr	r3, [pc, #532]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	08db      	lsrs	r3, r3, #3
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	4a84      	ldr	r2, [pc, #528]	; (8009e04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	ee07 3a90 	vmov	s15, r3
 8009c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c12:	4b7b      	ldr	r3, [pc, #492]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c42:	e087      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c56:	4b6a      	ldr	r3, [pc, #424]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c86:	e065      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9a:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cca:	e043      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cde:	4b48      	ldr	r3, [pc, #288]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d0e:	e021      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009d54:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d58:	0a5b      	lsrs	r3, r3, #9
 8009d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7a:	ee17 2a90 	vmov	r2, s15
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009d82:	4b1f      	ldr	r3, [pc, #124]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d86:	0c1b      	lsrs	r3, r3, #16
 8009d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8c:	ee07 3a90 	vmov	s15, r3
 8009d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da8:	ee17 2a90 	vmov	r2, s15
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009db0:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	0e1b      	lsrs	r3, r3, #24
 8009db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dd6:	ee17 2a90 	vmov	r2, s15
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009dde:	e008      	b.n	8009df2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
}
 8009df2:	bf00      	nop
 8009df4:	3724      	adds	r7, #36	; 0x24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	58024400 	.word	0x58024400
 8009e04:	03d09000 	.word	0x03d09000
 8009e08:	46000000 	.word	0x46000000
 8009e0c:	4c742400 	.word	0x4c742400
 8009e10:	4a742400 	.word	0x4a742400
 8009e14:	4b189680 	.word	0x4b189680

08009e18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b089      	sub	sp, #36	; 0x24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e20:	4ba1      	ldr	r3, [pc, #644]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009e2a:	4b9f      	ldr	r3, [pc, #636]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	0d1b      	lsrs	r3, r3, #20
 8009e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e36:	4b9c      	ldr	r3, [pc, #624]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	0a1b      	lsrs	r3, r3, #8
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009e42:	4b99      	ldr	r3, [pc, #612]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e46:	08db      	lsrs	r3, r3, #3
 8009e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8111 	beq.w	800a088 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	f000 8083 	beq.w	8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	f200 80a1 	bhi.w	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d056      	beq.n	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e82:	e099      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e84:	4b88      	ldr	r3, [pc, #544]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0320 	and.w	r3, r3, #32
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d02d      	beq.n	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e90:	4b85      	ldr	r3, [pc, #532]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	08db      	lsrs	r3, r3, #3
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	4a84      	ldr	r2, [pc, #528]	; (800a0ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	ee07 3a90 	vmov	s15, r3
 8009ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b7b      	ldr	r3, [pc, #492]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ece:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009eea:	e087      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b6a      	ldr	r3, [pc, #424]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f2e:	e065      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f42:	4b59      	ldr	r3, [pc, #356]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f72:	e043      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f86:	4b48      	ldr	r3, [pc, #288]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fb6:	e021      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fca:	4b37      	ldr	r3, [pc, #220]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ffa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ffc:	4b2a      	ldr	r3, [pc, #168]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	0a5b      	lsrs	r3, r3, #9
 800a002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a016:	edd7 6a07 	vldr	s13, [r7, #28]
 800a01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a022:	ee17 2a90 	vmov	r2, s15
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a02a:	4b1f      	ldr	r3, [pc, #124]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	0c1b      	lsrs	r3, r3, #16
 800a030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a040:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a044:	edd7 6a07 	vldr	s13, [r7, #28]
 800a048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a050:	ee17 2a90 	vmov	r2, s15
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a058:	4b13      	ldr	r3, [pc, #76]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	0e1b      	lsrs	r3, r3, #24
 800a05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a06e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a072:	edd7 6a07 	vldr	s13, [r7, #28]
 800a076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a07a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a07e:	ee17 2a90 	vmov	r2, s15
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a086:	e008      	b.n	800a09a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	609a      	str	r2, [r3, #8]
}
 800a09a:	bf00      	nop
 800a09c:	3724      	adds	r7, #36	; 0x24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	58024400 	.word	0x58024400
 800a0ac:	03d09000 	.word	0x03d09000
 800a0b0:	46000000 	.word	0x46000000
 800a0b4:	4c742400 	.word	0x4c742400
 800a0b8:	4a742400 	.word	0x4a742400
 800a0bc:	4b189680 	.word	0x4b189680

0800a0c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b089      	sub	sp, #36	; 0x24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0c8:	4ba0      	ldr	r3, [pc, #640]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a0d2:	4b9e      	ldr	r3, [pc, #632]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d6:	091b      	lsrs	r3, r3, #4
 800a0d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a0de:	4b9b      	ldr	r3, [pc, #620]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a0e8:	4b98      	ldr	r3, [pc, #608]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ec:	08db      	lsrs	r3, r3, #3
 800a0ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	fb02 f303 	mul.w	r3, r2, r3
 800a0f8:	ee07 3a90 	vmov	s15, r3
 800a0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a100:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 8111 	beq.w	800a32e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	f000 8083 	beq.w	800a21a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	2b02      	cmp	r3, #2
 800a118:	f200 80a1 	bhi.w	800a25e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d056      	beq.n	800a1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a128:	e099      	b.n	800a25e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a12a:	4b88      	ldr	r3, [pc, #544]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0320 	and.w	r3, r3, #32
 800a132:	2b00      	cmp	r3, #0
 800a134:	d02d      	beq.n	800a192 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a136:	4b85      	ldr	r3, [pc, #532]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	08db      	lsrs	r3, r3, #3
 800a13c:	f003 0303 	and.w	r3, r3, #3
 800a140:	4a83      	ldr	r2, [pc, #524]	; (800a350 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a142:	fa22 f303 	lsr.w	r3, r2, r3
 800a146:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	ee07 3a90 	vmov	s15, r3
 800a158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a160:	4b7a      	ldr	r3, [pc, #488]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a170:	ed97 6a03 	vldr	s12, [r7, #12]
 800a174:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a190:	e087      	b.n	800a2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	ee07 3a90 	vmov	s15, r3
 800a198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a358 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a4:	4b69      	ldr	r3, [pc, #420]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1d4:	e065      	b.n	800a2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	ee07 3a90 	vmov	s15, r3
 800a1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a35c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a1e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e8:	4b58      	ldr	r3, [pc, #352]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a214:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a218:	e043      	b.n	800a2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	ee07 3a90 	vmov	s15, r3
 800a220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a224:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22c:	4b47      	ldr	r3, [pc, #284]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a23c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a240:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a25c:	e021      	b.n	800a2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	ee07 3a90 	vmov	s15, r3
 800a264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a268:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a358 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a26c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a270:	4b36      	ldr	r3, [pc, #216]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a280:	ed97 6a03 	vldr	s12, [r7, #12]
 800a284:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a28c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a2a2:	4b2a      	ldr	r3, [pc, #168]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a6:	0a5b      	lsrs	r3, r3, #9
 800a2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ac:	ee07 3a90 	vmov	s15, r3
 800a2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c8:	ee17 2a90 	vmov	r2, s15
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a2d0:	4b1e      	ldr	r3, [pc, #120]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d4:	0c1b      	lsrs	r3, r3, #16
 800a2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2f6:	ee17 2a90 	vmov	r2, s15
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a2fe:	4b13      	ldr	r3, [pc, #76]	; (800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	0e1b      	lsrs	r3, r3, #24
 800a304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a308:	ee07 3a90 	vmov	s15, r3
 800a30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a314:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a318:	edd7 6a07 	vldr	s13, [r7, #28]
 800a31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a324:	ee17 2a90 	vmov	r2, s15
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a32c:	e008      	b.n	800a340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	609a      	str	r2, [r3, #8]
}
 800a340:	bf00      	nop
 800a342:	3724      	adds	r7, #36	; 0x24
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	58024400 	.word	0x58024400
 800a350:	03d09000 	.word	0x03d09000
 800a354:	46000000 	.word	0x46000000
 800a358:	4c742400 	.word	0x4c742400
 800a35c:	4a742400 	.word	0x4a742400
 800a360:	4b189680 	.word	0x4b189680

0800a364 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a372:	4b53      	ldr	r3, [pc, #332]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d101      	bne.n	800a382 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e099      	b.n	800a4b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a382:	4b4f      	ldr	r3, [pc, #316]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a4e      	ldr	r2, [pc, #312]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a38c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a38e:	f7f7 fd5f 	bl	8001e50 <HAL_GetTick>
 800a392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a394:	e008      	b.n	800a3a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a396:	f7f7 fd5b 	bl	8001e50 <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d901      	bls.n	800a3a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e086      	b.n	800a4b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3a8:	4b45      	ldr	r3, [pc, #276]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f0      	bne.n	800a396 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3b4:	4b42      	ldr	r3, [pc, #264]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	031b      	lsls	r3, r3, #12
 800a3c2:	493f      	ldr	r1, [pc, #252]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	025b      	lsls	r3, r3, #9
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	041b      	lsls	r3, r3, #16
 800a3e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	061b      	lsls	r3, r3, #24
 800a3f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3f8:	4931      	ldr	r1, [pc, #196]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a3fe:	4b30      	ldr	r3, [pc, #192]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	492d      	ldr	r1, [pc, #180]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a410:	4b2b      	ldr	r3, [pc, #172]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	f023 0220 	bic.w	r2, r3, #32
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	4928      	ldr	r1, [pc, #160]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a422:	4b27      	ldr	r3, [pc, #156]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	4a26      	ldr	r2, [pc, #152]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a428:	f023 0310 	bic.w	r3, r3, #16
 800a42c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a42e:	4b24      	ldr	r3, [pc, #144]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a432:	4b24      	ldr	r3, [pc, #144]	; (800a4c4 <RCCEx_PLL2_Config+0x160>)
 800a434:	4013      	ands	r3, r2
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	69d2      	ldr	r2, [r2, #28]
 800a43a:	00d2      	lsls	r2, r2, #3
 800a43c:	4920      	ldr	r1, [pc, #128]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a442:	4b1f      	ldr	r3, [pc, #124]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	4a1e      	ldr	r2, [pc, #120]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a448:	f043 0310 	orr.w	r3, r3, #16
 800a44c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d106      	bne.n	800a462 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a454:	4b1a      	ldr	r3, [pc, #104]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	4a19      	ldr	r2, [pc, #100]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a45a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a45e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a460:	e00f      	b.n	800a482 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d106      	bne.n	800a476 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a468:	4b15      	ldr	r3, [pc, #84]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46c:	4a14      	ldr	r2, [pc, #80]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a46e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a472:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a474:	e005      	b.n	800a482 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a476:	4b12      	ldr	r3, [pc, #72]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	4a11      	ldr	r2, [pc, #68]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a47c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a480:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a482:	4b0f      	ldr	r3, [pc, #60]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a0e      	ldr	r2, [pc, #56]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a48c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a48e:	f7f7 fcdf 	bl	8001e50 <HAL_GetTick>
 800a492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a494:	e008      	b.n	800a4a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a496:	f7f7 fcdb 	bl	8001e50 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e006      	b.n	800a4b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4a8:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <RCCEx_PLL2_Config+0x15c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0f0      	beq.n	800a496 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	58024400 	.word	0x58024400
 800a4c4:	ffff0007 	.word	0xffff0007

0800a4c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4d6:	4b53      	ldr	r3, [pc, #332]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d101      	bne.n	800a4e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e099      	b.n	800a61a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a4e6:	4b4f      	ldr	r3, [pc, #316]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a4e      	ldr	r2, [pc, #312]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a4ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4f2:	f7f7 fcad 	bl	8001e50 <HAL_GetTick>
 800a4f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4f8:	e008      	b.n	800a50c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4fa:	f7f7 fca9 	bl	8001e50 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d901      	bls.n	800a50c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e086      	b.n	800a61a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a50c:	4b45      	ldr	r3, [pc, #276]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1f0      	bne.n	800a4fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a518:	4b42      	ldr	r3, [pc, #264]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	051b      	lsls	r3, r3, #20
 800a526:	493f      	ldr	r1, [pc, #252]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	628b      	str	r3, [r1, #40]	; 0x28
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	3b01      	subs	r3, #1
 800a532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	025b      	lsls	r3, r3, #9
 800a53e:	b29b      	uxth	r3, r3
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	3b01      	subs	r3, #1
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	3b01      	subs	r3, #1
 800a556:	061b      	lsls	r3, r3, #24
 800a558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a55c:	4931      	ldr	r1, [pc, #196]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a562:	4b30      	ldr	r3, [pc, #192]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a566:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	492d      	ldr	r1, [pc, #180]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a570:	4313      	orrs	r3, r2
 800a572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a574:	4b2b      	ldr	r3, [pc, #172]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a578:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	4928      	ldr	r1, [pc, #160]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a582:	4313      	orrs	r3, r2
 800a584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a586:	4b27      	ldr	r3, [pc, #156]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58a:	4a26      	ldr	r2, [pc, #152]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a58c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a592:	4b24      	ldr	r3, [pc, #144]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a596:	4b24      	ldr	r3, [pc, #144]	; (800a628 <RCCEx_PLL3_Config+0x160>)
 800a598:	4013      	ands	r3, r2
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	69d2      	ldr	r2, [r2, #28]
 800a59e:	00d2      	lsls	r2, r2, #3
 800a5a0:	4920      	ldr	r1, [pc, #128]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5a6:	4b1f      	ldr	r3, [pc, #124]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	4a1e      	ldr	r2, [pc, #120]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5b8:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	4a19      	ldr	r2, [pc, #100]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a5c4:	e00f      	b.n	800a5e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d106      	bne.n	800a5da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a5cc:	4b15      	ldr	r3, [pc, #84]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	4a14      	ldr	r2, [pc, #80]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a5d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a5d8:	e005      	b.n	800a5e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a5da:	4b12      	ldr	r3, [pc, #72]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5de:	4a11      	ldr	r2, [pc, #68]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a0e      	ldr	r2, [pc, #56]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a5ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5f2:	f7f7 fc2d 	bl	8001e50 <HAL_GetTick>
 800a5f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5f8:	e008      	b.n	800a60c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a5fa:	f7f7 fc29 	bl	8001e50 <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	d901      	bls.n	800a60c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e006      	b.n	800a61a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <RCCEx_PLL3_Config+0x15c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0f0      	beq.n	800a5fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	58024400 	.word	0x58024400
 800a628:	ffff0007 	.word	0xffff0007

0800a62c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e0f1      	b.n	800a822 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a78      	ldr	r2, [pc, #480]	; (800a82c <HAL_SPI_Init+0x200>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00f      	beq.n	800a66e <HAL_SPI_Init+0x42>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a77      	ldr	r2, [pc, #476]	; (800a830 <HAL_SPI_Init+0x204>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d00a      	beq.n	800a66e <HAL_SPI_Init+0x42>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a75      	ldr	r2, [pc, #468]	; (800a834 <HAL_SPI_Init+0x208>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d005      	beq.n	800a66e <HAL_SPI_Init+0x42>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	2b0f      	cmp	r3, #15
 800a668:	d901      	bls.n	800a66e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e0d9      	b.n	800a822 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 ff66 	bl	800b540 <SPI_GetPacketSize>
 800a674:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a6c      	ldr	r2, [pc, #432]	; (800a82c <HAL_SPI_Init+0x200>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d00c      	beq.n	800a69a <HAL_SPI_Init+0x6e>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a6a      	ldr	r2, [pc, #424]	; (800a830 <HAL_SPI_Init+0x204>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d007      	beq.n	800a69a <HAL_SPI_Init+0x6e>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a69      	ldr	r2, [pc, #420]	; (800a834 <HAL_SPI_Init+0x208>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d002      	beq.n	800a69a <HAL_SPI_Init+0x6e>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b08      	cmp	r3, #8
 800a698:	d811      	bhi.n	800a6be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a69e:	4a63      	ldr	r2, [pc, #396]	; (800a82c <HAL_SPI_Init+0x200>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d009      	beq.n	800a6b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a61      	ldr	r2, [pc, #388]	; (800a830 <HAL_SPI_Init+0x204>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d004      	beq.n	800a6b8 <HAL_SPI_Init+0x8c>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a60      	ldr	r2, [pc, #384]	; (800a834 <HAL_SPI_Init+0x208>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d104      	bne.n	800a6c2 <HAL_SPI_Init+0x96>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b10      	cmp	r3, #16
 800a6bc:	d901      	bls.n	800a6c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e0af      	b.n	800a822 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7f7 f8c6 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 0201 	bic.w	r2, r2, #1
 800a6f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a6fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a708:	d119      	bne.n	800a73e <HAL_SPI_Init+0x112>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a712:	d103      	bne.n	800a71c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d008      	beq.n	800a72e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10c      	bne.n	800a73e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a72c:	d107      	bne.n	800a73e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a73c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	69da      	ldr	r2, [r3, #28]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a746:	431a      	orrs	r2, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a750:	ea42 0103 	orr.w	r1, r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	430a      	orrs	r2, r1
 800a75e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76e:	431a      	orrs	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	431a      	orrs	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	431a      	orrs	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	431a      	orrs	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a792:	431a      	orrs	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	431a      	orrs	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a79e:	ea42 0103 	orr.w	r1, r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d113      	bne.n	800a7de <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0201 	bic.w	r2, r2, #1
 800a7ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00a      	beq.n	800a810 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	40013000 	.word	0x40013000
 800a830:	40003800 	.word	0x40003800
 800a834:	40003c00 	.word	0x40003c00

0800a838 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	4613      	mov	r3, r2
 800a846:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3320      	adds	r3, #32
 800a84e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <HAL_SPI_Transmit+0x2a>
 800a85e:	2302      	movs	r3, #2
 800a860:	e1d7      	b.n	800ac12 <HAL_SPI_Transmit+0x3da>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a86a:	f7f7 faf1 	bl	8001e50 <HAL_GetTick>
 800a86e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d007      	beq.n	800a88c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a87c:	2302      	movs	r3, #2
 800a87e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a888:	7efb      	ldrb	r3, [r7, #27]
 800a88a:	e1c2      	b.n	800ac12 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d002      	beq.n	800a898 <HAL_SPI_Transmit+0x60>
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d107      	bne.n	800a8a8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a8a4:	7efb      	ldrb	r3, [r7, #27]
 800a8a6:	e1b4      	b.n	800ac12 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2203      	movs	r2, #3
 800a8ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	88fa      	ldrh	r2, [r7, #6]
 800a8c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	88fa      	ldrh	r2, [r7, #6]
 800a8ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a8f8:	d107      	bne.n	800a90a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a908:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	4b96      	ldr	r3, [pc, #600]	; (800ab6c <HAL_SPI_Transmit+0x334>)
 800a912:	4013      	ands	r3, r2
 800a914:	88f9      	ldrh	r1, [r7, #6]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	6812      	ldr	r2, [r2, #0]
 800a91a:	430b      	orrs	r3, r1
 800a91c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f042 0201 	orr.w	r2, r2, #1
 800a92c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a936:	d107      	bne.n	800a948 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	2b0f      	cmp	r3, #15
 800a94e:	d947      	bls.n	800a9e0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a950:	e03f      	b.n	800a9d2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d114      	bne.n	800a98a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6812      	ldr	r2, [r2, #0]
 800a96a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	3b01      	subs	r3, #1
 800a980:	b29a      	uxth	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a988:	e023      	b.n	800a9d2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a98a:	f7f7 fa61 	bl	8001e50 <HAL_GetTick>
 800a98e:	4602      	mov	r2, r0
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d803      	bhi.n	800a9a2 <HAL_SPI_Transmit+0x16a>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a0:	d102      	bne.n	800a9a8 <HAL_SPI_Transmit+0x170>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d114      	bne.n	800a9d2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 fcfb 	bl	800b3a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e11f      	b.n	800ac12 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1b9      	bne.n	800a952 <HAL_SPI_Transmit+0x11a>
 800a9de:	e0f2      	b.n	800abc6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	2b07      	cmp	r3, #7
 800a9e6:	f240 80e7 	bls.w	800abb8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a9ea:	e05d      	b.n	800aaa8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d132      	bne.n	800aa60 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d918      	bls.n	800aa38 <HAL_SPI_Transmit+0x200>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d014      	beq.n	800aa38 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6812      	ldr	r2, [r2, #0]
 800aa18:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa1e:	1d1a      	adds	r2, r3, #4
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	3b02      	subs	r3, #2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa36:	e037      	b.n	800aaa8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3c:	881a      	ldrh	r2, [r3, #0]
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa46:	1c9a      	adds	r2, r3, #2
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	3b01      	subs	r3, #1
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa5e:	e023      	b.n	800aaa8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa60:	f7f7 f9f6 	bl	8001e50 <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d803      	bhi.n	800aa78 <HAL_SPI_Transmit+0x240>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa76:	d102      	bne.n	800aa7e <HAL_SPI_Transmit+0x246>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d114      	bne.n	800aaa8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 fc90 	bl	800b3a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e0b4      	b.n	800ac12 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d19b      	bne.n	800a9ec <HAL_SPI_Transmit+0x1b4>
 800aab4:	e087      	b.n	800abc6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d155      	bne.n	800ab70 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d918      	bls.n	800ab02 <HAL_SPI_Transmit+0x2ca>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad4:	2b40      	cmp	r3, #64	; 0x40
 800aad6:	d914      	bls.n	800ab02 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6812      	ldr	r2, [r2, #0]
 800aae2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aae8:	1d1a      	adds	r2, r3, #4
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	3b04      	subs	r3, #4
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab00:	e05a      	b.n	800abb8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d917      	bls.n	800ab3e <HAL_SPI_Transmit+0x306>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d013      	beq.n	800ab3e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1a:	881a      	ldrh	r2, [r3, #0]
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	1c9a      	adds	r2, r3, #2
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	3b02      	subs	r3, #2
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab3c:	e03c      	b.n	800abb8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3320      	adds	r3, #32
 800ab48:	7812      	ldrb	r2, [r2, #0]
 800ab4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab68:	e026      	b.n	800abb8 <HAL_SPI_Transmit+0x380>
 800ab6a:	bf00      	nop
 800ab6c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab70:	f7f7 f96e 	bl	8001e50 <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d803      	bhi.n	800ab88 <HAL_SPI_Transmit+0x350>
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab86:	d102      	bne.n	800ab8e <HAL_SPI_Transmit+0x356>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d114      	bne.n	800abb8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f000 fc08 	bl	800b3a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aba2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e02c      	b.n	800ac12 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f47f af78 	bne.w	800aab6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2200      	movs	r2, #0
 800abce:	2108      	movs	r1, #8
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 fc87 	bl	800b4e4 <SPI_WaitOnFlagUntilTimeout>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d007      	beq.n	800abec <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abe2:	f043 0220 	orr.w	r2, r3, #32
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f000 fbd9 	bl	800b3a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e000      	b.n	800ac12 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ac10:	7efb      	ldrb	r3, [r7, #27]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop

0800ac1c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	; 0x28
 800ac20:	af02      	add	r7, sp, #8
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3330      	adds	r3, #48	; 0x30
 800ac36:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac40:	d112      	bne.n	800ac68 <HAL_SPI_Receive+0x4c>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10e      	bne.n	800ac68 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2204      	movs	r2, #4
 800ac4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac52:	88fa      	ldrh	r2, [r7, #6]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	68b9      	ldr	r1, [r7, #8]
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 f978 	bl	800af54 <HAL_SPI_TransmitReceive>
 800ac64:	4603      	mov	r3, r0
 800ac66:	e16f      	b.n	800af48 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d101      	bne.n	800ac76 <HAL_SPI_Receive+0x5a>
 800ac72:	2302      	movs	r3, #2
 800ac74:	e168      	b.n	800af48 <HAL_SPI_Receive+0x32c>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac7e:	f7f7 f8e7 	bl	8001e50 <HAL_GetTick>
 800ac82:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d007      	beq.n	800aca0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ac90:	2302      	movs	r3, #2
 800ac92:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ac9c:	7ffb      	ldrb	r3, [r7, #31]
 800ac9e:	e153      	b.n	800af48 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <HAL_SPI_Receive+0x90>
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d107      	bne.n	800acbc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800acb8:	7ffb      	ldrb	r3, [r7, #31]
 800acba:	e145      	b.n	800af48 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2204      	movs	r2, #4
 800acc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	88fa      	ldrh	r2, [r7, #6]
 800acd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	88fa      	ldrh	r2, [r7, #6]
 800acde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ad0c:	d107      	bne.n	800ad1e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685a      	ldr	r2, [r3, #4]
 800ad24:	4b8a      	ldr	r3, [pc, #552]	; (800af50 <HAL_SPI_Receive+0x334>)
 800ad26:	4013      	ands	r3, r2
 800ad28:	88f9      	ldrh	r1, [r7, #6]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	6812      	ldr	r2, [r2, #0]
 800ad2e:	430b      	orrs	r3, r1
 800ad30:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f042 0201 	orr.w	r2, r2, #1
 800ad40:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad4a:	d107      	bne.n	800ad5c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	2b0f      	cmp	r3, #15
 800ad62:	d948      	bls.n	800adf6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ad64:	e040      	b.n	800ade8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	695a      	ldr	r2, [r3, #20]
 800ad6c:	f248 0308 	movw	r3, #32776	; 0x8008
 800ad70:	4013      	ands	r3, r2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d014      	beq.n	800ada0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad80:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad86:	1d1a      	adds	r2, r3, #4
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad9e:	e023      	b.n	800ade8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ada0:	f7f7 f856 	bl	8001e50 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d803      	bhi.n	800adb8 <HAL_SPI_Receive+0x19c>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb6:	d102      	bne.n	800adbe <HAL_SPI_Receive+0x1a2>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d114      	bne.n	800ade8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 faf0 	bl	800b3a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800add2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e0af      	b.n	800af48 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1b8      	bne.n	800ad66 <HAL_SPI_Receive+0x14a>
 800adf4:	e095      	b.n	800af22 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	2b07      	cmp	r3, #7
 800adfc:	f240 808b 	bls.w	800af16 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ae00:	e03f      	b.n	800ae82 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d114      	bne.n	800ae3a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae14:	69ba      	ldr	r2, [r7, #24]
 800ae16:	8812      	ldrh	r2, [r2, #0]
 800ae18:	b292      	uxth	r2, r2
 800ae1a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae20:	1c9a      	adds	r2, r3, #2
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae38:	e023      	b.n	800ae82 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae3a:	f7f7 f809 	bl	8001e50 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d803      	bhi.n	800ae52 <HAL_SPI_Receive+0x236>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae50:	d102      	bne.n	800ae58 <HAL_SPI_Receive+0x23c>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d114      	bne.n	800ae82 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 faa3 	bl	800b3a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e062      	b.n	800af48 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1b9      	bne.n	800ae02 <HAL_SPI_Receive+0x1e6>
 800ae8e:	e048      	b.n	800af22 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d117      	bne.n	800aece <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeaa:	7812      	ldrb	r2, [r2, #0]
 800aeac:	b2d2      	uxtb	r2, r2
 800aeae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	3b01      	subs	r3, #1
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aecc:	e023      	b.n	800af16 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aece:	f7f6 ffbf 	bl	8001e50 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d803      	bhi.n	800aee6 <HAL_SPI_Receive+0x2ca>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d102      	bne.n	800aeec <HAL_SPI_Receive+0x2d0>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d114      	bne.n	800af16 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fa59 	bl	800b3a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e018      	b.n	800af48 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1b6      	bne.n	800ae90 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f000 fa3e 	bl	800b3a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e000      	b.n	800af48 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800af46:	7ffb      	ldrb	r3, [r7, #31]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3720      	adds	r7, #32
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	ffff0000 	.word	0xffff0000

0800af54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08e      	sub	sp, #56	; 0x38
 800af58:	af02      	add	r7, sp, #8
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3320      	adds	r3, #32
 800af6e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3330      	adds	r3, #48	; 0x30
 800af76:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d101      	bne.n	800af86 <HAL_SPI_TransmitReceive+0x32>
 800af82:	2302      	movs	r3, #2
 800af84:	e209      	b.n	800b39a <HAL_SPI_TransmitReceive+0x446>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af8e:	f7f6 ff5f 	bl	8001e50 <HAL_GetTick>
 800af92:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800af94:	887b      	ldrh	r3, [r7, #2]
 800af96:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800af98:	887b      	ldrh	r3, [r7, #2]
 800af9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afa2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800afaa:	7efb      	ldrb	r3, [r7, #27]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d014      	beq.n	800afda <HAL_SPI_TransmitReceive+0x86>
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afb6:	d106      	bne.n	800afc6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800afc0:	7efb      	ldrb	r3, [r7, #27]
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d009      	beq.n	800afda <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800afc6:	2302      	movs	r3, #2
 800afc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800afd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afd8:	e1df      	b.n	800b39a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d005      	beq.n	800afec <HAL_SPI_TransmitReceive+0x98>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <HAL_SPI_TransmitReceive+0x98>
 800afe6:	887b      	ldrh	r3, [r7, #2]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d109      	bne.n	800b000 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800affa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800affe:	e1cc      	b.n	800b39a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b04      	cmp	r3, #4
 800b00a:	d003      	beq.n	800b014 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2205      	movs	r2, #5
 800b010:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	887a      	ldrh	r2, [r7, #2]
 800b026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	887a      	ldrh	r2, [r7, #2]
 800b02e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	887a      	ldrh	r2, [r7, #2]
 800b03c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	887a      	ldrh	r2, [r7, #2]
 800b044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	4b82      	ldr	r3, [pc, #520]	; (800b264 <HAL_SPI_TransmitReceive+0x310>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	8879      	ldrh	r1, [r7, #2]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	6812      	ldr	r2, [r2, #0]
 800b064:	430b      	orrs	r3, r1
 800b066:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b080:	d107      	bne.n	800b092 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	2b0f      	cmp	r3, #15
 800b098:	d970      	bls.n	800b17c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b09a:	e068      	b.n	800b16e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d11a      	bne.n	800b0e0 <HAL_SPI_TransmitReceive+0x18c>
 800b0aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d017      	beq.n	800b0e0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c0:	1d1a      	adds	r2, r3, #4
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0de:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	695a      	ldr	r2, [r3, #20]
 800b0e6:	f248 0308 	movw	r3, #32776	; 0x8008
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d01a      	beq.n	800b126 <HAL_SPI_TransmitReceive+0x1d2>
 800b0f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d017      	beq.n	800b126 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b100:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b106:	1d1a      	adds	r2, r3, #4
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b112:	b29b      	uxth	r3, r3
 800b114:	3b01      	subs	r3, #1
 800b116:	b29a      	uxth	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b124:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b126:	f7f6 fe93 	bl	8001e50 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b132:	429a      	cmp	r2, r3
 800b134:	d803      	bhi.n	800b13e <HAL_SPI_TransmitReceive+0x1ea>
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13c:	d102      	bne.n	800b144 <HAL_SPI_TransmitReceive+0x1f0>
 800b13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b140:	2b00      	cmp	r3, #0
 800b142:	d114      	bne.n	800b16e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 f92d 	bl	800b3a4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b158:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e115      	b.n	800b39a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b16e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b170:	2b00      	cmp	r3, #0
 800b172:	d193      	bne.n	800b09c <HAL_SPI_TransmitReceive+0x148>
 800b174:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d190      	bne.n	800b09c <HAL_SPI_TransmitReceive+0x148>
 800b17a:	e0e7      	b.n	800b34c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	2b07      	cmp	r3, #7
 800b182:	f240 80dd 	bls.w	800b340 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b186:	e066      	b.n	800b256 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b02      	cmp	r3, #2
 800b194:	d119      	bne.n	800b1ca <HAL_SPI_TransmitReceive+0x276>
 800b196:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d016      	beq.n	800b1ca <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a0:	881a      	ldrh	r2, [r3, #0]
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1aa:	1c9a      	adds	r2, r3, #2
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d11a      	bne.n	800b20e <HAL_SPI_TransmitReceive+0x2ba>
 800b1d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d017      	beq.n	800b20e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1e2:	6a3a      	ldr	r2, [r7, #32]
 800b1e4:	8812      	ldrh	r2, [r2, #0]
 800b1e6:	b292      	uxth	r2, r2
 800b1e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1ee:	1c9a      	adds	r2, r3, #2
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b20c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b20e:	f7f6 fe1f 	bl	8001e50 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d803      	bhi.n	800b226 <HAL_SPI_TransmitReceive+0x2d2>
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b224:	d102      	bne.n	800b22c <HAL_SPI_TransmitReceive+0x2d8>
 800b226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d114      	bne.n	800b256 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 f8b9 	bl	800b3a4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b240:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e0a1      	b.n	800b39a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b256:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d195      	bne.n	800b188 <HAL_SPI_TransmitReceive+0x234>
 800b25c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d192      	bne.n	800b188 <HAL_SPI_TransmitReceive+0x234>
 800b262:	e073      	b.n	800b34c <HAL_SPI_TransmitReceive+0x3f8>
 800b264:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b02      	cmp	r3, #2
 800b274:	d11b      	bne.n	800b2ae <HAL_SPI_TransmitReceive+0x35a>
 800b276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d018      	beq.n	800b2ae <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3320      	adds	r3, #32
 800b286:	7812      	ldrb	r2, [r2, #0]
 800b288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	3b01      	subs	r3, #1
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d11d      	bne.n	800b2f8 <HAL_SPI_TransmitReceive+0x3a4>
 800b2bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d01a      	beq.n	800b2f8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2ce:	7812      	ldrb	r2, [r2, #0]
 800b2d0:	b2d2      	uxtb	r2, r2
 800b2d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2f8:	f7f6 fdaa 	bl	8001e50 <HAL_GetTick>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b304:	429a      	cmp	r2, r3
 800b306:	d803      	bhi.n	800b310 <HAL_SPI_TransmitReceive+0x3bc>
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30e:	d102      	bne.n	800b316 <HAL_SPI_TransmitReceive+0x3c2>
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	2b00      	cmp	r3, #0
 800b314:	d114      	bne.n	800b340 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 f844 	bl	800b3a4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b32a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e02c      	b.n	800b39a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b342:	2b00      	cmp	r3, #0
 800b344:	d190      	bne.n	800b268 <HAL_SPI_TransmitReceive+0x314>
 800b346:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d18d      	bne.n	800b268 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	2200      	movs	r2, #0
 800b354:	2108      	movs	r1, #8
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 f8c4 	bl	800b4e4 <SPI_WaitOnFlagUntilTimeout>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d007      	beq.n	800b372 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b368:	f043 0220 	orr.w	r2, r3, #32
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 f816 	bl	800b3a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e001      	b.n	800b39a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800b396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3730      	adds	r7, #48	; 0x30
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop

0800b3a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	699a      	ldr	r2, [r3, #24]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0208 	orr.w	r2, r2, #8
 800b3c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f042 0210 	orr.w	r2, r2, #16
 800b3d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0201 	bic.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6919      	ldr	r1, [r3, #16]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	4b3c      	ldr	r3, [pc, #240]	; (800b4e0 <SPI_CloseTransfer+0x13c>)
 800b3f0:	400b      	ands	r3, r1
 800b3f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	689a      	ldr	r2, [r3, #8]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b402:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	d014      	beq.n	800b43a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f003 0320 	and.w	r3, r3, #32
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00f      	beq.n	800b43a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	699a      	ldr	r2, [r3, #24]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f042 0220 	orr.w	r2, r2, #32
 800b438:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b03      	cmp	r3, #3
 800b444:	d014      	beq.n	800b470 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00f      	beq.n	800b470 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b456:	f043 0204 	orr.w	r2, r3, #4
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699a      	ldr	r2, [r3, #24]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b46e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00f      	beq.n	800b49a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b480:	f043 0201 	orr.w	r2, r3, #1
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	699a      	ldr	r2, [r3, #24]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b498:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00f      	beq.n	800b4c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4aa:	f043 0208 	orr.w	r2, r3, #8
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	699a      	ldr	r2, [r3, #24]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b4d4:	bf00      	nop
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	fffffc90 	.word	0xfffffc90

0800b4e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	603b      	str	r3, [r7, #0]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b4f4:	e010      	b.n	800b518 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4f6:	f7f6 fcab 	bl	8001e50 <HAL_GetTick>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	429a      	cmp	r2, r3
 800b504:	d803      	bhi.n	800b50e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50c:	d102      	bne.n	800b514 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e00f      	b.n	800b538 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	695a      	ldr	r2, [r3, #20]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	4013      	ands	r3, r2
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	429a      	cmp	r2, r3
 800b526:	bf0c      	ite	eq
 800b528:	2301      	moveq	r3, #1
 800b52a:	2300      	movne	r3, #0
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	461a      	mov	r2, r3
 800b530:	79fb      	ldrb	r3, [r7, #7]
 800b532:	429a      	cmp	r2, r3
 800b534:	d0df      	beq.n	800b4f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54c:	095b      	lsrs	r3, r3, #5
 800b54e:	3301      	adds	r3, #1
 800b550:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	3301      	adds	r3, #1
 800b558:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	3307      	adds	r3, #7
 800b55e:	08db      	lsrs	r3, r3, #3
 800b560:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	fb02 f303 	mul.w	r3, r2, r3
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e049      	b.n	800b61c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	d106      	bne.n	800b5a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7f6 f9c9 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f000 fa09 	bl	800b9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e049      	b.n	800b6ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f841 	bl	800b6d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3304      	adds	r3, #4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f000 f9b2 	bl	800b9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b702:	2302      	movs	r3, #2
 800b704:	e066      	b.n	800b7d4 <HAL_TIM_OC_ConfigChannel+0xec>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b14      	cmp	r3, #20
 800b712:	d857      	bhi.n	800b7c4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b714:	a201      	add	r2, pc, #4	; (adr r2, 800b71c <HAL_TIM_OC_ConfigChannel+0x34>)
 800b716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71a:	bf00      	nop
 800b71c:	0800b771 	.word	0x0800b771
 800b720:	0800b7c5 	.word	0x0800b7c5
 800b724:	0800b7c5 	.word	0x0800b7c5
 800b728:	0800b7c5 	.word	0x0800b7c5
 800b72c:	0800b77f 	.word	0x0800b77f
 800b730:	0800b7c5 	.word	0x0800b7c5
 800b734:	0800b7c5 	.word	0x0800b7c5
 800b738:	0800b7c5 	.word	0x0800b7c5
 800b73c:	0800b78d 	.word	0x0800b78d
 800b740:	0800b7c5 	.word	0x0800b7c5
 800b744:	0800b7c5 	.word	0x0800b7c5
 800b748:	0800b7c5 	.word	0x0800b7c5
 800b74c:	0800b79b 	.word	0x0800b79b
 800b750:	0800b7c5 	.word	0x0800b7c5
 800b754:	0800b7c5 	.word	0x0800b7c5
 800b758:	0800b7c5 	.word	0x0800b7c5
 800b75c:	0800b7a9 	.word	0x0800b7a9
 800b760:	0800b7c5 	.word	0x0800b7c5
 800b764:	0800b7c5 	.word	0x0800b7c5
 800b768:	0800b7c5 	.word	0x0800b7c5
 800b76c:	0800b7b7 	.word	0x0800b7b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68b9      	ldr	r1, [r7, #8]
 800b776:	4618      	mov	r0, r3
 800b778:	f000 f9c2 	bl	800bb00 <TIM_OC1_SetConfig>
      break;
 800b77c:	e025      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68b9      	ldr	r1, [r7, #8]
 800b784:	4618      	mov	r0, r3
 800b786:	f000 fa4b 	bl	800bc20 <TIM_OC2_SetConfig>
      break;
 800b78a:	e01e      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68b9      	ldr	r1, [r7, #8]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 face 	bl	800bd34 <TIM_OC3_SetConfig>
      break;
 800b798:	e017      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 fb4f 	bl	800be44 <TIM_OC4_SetConfig>
      break;
 800b7a6:	e010      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68b9      	ldr	r1, [r7, #8]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fbb2 	bl	800bf18 <TIM_OC5_SetConfig>
      break;
 800b7b4:	e009      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68b9      	ldr	r1, [r7, #8]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fc0f 	bl	800bfe0 <TIM_OC6_SetConfig>
      break;
 800b7c2:	e002      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_TIM_ConfigClockSource+0x1c>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e0dc      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	4b6a      	ldr	r3, [pc, #424]	; (800b9bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b814:	4013      	ands	r3, r2
 800b816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b81e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a64      	ldr	r2, [pc, #400]	; (800b9c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	f000 80a9 	beq.w	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b834:	4a62      	ldr	r2, [pc, #392]	; (800b9c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b836:	4293      	cmp	r3, r2
 800b838:	f200 80ae 	bhi.w	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b83c:	4a61      	ldr	r2, [pc, #388]	; (800b9c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	f000 80a1 	beq.w	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b844:	4a5f      	ldr	r2, [pc, #380]	; (800b9c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b846:	4293      	cmp	r3, r2
 800b848:	f200 80a6 	bhi.w	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b84c:	4a5e      	ldr	r2, [pc, #376]	; (800b9c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	f000 8099 	beq.w	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b854:	4a5c      	ldr	r2, [pc, #368]	; (800b9c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b856:	4293      	cmp	r3, r2
 800b858:	f200 809e 	bhi.w	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b85c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b860:	f000 8091 	beq.w	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b864:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b868:	f200 8096 	bhi.w	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b86c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b870:	f000 8089 	beq.w	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b878:	f200 808e 	bhi.w	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b87c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b880:	d03e      	beq.n	800b900 <HAL_TIM_ConfigClockSource+0x124>
 800b882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b886:	f200 8087 	bhi.w	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b88a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b88e:	f000 8086 	beq.w	800b99e <HAL_TIM_ConfigClockSource+0x1c2>
 800b892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b896:	d87f      	bhi.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b898:	2b70      	cmp	r3, #112	; 0x70
 800b89a:	d01a      	beq.n	800b8d2 <HAL_TIM_ConfigClockSource+0xf6>
 800b89c:	2b70      	cmp	r3, #112	; 0x70
 800b89e:	d87b      	bhi.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a0:	2b60      	cmp	r3, #96	; 0x60
 800b8a2:	d050      	beq.n	800b946 <HAL_TIM_ConfigClockSource+0x16a>
 800b8a4:	2b60      	cmp	r3, #96	; 0x60
 800b8a6:	d877      	bhi.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a8:	2b50      	cmp	r3, #80	; 0x50
 800b8aa:	d03c      	beq.n	800b926 <HAL_TIM_ConfigClockSource+0x14a>
 800b8ac:	2b50      	cmp	r3, #80	; 0x50
 800b8ae:	d873      	bhi.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b0:	2b40      	cmp	r3, #64	; 0x40
 800b8b2:	d058      	beq.n	800b966 <HAL_TIM_ConfigClockSource+0x18a>
 800b8b4:	2b40      	cmp	r3, #64	; 0x40
 800b8b6:	d86f      	bhi.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b8:	2b30      	cmp	r3, #48	; 0x30
 800b8ba:	d064      	beq.n	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8bc:	2b30      	cmp	r3, #48	; 0x30
 800b8be:	d86b      	bhi.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c0:	2b20      	cmp	r3, #32
 800b8c2:	d060      	beq.n	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8c4:	2b20      	cmp	r3, #32
 800b8c6:	d867      	bhi.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d05c      	beq.n	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8cc:	2b10      	cmp	r3, #16
 800b8ce:	d05a      	beq.n	800b986 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8d0:	e062      	b.n	800b998 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	6899      	ldr	r1, [r3, #8]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f000 fc61 	bl	800c1a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b8f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	609a      	str	r2, [r3, #8]
      break;
 800b8fe:	e04f      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6818      	ldr	r0, [r3, #0]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	6899      	ldr	r1, [r3, #8]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	f000 fc4a 	bl	800c1a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b922:	609a      	str	r2, [r3, #8]
      break;
 800b924:	e03c      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	6859      	ldr	r1, [r3, #4]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	461a      	mov	r2, r3
 800b934:	f000 fbba 	bl	800c0ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2150      	movs	r1, #80	; 0x50
 800b93e:	4618      	mov	r0, r3
 800b940:	f000 fc14 	bl	800c16c <TIM_ITRx_SetConfig>
      break;
 800b944:	e02c      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	6859      	ldr	r1, [r3, #4]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	461a      	mov	r2, r3
 800b954:	f000 fbd9 	bl	800c10a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2160      	movs	r1, #96	; 0x60
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fc04 	bl	800c16c <TIM_ITRx_SetConfig>
      break;
 800b964:	e01c      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	6859      	ldr	r1, [r3, #4]
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	461a      	mov	r2, r3
 800b974:	f000 fb9a 	bl	800c0ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2140      	movs	r1, #64	; 0x40
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 fbf4 	bl	800c16c <TIM_ITRx_SetConfig>
      break;
 800b984:	e00c      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f000 fbeb 	bl	800c16c <TIM_ITRx_SetConfig>
      break;
 800b996:	e003      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]
      break;
 800b99c:	e000      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b99e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	ffceff88 	.word	0xffceff88
 800b9c0:	00100040 	.word	0x00100040
 800b9c4:	00100030 	.word	0x00100030
 800b9c8:	00100020 	.word	0x00100020

0800b9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a40      	ldr	r2, [pc, #256]	; (800bae0 <TIM_Base_SetConfig+0x114>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d013      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ea:	d00f      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a3d      	ldr	r2, [pc, #244]	; (800bae4 <TIM_Base_SetConfig+0x118>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d00b      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a3c      	ldr	r2, [pc, #240]	; (800bae8 <TIM_Base_SetConfig+0x11c>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d007      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a3b      	ldr	r2, [pc, #236]	; (800baec <TIM_Base_SetConfig+0x120>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d003      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a3a      	ldr	r2, [pc, #232]	; (800baf0 <TIM_Base_SetConfig+0x124>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d108      	bne.n	800ba1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a2f      	ldr	r2, [pc, #188]	; (800bae0 <TIM_Base_SetConfig+0x114>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d01f      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba2c:	d01b      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a2c      	ldr	r2, [pc, #176]	; (800bae4 <TIM_Base_SetConfig+0x118>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d017      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a2b      	ldr	r2, [pc, #172]	; (800bae8 <TIM_Base_SetConfig+0x11c>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d013      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a2a      	ldr	r2, [pc, #168]	; (800baec <TIM_Base_SetConfig+0x120>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d00f      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a29      	ldr	r2, [pc, #164]	; (800baf0 <TIM_Base_SetConfig+0x124>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d00b      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a28      	ldr	r2, [pc, #160]	; (800baf4 <TIM_Base_SetConfig+0x128>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d007      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a27      	ldr	r2, [pc, #156]	; (800baf8 <TIM_Base_SetConfig+0x12c>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d003      	beq.n	800ba66 <TIM_Base_SetConfig+0x9a>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a26      	ldr	r2, [pc, #152]	; (800bafc <TIM_Base_SetConfig+0x130>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d108      	bne.n	800ba78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	689a      	ldr	r2, [r3, #8]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a10      	ldr	r2, [pc, #64]	; (800bae0 <TIM_Base_SetConfig+0x114>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d00f      	beq.n	800bac4 <TIM_Base_SetConfig+0xf8>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a12      	ldr	r2, [pc, #72]	; (800baf0 <TIM_Base_SetConfig+0x124>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d00b      	beq.n	800bac4 <TIM_Base_SetConfig+0xf8>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a11      	ldr	r2, [pc, #68]	; (800baf4 <TIM_Base_SetConfig+0x128>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d007      	beq.n	800bac4 <TIM_Base_SetConfig+0xf8>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a10      	ldr	r2, [pc, #64]	; (800baf8 <TIM_Base_SetConfig+0x12c>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d003      	beq.n	800bac4 <TIM_Base_SetConfig+0xf8>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a0f      	ldr	r2, [pc, #60]	; (800bafc <TIM_Base_SetConfig+0x130>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d103      	bne.n	800bacc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	691a      	ldr	r2, [r3, #16]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	615a      	str	r2, [r3, #20]
}
 800bad2:	bf00      	nop
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	40010000 	.word	0x40010000
 800bae4:	40000400 	.word	0x40000400
 800bae8:	40000800 	.word	0x40000800
 800baec:	40000c00 	.word	0x40000c00
 800baf0:	40010400 	.word	0x40010400
 800baf4:	40014000 	.word	0x40014000
 800baf8:	40014400 	.word	0x40014400
 800bafc:	40014800 	.word	0x40014800

0800bb00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	f023 0201 	bic.w	r2, r3, #1
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	699b      	ldr	r3, [r3, #24]
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4b37      	ldr	r3, [pc, #220]	; (800bc08 <TIM_OC1_SetConfig+0x108>)
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f023 0303 	bic.w	r3, r3, #3
 800bb36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f023 0302 	bic.w	r3, r3, #2
 800bb48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a2d      	ldr	r2, [pc, #180]	; (800bc0c <TIM_OC1_SetConfig+0x10c>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d00f      	beq.n	800bb7c <TIM_OC1_SetConfig+0x7c>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a2c      	ldr	r2, [pc, #176]	; (800bc10 <TIM_OC1_SetConfig+0x110>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d00b      	beq.n	800bb7c <TIM_OC1_SetConfig+0x7c>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a2b      	ldr	r2, [pc, #172]	; (800bc14 <TIM_OC1_SetConfig+0x114>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d007      	beq.n	800bb7c <TIM_OC1_SetConfig+0x7c>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a2a      	ldr	r2, [pc, #168]	; (800bc18 <TIM_OC1_SetConfig+0x118>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d003      	beq.n	800bb7c <TIM_OC1_SetConfig+0x7c>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a29      	ldr	r2, [pc, #164]	; (800bc1c <TIM_OC1_SetConfig+0x11c>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d10c      	bne.n	800bb96 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f023 0308 	bic.w	r3, r3, #8
 800bb82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f023 0304 	bic.w	r3, r3, #4
 800bb94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a1c      	ldr	r2, [pc, #112]	; (800bc0c <TIM_OC1_SetConfig+0x10c>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d00f      	beq.n	800bbbe <TIM_OC1_SetConfig+0xbe>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a1b      	ldr	r2, [pc, #108]	; (800bc10 <TIM_OC1_SetConfig+0x110>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00b      	beq.n	800bbbe <TIM_OC1_SetConfig+0xbe>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a1a      	ldr	r2, [pc, #104]	; (800bc14 <TIM_OC1_SetConfig+0x114>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d007      	beq.n	800bbbe <TIM_OC1_SetConfig+0xbe>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a19      	ldr	r2, [pc, #100]	; (800bc18 <TIM_OC1_SetConfig+0x118>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d003      	beq.n	800bbbe <TIM_OC1_SetConfig+0xbe>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a18      	ldr	r2, [pc, #96]	; (800bc1c <TIM_OC1_SetConfig+0x11c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d111      	bne.n	800bbe2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	621a      	str	r2, [r3, #32]
}
 800bbfc:	bf00      	nop
 800bbfe:	371c      	adds	r7, #28
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	fffeff8f 	.word	0xfffeff8f
 800bc0c:	40010000 	.word	0x40010000
 800bc10:	40010400 	.word	0x40010400
 800bc14:	40014000 	.word	0x40014000
 800bc18:	40014400 	.word	0x40014400
 800bc1c:	40014800 	.word	0x40014800

0800bc20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	f023 0210 	bic.w	r2, r3, #16
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4b34      	ldr	r3, [pc, #208]	; (800bd1c <TIM_OC2_SetConfig+0xfc>)
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	021b      	lsls	r3, r3, #8
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	f023 0320 	bic.w	r3, r3, #32
 800bc6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	011b      	lsls	r3, r3, #4
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a29      	ldr	r2, [pc, #164]	; (800bd20 <TIM_OC2_SetConfig+0x100>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d003      	beq.n	800bc88 <TIM_OC2_SetConfig+0x68>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a28      	ldr	r2, [pc, #160]	; (800bd24 <TIM_OC2_SetConfig+0x104>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d10d      	bne.n	800bca4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	011b      	lsls	r3, r3, #4
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a1e      	ldr	r2, [pc, #120]	; (800bd20 <TIM_OC2_SetConfig+0x100>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d00f      	beq.n	800bccc <TIM_OC2_SetConfig+0xac>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a1d      	ldr	r2, [pc, #116]	; (800bd24 <TIM_OC2_SetConfig+0x104>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00b      	beq.n	800bccc <TIM_OC2_SetConfig+0xac>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a1c      	ldr	r2, [pc, #112]	; (800bd28 <TIM_OC2_SetConfig+0x108>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d007      	beq.n	800bccc <TIM_OC2_SetConfig+0xac>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a1b      	ldr	r2, [pc, #108]	; (800bd2c <TIM_OC2_SetConfig+0x10c>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d003      	beq.n	800bccc <TIM_OC2_SetConfig+0xac>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a1a      	ldr	r2, [pc, #104]	; (800bd30 <TIM_OC2_SetConfig+0x110>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d113      	bne.n	800bcf4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bcd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	621a      	str	r2, [r3, #32]
}
 800bd0e:	bf00      	nop
 800bd10:	371c      	adds	r7, #28
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	feff8fff 	.word	0xfeff8fff
 800bd20:	40010000 	.word	0x40010000
 800bd24:	40010400 	.word	0x40010400
 800bd28:	40014000 	.word	0x40014000
 800bd2c:	40014400 	.word	0x40014400
 800bd30:	40014800 	.word	0x40014800

0800bd34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4b33      	ldr	r3, [pc, #204]	; (800be2c <TIM_OC3_SetConfig+0xf8>)
 800bd60:	4013      	ands	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a28      	ldr	r2, [pc, #160]	; (800be30 <TIM_OC3_SetConfig+0xfc>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d003      	beq.n	800bd9a <TIM_OC3_SetConfig+0x66>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a27      	ldr	r2, [pc, #156]	; (800be34 <TIM_OC3_SetConfig+0x100>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d10d      	bne.n	800bdb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bda0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	021b      	lsls	r3, r3, #8
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bdb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a1d      	ldr	r2, [pc, #116]	; (800be30 <TIM_OC3_SetConfig+0xfc>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d00f      	beq.n	800bdde <TIM_OC3_SetConfig+0xaa>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a1c      	ldr	r2, [pc, #112]	; (800be34 <TIM_OC3_SetConfig+0x100>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d00b      	beq.n	800bdde <TIM_OC3_SetConfig+0xaa>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a1b      	ldr	r2, [pc, #108]	; (800be38 <TIM_OC3_SetConfig+0x104>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d007      	beq.n	800bdde <TIM_OC3_SetConfig+0xaa>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a1a      	ldr	r2, [pc, #104]	; (800be3c <TIM_OC3_SetConfig+0x108>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d003      	beq.n	800bdde <TIM_OC3_SetConfig+0xaa>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a19      	ldr	r2, [pc, #100]	; (800be40 <TIM_OC3_SetConfig+0x10c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d113      	bne.n	800be06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bde4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	4313      	orrs	r3, r2
 800be04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	621a      	str	r2, [r3, #32]
}
 800be20:	bf00      	nop
 800be22:	371c      	adds	r7, #28
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	fffeff8f 	.word	0xfffeff8f
 800be30:	40010000 	.word	0x40010000
 800be34:	40010400 	.word	0x40010400
 800be38:	40014000 	.word	0x40014000
 800be3c:	40014400 	.word	0x40014400
 800be40:	40014800 	.word	0x40014800

0800be44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	4b24      	ldr	r3, [pc, #144]	; (800bf00 <TIM_OC4_SetConfig+0xbc>)
 800be70:	4013      	ands	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	021b      	lsls	r3, r3, #8
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	4313      	orrs	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	031b      	lsls	r3, r3, #12
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	4313      	orrs	r3, r2
 800be9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a19      	ldr	r2, [pc, #100]	; (800bf04 <TIM_OC4_SetConfig+0xc0>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d00f      	beq.n	800bec4 <TIM_OC4_SetConfig+0x80>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a18      	ldr	r2, [pc, #96]	; (800bf08 <TIM_OC4_SetConfig+0xc4>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d00b      	beq.n	800bec4 <TIM_OC4_SetConfig+0x80>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a17      	ldr	r2, [pc, #92]	; (800bf0c <TIM_OC4_SetConfig+0xc8>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d007      	beq.n	800bec4 <TIM_OC4_SetConfig+0x80>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a16      	ldr	r2, [pc, #88]	; (800bf10 <TIM_OC4_SetConfig+0xcc>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d003      	beq.n	800bec4 <TIM_OC4_SetConfig+0x80>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a15      	ldr	r2, [pc, #84]	; (800bf14 <TIM_OC4_SetConfig+0xd0>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d109      	bne.n	800bed8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800beca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	019b      	lsls	r3, r3, #6
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	621a      	str	r2, [r3, #32]
}
 800bef2:	bf00      	nop
 800bef4:	371c      	adds	r7, #28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	feff8fff 	.word	0xfeff8fff
 800bf04:	40010000 	.word	0x40010000
 800bf08:	40010400 	.word	0x40010400
 800bf0c:	40014000 	.word	0x40014000
 800bf10:	40014400 	.word	0x40014400
 800bf14:	40014800 	.word	0x40014800

0800bf18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	4b21      	ldr	r3, [pc, #132]	; (800bfc8 <TIM_OC5_SetConfig+0xb0>)
 800bf44:	4013      	ands	r3, r2
 800bf46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bf58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	041b      	lsls	r3, r3, #16
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a18      	ldr	r2, [pc, #96]	; (800bfcc <TIM_OC5_SetConfig+0xb4>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d00f      	beq.n	800bf8e <TIM_OC5_SetConfig+0x76>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a17      	ldr	r2, [pc, #92]	; (800bfd0 <TIM_OC5_SetConfig+0xb8>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d00b      	beq.n	800bf8e <TIM_OC5_SetConfig+0x76>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a16      	ldr	r2, [pc, #88]	; (800bfd4 <TIM_OC5_SetConfig+0xbc>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d007      	beq.n	800bf8e <TIM_OC5_SetConfig+0x76>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a15      	ldr	r2, [pc, #84]	; (800bfd8 <TIM_OC5_SetConfig+0xc0>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d003      	beq.n	800bf8e <TIM_OC5_SetConfig+0x76>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a14      	ldr	r2, [pc, #80]	; (800bfdc <TIM_OC5_SetConfig+0xc4>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d109      	bne.n	800bfa2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	021b      	lsls	r3, r3, #8
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	621a      	str	r2, [r3, #32]
}
 800bfbc:	bf00      	nop
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	fffeff8f 	.word	0xfffeff8f
 800bfcc:	40010000 	.word	0x40010000
 800bfd0:	40010400 	.word	0x40010400
 800bfd4:	40014000 	.word	0x40014000
 800bfd8:	40014400 	.word	0x40014400
 800bfdc:	40014800 	.word	0x40014800

0800bfe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b087      	sub	sp, #28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	4b22      	ldr	r3, [pc, #136]	; (800c094 <TIM_OC6_SetConfig+0xb4>)
 800c00c:	4013      	ands	r3, r2
 800c00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	021b      	lsls	r3, r3, #8
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	4313      	orrs	r3, r2
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	051b      	lsls	r3, r3, #20
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a19      	ldr	r2, [pc, #100]	; (800c098 <TIM_OC6_SetConfig+0xb8>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d00f      	beq.n	800c058 <TIM_OC6_SetConfig+0x78>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a18      	ldr	r2, [pc, #96]	; (800c09c <TIM_OC6_SetConfig+0xbc>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d00b      	beq.n	800c058 <TIM_OC6_SetConfig+0x78>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <TIM_OC6_SetConfig+0xc0>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d007      	beq.n	800c058 <TIM_OC6_SetConfig+0x78>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a16      	ldr	r2, [pc, #88]	; (800c0a4 <TIM_OC6_SetConfig+0xc4>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d003      	beq.n	800c058 <TIM_OC6_SetConfig+0x78>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a15      	ldr	r2, [pc, #84]	; (800c0a8 <TIM_OC6_SetConfig+0xc8>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d109      	bne.n	800c06c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c05e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	029b      	lsls	r3, r3, #10
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	621a      	str	r2, [r3, #32]
}
 800c086:	bf00      	nop
 800c088:	371c      	adds	r7, #28
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	feff8fff 	.word	0xfeff8fff
 800c098:	40010000 	.word	0x40010000
 800c09c:	40010400 	.word	0x40010400
 800c0a0:	40014000 	.word	0x40014000
 800c0a4:	40014400 	.word	0x40014400
 800c0a8:	40014800 	.word	0x40014800

0800c0ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	f023 0201 	bic.w	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	011b      	lsls	r3, r3, #4
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f023 030a 	bic.w	r3, r3, #10
 800c0e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	621a      	str	r2, [r3, #32]
}
 800c0fe:	bf00      	nop
 800c100:	371c      	adds	r7, #28
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c10a:	b480      	push	{r7}
 800c10c:	b087      	sub	sp, #28
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	60b9      	str	r1, [r7, #8]
 800c114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	f023 0210 	bic.w	r2, r3, #16
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	031b      	lsls	r3, r3, #12
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	011b      	lsls	r3, r3, #4
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	4313      	orrs	r3, r2
 800c150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	621a      	str	r2, [r3, #32]
}
 800c15e:	bf00      	nop
 800c160:	371c      	adds	r7, #28
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
	...

0800c16c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	4b09      	ldr	r3, [pc, #36]	; (800c1a4 <TIM_ITRx_SetConfig+0x38>)
 800c180:	4013      	ands	r3, r2
 800c182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	4313      	orrs	r3, r2
 800c18a:	f043 0307 	orr.w	r3, r3, #7
 800c18e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	609a      	str	r2, [r3, #8]
}
 800c196:	bf00      	nop
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	ffcfff8f 	.word	0xffcfff8f

0800c1a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
 800c1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	021a      	lsls	r2, r3, #8
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	609a      	str	r2, [r3, #8]
}
 800c1dc:	bf00      	nop
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d101      	bne.n	800c200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	e06d      	b.n	800c2dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a30      	ldr	r2, [pc, #192]	; (800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d004      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a2f      	ldr	r2, [pc, #188]	; (800c2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d108      	bne.n	800c246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c23a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	4313      	orrs	r3, r2
 800c244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c24c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4313      	orrs	r3, r2
 800c256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a20      	ldr	r2, [pc, #128]	; (800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d022      	beq.n	800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c272:	d01d      	beq.n	800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a1d      	ldr	r2, [pc, #116]	; (800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d018      	beq.n	800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a1c      	ldr	r2, [pc, #112]	; (800c2f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d013      	beq.n	800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a1a      	ldr	r2, [pc, #104]	; (800c2f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00e      	beq.n	800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a15      	ldr	r2, [pc, #84]	; (800c2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d009      	beq.n	800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a16      	ldr	r2, [pc, #88]	; (800c2fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d004      	beq.n	800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a15      	ldr	r2, [pc, #84]	; (800c300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d10c      	bne.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	40010000 	.word	0x40010000
 800c2ec:	40010400 	.word	0x40010400
 800c2f0:	40000400 	.word	0x40000400
 800c2f4:	40000800 	.word	0x40000800
 800c2f8:	40000c00 	.word	0x40000c00
 800c2fc:	40001800 	.word	0x40001800
 800c300:	40014000 	.word	0x40014000

0800c304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c30e:	2300      	movs	r3, #0
 800c310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d101      	bne.n	800c320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c31c:	2302      	movs	r3, #2
 800c31e:	e065      	b.n	800c3ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	4313      	orrs	r3, r2
 800c334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	4313      	orrs	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	4313      	orrs	r3, r2
 800c350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	4313      	orrs	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	041b      	lsls	r3, r3, #16
 800c396:	4313      	orrs	r3, r2
 800c398:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a16      	ldr	r2, [pc, #88]	; (800c3f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d004      	beq.n	800c3ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a14      	ldr	r2, [pc, #80]	; (800c3fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d115      	bne.n	800c3da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b8:	051b      	lsls	r3, r3, #20
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	69db      	ldr	r3, [r3, #28]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	40010000 	.word	0x40010000
 800c3fc:	40010400 	.word	0x40010400

0800c400 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c400:	b084      	sub	sp, #16
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	f107 001c 	add.w	r0, r7, #28
 800c40e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	2b01      	cmp	r3, #1
 800c416:	d120      	bne.n	800c45a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	4b2a      	ldr	r3, [pc, #168]	; (800c4d4 <USB_CoreInit+0xd4>)
 800c42a:	4013      	ands	r3, r2
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d105      	bne.n	800c44e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f001 fc04 	bl	800dc5c <USB_CoreReset>
 800c454:	4603      	mov	r3, r0
 800c456:	73fb      	strb	r3, [r7, #15]
 800c458:	e01a      	b.n	800c490 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 fbf8 	bl	800dc5c <USB_CoreReset>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c472:	2b00      	cmp	r3, #0
 800c474:	d106      	bne.n	800c484 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	639a      	str	r2, [r3, #56]	; 0x38
 800c482:	e005      	b.n	800c490 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	2b01      	cmp	r3, #1
 800c494:	d116      	bne.n	800c4c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4a4:	4b0c      	ldr	r3, [pc, #48]	; (800c4d8 <USB_CoreInit+0xd8>)
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	f043 0206 	orr.w	r2, r3, #6
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f043 0220 	orr.w	r2, r3, #32
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4d0:	b004      	add	sp, #16
 800c4d2:	4770      	bx	lr
 800c4d4:	ffbdffbf 	.word	0xffbdffbf
 800c4d8:	03ee0000 	.word	0x03ee0000

0800c4dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d165      	bne.n	800c5bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	4a41      	ldr	r2, [pc, #260]	; (800c5f8 <USB_SetTurnaroundTime+0x11c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d906      	bls.n	800c506 <USB_SetTurnaroundTime+0x2a>
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	4a40      	ldr	r2, [pc, #256]	; (800c5fc <USB_SetTurnaroundTime+0x120>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d202      	bcs.n	800c506 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c500:	230f      	movs	r3, #15
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	e062      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	4a3c      	ldr	r2, [pc, #240]	; (800c5fc <USB_SetTurnaroundTime+0x120>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d306      	bcc.n	800c51c <USB_SetTurnaroundTime+0x40>
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	4a3b      	ldr	r2, [pc, #236]	; (800c600 <USB_SetTurnaroundTime+0x124>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d202      	bcs.n	800c51c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c516:	230e      	movs	r3, #14
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	e057      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	4a38      	ldr	r2, [pc, #224]	; (800c600 <USB_SetTurnaroundTime+0x124>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d306      	bcc.n	800c532 <USB_SetTurnaroundTime+0x56>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	4a37      	ldr	r2, [pc, #220]	; (800c604 <USB_SetTurnaroundTime+0x128>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d202      	bcs.n	800c532 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c52c:	230d      	movs	r3, #13
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e04c      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	4a33      	ldr	r2, [pc, #204]	; (800c604 <USB_SetTurnaroundTime+0x128>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d306      	bcc.n	800c548 <USB_SetTurnaroundTime+0x6c>
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	4a32      	ldr	r2, [pc, #200]	; (800c608 <USB_SetTurnaroundTime+0x12c>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d802      	bhi.n	800c548 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c542:	230c      	movs	r3, #12
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	e041      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	4a2f      	ldr	r2, [pc, #188]	; (800c608 <USB_SetTurnaroundTime+0x12c>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d906      	bls.n	800c55e <USB_SetTurnaroundTime+0x82>
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	4a2e      	ldr	r2, [pc, #184]	; (800c60c <USB_SetTurnaroundTime+0x130>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d802      	bhi.n	800c55e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c558:	230b      	movs	r3, #11
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	e036      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	4a2a      	ldr	r2, [pc, #168]	; (800c60c <USB_SetTurnaroundTime+0x130>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d906      	bls.n	800c574 <USB_SetTurnaroundTime+0x98>
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	4a29      	ldr	r2, [pc, #164]	; (800c610 <USB_SetTurnaroundTime+0x134>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d802      	bhi.n	800c574 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c56e:	230a      	movs	r3, #10
 800c570:	617b      	str	r3, [r7, #20]
 800c572:	e02b      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	4a26      	ldr	r2, [pc, #152]	; (800c610 <USB_SetTurnaroundTime+0x134>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d906      	bls.n	800c58a <USB_SetTurnaroundTime+0xae>
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	4a25      	ldr	r2, [pc, #148]	; (800c614 <USB_SetTurnaroundTime+0x138>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d202      	bcs.n	800c58a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c584:	2309      	movs	r3, #9
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	e020      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	4a21      	ldr	r2, [pc, #132]	; (800c614 <USB_SetTurnaroundTime+0x138>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d306      	bcc.n	800c5a0 <USB_SetTurnaroundTime+0xc4>
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	4a20      	ldr	r2, [pc, #128]	; (800c618 <USB_SetTurnaroundTime+0x13c>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d802      	bhi.n	800c5a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c59a:	2308      	movs	r3, #8
 800c59c:	617b      	str	r3, [r7, #20]
 800c59e:	e015      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	4a1d      	ldr	r2, [pc, #116]	; (800c618 <USB_SetTurnaroundTime+0x13c>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d906      	bls.n	800c5b6 <USB_SetTurnaroundTime+0xda>
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	4a1c      	ldr	r2, [pc, #112]	; (800c61c <USB_SetTurnaroundTime+0x140>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d202      	bcs.n	800c5b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c5b0:	2307      	movs	r3, #7
 800c5b2:	617b      	str	r3, [r7, #20]
 800c5b4:	e00a      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c5b6:	2306      	movs	r3, #6
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e007      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d102      	bne.n	800c5c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c5c2:	2309      	movs	r3, #9
 800c5c4:	617b      	str	r3, [r7, #20]
 800c5c6:	e001      	b.n	800c5cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c5c8:	2309      	movs	r3, #9
 800c5ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68da      	ldr	r2, [r3, #12]
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	029b      	lsls	r3, r3, #10
 800c5e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	371c      	adds	r7, #28
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr
 800c5f8:	00d8acbf 	.word	0x00d8acbf
 800c5fc:	00e4e1c0 	.word	0x00e4e1c0
 800c600:	00f42400 	.word	0x00f42400
 800c604:	01067380 	.word	0x01067380
 800c608:	011a499f 	.word	0x011a499f
 800c60c:	01312cff 	.word	0x01312cff
 800c610:	014ca43f 	.word	0x014ca43f
 800c614:	016e3600 	.word	0x016e3600
 800c618:	01a6ab1f 	.word	0x01a6ab1f
 800c61c:	01e84800 	.word	0x01e84800

0800c620 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f043 0201 	orr.w	r2, r3, #1
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f023 0201 	bic.w	r2, r3, #1
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d115      	bne.n	800c6b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c692:	2001      	movs	r0, #1
 800c694:	f7f5 fbe8 	bl	8001e68 <HAL_Delay>
      ms++;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	3301      	adds	r3, #1
 800c69c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f001 fa4b 	bl	800db3a <USB_GetMode>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d01e      	beq.n	800c6e8 <USB_SetCurrentMode+0x84>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b31      	cmp	r3, #49	; 0x31
 800c6ae:	d9f0      	bls.n	800c692 <USB_SetCurrentMode+0x2e>
 800c6b0:	e01a      	b.n	800c6e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d115      	bne.n	800c6e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	f7f5 fbcf 	bl	8001e68 <HAL_Delay>
      ms++;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f001 fa32 	bl	800db3a <USB_GetMode>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d005      	beq.n	800c6e8 <USB_SetCurrentMode+0x84>
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b31      	cmp	r3, #49	; 0x31
 800c6e0:	d9f0      	bls.n	800c6c4 <USB_SetCurrentMode+0x60>
 800c6e2:	e001      	b.n	800c6e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e005      	b.n	800c6f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b32      	cmp	r3, #50	; 0x32
 800c6ec:	d101      	bne.n	800c6f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e000      	b.n	800c6f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b086      	sub	sp, #24
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c70a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c716:	2300      	movs	r3, #0
 800c718:	613b      	str	r3, [r7, #16]
 800c71a:	e009      	b.n	800c730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	3340      	adds	r3, #64	; 0x40
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	4413      	add	r3, r2
 800c726:	2200      	movs	r2, #0
 800c728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	3301      	adds	r3, #1
 800c72e:	613b      	str	r3, [r7, #16]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	2b0e      	cmp	r3, #14
 800c734:	d9f2      	bls.n	800c71c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d11c      	bne.n	800c776 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c74a:	f043 0302 	orr.w	r3, r3, #2
 800c74e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c754:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	e005      	b.n	800c782 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c788:	461a      	mov	r2, r3
 800c78a:	2300      	movs	r3, #0
 800c78c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c794:	4619      	mov	r1, r3
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c79c:	461a      	mov	r2, r3
 800c79e:	680b      	ldr	r3, [r1, #0]
 800c7a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d10c      	bne.n	800c7c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d104      	bne.n	800c7b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f965 	bl	800ca80 <USB_SetDevSpeed>
 800c7b6:	e008      	b.n	800c7ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f960 	bl	800ca80 <USB_SetDevSpeed>
 800c7c0:	e003      	b.n	800c7ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c7c2:	2103      	movs	r1, #3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f95b 	bl	800ca80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c7ca:	2110      	movs	r1, #16
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f8f3 	bl	800c9b8 <USB_FlushTxFifo>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d001      	beq.n	800c7dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f91f 	bl	800ca20 <USB_FlushRxFifo>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7fe:	461a      	mov	r2, r3
 800c800:	2300      	movs	r3, #0
 800c802:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c80a:	461a      	mov	r2, r3
 800c80c:	2300      	movs	r3, #0
 800c80e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c810:	2300      	movs	r3, #0
 800c812:	613b      	str	r3, [r7, #16]
 800c814:	e043      	b.n	800c89e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	015a      	lsls	r2, r3, #5
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	4413      	add	r3, r2
 800c81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c82c:	d118      	bne.n	800c860 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10a      	bne.n	800c84a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c840:	461a      	mov	r2, r3
 800c842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c846:	6013      	str	r3, [r2, #0]
 800c848:	e013      	b.n	800c872 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c856:	461a      	mov	r2, r3
 800c858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	e008      	b.n	800c872 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	015a      	lsls	r2, r3, #5
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	4413      	add	r3, r2
 800c868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86c:	461a      	mov	r2, r3
 800c86e:	2300      	movs	r3, #0
 800c870:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87e:	461a      	mov	r2, r3
 800c880:	2300      	movs	r3, #0
 800c882:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	015a      	lsls	r2, r3, #5
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4413      	add	r3, r2
 800c88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c890:	461a      	mov	r2, r3
 800c892:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	3301      	adds	r3, #1
 800c89c:	613b      	str	r3, [r7, #16]
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d3b7      	bcc.n	800c816 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	613b      	str	r3, [r7, #16]
 800c8aa:	e043      	b.n	800c934 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8c2:	d118      	bne.n	800c8f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	e013      	b.n	800c908 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	e008      	b.n	800c908 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	015a      	lsls	r2, r3, #5
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c902:	461a      	mov	r2, r3
 800c904:	2300      	movs	r3, #0
 800c906:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	015a      	lsls	r2, r3, #5
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c914:	461a      	mov	r2, r3
 800c916:	2300      	movs	r3, #0
 800c918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c926:	461a      	mov	r2, r3
 800c928:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c92c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	3301      	adds	r3, #1
 800c932:	613b      	str	r3, [r7, #16]
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d3b7      	bcc.n	800c8ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c94a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c94e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c95c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	2b00      	cmp	r3, #0
 800c962:	d105      	bne.n	800c970 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	f043 0210 	orr.w	r2, r3, #16
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	699a      	ldr	r2, [r3, #24]
 800c974:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <USB_DevInit+0x2b4>)
 800c976:	4313      	orrs	r3, r2
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	f043 0208 	orr.w	r2, r3, #8
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c990:	2b01      	cmp	r3, #1
 800c992:	d105      	bne.n	800c9a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	699a      	ldr	r2, [r3, #24]
 800c998:	4b06      	ldr	r3, [pc, #24]	; (800c9b4 <USB_DevInit+0x2b8>)
 800c99a:	4313      	orrs	r3, r2
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3718      	adds	r7, #24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9ac:	b004      	add	sp, #16
 800c9ae:	4770      	bx	lr
 800c9b0:	803c3800 	.word	0x803c3800
 800c9b4:	40000004 	.word	0x40000004

0800c9b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4a13      	ldr	r2, [pc, #76]	; (800ca1c <USB_FlushTxFifo+0x64>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d901      	bls.n	800c9d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e01b      	b.n	800ca10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	daf2      	bge.n	800c9c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	019b      	lsls	r3, r3, #6
 800c9e8:	f043 0220 	orr.w	r2, r3, #32
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4a08      	ldr	r2, [pc, #32]	; (800ca1c <USB_FlushTxFifo+0x64>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d901      	bls.n	800ca02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e006      	b.n	800ca10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f003 0320 	and.w	r3, r3, #32
 800ca0a:	2b20      	cmp	r3, #32
 800ca0c:	d0f0      	beq.n	800c9f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	00030d40 	.word	0x00030d40

0800ca20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	4a11      	ldr	r2, [pc, #68]	; (800ca7c <USB_FlushRxFifo+0x5c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d901      	bls.n	800ca3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e018      	b.n	800ca70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	daf2      	bge.n	800ca2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2210      	movs	r2, #16
 800ca4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	3301      	adds	r3, #1
 800ca54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4a08      	ldr	r2, [pc, #32]	; (800ca7c <USB_FlushRxFifo+0x5c>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d901      	bls.n	800ca62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e006      	b.n	800ca70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	f003 0310 	and.w	r3, r3, #16
 800ca6a:	2b10      	cmp	r3, #16
 800ca6c:	d0f0      	beq.n	800ca50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	00030d40 	.word	0x00030d40

0800ca80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	68f9      	ldr	r1, [r7, #12]
 800ca9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caa0:	4313      	orrs	r3, r2
 800caa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b087      	sub	sp, #28
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	f003 0306 	and.w	r3, r3, #6
 800caca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cad2:	2300      	movs	r3, #0
 800cad4:	75fb      	strb	r3, [r7, #23]
 800cad6:	e00a      	b.n	800caee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d002      	beq.n	800cae4 <USB_GetDevSpeed+0x32>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b06      	cmp	r3, #6
 800cae2:	d102      	bne.n	800caea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cae4:	2302      	movs	r3, #2
 800cae6:	75fb      	strb	r3, [r7, #23]
 800cae8:	e001      	b.n	800caee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800caea:	230f      	movs	r3, #15
 800caec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	371c      	adds	r7, #28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	785b      	ldrb	r3, [r3, #1]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d139      	bne.n	800cb8c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1e:	69da      	ldr	r2, [r3, #28]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	f003 030f 	and.w	r3, r3, #15
 800cb28:	2101      	movs	r1, #1
 800cb2a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	68f9      	ldr	r1, [r7, #12]
 800cb32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb36:	4313      	orrs	r3, r2
 800cb38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	015a      	lsls	r2, r3, #5
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d153      	bne.n	800cbf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	015a      	lsls	r2, r3, #5
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	791b      	ldrb	r3, [r3, #4]
 800cb6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	059b      	lsls	r3, r3, #22
 800cb72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb74:	431a      	orrs	r2, r3
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	0159      	lsls	r1, r3, #5
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	440b      	add	r3, r1
 800cb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb82:	4619      	mov	r1, r3
 800cb84:	4b20      	ldr	r3, [pc, #128]	; (800cc08 <USB_ActivateEndpoint+0x10c>)
 800cb86:	4313      	orrs	r3, r2
 800cb88:	600b      	str	r3, [r1, #0]
 800cb8a:	e035      	b.n	800cbf8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb92:	69da      	ldr	r2, [r3, #28]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	f003 030f 	and.w	r3, r3, #15
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	fa01 f303 	lsl.w	r3, r1, r3
 800cba2:	041b      	lsls	r3, r3, #16
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	015a      	lsls	r2, r3, #5
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d119      	bne.n	800cbf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	791b      	ldrb	r3, [r3, #4]
 800cbde:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbe0:	430b      	orrs	r3, r1
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	0159      	lsls	r1, r3, #5
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	440b      	add	r3, r1
 800cbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4b05      	ldr	r3, [pc, #20]	; (800cc08 <USB_ActivateEndpoint+0x10c>)
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	10008000 	.word	0x10008000

0800cc0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	785b      	ldrb	r3, [r3, #1]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d161      	bne.n	800ccec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc3e:	d11f      	bne.n	800cc80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	0151      	lsls	r1, r2, #5
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	440a      	add	r2, r1
 800cc56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	015a      	lsls	r2, r3, #5
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	0151      	lsls	r1, r2, #5
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	440a      	add	r2, r1
 800cc76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 030f 	and.w	r3, r3, #15
 800cc90:	2101      	movs	r1, #1
 800cc92:	fa01 f303 	lsl.w	r3, r1, r3
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	43db      	mvns	r3, r3
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cca0:	4013      	ands	r3, r2
 800cca2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccaa:	69da      	ldr	r2, [r3, #28]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	f003 030f 	and.w	r3, r3, #15
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	43db      	mvns	r3, r3
 800ccbe:	68f9      	ldr	r1, [r7, #12]
 800ccc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	015a      	lsls	r2, r3, #5
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	4413      	add	r3, r2
 800ccd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	0159      	lsls	r1, r3, #5
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	440b      	add	r3, r1
 800ccde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce2:	4619      	mov	r1, r3
 800cce4:	4b35      	ldr	r3, [pc, #212]	; (800cdbc <USB_DeactivateEndpoint+0x1b0>)
 800cce6:	4013      	ands	r3, r2
 800cce8:	600b      	str	r3, [r1, #0]
 800ccea:	e060      	b.n	800cdae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd02:	d11f      	bne.n	800cd44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	0151      	lsls	r1, r2, #5
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	440a      	add	r2, r1
 800cd1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	0151      	lsls	r1, r2, #5
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	440a      	add	r2, r1
 800cd3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	f003 030f 	and.w	r3, r3, #15
 800cd54:	2101      	movs	r1, #1
 800cd56:	fa01 f303 	lsl.w	r3, r1, r3
 800cd5a:	041b      	lsls	r3, r3, #16
 800cd5c:	43db      	mvns	r3, r3
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd64:	4013      	ands	r3, r2
 800cd66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd6e:	69da      	ldr	r2, [r3, #28]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	2101      	movs	r1, #1
 800cd7a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7e:	041b      	lsls	r3, r3, #16
 800cd80:	43db      	mvns	r3, r3
 800cd82:	68f9      	ldr	r1, [r7, #12]
 800cd84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd88:	4013      	ands	r3, r2
 800cd8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	015a      	lsls	r2, r3, #5
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4413      	add	r3, r2
 800cd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	0159      	lsls	r1, r3, #5
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	440b      	add	r3, r1
 800cda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda6:	4619      	mov	r1, r3
 800cda8:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <USB_DeactivateEndpoint+0x1b4>)
 800cdaa:	4013      	ands	r3, r2
 800cdac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	ec337800 	.word	0xec337800
 800cdc0:	eff37800 	.word	0xeff37800

0800cdc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08a      	sub	sp, #40	; 0x28
 800cdc8:	af02      	add	r7, sp, #8
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	f040 8163 	bne.w	800d0ac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d132      	bne.n	800ce54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	015a      	lsls	r2, r3, #5
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfa:	691a      	ldr	r2, [r3, #16]
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	0159      	lsls	r1, r3, #5
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	440b      	add	r3, r1
 800ce04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4ba5      	ldr	r3, [pc, #660]	; (800d0a0 <USB_EPStartXfer+0x2dc>)
 800ce0c:	4013      	ands	r3, r2
 800ce0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	015a      	lsls	r2, r3, #5
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	4413      	add	r3, r2
 800ce18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	69ba      	ldr	r2, [r7, #24]
 800ce20:	0151      	lsls	r1, r2, #5
 800ce22:	69fa      	ldr	r2, [r7, #28]
 800ce24:	440a      	add	r2, r1
 800ce26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	015a      	lsls	r2, r3, #5
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	4413      	add	r3, r2
 800ce38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce3c:	691a      	ldr	r2, [r3, #16]
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	0159      	lsls	r1, r3, #5
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	440b      	add	r3, r1
 800ce46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4b95      	ldr	r3, [pc, #596]	; (800d0a4 <USB_EPStartXfer+0x2e0>)
 800ce4e:	4013      	ands	r3, r2
 800ce50:	610b      	str	r3, [r1, #16]
 800ce52:	e074      	b.n	800cf3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce60:	691a      	ldr	r2, [r3, #16]
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	0159      	lsls	r1, r3, #5
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	440b      	add	r3, r1
 800ce6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4b8c      	ldr	r3, [pc, #560]	; (800d0a4 <USB_EPStartXfer+0x2e0>)
 800ce72:	4013      	ands	r3, r2
 800ce74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	015a      	lsls	r2, r3, #5
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce82:	691a      	ldr	r2, [r3, #16]
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	0159      	lsls	r1, r3, #5
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	440b      	add	r3, r1
 800ce8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce90:	4619      	mov	r1, r3
 800ce92:	4b83      	ldr	r3, [pc, #524]	; (800d0a0 <USB_EPStartXfer+0x2dc>)
 800ce94:	4013      	ands	r3, r2
 800ce96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	6999      	ldr	r1, [r3, #24]
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	440b      	add	r3, r1
 800ceb0:	1e59      	subs	r1, r3, #1
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	fbb1 f3f3 	udiv	r3, r1, r3
 800ceba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cebc:	4b7a      	ldr	r3, [pc, #488]	; (800d0a8 <USB_EPStartXfer+0x2e4>)
 800cebe:	400b      	ands	r3, r1
 800cec0:	69b9      	ldr	r1, [r7, #24]
 800cec2:	0148      	lsls	r0, r1, #5
 800cec4:	69f9      	ldr	r1, [r7, #28]
 800cec6:	4401      	add	r1, r0
 800cec8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cecc:	4313      	orrs	r3, r2
 800cece:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	015a      	lsls	r2, r3, #5
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cedc:	691a      	ldr	r2, [r3, #16]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cee6:	69b9      	ldr	r1, [r7, #24]
 800cee8:	0148      	lsls	r0, r1, #5
 800ceea:	69f9      	ldr	r1, [r7, #28]
 800ceec:	4401      	add	r1, r0
 800ceee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cef2:	4313      	orrs	r3, r2
 800cef4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	791b      	ldrb	r3, [r3, #4]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d11f      	bne.n	800cf3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	015a      	lsls	r2, r3, #5
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	4413      	add	r3, r2
 800cf06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	0151      	lsls	r1, r2, #5
 800cf10:	69fa      	ldr	r2, [r7, #28]
 800cf12:	440a      	add	r2, r1
 800cf14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	69ba      	ldr	r2, [r7, #24]
 800cf2e:	0151      	lsls	r1, r2, #5
 800cf30:	69fa      	ldr	r2, [r7, #28]
 800cf32:	440a      	add	r2, r1
 800cf34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d14b      	bne.n	800cfdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d009      	beq.n	800cf60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf58:	461a      	mov	r2, r3
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	695b      	ldr	r3, [r3, #20]
 800cf5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	791b      	ldrb	r3, [r3, #4]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d128      	bne.n	800cfba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d110      	bne.n	800cf9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	69ba      	ldr	r2, [r7, #24]
 800cf88:	0151      	lsls	r1, r2, #5
 800cf8a:	69fa      	ldr	r2, [r7, #28]
 800cf8c:	440a      	add	r2, r1
 800cf8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	e00f      	b.n	800cfba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	015a      	lsls	r2, r3, #5
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	0151      	lsls	r1, r2, #5
 800cfac:	69fa      	ldr	r2, [r7, #28]
 800cfae:	440a      	add	r2, r1
 800cfb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	69ba      	ldr	r2, [r7, #24]
 800cfca:	0151      	lsls	r1, r2, #5
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	440a      	add	r2, r1
 800cfd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	e137      	b.n	800d24c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	015a      	lsls	r2, r3, #5
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	69ba      	ldr	r2, [r7, #24]
 800cfec:	0151      	lsls	r1, r2, #5
 800cfee:	69fa      	ldr	r2, [r7, #28]
 800cff0:	440a      	add	r2, r1
 800cff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cffa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	791b      	ldrb	r3, [r3, #4]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d015      	beq.n	800d030 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 811f 	beq.w	800d24c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	f003 030f 	and.w	r3, r3, #15
 800d01e:	2101      	movs	r1, #1
 800d020:	fa01 f303 	lsl.w	r3, r1, r3
 800d024:	69f9      	ldr	r1, [r7, #28]
 800d026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d02a:	4313      	orrs	r3, r2
 800d02c:	634b      	str	r3, [r1, #52]	; 0x34
 800d02e:	e10d      	b.n	800d24c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d110      	bne.n	800d062 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	0151      	lsls	r1, r2, #5
 800d052:	69fa      	ldr	r2, [r7, #28]
 800d054:	440a      	add	r2, r1
 800d056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	e00f      	b.n	800d082 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	69ba      	ldr	r2, [r7, #24]
 800d072:	0151      	lsls	r1, r2, #5
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	440a      	add	r2, r1
 800d078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d07c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d080:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	6919      	ldr	r1, [r3, #16]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	781a      	ldrb	r2, [r3, #0]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	b298      	uxth	r0, r3
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	4603      	mov	r3, r0
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f000 faea 	bl	800d670 <USB_WritePacket>
 800d09c:	e0d6      	b.n	800d24c <USB_EPStartXfer+0x488>
 800d09e:	bf00      	nop
 800d0a0:	e007ffff 	.word	0xe007ffff
 800d0a4:	fff80000 	.word	0xfff80000
 800d0a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b8:	691a      	ldr	r2, [r3, #16]
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	0159      	lsls	r1, r3, #5
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	440b      	add	r3, r1
 800d0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4b63      	ldr	r3, [pc, #396]	; (800d258 <USB_EPStartXfer+0x494>)
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	015a      	lsls	r2, r3, #5
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	0159      	lsls	r1, r3, #5
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	440b      	add	r3, r1
 800d0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4b5c      	ldr	r3, [pc, #368]	; (800d25c <USB_EPStartXfer+0x498>)
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d123      	bne.n	800d140 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	015a      	lsls	r2, r3, #5
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	4413      	add	r3, r2
 800d100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d104:	691a      	ldr	r2, [r3, #16]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d10e:	69b9      	ldr	r1, [r7, #24]
 800d110:	0148      	lsls	r0, r1, #5
 800d112:	69f9      	ldr	r1, [r7, #28]
 800d114:	4401      	add	r1, r0
 800d116:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d11a:	4313      	orrs	r3, r2
 800d11c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	69fa      	ldr	r2, [r7, #28]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d13c:	6113      	str	r3, [r2, #16]
 800d13e:	e037      	b.n	800d1b0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	699a      	ldr	r2, [r3, #24]
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	4413      	add	r3, r2
 800d14a:	1e5a      	subs	r2, r3, #1
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	fbb2 f3f3 	udiv	r3, r2, r3
 800d154:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	8afa      	ldrh	r2, [r7, #22]
 800d15c:	fb02 f203 	mul.w	r2, r2, r3
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	015a      	lsls	r2, r3, #5
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	4413      	add	r3, r2
 800d16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d170:	691a      	ldr	r2, [r3, #16]
 800d172:	8afb      	ldrh	r3, [r7, #22]
 800d174:	04d9      	lsls	r1, r3, #19
 800d176:	4b3a      	ldr	r3, [pc, #232]	; (800d260 <USB_EPStartXfer+0x49c>)
 800d178:	400b      	ands	r3, r1
 800d17a:	69b9      	ldr	r1, [r7, #24]
 800d17c:	0148      	lsls	r0, r1, #5
 800d17e:	69f9      	ldr	r1, [r7, #28]
 800d180:	4401      	add	r1, r0
 800d182:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d186:	4313      	orrs	r3, r2
 800d188:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	4413      	add	r3, r2
 800d192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d196:	691a      	ldr	r2, [r3, #16]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	69db      	ldr	r3, [r3, #28]
 800d19c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1a0:	69b9      	ldr	r1, [r7, #24]
 800d1a2:	0148      	lsls	r0, r1, #5
 800d1a4:	69f9      	ldr	r1, [r7, #28]
 800d1a6:	4401      	add	r1, r0
 800d1a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d10d      	bne.n	800d1d2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	691b      	ldr	r3, [r3, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d009      	beq.n	800d1d2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	6919      	ldr	r1, [r3, #16]
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	015a      	lsls	r2, r3, #5
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ce:	460a      	mov	r2, r1
 800d1d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	791b      	ldrb	r3, [r3, #4]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d128      	bne.n	800d22c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d110      	bne.n	800d20c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	69ba      	ldr	r2, [r7, #24]
 800d1fa:	0151      	lsls	r1, r2, #5
 800d1fc:	69fa      	ldr	r2, [r7, #28]
 800d1fe:	440a      	add	r2, r1
 800d200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d208:	6013      	str	r3, [r2, #0]
 800d20a:	e00f      	b.n	800d22c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	015a      	lsls	r2, r3, #5
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	4413      	add	r3, r2
 800d214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	69ba      	ldr	r2, [r7, #24]
 800d21c:	0151      	lsls	r1, r2, #5
 800d21e:	69fa      	ldr	r2, [r7, #28]
 800d220:	440a      	add	r2, r1
 800d222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d22a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	015a      	lsls	r2, r3, #5
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	4413      	add	r3, r2
 800d234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	69ba      	ldr	r2, [r7, #24]
 800d23c:	0151      	lsls	r1, r2, #5
 800d23e:	69fa      	ldr	r2, [r7, #28]
 800d240:	440a      	add	r2, r1
 800d242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d24a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3720      	adds	r7, #32
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	fff80000 	.word	0xfff80000
 800d25c:	e007ffff 	.word	0xe007ffff
 800d260:	1ff80000 	.word	0x1ff80000

0800d264 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d264:	b480      	push	{r7}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	4613      	mov	r3, r2
 800d270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	785b      	ldrb	r3, [r3, #1]
 800d280:	2b01      	cmp	r3, #1
 800d282:	f040 80ce 	bne.w	800d422 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d132      	bne.n	800d2f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	4413      	add	r3, r2
 800d296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d29a:	691a      	ldr	r2, [r3, #16]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	0159      	lsls	r1, r3, #5
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	440b      	add	r3, r1
 800d2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4b9a      	ldr	r3, [pc, #616]	; (800d514 <USB_EP0StartXfer+0x2b0>)
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	0151      	lsls	r1, r2, #5
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	440a      	add	r2, r1
 800d2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2dc:	691a      	ldr	r2, [r3, #16]
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	0159      	lsls	r1, r3, #5
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	440b      	add	r3, r1
 800d2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4b8a      	ldr	r3, [pc, #552]	; (800d518 <USB_EP0StartXfer+0x2b4>)
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	610b      	str	r3, [r1, #16]
 800d2f2:	e04e      	b.n	800d392 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	015a      	lsls	r2, r3, #5
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d300:	691a      	ldr	r2, [r3, #16]
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	0159      	lsls	r1, r3, #5
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	440b      	add	r3, r1
 800d30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d30e:	4619      	mov	r1, r3
 800d310:	4b81      	ldr	r3, [pc, #516]	; (800d518 <USB_EP0StartXfer+0x2b4>)
 800d312:	4013      	ands	r3, r2
 800d314:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	015a      	lsls	r2, r3, #5
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	4413      	add	r3, r2
 800d31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d322:	691a      	ldr	r2, [r3, #16]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	0159      	lsls	r1, r3, #5
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	440b      	add	r3, r1
 800d32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d330:	4619      	mov	r1, r3
 800d332:	4b78      	ldr	r3, [pc, #480]	; (800d514 <USB_EP0StartXfer+0x2b0>)
 800d334:	4013      	ands	r3, r2
 800d336:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	699a      	ldr	r2, [r3, #24]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	429a      	cmp	r2, r3
 800d342:	d903      	bls.n	800d34c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	68da      	ldr	r2, [r3, #12]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	015a      	lsls	r2, r3, #5
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	4413      	add	r3, r2
 800d354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	0151      	lsls	r1, r2, #5
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	440a      	add	r2, r1
 800d362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d36a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	015a      	lsls	r2, r3, #5
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	4413      	add	r3, r2
 800d374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d378:	691a      	ldr	r2, [r3, #16]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d382:	6939      	ldr	r1, [r7, #16]
 800d384:	0148      	lsls	r0, r1, #5
 800d386:	6979      	ldr	r1, [r7, #20]
 800d388:	4401      	add	r1, r0
 800d38a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d38e:	4313      	orrs	r3, r2
 800d390:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d392:	79fb      	ldrb	r3, [r7, #7]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d11e      	bne.n	800d3d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d009      	beq.n	800d3b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	015a      	lsls	r2, r3, #5
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	0151      	lsls	r1, r2, #5
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	440a      	add	r2, r1
 800d3ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	e097      	b.n	800d506 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	0151      	lsls	r1, r2, #5
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	440a      	add	r2, r1
 800d3ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	699b      	ldr	r3, [r3, #24]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 8083 	beq.w	800d506 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f003 030f 	and.w	r3, r3, #15
 800d410:	2101      	movs	r1, #1
 800d412:	fa01 f303 	lsl.w	r3, r1, r3
 800d416:	6979      	ldr	r1, [r7, #20]
 800d418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d41c:	4313      	orrs	r3, r2
 800d41e:	634b      	str	r3, [r1, #52]	; 0x34
 800d420:	e071      	b.n	800d506 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d42e:	691a      	ldr	r2, [r3, #16]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	0159      	lsls	r1, r3, #5
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	440b      	add	r3, r1
 800d438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43c:	4619      	mov	r1, r3
 800d43e:	4b36      	ldr	r3, [pc, #216]	; (800d518 <USB_EP0StartXfer+0x2b4>)
 800d440:	4013      	ands	r3, r2
 800d442:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d450:	691a      	ldr	r2, [r3, #16]
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	0159      	lsls	r1, r3, #5
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	440b      	add	r3, r1
 800d45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45e:	4619      	mov	r1, r3
 800d460:	4b2c      	ldr	r3, [pc, #176]	; (800d514 <USB_EP0StartXfer+0x2b0>)
 800d462:	4013      	ands	r3, r2
 800d464:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	699b      	ldr	r3, [r3, #24]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	68da      	ldr	r2, [r3, #12]
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	68da      	ldr	r2, [r3, #12]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	015a      	lsls	r2, r3, #5
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	4413      	add	r3, r2
 800d486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	693a      	ldr	r2, [r7, #16]
 800d48e:	0151      	lsls	r1, r2, #5
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	440a      	add	r2, r1
 800d494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d49c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	015a      	lsls	r2, r3, #5
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4aa:	691a      	ldr	r2, [r3, #16]
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	69db      	ldr	r3, [r3, #28]
 800d4b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4b4:	6939      	ldr	r1, [r7, #16]
 800d4b6:	0148      	lsls	r0, r1, #5
 800d4b8:	6979      	ldr	r1, [r7, #20]
 800d4ba:	4401      	add	r1, r0
 800d4bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d10d      	bne.n	800d4e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d009      	beq.n	800d4e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	6919      	ldr	r1, [r3, #16]
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	015a      	lsls	r2, r3, #5
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	4413      	add	r3, r2
 800d4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e2:	460a      	mov	r2, r1
 800d4e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	015a      	lsls	r2, r3, #5
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	693a      	ldr	r2, [r7, #16]
 800d4f6:	0151      	lsls	r1, r2, #5
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	440a      	add	r2, r1
 800d4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d500:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d504:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	e007ffff 	.word	0xe007ffff
 800d518:	fff80000 	.word	0xfff80000

0800d51c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b087      	sub	sp, #28
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d526:	2300      	movs	r3, #0
 800d528:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d52a:	2300      	movs	r3, #0
 800d52c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	785b      	ldrb	r3, [r3, #1]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d14a      	bne.n	800d5d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	015a      	lsls	r2, r3, #5
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	4413      	add	r3, r2
 800d544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d54e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d552:	f040 8086 	bne.w	800d662 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	7812      	ldrb	r2, [r2, #0]
 800d56a:	0151      	lsls	r1, r2, #5
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	440a      	add	r2, r1
 800d570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d574:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d578:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	015a      	lsls	r2, r3, #5
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	4413      	add	r3, r2
 800d584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	7812      	ldrb	r2, [r2, #0]
 800d58e:	0151      	lsls	r1, r2, #5
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	440a      	add	r2, r1
 800d594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d59c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f242 7210 	movw	r2, #10000	; 0x2710
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d902      	bls.n	800d5b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	75fb      	strb	r3, [r7, #23]
          break;
 800d5b2:	e056      	b.n	800d662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5cc:	d0e7      	beq.n	800d59e <USB_EPStopXfer+0x82>
 800d5ce:	e048      	b.n	800d662 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	015a      	lsls	r2, r3, #5
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	4413      	add	r3, r2
 800d5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5e8:	d13b      	bne.n	800d662 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	015a      	lsls	r2, r3, #5
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	7812      	ldrb	r2, [r2, #0]
 800d5fe:	0151      	lsls	r1, r2, #5
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	440a      	add	r2, r1
 800d604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d60c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	015a      	lsls	r2, r3, #5
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	4413      	add	r3, r2
 800d618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	7812      	ldrb	r2, [r2, #0]
 800d622:	0151      	lsls	r1, r2, #5
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	440a      	add	r2, r1
 800d628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d62c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d630:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3301      	adds	r3, #1
 800d636:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f242 7210 	movw	r2, #10000	; 0x2710
 800d63e:	4293      	cmp	r3, r2
 800d640:	d902      	bls.n	800d648 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	75fb      	strb	r3, [r7, #23]
          break;
 800d646:	e00c      	b.n	800d662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	015a      	lsls	r2, r3, #5
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	4413      	add	r3, r2
 800d652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d65c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d660:	d0e7      	beq.n	800d632 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d662:	7dfb      	ldrb	r3, [r7, #23]
}
 800d664:	4618      	mov	r0, r3
 800d666:	371c      	adds	r7, #28
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d670:	b480      	push	{r7}
 800d672:	b089      	sub	sp, #36	; 0x24
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	4611      	mov	r1, r2
 800d67c:	461a      	mov	r2, r3
 800d67e:	460b      	mov	r3, r1
 800d680:	71fb      	strb	r3, [r7, #7]
 800d682:	4613      	mov	r3, r2
 800d684:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d68e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d692:	2b00      	cmp	r3, #0
 800d694:	d123      	bne.n	800d6de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d696:	88bb      	ldrh	r3, [r7, #4]
 800d698:	3303      	adds	r3, #3
 800d69a:	089b      	lsrs	r3, r3, #2
 800d69c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61bb      	str	r3, [r7, #24]
 800d6a2:	e018      	b.n	800d6d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	031a      	lsls	r2, r3, #12
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	61bb      	str	r3, [r7, #24]
 800d6d6:	69ba      	ldr	r2, [r7, #24]
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d3e2      	bcc.n	800d6a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3724      	adds	r7, #36	; 0x24
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b08b      	sub	sp, #44	; 0x2c
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d702:	88fb      	ldrh	r3, [r7, #6]
 800d704:	089b      	lsrs	r3, r3, #2
 800d706:	b29b      	uxth	r3, r3
 800d708:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d70a:	88fb      	ldrh	r3, [r7, #6]
 800d70c:	f003 0303 	and.w	r3, r3, #3
 800d710:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d712:	2300      	movs	r3, #0
 800d714:	623b      	str	r3, [r7, #32]
 800d716:	e014      	b.n	800d742 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	601a      	str	r2, [r3, #0]
    pDest++;
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	3301      	adds	r3, #1
 800d728:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	3301      	adds	r3, #1
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	3301      	adds	r3, #1
 800d734:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d738:	3301      	adds	r3, #1
 800d73a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	3301      	adds	r3, #1
 800d740:	623b      	str	r3, [r7, #32]
 800d742:	6a3a      	ldr	r2, [r7, #32]
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	429a      	cmp	r2, r3
 800d748:	d3e6      	bcc.n	800d718 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d74a:	8bfb      	ldrh	r3, [r7, #30]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d01e      	beq.n	800d78e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d750:	2300      	movs	r3, #0
 800d752:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d75a:	461a      	mov	r2, r3
 800d75c:	f107 0310 	add.w	r3, r7, #16
 800d760:	6812      	ldr	r2, [r2, #0]
 800d762:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	fa22 f303 	lsr.w	r3, r2, r3
 800d770:	b2da      	uxtb	r2, r3
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	701a      	strb	r2, [r3, #0]
      i++;
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	3301      	adds	r3, #1
 800d77a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77e:	3301      	adds	r3, #1
 800d780:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d782:	8bfb      	ldrh	r3, [r7, #30]
 800d784:	3b01      	subs	r3, #1
 800d786:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d788:	8bfb      	ldrh	r3, [r7, #30]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1ea      	bne.n	800d764 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d790:	4618      	mov	r0, r3
 800d792:	372c      	adds	r7, #44	; 0x2c
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	785b      	ldrb	r3, [r3, #1]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d12c      	bne.n	800d812 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	015a      	lsls	r2, r3, #5
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	4413      	add	r3, r2
 800d7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	db12      	blt.n	800d7f0 <USB_EPSetStall+0x54>
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00f      	beq.n	800d7f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	015a      	lsls	r2, r3, #5
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	0151      	lsls	r1, r2, #5
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	440a      	add	r2, r1
 800d7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	015a      	lsls	r2, r3, #5
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	0151      	lsls	r1, r2, #5
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	440a      	add	r2, r1
 800d806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d80a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	e02b      	b.n	800d86a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	015a      	lsls	r2, r3, #5
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	4413      	add	r3, r2
 800d81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	db12      	blt.n	800d84a <USB_EPSetStall+0xae>
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00f      	beq.n	800d84a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	0151      	lsls	r1, r2, #5
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	440a      	add	r2, r1
 800d840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d844:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d848:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	015a      	lsls	r2, r3, #5
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	4413      	add	r3, r2
 800d852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	0151      	lsls	r1, r2, #5
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	440a      	add	r2, r1
 800d860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d868:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d86a:	2300      	movs	r3, #0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3714      	adds	r7, #20
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	785b      	ldrb	r3, [r3, #1]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d128      	bne.n	800d8e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	015a      	lsls	r2, r3, #5
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	4413      	add	r3, r2
 800d89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	0151      	lsls	r1, r2, #5
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	440a      	add	r2, r1
 800d8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	791b      	ldrb	r3, [r3, #4]
 800d8b8:	2b03      	cmp	r3, #3
 800d8ba:	d003      	beq.n	800d8c4 <USB_EPClearStall+0x4c>
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	791b      	ldrb	r3, [r3, #4]
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d138      	bne.n	800d936 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	015a      	lsls	r2, r3, #5
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	0151      	lsls	r1, r2, #5
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	440a      	add	r2, r1
 800d8da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	e027      	b.n	800d936 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	015a      	lsls	r2, r3, #5
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	0151      	lsls	r1, r2, #5
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	440a      	add	r2, r1
 800d8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d900:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d904:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	791b      	ldrb	r3, [r3, #4]
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	d003      	beq.n	800d916 <USB_EPClearStall+0x9e>
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	791b      	ldrb	r3, [r3, #4]
 800d912:	2b02      	cmp	r3, #2
 800d914:	d10f      	bne.n	800d936 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	015a      	lsls	r2, r3, #5
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	0151      	lsls	r1, r2, #5
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	440a      	add	r2, r1
 800d92c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d934:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d962:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d966:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	78fb      	ldrb	r3, [r7, #3]
 800d972:	011b      	lsls	r3, r3, #4
 800d974:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d978:	68f9      	ldr	r1, [r7, #12]
 800d97a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d97e:	4313      	orrs	r3, r2
 800d980:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9aa:	f023 0303 	bic.w	r3, r3, #3
 800d9ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9be:	f023 0302 	bic.w	r3, r3, #2
 800d9c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr

0800d9d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d9d2:	b480      	push	{r7}
 800d9d4:	b085      	sub	sp, #20
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9ec:	f023 0303 	bic.w	r3, r3, #3
 800d9f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da00:	f043 0302 	orr.w	r3, r3, #2
 800da04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	4013      	ands	r3, r2
 800da2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800da2c:	68fb      	ldr	r3, [r7, #12]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b085      	sub	sp, #20
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	4013      	ands	r3, r2
 800da5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	0c1b      	lsrs	r3, r3, #16
}
 800da62:	4618      	mov	r0, r3
 800da64:	3714      	adds	r7, #20
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da6e:	b480      	push	{r7}
 800da70:	b085      	sub	sp, #20
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	4013      	ands	r3, r2
 800da90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	b29b      	uxth	r3, r3
}
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800daa2:	b480      	push	{r7}
 800daa4:	b085      	sub	sp, #20
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	460b      	mov	r3, r1
 800daac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dab2:	78fb      	ldrb	r3, [r7, #3]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	4013      	ands	r3, r2
 800dace:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dad0:	68bb      	ldr	r3, [r7, #8]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dade:	b480      	push	{r7}
 800dae0:	b087      	sub	sp, #28
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800db02:	78fb      	ldrb	r3, [r7, #3]
 800db04:	f003 030f 	and.w	r3, r3, #15
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	fa22 f303 	lsr.w	r3, r2, r3
 800db0e:	01db      	lsls	r3, r3, #7
 800db10:	b2db      	uxtb	r3, r3
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	4313      	orrs	r3, r2
 800db16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	015a      	lsls	r2, r3, #5
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	4413      	add	r3, r2
 800db20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	693a      	ldr	r2, [r7, #16]
 800db28:	4013      	ands	r3, r2
 800db2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800db2c:	68bb      	ldr	r3, [r7, #8]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	371c      	adds	r7, #28
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	f003 0301 	and.w	r3, r3, #1
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
	...

0800db58 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db72:	4619      	mov	r1, r3
 800db74:	4b09      	ldr	r3, [pc, #36]	; (800db9c <USB_ActivateSetup+0x44>)
 800db76:	4013      	ands	r3, r2
 800db78:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	fffff800 	.word	0xfffff800

0800dba0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b087      	sub	sp, #28
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	333c      	adds	r3, #60	; 0x3c
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	4a26      	ldr	r2, [pc, #152]	; (800dc58 <USB_EP0_OutStart+0xb8>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d90a      	bls.n	800dbda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbd4:	d101      	bne.n	800dbda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	e037      	b.n	800dc4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc08:	f043 0318 	orr.w	r3, r3, #24
 800dc0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc14:	691b      	ldr	r3, [r3, #16]
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dc20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dc22:	7afb      	ldrb	r3, [r7, #11]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d10f      	bne.n	800dc48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc2e:	461a      	mov	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	697a      	ldr	r2, [r7, #20]
 800dc3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dc46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	371c      	adds	r7, #28
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	4f54300a 	.word	0x4f54300a

0800dc5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc64:	2300      	movs	r3, #0
 800dc66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	4a13      	ldr	r2, [pc, #76]	; (800dcc0 <USB_CoreReset+0x64>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d901      	bls.n	800dc7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e01b      	b.n	800dcb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	daf2      	bge.n	800dc68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dc82:	2300      	movs	r3, #0
 800dc84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	f043 0201 	orr.w	r2, r3, #1
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3301      	adds	r3, #1
 800dc96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4a09      	ldr	r2, [pc, #36]	; (800dcc0 <USB_CoreReset+0x64>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d901      	bls.n	800dca4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dca0:	2303      	movs	r3, #3
 800dca2:	e006      	b.n	800dcb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d0f0      	beq.n	800dc92 <USB_CoreReset+0x36>

  return HAL_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	00030d40 	.word	0x00030d40

0800dcc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	460b      	mov	r3, r1
 800dcce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dcd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dcd4:	f002 fc5a 	bl	801058c <USBD_static_malloc>
 800dcd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d109      	bne.n	800dcf4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	32b0      	adds	r2, #176	; 0xb0
 800dcea:	2100      	movs	r1, #0
 800dcec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	e0d4      	b.n	800de9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dcf4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f002 fcc2 	bl	8010684 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	32b0      	adds	r2, #176	; 0xb0
 800dd0a:	68f9      	ldr	r1, [r7, #12]
 800dd0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	32b0      	adds	r2, #176	; 0xb0
 800dd1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	7c1b      	ldrb	r3, [r3, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d138      	bne.n	800dd9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dd2c:	4b5e      	ldr	r3, [pc, #376]	; (800dea8 <USBD_CDC_Init+0x1e4>)
 800dd2e:	7819      	ldrb	r1, [r3, #0]
 800dd30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd34:	2202      	movs	r2, #2
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f002 fb05 	bl	8010346 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dd3c:	4b5a      	ldr	r3, [pc, #360]	; (800dea8 <USBD_CDC_Init+0x1e4>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	f003 020f 	and.w	r2, r3, #15
 800dd44:	6879      	ldr	r1, [r7, #4]
 800dd46:	4613      	mov	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4413      	add	r3, r2
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	440b      	add	r3, r1
 800dd50:	3324      	adds	r3, #36	; 0x24
 800dd52:	2201      	movs	r2, #1
 800dd54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dd56:	4b55      	ldr	r3, [pc, #340]	; (800deac <USBD_CDC_Init+0x1e8>)
 800dd58:	7819      	ldrb	r1, [r3, #0]
 800dd5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd5e:	2202      	movs	r2, #2
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f002 faf0 	bl	8010346 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dd66:	4b51      	ldr	r3, [pc, #324]	; (800deac <USBD_CDC_Init+0x1e8>)
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	f003 020f 	and.w	r2, r3, #15
 800dd6e:	6879      	ldr	r1, [r7, #4]
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	440b      	add	r3, r1
 800dd7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd7e:	2201      	movs	r2, #1
 800dd80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dd82:	4b4b      	ldr	r3, [pc, #300]	; (800deb0 <USBD_CDC_Init+0x1ec>)
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	f003 020f 	and.w	r2, r3, #15
 800dd8a:	6879      	ldr	r1, [r7, #4]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	440b      	add	r3, r1
 800dd96:	3326      	adds	r3, #38	; 0x26
 800dd98:	2210      	movs	r2, #16
 800dd9a:	801a      	strh	r2, [r3, #0]
 800dd9c:	e035      	b.n	800de0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dd9e:	4b42      	ldr	r3, [pc, #264]	; (800dea8 <USBD_CDC_Init+0x1e4>)
 800dda0:	7819      	ldrb	r1, [r3, #0]
 800dda2:	2340      	movs	r3, #64	; 0x40
 800dda4:	2202      	movs	r2, #2
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f002 facd 	bl	8010346 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ddac:	4b3e      	ldr	r3, [pc, #248]	; (800dea8 <USBD_CDC_Init+0x1e4>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	f003 020f 	and.w	r2, r3, #15
 800ddb4:	6879      	ldr	r1, [r7, #4]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	440b      	add	r3, r1
 800ddc0:	3324      	adds	r3, #36	; 0x24
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ddc6:	4b39      	ldr	r3, [pc, #228]	; (800deac <USBD_CDC_Init+0x1e8>)
 800ddc8:	7819      	ldrb	r1, [r3, #0]
 800ddca:	2340      	movs	r3, #64	; 0x40
 800ddcc:	2202      	movs	r2, #2
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f002 fab9 	bl	8010346 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ddd4:	4b35      	ldr	r3, [pc, #212]	; (800deac <USBD_CDC_Init+0x1e8>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	f003 020f 	and.w	r2, r3, #15
 800dddc:	6879      	ldr	r1, [r7, #4]
 800ddde:	4613      	mov	r3, r2
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	4413      	add	r3, r2
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	440b      	add	r3, r1
 800dde8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddec:	2201      	movs	r2, #1
 800ddee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ddf0:	4b2f      	ldr	r3, [pc, #188]	; (800deb0 <USBD_CDC_Init+0x1ec>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	f003 020f 	and.w	r2, r3, #15
 800ddf8:	6879      	ldr	r1, [r7, #4]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	4413      	add	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	440b      	add	r3, r1
 800de04:	3326      	adds	r3, #38	; 0x26
 800de06:	2210      	movs	r2, #16
 800de08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800de0a:	4b29      	ldr	r3, [pc, #164]	; (800deb0 <USBD_CDC_Init+0x1ec>)
 800de0c:	7819      	ldrb	r1, [r3, #0]
 800de0e:	2308      	movs	r3, #8
 800de10:	2203      	movs	r2, #3
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f002 fa97 	bl	8010346 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800de18:	4b25      	ldr	r3, [pc, #148]	; (800deb0 <USBD_CDC_Init+0x1ec>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	f003 020f 	and.w	r2, r3, #15
 800de20:	6879      	ldr	r1, [r7, #4]
 800de22:	4613      	mov	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	440b      	add	r3, r1
 800de2c:	3324      	adds	r3, #36	; 0x24
 800de2e:	2201      	movs	r2, #1
 800de30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	33b0      	adds	r3, #176	; 0xb0
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4413      	add	r3, r2
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800de68:	2302      	movs	r3, #2
 800de6a:	e018      	b.n	800de9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7c1b      	ldrb	r3, [r3, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10a      	bne.n	800de8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de74:	4b0d      	ldr	r3, [pc, #52]	; (800deac <USBD_CDC_Init+0x1e8>)
 800de76:	7819      	ldrb	r1, [r3, #0]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f002 fb4e 	bl	8010524 <USBD_LL_PrepareReceive>
 800de88:	e008      	b.n	800de9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de8a:	4b08      	ldr	r3, [pc, #32]	; (800deac <USBD_CDC_Init+0x1e8>)
 800de8c:	7819      	ldrb	r1, [r3, #0]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de94:	2340      	movs	r3, #64	; 0x40
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f002 fb44 	bl	8010524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	2400009b 	.word	0x2400009b
 800deac:	2400009c 	.word	0x2400009c
 800deb0:	2400009d 	.word	0x2400009d

0800deb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	460b      	mov	r3, r1
 800debe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dec0:	4b3a      	ldr	r3, [pc, #232]	; (800dfac <USBD_CDC_DeInit+0xf8>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	4619      	mov	r1, r3
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f002 fa63 	bl	8010392 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800decc:	4b37      	ldr	r3, [pc, #220]	; (800dfac <USBD_CDC_DeInit+0xf8>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f003 020f 	and.w	r2, r3, #15
 800ded4:	6879      	ldr	r1, [r7, #4]
 800ded6:	4613      	mov	r3, r2
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	440b      	add	r3, r1
 800dee0:	3324      	adds	r3, #36	; 0x24
 800dee2:	2200      	movs	r2, #0
 800dee4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dee6:	4b32      	ldr	r3, [pc, #200]	; (800dfb0 <USBD_CDC_DeInit+0xfc>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f002 fa50 	bl	8010392 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800def2:	4b2f      	ldr	r3, [pc, #188]	; (800dfb0 <USBD_CDC_DeInit+0xfc>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	f003 020f 	and.w	r2, r3, #15
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	4613      	mov	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	440b      	add	r3, r1
 800df06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df0a:	2200      	movs	r2, #0
 800df0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800df0e:	4b29      	ldr	r3, [pc, #164]	; (800dfb4 <USBD_CDC_DeInit+0x100>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f002 fa3c 	bl	8010392 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800df1a:	4b26      	ldr	r3, [pc, #152]	; (800dfb4 <USBD_CDC_DeInit+0x100>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	f003 020f 	and.w	r2, r3, #15
 800df22:	6879      	ldr	r1, [r7, #4]
 800df24:	4613      	mov	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4413      	add	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	440b      	add	r3, r1
 800df2e:	3324      	adds	r3, #36	; 0x24
 800df30:	2200      	movs	r2, #0
 800df32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800df34:	4b1f      	ldr	r3, [pc, #124]	; (800dfb4 <USBD_CDC_DeInit+0x100>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	f003 020f 	and.w	r2, r3, #15
 800df3c:	6879      	ldr	r1, [r7, #4]
 800df3e:	4613      	mov	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	440b      	add	r3, r1
 800df48:	3326      	adds	r3, #38	; 0x26
 800df4a:	2200      	movs	r2, #0
 800df4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	32b0      	adds	r2, #176	; 0xb0
 800df58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01f      	beq.n	800dfa0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	33b0      	adds	r3, #176	; 0xb0
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	32b0      	adds	r2, #176	; 0xb0
 800df7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df82:	4618      	mov	r0, r3
 800df84:	f002 fb10 	bl	80105a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	32b0      	adds	r2, #176	; 0xb0
 800df92:	2100      	movs	r1, #0
 800df94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	2400009b 	.word	0x2400009b
 800dfb0:	2400009c 	.word	0x2400009c
 800dfb4:	2400009d 	.word	0x2400009d

0800dfb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	32b0      	adds	r2, #176	; 0xb0
 800dfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e0bf      	b.n	800e168 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d050      	beq.n	800e096 <USBD_CDC_Setup+0xde>
 800dff4:	2b20      	cmp	r3, #32
 800dff6:	f040 80af 	bne.w	800e158 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	88db      	ldrh	r3, [r3, #6]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d03a      	beq.n	800e078 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	b25b      	sxtb	r3, r3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	da1b      	bge.n	800e044 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	33b0      	adds	r3, #176	; 0xb0
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	4413      	add	r3, r2
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	683a      	ldr	r2, [r7, #0]
 800e020:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e022:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e024:	683a      	ldr	r2, [r7, #0]
 800e026:	88d2      	ldrh	r2, [r2, #6]
 800e028:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	88db      	ldrh	r3, [r3, #6]
 800e02e:	2b07      	cmp	r3, #7
 800e030:	bf28      	it	cs
 800e032:	2307      	movcs	r3, #7
 800e034:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	89fa      	ldrh	r2, [r7, #14]
 800e03a:	4619      	mov	r1, r3
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f001 fd43 	bl	800fac8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e042:	e090      	b.n	800e166 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	785a      	ldrb	r2, [r3, #1]
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	88db      	ldrh	r3, [r3, #6]
 800e052:	2b3f      	cmp	r3, #63	; 0x3f
 800e054:	d803      	bhi.n	800e05e <USBD_CDC_Setup+0xa6>
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	88db      	ldrh	r3, [r3, #6]
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	e000      	b.n	800e060 <USBD_CDC_Setup+0xa8>
 800e05e:	2240      	movs	r2, #64	; 0x40
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e066:	6939      	ldr	r1, [r7, #16]
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e06e:	461a      	mov	r2, r3
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f001 fd55 	bl	800fb20 <USBD_CtlPrepareRx>
      break;
 800e076:	e076      	b.n	800e166 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	33b0      	adds	r3, #176	; 0xb0
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	683a      	ldr	r2, [r7, #0]
 800e08c:	7850      	ldrb	r0, [r2, #1]
 800e08e:	2200      	movs	r2, #0
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	4798      	blx	r3
      break;
 800e094:	e067      	b.n	800e166 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	785b      	ldrb	r3, [r3, #1]
 800e09a:	2b0b      	cmp	r3, #11
 800e09c:	d851      	bhi.n	800e142 <USBD_CDC_Setup+0x18a>
 800e09e:	a201      	add	r2, pc, #4	; (adr r2, 800e0a4 <USBD_CDC_Setup+0xec>)
 800e0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a4:	0800e0d5 	.word	0x0800e0d5
 800e0a8:	0800e151 	.word	0x0800e151
 800e0ac:	0800e143 	.word	0x0800e143
 800e0b0:	0800e143 	.word	0x0800e143
 800e0b4:	0800e143 	.word	0x0800e143
 800e0b8:	0800e143 	.word	0x0800e143
 800e0bc:	0800e143 	.word	0x0800e143
 800e0c0:	0800e143 	.word	0x0800e143
 800e0c4:	0800e143 	.word	0x0800e143
 800e0c8:	0800e143 	.word	0x0800e143
 800e0cc:	0800e0ff 	.word	0x0800e0ff
 800e0d0:	0800e129 	.word	0x0800e129
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d107      	bne.n	800e0f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e0e0:	f107 030a 	add.w	r3, r7, #10
 800e0e4:	2202      	movs	r2, #2
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 fced 	bl	800fac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e0ee:	e032      	b.n	800e156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e0f0:	6839      	ldr	r1, [r7, #0]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f001 fc77 	bl	800f9e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	75fb      	strb	r3, [r7, #23]
          break;
 800e0fc:	e02b      	b.n	800e156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b03      	cmp	r3, #3
 800e108:	d107      	bne.n	800e11a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e10a:	f107 030d 	add.w	r3, r7, #13
 800e10e:	2201      	movs	r2, #1
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f001 fcd8 	bl	800fac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e118:	e01d      	b.n	800e156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f001 fc62 	bl	800f9e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e122:	2303      	movs	r3, #3
 800e124:	75fb      	strb	r3, [r7, #23]
          break;
 800e126:	e016      	b.n	800e156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	2b03      	cmp	r3, #3
 800e132:	d00f      	beq.n	800e154 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e134:	6839      	ldr	r1, [r7, #0]
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f001 fc55 	bl	800f9e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e13c:	2303      	movs	r3, #3
 800e13e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e140:	e008      	b.n	800e154 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e142:	6839      	ldr	r1, [r7, #0]
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f001 fc4e 	bl	800f9e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800e14a:	2303      	movs	r3, #3
 800e14c:	75fb      	strb	r3, [r7, #23]
          break;
 800e14e:	e002      	b.n	800e156 <USBD_CDC_Setup+0x19e>
          break;
 800e150:	bf00      	nop
 800e152:	e008      	b.n	800e166 <USBD_CDC_Setup+0x1ae>
          break;
 800e154:	bf00      	nop
      }
      break;
 800e156:	e006      	b.n	800e166 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e158:	6839      	ldr	r1, [r7, #0]
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f001 fc43 	bl	800f9e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800e160:	2303      	movs	r3, #3
 800e162:	75fb      	strb	r3, [r7, #23]
      break;
 800e164:	bf00      	nop
  }

  return (uint8_t)ret;
 800e166:	7dfb      	ldrb	r3, [r7, #23]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3718      	adds	r7, #24
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e182:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	32b0      	adds	r2, #176	; 0xb0
 800e18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e196:	2303      	movs	r3, #3
 800e198:	e065      	b.n	800e266 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	32b0      	adds	r2, #176	; 0xb0
 800e1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e1aa:	78fb      	ldrb	r3, [r7, #3]
 800e1ac:	f003 020f 	and.w	r2, r3, #15
 800e1b0:	6879      	ldr	r1, [r7, #4]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4413      	add	r3, r2
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	440b      	add	r3, r1
 800e1bc:	3318      	adds	r3, #24
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d02f      	beq.n	800e224 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e1c4:	78fb      	ldrb	r3, [r7, #3]
 800e1c6:	f003 020f 	and.w	r2, r3, #15
 800e1ca:	6879      	ldr	r1, [r7, #4]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4413      	add	r3, r2
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	440b      	add	r3, r1
 800e1d6:	3318      	adds	r3, #24
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	78fb      	ldrb	r3, [r7, #3]
 800e1dc:	f003 010f 	and.w	r1, r3, #15
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	440b      	add	r3, r1
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4403      	add	r3, r0
 800e1ec:	3348      	adds	r3, #72	; 0x48
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e1f4:	fb03 f301 	mul.w	r3, r3, r1
 800e1f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d112      	bne.n	800e224 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e1fe:	78fb      	ldrb	r3, [r7, #3]
 800e200:	f003 020f 	and.w	r2, r3, #15
 800e204:	6879      	ldr	r1, [r7, #4]
 800e206:	4613      	mov	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	440b      	add	r3, r1
 800e210:	3318      	adds	r3, #24
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e216:	78f9      	ldrb	r1, [r7, #3]
 800e218:	2300      	movs	r3, #0
 800e21a:	2200      	movs	r2, #0
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f002 f960 	bl	80104e2 <USBD_LL_Transmit>
 800e222:	e01f      	b.n	800e264 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2200      	movs	r2, #0
 800e228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	33b0      	adds	r3, #176	; 0xb0
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d010      	beq.n	800e264 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	33b0      	adds	r3, #176	; 0xb0
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	691b      	ldr	r3, [r3, #16]
 800e254:	68ba      	ldr	r2, [r7, #8]
 800e256:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e260:	78fa      	ldrb	r2, [r7, #3]
 800e262:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b084      	sub	sp, #16
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	460b      	mov	r3, r1
 800e278:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	32b0      	adds	r2, #176	; 0xb0
 800e284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e288:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	32b0      	adds	r2, #176	; 0xb0
 800e294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e01a      	b.n	800e2d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e2a0:	78fb      	ldrb	r3, [r7, #3]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f002 f95e 	bl	8010566 <USBD_LL_GetRxDataSize>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	33b0      	adds	r3, #176	; 0xb0
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	32b0      	adds	r2, #176	; 0xb0
 800e2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d101      	bne.n	800e300 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	e025      	b.n	800e34c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	33b0      	adds	r3, #176	; 0xb0
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	4413      	add	r3, r2
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d01a      	beq.n	800e34a <USBD_CDC_EP0_RxReady+0x6c>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e31a:	2bff      	cmp	r3, #255	; 0xff
 800e31c:	d015      	beq.n	800e34a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	33b0      	adds	r3, #176	; 0xb0
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4413      	add	r3, r2
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e336:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e33e:	b292      	uxth	r2, r2
 800e340:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	22ff      	movs	r2, #255	; 0xff
 800e346:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e35c:	2182      	movs	r1, #130	; 0x82
 800e35e:	4818      	ldr	r0, [pc, #96]	; (800e3c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e360:	f000 fd09 	bl	800ed76 <USBD_GetEpDesc>
 800e364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e366:	2101      	movs	r1, #1
 800e368:	4815      	ldr	r0, [pc, #84]	; (800e3c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e36a:	f000 fd04 	bl	800ed76 <USBD_GetEpDesc>
 800e36e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e370:	2181      	movs	r1, #129	; 0x81
 800e372:	4813      	ldr	r0, [pc, #76]	; (800e3c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e374:	f000 fcff 	bl	800ed76 <USBD_GetEpDesc>
 800e378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	2210      	movs	r2, #16
 800e384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d006      	beq.n	800e39a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	2200      	movs	r2, #0
 800e390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e394:	711a      	strb	r2, [r3, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d006      	beq.n	800e3ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3a8:	711a      	strb	r2, [r3, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2243      	movs	r2, #67	; 0x43
 800e3b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e3b4:	4b02      	ldr	r3, [pc, #8]	; (800e3c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3718      	adds	r7, #24
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	24000058 	.word	0x24000058

0800e3c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e3cc:	2182      	movs	r1, #130	; 0x82
 800e3ce:	4818      	ldr	r0, [pc, #96]	; (800e430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3d0:	f000 fcd1 	bl	800ed76 <USBD_GetEpDesc>
 800e3d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e3d6:	2101      	movs	r1, #1
 800e3d8:	4815      	ldr	r0, [pc, #84]	; (800e430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3da:	f000 fccc 	bl	800ed76 <USBD_GetEpDesc>
 800e3de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e3e0:	2181      	movs	r1, #129	; 0x81
 800e3e2:	4813      	ldr	r0, [pc, #76]	; (800e430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3e4:	f000 fcc7 	bl	800ed76 <USBD_GetEpDesc>
 800e3e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	2210      	movs	r2, #16
 800e3f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d006      	beq.n	800e40a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	2200      	movs	r2, #0
 800e400:	711a      	strb	r2, [r3, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	f042 0202 	orr.w	r2, r2, #2
 800e408:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d006      	beq.n	800e41e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	711a      	strb	r2, [r3, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	f042 0202 	orr.w	r2, r2, #2
 800e41c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2243      	movs	r2, #67	; 0x43
 800e422:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e424:	4b02      	ldr	r3, [pc, #8]	; (800e430 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e426:	4618      	mov	r0, r3
 800e428:	3718      	adds	r7, #24
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	24000058 	.word	0x24000058

0800e434 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e43c:	2182      	movs	r1, #130	; 0x82
 800e43e:	4818      	ldr	r0, [pc, #96]	; (800e4a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e440:	f000 fc99 	bl	800ed76 <USBD_GetEpDesc>
 800e444:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e446:	2101      	movs	r1, #1
 800e448:	4815      	ldr	r0, [pc, #84]	; (800e4a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e44a:	f000 fc94 	bl	800ed76 <USBD_GetEpDesc>
 800e44e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e450:	2181      	movs	r1, #129	; 0x81
 800e452:	4813      	ldr	r0, [pc, #76]	; (800e4a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e454:	f000 fc8f 	bl	800ed76 <USBD_GetEpDesc>
 800e458:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d002      	beq.n	800e466 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	2210      	movs	r2, #16
 800e464:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d006      	beq.n	800e47a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	2200      	movs	r2, #0
 800e470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e474:	711a      	strb	r2, [r3, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d006      	beq.n	800e48e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2200      	movs	r2, #0
 800e484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e488:	711a      	strb	r2, [r3, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2243      	movs	r2, #67	; 0x43
 800e492:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e494:	4b02      	ldr	r3, [pc, #8]	; (800e4a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e496:	4618      	mov	r0, r3
 800e498:	3718      	adds	r7, #24
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	24000058 	.word	0x24000058

0800e4a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	220a      	movs	r2, #10
 800e4b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e4b2:	4b03      	ldr	r3, [pc, #12]	; (800e4c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	24000014 	.word	0x24000014

0800e4c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e4d4:	2303      	movs	r3, #3
 800e4d6:	e009      	b.n	800e4ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	33b0      	adds	r3, #176	; 0xb0
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	683a      	ldr	r2, [r7, #0]
 800e4e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e4ea:	2300      	movs	r3, #0
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b087      	sub	sp, #28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	32b0      	adds	r2, #176	; 0xb0
 800e50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e512:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e51a:	2303      	movs	r3, #3
 800e51c:	e008      	b.n	800e530 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	68ba      	ldr	r2, [r7, #8]
 800e522:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e52e:	2300      	movs	r3, #0
}
 800e530:	4618      	mov	r0, r3
 800e532:	371c      	adds	r7, #28
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b085      	sub	sp, #20
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	32b0      	adds	r2, #176	; 0xb0
 800e550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e554:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e55c:	2303      	movs	r3, #3
 800e55e:	e004      	b.n	800e56a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
	...

0800e578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	32b0      	adds	r2, #176	; 0xb0
 800e58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e58e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	32b0      	adds	r2, #176	; 0xb0
 800e59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d101      	bne.n	800e5a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e5a2:	2303      	movs	r3, #3
 800e5a4:	e018      	b.n	800e5d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	7c1b      	ldrb	r3, [r3, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d10a      	bne.n	800e5c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5ae:	4b0c      	ldr	r3, [pc, #48]	; (800e5e0 <USBD_CDC_ReceivePacket+0x68>)
 800e5b0:	7819      	ldrb	r1, [r3, #0]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f001 ffb1 	bl	8010524 <USBD_LL_PrepareReceive>
 800e5c2:	e008      	b.n	800e5d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5c4:	4b06      	ldr	r3, [pc, #24]	; (800e5e0 <USBD_CDC_ReceivePacket+0x68>)
 800e5c6:	7819      	ldrb	r1, [r3, #0]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5ce:	2340      	movs	r3, #64	; 0x40
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f001 ffa7 	bl	8010524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5d6:	2300      	movs	r3, #0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3710      	adds	r7, #16
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	2400009c 	.word	0x2400009c

0800e5e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	e01f      	b.n	800e63c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	79fa      	ldrb	r2, [r7, #7]
 800e62e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f001 fe1d 	bl	8010270 <USBD_LL_Init>
 800e636:	4603      	mov	r3, r0
 800e638:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e64e:	2300      	movs	r3, #0
 800e650:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d101      	bne.n	800e65c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e658:	2303      	movs	r3, #3
 800e65a:	e025      	b.n	800e6a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	32ae      	adds	r2, #174	; 0xae
 800e66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00f      	beq.n	800e698 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	32ae      	adds	r2, #174	; 0xae
 800e682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e688:	f107 020e 	add.w	r2, r7, #14
 800e68c:	4610      	mov	r0, r2
 800e68e:	4798      	blx	r3
 800e690:	4602      	mov	r2, r0
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f001 fe29 	bl	8010310 <USBD_LL_Start>
 800e6be:	4603      	mov	r3, r0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	370c      	adds	r7, #12
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr

0800e6de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d009      	beq.n	800e70c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	78fa      	ldrb	r2, [r7, #3]
 800e702:	4611      	mov	r1, r2
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	4798      	blx	r3
 800e708:	4603      	mov	r3, r0
 800e70a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b084      	sub	sp, #16
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	460b      	mov	r3, r1
 800e720:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e722:	2300      	movs	r3, #0
 800e724:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	78fa      	ldrb	r2, [r7, #3]
 800e730:	4611      	mov	r1, r2
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	4798      	blx	r3
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d001      	beq.n	800e740 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e73c:	2303      	movs	r3, #3
 800e73e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e740:	7bfb      	ldrb	r3, [r7, #15]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e75a:	6839      	ldr	r1, [r7, #0]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f001 f908 	bl	800f972 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2201      	movs	r2, #1
 800e766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e770:	461a      	mov	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e77e:	f003 031f 	and.w	r3, r3, #31
 800e782:	2b02      	cmp	r3, #2
 800e784:	d01a      	beq.n	800e7bc <USBD_LL_SetupStage+0x72>
 800e786:	2b02      	cmp	r3, #2
 800e788:	d822      	bhi.n	800e7d0 <USBD_LL_SetupStage+0x86>
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <USBD_LL_SetupStage+0x4a>
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d00a      	beq.n	800e7a8 <USBD_LL_SetupStage+0x5e>
 800e792:	e01d      	b.n	800e7d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fb5f 	bl	800ee60 <USBD_StdDevReq>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a6:	e020      	b.n	800e7ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fbc7 	bl	800ef44 <USBD_StdItfReq>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800e7ba:	e016      	b.n	800e7ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fc29 	bl	800f01c <USBD_StdEPReq>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e7ce:	e00c      	b.n	800e7ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f001 fdf6 	bl	80103d0 <USBD_LL_StallEP>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7e8:	bf00      	nop
  }

  return ret;
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e806:	7afb      	ldrb	r3, [r7, #11]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d16e      	bne.n	800e8ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	f040 8098 	bne.w	800e950 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	689a      	ldr	r2, [r3, #8]
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d913      	bls.n	800e854 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	689a      	ldr	r2, [r3, #8]
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	1ad2      	subs	r2, r2, r3
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	68da      	ldr	r2, [r3, #12]
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	4293      	cmp	r3, r2
 800e844:	bf28      	it	cs
 800e846:	4613      	movcs	r3, r2
 800e848:	461a      	mov	r2, r3
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f001 f984 	bl	800fb5a <USBD_CtlContinueRx>
 800e852:	e07d      	b.n	800e950 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e85a:	f003 031f 	and.w	r3, r3, #31
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d014      	beq.n	800e88c <USBD_LL_DataOutStage+0x98>
 800e862:	2b02      	cmp	r3, #2
 800e864:	d81d      	bhi.n	800e8a2 <USBD_LL_DataOutStage+0xae>
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <USBD_LL_DataOutStage+0x7c>
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d003      	beq.n	800e876 <USBD_LL_DataOutStage+0x82>
 800e86e:	e018      	b.n	800e8a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e870:	2300      	movs	r3, #0
 800e872:	75bb      	strb	r3, [r7, #22]
            break;
 800e874:	e018      	b.n	800e8a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	4619      	mov	r1, r3
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f000 fa5e 	bl	800ed42 <USBD_CoreFindIF>
 800e886:	4603      	mov	r3, r0
 800e888:	75bb      	strb	r3, [r7, #22]
            break;
 800e88a:	e00d      	b.n	800e8a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e892:	b2db      	uxtb	r3, r3
 800e894:	4619      	mov	r1, r3
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f000 fa60 	bl	800ed5c <USBD_CoreFindEP>
 800e89c:	4603      	mov	r3, r0
 800e89e:	75bb      	strb	r3, [r7, #22]
            break;
 800e8a0:	e002      	b.n	800e8a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	75bb      	strb	r3, [r7, #22]
            break;
 800e8a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e8a8:	7dbb      	ldrb	r3, [r7, #22]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d119      	bne.n	800e8e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d113      	bne.n	800e8e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e8ba:	7dba      	ldrb	r2, [r7, #22]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	32ae      	adds	r2, #174	; 0xae
 800e8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00b      	beq.n	800e8e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e8ca:	7dba      	ldrb	r2, [r7, #22]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e8d2:	7dba      	ldrb	r2, [r7, #22]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	32ae      	adds	r2, #174	; 0xae
 800e8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8dc:	691b      	ldr	r3, [r3, #16]
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f001 f94a 	bl	800fb7c <USBD_CtlSendStatus>
 800e8e8:	e032      	b.n	800e950 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e8ea:	7afb      	ldrb	r3, [r7, #11]
 800e8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f000 fa31 	bl	800ed5c <USBD_CoreFindEP>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8fe:	7dbb      	ldrb	r3, [r7, #22]
 800e900:	2bff      	cmp	r3, #255	; 0xff
 800e902:	d025      	beq.n	800e950 <USBD_LL_DataOutStage+0x15c>
 800e904:	7dbb      	ldrb	r3, [r7, #22]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d122      	bne.n	800e950 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e910:	b2db      	uxtb	r3, r3
 800e912:	2b03      	cmp	r3, #3
 800e914:	d117      	bne.n	800e946 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e916:	7dba      	ldrb	r2, [r7, #22]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	32ae      	adds	r2, #174	; 0xae
 800e91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00f      	beq.n	800e946 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e926:	7dba      	ldrb	r2, [r7, #22]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e92e:	7dba      	ldrb	r2, [r7, #22]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	32ae      	adds	r2, #174	; 0xae
 800e934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	7afa      	ldrb	r2, [r7, #11]
 800e93c:	4611      	mov	r1, r2
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	4798      	blx	r3
 800e942:	4603      	mov	r3, r0
 800e944:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e946:	7dfb      	ldrb	r3, [r7, #23]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d001      	beq.n	800e950 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e94c:	7dfb      	ldrb	r3, [r7, #23]
 800e94e:	e000      	b.n	800e952 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3718      	adds	r7, #24
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}

0800e95a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e95a:	b580      	push	{r7, lr}
 800e95c:	b086      	sub	sp, #24
 800e95e:	af00      	add	r7, sp, #0
 800e960:	60f8      	str	r0, [r7, #12]
 800e962:	460b      	mov	r3, r1
 800e964:	607a      	str	r2, [r7, #4]
 800e966:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e968:	7afb      	ldrb	r3, [r7, #11]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d16f      	bne.n	800ea4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	3314      	adds	r3, #20
 800e972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d15a      	bne.n	800ea34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	689a      	ldr	r2, [r3, #8]
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	429a      	cmp	r2, r3
 800e988:	d914      	bls.n	800e9b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	689a      	ldr	r2, [r3, #8]
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	1ad2      	subs	r2, r2, r3
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	461a      	mov	r2, r3
 800e99e:	6879      	ldr	r1, [r7, #4]
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f001 f8ac 	bl	800fafe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f001 fdb9 	bl	8010524 <USBD_LL_PrepareReceive>
 800e9b2:	e03f      	b.n	800ea34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	68da      	ldr	r2, [r3, #12]
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d11c      	bne.n	800e9fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d316      	bcc.n	800e9fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d20f      	bcs.n	800e9fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9da:	2200      	movs	r2, #0
 800e9dc:	2100      	movs	r1, #0
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f001 f88d 	bl	800fafe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f001 fd96 	bl	8010524 <USBD_LL_PrepareReceive>
 800e9f8:	e01c      	b.n	800ea34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	d10f      	bne.n	800ea26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d009      	beq.n	800ea26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea26:	2180      	movs	r1, #128	; 0x80
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f001 fcd1 	bl	80103d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f001 f8b7 	bl	800fba2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d03a      	beq.n	800eab4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f7ff fe42 	bl	800e6c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea4c:	e032      	b.n	800eab4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ea4e:	7afb      	ldrb	r3, [r7, #11]
 800ea50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	4619      	mov	r1, r3
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f000 f97f 	bl	800ed5c <USBD_CoreFindEP>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea62:	7dfb      	ldrb	r3, [r7, #23]
 800ea64:	2bff      	cmp	r3, #255	; 0xff
 800ea66:	d025      	beq.n	800eab4 <USBD_LL_DataInStage+0x15a>
 800ea68:	7dfb      	ldrb	r3, [r7, #23]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d122      	bne.n	800eab4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	d11c      	bne.n	800eab4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ea7a:	7dfa      	ldrb	r2, [r7, #23]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	32ae      	adds	r2, #174	; 0xae
 800ea80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea84:	695b      	ldr	r3, [r3, #20]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d014      	beq.n	800eab4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ea8a:	7dfa      	ldrb	r2, [r7, #23]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ea92:	7dfa      	ldrb	r2, [r7, #23]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	32ae      	adds	r2, #174	; 0xae
 800ea98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea9c:	695b      	ldr	r3, [r3, #20]
 800ea9e:	7afa      	ldrb	r2, [r7, #11]
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	4798      	blx	r3
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800eaaa:	7dbb      	ldrb	r3, [r7, #22]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eab0:	7dbb      	ldrb	r3, [r7, #22]
 800eab2:	e000      	b.n	800eab6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d014      	beq.n	800eb24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00e      	beq.n	800eb24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	6852      	ldr	r2, [r2, #4]
 800eb12:	b2d2      	uxtb	r2, r2
 800eb14:	4611      	mov	r1, r2
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	4798      	blx	r3
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d001      	beq.n	800eb24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eb20:	2303      	movs	r3, #3
 800eb22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb24:	2340      	movs	r3, #64	; 0x40
 800eb26:	2200      	movs	r2, #0
 800eb28:	2100      	movs	r1, #0
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f001 fc0b 	bl	8010346 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2240      	movs	r2, #64	; 0x40
 800eb3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb40:	2340      	movs	r3, #64	; 0x40
 800eb42:	2200      	movs	r2, #0
 800eb44:	2180      	movs	r1, #128	; 0x80
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f001 fbfd 	bl	8010346 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2240      	movs	r2, #64	; 0x40
 800eb56:	621a      	str	r2, [r3, #32]

  return ret;
 800eb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3710      	adds	r7, #16
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b083      	sub	sp, #12
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	78fa      	ldrb	r2, [r7, #3]
 800eb72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb90:	b2da      	uxtb	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2204      	movs	r2, #4
 800eb9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ebae:	b480      	push	{r7}
 800ebb0:	b083      	sub	sp, #12
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	d106      	bne.n	800ebd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	370c      	adds	r7, #12
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr

0800ebde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b082      	sub	sp, #8
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d110      	bne.n	800ec14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00b      	beq.n	800ec14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec02:	69db      	ldr	r3, [r3, #28]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d005      	beq.n	800ec14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec0e:	69db      	ldr	r3, [r3, #28]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b082      	sub	sp, #8
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	460b      	mov	r3, r1
 800ec28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	32ae      	adds	r2, #174	; 0xae
 800ec34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d101      	bne.n	800ec40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	e01c      	b.n	800ec7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	2b03      	cmp	r3, #3
 800ec4a:	d115      	bne.n	800ec78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	32ae      	adds	r2, #174	; 0xae
 800ec56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5a:	6a1b      	ldr	r3, [r3, #32]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00b      	beq.n	800ec78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	32ae      	adds	r2, #174	; 0xae
 800ec6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec6e:	6a1b      	ldr	r3, [r3, #32]
 800ec70:	78fa      	ldrb	r2, [r7, #3]
 800ec72:	4611      	mov	r1, r2
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b082      	sub	sp, #8
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	32ae      	adds	r2, #174	; 0xae
 800ec98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d101      	bne.n	800eca4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800eca0:	2303      	movs	r3, #3
 800eca2:	e01c      	b.n	800ecde <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	d115      	bne.n	800ecdc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	32ae      	adds	r2, #174	; 0xae
 800ecba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00b      	beq.n	800ecdc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	32ae      	adds	r2, #174	; 0xae
 800ecce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd4:	78fa      	ldrb	r2, [r7, #3]
 800ecd6:	4611      	mov	r1, r2
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ecdc:	2300      	movs	r3, #0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ece6:	b480      	push	{r7}
 800ece8:	b083      	sub	sp, #12
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00e      	beq.n	800ed38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	6852      	ldr	r2, [r2, #4]
 800ed26:	b2d2      	uxtb	r2, r2
 800ed28:	4611      	mov	r1, r2
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	4798      	blx	r3
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ed34:	2303      	movs	r3, #3
 800ed36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed42:	b480      	push	{r7}
 800ed44:	b083      	sub	sp, #12
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	370c      	adds	r7, #12
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	460b      	mov	r3, r1
 800ed66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	370c      	adds	r7, #12
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr

0800ed76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b086      	sub	sp, #24
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	460b      	mov	r3, r1
 800ed80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	885b      	ldrh	r3, [r3, #2]
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d920      	bls.n	800ede0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800eda6:	e013      	b.n	800edd0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800eda8:	f107 030a 	add.w	r3, r7, #10
 800edac:	4619      	mov	r1, r3
 800edae:	6978      	ldr	r0, [r7, #20]
 800edb0:	f000 f81b 	bl	800edea <USBD_GetNextDesc>
 800edb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	785b      	ldrb	r3, [r3, #1]
 800edba:	2b05      	cmp	r3, #5
 800edbc:	d108      	bne.n	800edd0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	789b      	ldrb	r3, [r3, #2]
 800edc6:	78fa      	ldrb	r2, [r7, #3]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d008      	beq.n	800edde <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800edcc:	2300      	movs	r3, #0
 800edce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	885b      	ldrh	r3, [r3, #2]
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	897b      	ldrh	r3, [r7, #10]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d8e5      	bhi.n	800eda8 <USBD_GetEpDesc+0x32>
 800eddc:	e000      	b.n	800ede0 <USBD_GetEpDesc+0x6a>
          break;
 800edde:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ede0:	693b      	ldr	r3, [r7, #16]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3718      	adds	r7, #24
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800edea:	b480      	push	{r7}
 800edec:	b085      	sub	sp, #20
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	881a      	ldrh	r2, [r3, #0]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	4413      	add	r3, r2
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4413      	add	r3, r2
 800ee14:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ee16:	68fb      	ldr	r3, [r7, #12]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3714      	adds	r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b087      	sub	sp, #28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee42:	8a3b      	ldrh	r3, [r7, #16]
 800ee44:	021b      	lsls	r3, r3, #8
 800ee46:	b21a      	sxth	r2, r3
 800ee48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	b21b      	sxth	r3, r3
 800ee50:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee52:	89fb      	ldrh	r3, [r7, #14]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	371c      	adds	r7, #28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee76:	2b40      	cmp	r3, #64	; 0x40
 800ee78:	d005      	beq.n	800ee86 <USBD_StdDevReq+0x26>
 800ee7a:	2b40      	cmp	r3, #64	; 0x40
 800ee7c:	d857      	bhi.n	800ef2e <USBD_StdDevReq+0xce>
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00f      	beq.n	800eea2 <USBD_StdDevReq+0x42>
 800ee82:	2b20      	cmp	r3, #32
 800ee84:	d153      	bne.n	800ef2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	32ae      	adds	r2, #174	; 0xae
 800ee90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	6839      	ldr	r1, [r7, #0]
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	4798      	blx	r3
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	73fb      	strb	r3, [r7, #15]
      break;
 800eea0:	e04a      	b.n	800ef38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	785b      	ldrb	r3, [r3, #1]
 800eea6:	2b09      	cmp	r3, #9
 800eea8:	d83b      	bhi.n	800ef22 <USBD_StdDevReq+0xc2>
 800eeaa:	a201      	add	r2, pc, #4	; (adr r2, 800eeb0 <USBD_StdDevReq+0x50>)
 800eeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb0:	0800ef05 	.word	0x0800ef05
 800eeb4:	0800ef19 	.word	0x0800ef19
 800eeb8:	0800ef23 	.word	0x0800ef23
 800eebc:	0800ef0f 	.word	0x0800ef0f
 800eec0:	0800ef23 	.word	0x0800ef23
 800eec4:	0800eee3 	.word	0x0800eee3
 800eec8:	0800eed9 	.word	0x0800eed9
 800eecc:	0800ef23 	.word	0x0800ef23
 800eed0:	0800eefb 	.word	0x0800eefb
 800eed4:	0800eeed 	.word	0x0800eeed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eed8:	6839      	ldr	r1, [r7, #0]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fa3c 	bl	800f358 <USBD_GetDescriptor>
          break;
 800eee0:	e024      	b.n	800ef2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eee2:	6839      	ldr	r1, [r7, #0]
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 fba1 	bl	800f62c <USBD_SetAddress>
          break;
 800eeea:	e01f      	b.n	800ef2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fbe0 	bl	800f6b4 <USBD_SetConfig>
 800eef4:	4603      	mov	r3, r0
 800eef6:	73fb      	strb	r3, [r7, #15]
          break;
 800eef8:	e018      	b.n	800ef2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eefa:	6839      	ldr	r1, [r7, #0]
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 fc83 	bl	800f808 <USBD_GetConfig>
          break;
 800ef02:	e013      	b.n	800ef2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fcb4 	bl	800f874 <USBD_GetStatus>
          break;
 800ef0c:	e00e      	b.n	800ef2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fce3 	bl	800f8dc <USBD_SetFeature>
          break;
 800ef16:	e009      	b.n	800ef2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ef18:	6839      	ldr	r1, [r7, #0]
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fd07 	bl	800f92e <USBD_ClrFeature>
          break;
 800ef20:	e004      	b.n	800ef2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 fd5e 	bl	800f9e6 <USBD_CtlError>
          break;
 800ef2a:	bf00      	nop
      }
      break;
 800ef2c:	e004      	b.n	800ef38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fd58 	bl	800f9e6 <USBD_CtlError>
      break;
 800ef36:	bf00      	nop
  }

  return ret;
 800ef38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop

0800ef44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef5a:	2b40      	cmp	r3, #64	; 0x40
 800ef5c:	d005      	beq.n	800ef6a <USBD_StdItfReq+0x26>
 800ef5e:	2b40      	cmp	r3, #64	; 0x40
 800ef60:	d852      	bhi.n	800f008 <USBD_StdItfReq+0xc4>
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <USBD_StdItfReq+0x26>
 800ef66:	2b20      	cmp	r3, #32
 800ef68:	d14e      	bne.n	800f008 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	3b01      	subs	r3, #1
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d840      	bhi.n	800effa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	889b      	ldrh	r3, [r3, #4]
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d836      	bhi.n	800eff0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	889b      	ldrh	r3, [r3, #4]
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	4619      	mov	r1, r3
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7ff fed9 	bl	800ed42 <USBD_CoreFindIF>
 800ef90:	4603      	mov	r3, r0
 800ef92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef94:	7bbb      	ldrb	r3, [r7, #14]
 800ef96:	2bff      	cmp	r3, #255	; 0xff
 800ef98:	d01d      	beq.n	800efd6 <USBD_StdItfReq+0x92>
 800ef9a:	7bbb      	ldrb	r3, [r7, #14]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d11a      	bne.n	800efd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800efa0:	7bba      	ldrb	r2, [r7, #14]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	32ae      	adds	r2, #174	; 0xae
 800efa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d00f      	beq.n	800efd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800efb0:	7bba      	ldrb	r2, [r7, #14]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800efb8:	7bba      	ldrb	r2, [r7, #14]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	32ae      	adds	r2, #174	; 0xae
 800efbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	4798      	blx	r3
 800efca:	4603      	mov	r3, r0
 800efcc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efce:	e004      	b.n	800efda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800efd0:	2303      	movs	r3, #3
 800efd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efd4:	e001      	b.n	800efda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800efd6:	2303      	movs	r3, #3
 800efd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	88db      	ldrh	r3, [r3, #6]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d110      	bne.n	800f004 <USBD_StdItfReq+0xc0>
 800efe2:	7bfb      	ldrb	r3, [r7, #15]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d10d      	bne.n	800f004 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fdc7 	bl	800fb7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800efee:	e009      	b.n	800f004 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800eff0:	6839      	ldr	r1, [r7, #0]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fcf7 	bl	800f9e6 <USBD_CtlError>
          break;
 800eff8:	e004      	b.n	800f004 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800effa:	6839      	ldr	r1, [r7, #0]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 fcf2 	bl	800f9e6 <USBD_CtlError>
          break;
 800f002:	e000      	b.n	800f006 <USBD_StdItfReq+0xc2>
          break;
 800f004:	bf00      	nop
      }
      break;
 800f006:	e004      	b.n	800f012 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f008:	6839      	ldr	r1, [r7, #0]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 fceb 	bl	800f9e6 <USBD_CtlError>
      break;
 800f010:	bf00      	nop
  }

  return ret;
 800f012:	7bfb      	ldrb	r3, [r7, #15]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3710      	adds	r7, #16
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f026:	2300      	movs	r3, #0
 800f028:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	889b      	ldrh	r3, [r3, #4]
 800f02e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f038:	2b40      	cmp	r3, #64	; 0x40
 800f03a:	d007      	beq.n	800f04c <USBD_StdEPReq+0x30>
 800f03c:	2b40      	cmp	r3, #64	; 0x40
 800f03e:	f200 817f 	bhi.w	800f340 <USBD_StdEPReq+0x324>
 800f042:	2b00      	cmp	r3, #0
 800f044:	d02a      	beq.n	800f09c <USBD_StdEPReq+0x80>
 800f046:	2b20      	cmp	r3, #32
 800f048:	f040 817a 	bne.w	800f340 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f04c:	7bbb      	ldrb	r3, [r7, #14]
 800f04e:	4619      	mov	r1, r3
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff fe83 	bl	800ed5c <USBD_CoreFindEP>
 800f056:	4603      	mov	r3, r0
 800f058:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f05a:	7b7b      	ldrb	r3, [r7, #13]
 800f05c:	2bff      	cmp	r3, #255	; 0xff
 800f05e:	f000 8174 	beq.w	800f34a <USBD_StdEPReq+0x32e>
 800f062:	7b7b      	ldrb	r3, [r7, #13]
 800f064:	2b00      	cmp	r3, #0
 800f066:	f040 8170 	bne.w	800f34a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f06a:	7b7a      	ldrb	r2, [r7, #13]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f072:	7b7a      	ldrb	r2, [r7, #13]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	32ae      	adds	r2, #174	; 0xae
 800f078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f000 8163 	beq.w	800f34a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f084:	7b7a      	ldrb	r2, [r7, #13]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	32ae      	adds	r2, #174	; 0xae
 800f08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	6839      	ldr	r1, [r7, #0]
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	4798      	blx	r3
 800f096:	4603      	mov	r3, r0
 800f098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f09a:	e156      	b.n	800f34a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	785b      	ldrb	r3, [r3, #1]
 800f0a0:	2b03      	cmp	r3, #3
 800f0a2:	d008      	beq.n	800f0b6 <USBD_StdEPReq+0x9a>
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	f300 8145 	bgt.w	800f334 <USBD_StdEPReq+0x318>
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f000 809b 	beq.w	800f1e6 <USBD_StdEPReq+0x1ca>
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d03c      	beq.n	800f12e <USBD_StdEPReq+0x112>
 800f0b4:	e13e      	b.n	800f334 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d002      	beq.n	800f0c8 <USBD_StdEPReq+0xac>
 800f0c2:	2b03      	cmp	r3, #3
 800f0c4:	d016      	beq.n	800f0f4 <USBD_StdEPReq+0xd8>
 800f0c6:	e02c      	b.n	800f122 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0c8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00d      	beq.n	800f0ea <USBD_StdEPReq+0xce>
 800f0ce:	7bbb      	ldrb	r3, [r7, #14]
 800f0d0:	2b80      	cmp	r3, #128	; 0x80
 800f0d2:	d00a      	beq.n	800f0ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0d4:	7bbb      	ldrb	r3, [r7, #14]
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f001 f979 	bl	80103d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0de:	2180      	movs	r1, #128	; 0x80
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f001 f975 	bl	80103d0 <USBD_LL_StallEP>
 800f0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0e8:	e020      	b.n	800f12c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 fc7a 	bl	800f9e6 <USBD_CtlError>
              break;
 800f0f2:	e01b      	b.n	800f12c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	885b      	ldrh	r3, [r3, #2]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10e      	bne.n	800f11a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00b      	beq.n	800f11a <USBD_StdEPReq+0xfe>
 800f102:	7bbb      	ldrb	r3, [r7, #14]
 800f104:	2b80      	cmp	r3, #128	; 0x80
 800f106:	d008      	beq.n	800f11a <USBD_StdEPReq+0xfe>
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	88db      	ldrh	r3, [r3, #6]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d104      	bne.n	800f11a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f110:	7bbb      	ldrb	r3, [r7, #14]
 800f112:	4619      	mov	r1, r3
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f001 f95b 	bl	80103d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fd2e 	bl	800fb7c <USBD_CtlSendStatus>

              break;
 800f120:	e004      	b.n	800f12c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f122:	6839      	ldr	r1, [r7, #0]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 fc5e 	bl	800f9e6 <USBD_CtlError>
              break;
 800f12a:	bf00      	nop
          }
          break;
 800f12c:	e107      	b.n	800f33e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f134:	b2db      	uxtb	r3, r3
 800f136:	2b02      	cmp	r3, #2
 800f138:	d002      	beq.n	800f140 <USBD_StdEPReq+0x124>
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d016      	beq.n	800f16c <USBD_StdEPReq+0x150>
 800f13e:	e04b      	b.n	800f1d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f140:	7bbb      	ldrb	r3, [r7, #14]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00d      	beq.n	800f162 <USBD_StdEPReq+0x146>
 800f146:	7bbb      	ldrb	r3, [r7, #14]
 800f148:	2b80      	cmp	r3, #128	; 0x80
 800f14a:	d00a      	beq.n	800f162 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f001 f93d 	bl	80103d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f156:	2180      	movs	r1, #128	; 0x80
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f001 f939 	bl	80103d0 <USBD_LL_StallEP>
 800f15e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f160:	e040      	b.n	800f1e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fc3e 	bl	800f9e6 <USBD_CtlError>
              break;
 800f16a:	e03b      	b.n	800f1e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	885b      	ldrh	r3, [r3, #2]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d136      	bne.n	800f1e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f174:	7bbb      	ldrb	r3, [r7, #14]
 800f176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d004      	beq.n	800f188 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f17e:	7bbb      	ldrb	r3, [r7, #14]
 800f180:	4619      	mov	r1, r3
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f001 f943 	bl	801040e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 fcf7 	bl	800fb7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f18e:	7bbb      	ldrb	r3, [r7, #14]
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7ff fde2 	bl	800ed5c <USBD_CoreFindEP>
 800f198:	4603      	mov	r3, r0
 800f19a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f19c:	7b7b      	ldrb	r3, [r7, #13]
 800f19e:	2bff      	cmp	r3, #255	; 0xff
 800f1a0:	d01f      	beq.n	800f1e2 <USBD_StdEPReq+0x1c6>
 800f1a2:	7b7b      	ldrb	r3, [r7, #13]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d11c      	bne.n	800f1e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f1a8:	7b7a      	ldrb	r2, [r7, #13]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f1b0:	7b7a      	ldrb	r2, [r7, #13]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	32ae      	adds	r2, #174	; 0xae
 800f1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d010      	beq.n	800f1e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1c0:	7b7a      	ldrb	r2, [r7, #13]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	32ae      	adds	r2, #174	; 0xae
 800f1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	4798      	blx	r3
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f1d6:	e004      	b.n	800f1e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fc03 	bl	800f9e6 <USBD_CtlError>
              break;
 800f1e0:	e000      	b.n	800f1e4 <USBD_StdEPReq+0x1c8>
              break;
 800f1e2:	bf00      	nop
          }
          break;
 800f1e4:	e0ab      	b.n	800f33e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	2b02      	cmp	r3, #2
 800f1f0:	d002      	beq.n	800f1f8 <USBD_StdEPReq+0x1dc>
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d032      	beq.n	800f25c <USBD_StdEPReq+0x240>
 800f1f6:	e097      	b.n	800f328 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1f8:	7bbb      	ldrb	r3, [r7, #14]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d007      	beq.n	800f20e <USBD_StdEPReq+0x1f2>
 800f1fe:	7bbb      	ldrb	r3, [r7, #14]
 800f200:	2b80      	cmp	r3, #128	; 0x80
 800f202:	d004      	beq.n	800f20e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fbed 	bl	800f9e6 <USBD_CtlError>
                break;
 800f20c:	e091      	b.n	800f332 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f20e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f212:	2b00      	cmp	r3, #0
 800f214:	da0b      	bge.n	800f22e <USBD_StdEPReq+0x212>
 800f216:	7bbb      	ldrb	r3, [r7, #14]
 800f218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f21c:	4613      	mov	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	3310      	adds	r3, #16
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	4413      	add	r3, r2
 800f22a:	3304      	adds	r3, #4
 800f22c:	e00b      	b.n	800f246 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f22e:	7bbb      	ldrb	r3, [r7, #14]
 800f230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f234:	4613      	mov	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	4413      	add	r3, r2
 800f244:	3304      	adds	r3, #4
 800f246:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	2200      	movs	r2, #0
 800f24c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	2202      	movs	r2, #2
 800f252:	4619      	mov	r1, r3
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 fc37 	bl	800fac8 <USBD_CtlSendData>
              break;
 800f25a:	e06a      	b.n	800f332 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f25c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f260:	2b00      	cmp	r3, #0
 800f262:	da11      	bge.n	800f288 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f264:	7bbb      	ldrb	r3, [r7, #14]
 800f266:	f003 020f 	and.w	r2, r3, #15
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	4613      	mov	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4413      	add	r3, r2
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	440b      	add	r3, r1
 800f276:	3324      	adds	r3, #36	; 0x24
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d117      	bne.n	800f2ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 fbb0 	bl	800f9e6 <USBD_CtlError>
                  break;
 800f286:	e054      	b.n	800f332 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f288:	7bbb      	ldrb	r3, [r7, #14]
 800f28a:	f003 020f 	and.w	r2, r3, #15
 800f28e:	6879      	ldr	r1, [r7, #4]
 800f290:	4613      	mov	r3, r2
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	4413      	add	r3, r2
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	440b      	add	r3, r1
 800f29a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d104      	bne.n	800f2ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f2a4:	6839      	ldr	r1, [r7, #0]
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 fb9d 	bl	800f9e6 <USBD_CtlError>
                  break;
 800f2ac:	e041      	b.n	800f332 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	da0b      	bge.n	800f2ce <USBD_StdEPReq+0x2b2>
 800f2b6:	7bbb      	ldrb	r3, [r7, #14]
 800f2b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2bc:	4613      	mov	r3, r2
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	4413      	add	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	3310      	adds	r3, #16
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	e00b      	b.n	800f2e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2ce:	7bbb      	ldrb	r3, [r7, #14]
 800f2d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	4413      	add	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	3304      	adds	r3, #4
 800f2e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d002      	beq.n	800f2f4 <USBD_StdEPReq+0x2d8>
 800f2ee:	7bbb      	ldrb	r3, [r7, #14]
 800f2f0:	2b80      	cmp	r3, #128	; 0x80
 800f2f2:	d103      	bne.n	800f2fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	e00e      	b.n	800f31a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f2fc:	7bbb      	ldrb	r3, [r7, #14]
 800f2fe:	4619      	mov	r1, r3
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f001 f8a3 	bl	801044c <USBD_LL_IsStallEP>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d003      	beq.n	800f314 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	2201      	movs	r2, #1
 800f310:	601a      	str	r2, [r3, #0]
 800f312:	e002      	b.n	800f31a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2200      	movs	r2, #0
 800f318:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	2202      	movs	r2, #2
 800f31e:	4619      	mov	r1, r3
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fbd1 	bl	800fac8 <USBD_CtlSendData>
              break;
 800f326:	e004      	b.n	800f332 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f328:	6839      	ldr	r1, [r7, #0]
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 fb5b 	bl	800f9e6 <USBD_CtlError>
              break;
 800f330:	bf00      	nop
          }
          break;
 800f332:	e004      	b.n	800f33e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fb55 	bl	800f9e6 <USBD_CtlError>
          break;
 800f33c:	bf00      	nop
      }
      break;
 800f33e:	e005      	b.n	800f34c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f340:	6839      	ldr	r1, [r7, #0]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fb4f 	bl	800f9e6 <USBD_CtlError>
      break;
 800f348:	e000      	b.n	800f34c <USBD_StdEPReq+0x330>
      break;
 800f34a:	bf00      	nop
  }

  return ret;
 800f34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
	...

0800f358 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f362:	2300      	movs	r3, #0
 800f364:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f366:	2300      	movs	r3, #0
 800f368:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f36a:	2300      	movs	r3, #0
 800f36c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	885b      	ldrh	r3, [r3, #2]
 800f372:	0a1b      	lsrs	r3, r3, #8
 800f374:	b29b      	uxth	r3, r3
 800f376:	3b01      	subs	r3, #1
 800f378:	2b06      	cmp	r3, #6
 800f37a:	f200 8128 	bhi.w	800f5ce <USBD_GetDescriptor+0x276>
 800f37e:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <USBD_GetDescriptor+0x2c>)
 800f380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f384:	0800f3a1 	.word	0x0800f3a1
 800f388:	0800f3b9 	.word	0x0800f3b9
 800f38c:	0800f3f9 	.word	0x0800f3f9
 800f390:	0800f5cf 	.word	0x0800f5cf
 800f394:	0800f5cf 	.word	0x0800f5cf
 800f398:	0800f56f 	.word	0x0800f56f
 800f39c:	0800f59b 	.word	0x0800f59b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	7c12      	ldrb	r2, [r2, #16]
 800f3ac:	f107 0108 	add.w	r1, r7, #8
 800f3b0:	4610      	mov	r0, r2
 800f3b2:	4798      	blx	r3
 800f3b4:	60f8      	str	r0, [r7, #12]
      break;
 800f3b6:	e112      	b.n	800f5de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	7c1b      	ldrb	r3, [r3, #16]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10d      	bne.n	800f3dc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c8:	f107 0208 	add.w	r2, r7, #8
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	4798      	blx	r3
 800f3d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f3da:	e100      	b.n	800f5de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e4:	f107 0208 	add.w	r2, r7, #8
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	4798      	blx	r3
 800f3ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	701a      	strb	r2, [r3, #0]
      break;
 800f3f6:	e0f2      	b.n	800f5de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	885b      	ldrh	r3, [r3, #2]
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	2b05      	cmp	r3, #5
 800f400:	f200 80ac 	bhi.w	800f55c <USBD_GetDescriptor+0x204>
 800f404:	a201      	add	r2, pc, #4	; (adr r2, 800f40c <USBD_GetDescriptor+0xb4>)
 800f406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f40a:	bf00      	nop
 800f40c:	0800f425 	.word	0x0800f425
 800f410:	0800f459 	.word	0x0800f459
 800f414:	0800f48d 	.word	0x0800f48d
 800f418:	0800f4c1 	.word	0x0800f4c1
 800f41c:	0800f4f5 	.word	0x0800f4f5
 800f420:	0800f529 	.word	0x0800f529
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d00b      	beq.n	800f448 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	7c12      	ldrb	r2, [r2, #16]
 800f43c:	f107 0108 	add.w	r1, r7, #8
 800f440:	4610      	mov	r0, r2
 800f442:	4798      	blx	r3
 800f444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f446:	e091      	b.n	800f56c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 facb 	bl	800f9e6 <USBD_CtlError>
            err++;
 800f450:	7afb      	ldrb	r3, [r7, #11]
 800f452:	3301      	adds	r3, #1
 800f454:	72fb      	strb	r3, [r7, #11]
          break;
 800f456:	e089      	b.n	800f56c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00b      	beq.n	800f47c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	7c12      	ldrb	r2, [r2, #16]
 800f470:	f107 0108 	add.w	r1, r7, #8
 800f474:	4610      	mov	r0, r2
 800f476:	4798      	blx	r3
 800f478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f47a:	e077      	b.n	800f56c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f47c:	6839      	ldr	r1, [r7, #0]
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f000 fab1 	bl	800f9e6 <USBD_CtlError>
            err++;
 800f484:	7afb      	ldrb	r3, [r7, #11]
 800f486:	3301      	adds	r3, #1
 800f488:	72fb      	strb	r3, [r7, #11]
          break;
 800f48a:	e06f      	b.n	800f56c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00b      	beq.n	800f4b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	7c12      	ldrb	r2, [r2, #16]
 800f4a4:	f107 0108 	add.w	r1, r7, #8
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	4798      	blx	r3
 800f4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4ae:	e05d      	b.n	800f56c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fa97 	bl	800f9e6 <USBD_CtlError>
            err++;
 800f4b8:	7afb      	ldrb	r3, [r7, #11]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800f4be:	e055      	b.n	800f56c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00b      	beq.n	800f4e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4d2:	691b      	ldr	r3, [r3, #16]
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	7c12      	ldrb	r2, [r2, #16]
 800f4d8:	f107 0108 	add.w	r1, r7, #8
 800f4dc:	4610      	mov	r0, r2
 800f4de:	4798      	blx	r3
 800f4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4e2:	e043      	b.n	800f56c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4e4:	6839      	ldr	r1, [r7, #0]
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fa7d 	bl	800f9e6 <USBD_CtlError>
            err++;
 800f4ec:	7afb      	ldrb	r3, [r7, #11]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f4f2:	e03b      	b.n	800f56c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4fa:	695b      	ldr	r3, [r3, #20]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00b      	beq.n	800f518 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f506:	695b      	ldr	r3, [r3, #20]
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	7c12      	ldrb	r2, [r2, #16]
 800f50c:	f107 0108 	add.w	r1, r7, #8
 800f510:	4610      	mov	r0, r2
 800f512:	4798      	blx	r3
 800f514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f516:	e029      	b.n	800f56c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fa63 	bl	800f9e6 <USBD_CtlError>
            err++;
 800f520:	7afb      	ldrb	r3, [r7, #11]
 800f522:	3301      	adds	r3, #1
 800f524:	72fb      	strb	r3, [r7, #11]
          break;
 800f526:	e021      	b.n	800f56c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00b      	beq.n	800f54c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f53a:	699b      	ldr	r3, [r3, #24]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	7c12      	ldrb	r2, [r2, #16]
 800f540:	f107 0108 	add.w	r1, r7, #8
 800f544:	4610      	mov	r0, r2
 800f546:	4798      	blx	r3
 800f548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f54a:	e00f      	b.n	800f56c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 fa49 	bl	800f9e6 <USBD_CtlError>
            err++;
 800f554:	7afb      	ldrb	r3, [r7, #11]
 800f556:	3301      	adds	r3, #1
 800f558:	72fb      	strb	r3, [r7, #11]
          break;
 800f55a:	e007      	b.n	800f56c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 fa41 	bl	800f9e6 <USBD_CtlError>
          err++;
 800f564:	7afb      	ldrb	r3, [r7, #11]
 800f566:	3301      	adds	r3, #1
 800f568:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f56a:	bf00      	nop
      }
      break;
 800f56c:	e037      	b.n	800f5de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	7c1b      	ldrb	r3, [r3, #16]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d109      	bne.n	800f58a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f57e:	f107 0208 	add.w	r2, r7, #8
 800f582:	4610      	mov	r0, r2
 800f584:	4798      	blx	r3
 800f586:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f588:	e029      	b.n	800f5de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f58a:	6839      	ldr	r1, [r7, #0]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fa2a 	bl	800f9e6 <USBD_CtlError>
        err++;
 800f592:	7afb      	ldrb	r3, [r7, #11]
 800f594:	3301      	adds	r3, #1
 800f596:	72fb      	strb	r3, [r7, #11]
      break;
 800f598:	e021      	b.n	800f5de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	7c1b      	ldrb	r3, [r3, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d10d      	bne.n	800f5be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5aa:	f107 0208 	add.w	r2, r7, #8
 800f5ae:	4610      	mov	r0, r2
 800f5b0:	4798      	blx	r3
 800f5b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	2207      	movs	r2, #7
 800f5ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5bc:	e00f      	b.n	800f5de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f5be:	6839      	ldr	r1, [r7, #0]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fa10 	bl	800f9e6 <USBD_CtlError>
        err++;
 800f5c6:	7afb      	ldrb	r3, [r7, #11]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	72fb      	strb	r3, [r7, #11]
      break;
 800f5cc:	e007      	b.n	800f5de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fa08 	bl	800f9e6 <USBD_CtlError>
      err++;
 800f5d6:	7afb      	ldrb	r3, [r7, #11]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	72fb      	strb	r3, [r7, #11]
      break;
 800f5dc:	bf00      	nop
  }

  if (err != 0U)
 800f5de:	7afb      	ldrb	r3, [r7, #11]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d11e      	bne.n	800f622 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	88db      	ldrh	r3, [r3, #6]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d016      	beq.n	800f61a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f5ec:	893b      	ldrh	r3, [r7, #8]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00e      	beq.n	800f610 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	88da      	ldrh	r2, [r3, #6]
 800f5f6:	893b      	ldrh	r3, [r7, #8]
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	bf28      	it	cs
 800f5fc:	4613      	movcs	r3, r2
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f602:	893b      	ldrh	r3, [r7, #8]
 800f604:	461a      	mov	r2, r3
 800f606:	68f9      	ldr	r1, [r7, #12]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 fa5d 	bl	800fac8 <USBD_CtlSendData>
 800f60e:	e009      	b.n	800f624 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f610:	6839      	ldr	r1, [r7, #0]
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 f9e7 	bl	800f9e6 <USBD_CtlError>
 800f618:	e004      	b.n	800f624 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 faae 	bl	800fb7c <USBD_CtlSendStatus>
 800f620:	e000      	b.n	800f624 <USBD_GetDescriptor+0x2cc>
    return;
 800f622:	bf00      	nop
  }
}
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop

0800f62c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	889b      	ldrh	r3, [r3, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d131      	bne.n	800f6a2 <USBD_SetAddress+0x76>
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	88db      	ldrh	r3, [r3, #6]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d12d      	bne.n	800f6a2 <USBD_SetAddress+0x76>
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	885b      	ldrh	r3, [r3, #2]
 800f64a:	2b7f      	cmp	r3, #127	; 0x7f
 800f64c:	d829      	bhi.n	800f6a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	885b      	ldrh	r3, [r3, #2]
 800f652:	b2db      	uxtb	r3, r3
 800f654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f658:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b03      	cmp	r3, #3
 800f664:	d104      	bne.n	800f670 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 f9bc 	bl	800f9e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f66e:	e01d      	b.n	800f6ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	7bfa      	ldrb	r2, [r7, #15]
 800f674:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f678:	7bfb      	ldrb	r3, [r7, #15]
 800f67a:	4619      	mov	r1, r3
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 ff11 	bl	80104a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 fa7a 	bl	800fb7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f688:	7bfb      	ldrb	r3, [r7, #15]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d004      	beq.n	800f698 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2202      	movs	r2, #2
 800f692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f696:	e009      	b.n	800f6ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6a0:	e004      	b.n	800f6ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f6a2:	6839      	ldr	r1, [r7, #0]
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f99e 	bl	800f9e6 <USBD_CtlError>
  }
}
 800f6aa:	bf00      	nop
 800f6ac:	bf00      	nop
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	885b      	ldrh	r3, [r3, #2]
 800f6c6:	b2da      	uxtb	r2, r3
 800f6c8:	4b4e      	ldr	r3, [pc, #312]	; (800f804 <USBD_SetConfig+0x150>)
 800f6ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f6cc:	4b4d      	ldr	r3, [pc, #308]	; (800f804 <USBD_SetConfig+0x150>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d905      	bls.n	800f6e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 f985 	bl	800f9e6 <USBD_CtlError>
    return USBD_FAIL;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	e08c      	b.n	800f7fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d002      	beq.n	800f6f2 <USBD_SetConfig+0x3e>
 800f6ec:	2b03      	cmp	r3, #3
 800f6ee:	d029      	beq.n	800f744 <USBD_SetConfig+0x90>
 800f6f0:	e075      	b.n	800f7de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f6f2:	4b44      	ldr	r3, [pc, #272]	; (800f804 <USBD_SetConfig+0x150>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d020      	beq.n	800f73c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f6fa:	4b42      	ldr	r3, [pc, #264]	; (800f804 <USBD_SetConfig+0x150>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f704:	4b3f      	ldr	r3, [pc, #252]	; (800f804 <USBD_SetConfig+0x150>)
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	4619      	mov	r1, r3
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7fe ffe7 	bl	800e6de <USBD_SetClassConfig>
 800f710:	4603      	mov	r3, r0
 800f712:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f714:	7bfb      	ldrb	r3, [r7, #15]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d008      	beq.n	800f72c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f962 	bl	800f9e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2202      	movs	r2, #2
 800f726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f72a:	e065      	b.n	800f7f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fa25 	bl	800fb7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2203      	movs	r2, #3
 800f736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f73a:	e05d      	b.n	800f7f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f000 fa1d 	bl	800fb7c <USBD_CtlSendStatus>
      break;
 800f742:	e059      	b.n	800f7f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f744:	4b2f      	ldr	r3, [pc, #188]	; (800f804 <USBD_SetConfig+0x150>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d112      	bne.n	800f772 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2202      	movs	r2, #2
 800f750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f754:	4b2b      	ldr	r3, [pc, #172]	; (800f804 <USBD_SetConfig+0x150>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	461a      	mov	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f75e:	4b29      	ldr	r3, [pc, #164]	; (800f804 <USBD_SetConfig+0x150>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	4619      	mov	r1, r3
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7fe ffd6 	bl	800e716 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fa06 	bl	800fb7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f770:	e042      	b.n	800f7f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f772:	4b24      	ldr	r3, [pc, #144]	; (800f804 <USBD_SetConfig+0x150>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d02a      	beq.n	800f7d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	b2db      	uxtb	r3, r3
 800f786:	4619      	mov	r1, r3
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7fe ffc4 	bl	800e716 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f78e:	4b1d      	ldr	r3, [pc, #116]	; (800f804 <USBD_SetConfig+0x150>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	461a      	mov	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f798:	4b1a      	ldr	r3, [pc, #104]	; (800f804 <USBD_SetConfig+0x150>)
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	4619      	mov	r1, r3
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7fe ff9d 	bl	800e6de <USBD_SetClassConfig>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f7a8:	7bfb      	ldrb	r3, [r7, #15]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00f      	beq.n	800f7ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f7ae:	6839      	ldr	r1, [r7, #0]
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 f918 	bl	800f9e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	4619      	mov	r1, r3
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7fe ffa9 	bl	800e716 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2202      	movs	r2, #2
 800f7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f7cc:	e014      	b.n	800f7f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 f9d4 	bl	800fb7c <USBD_CtlSendStatus>
      break;
 800f7d4:	e010      	b.n	800f7f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 f9d0 	bl	800fb7c <USBD_CtlSendStatus>
      break;
 800f7dc:	e00c      	b.n	800f7f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 f900 	bl	800f9e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7e6:	4b07      	ldr	r3, [pc, #28]	; (800f804 <USBD_SetConfig+0x150>)
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7fe ff92 	bl	800e716 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f7f2:	2303      	movs	r3, #3
 800f7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f7f6:	bf00      	nop
  }

  return ret;
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	24000190 	.word	0x24000190

0800f808 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	88db      	ldrh	r3, [r3, #6]
 800f816:	2b01      	cmp	r3, #1
 800f818:	d004      	beq.n	800f824 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f81a:	6839      	ldr	r1, [r7, #0]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 f8e2 	bl	800f9e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f822:	e023      	b.n	800f86c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	dc02      	bgt.n	800f836 <USBD_GetConfig+0x2e>
 800f830:	2b00      	cmp	r3, #0
 800f832:	dc03      	bgt.n	800f83c <USBD_GetConfig+0x34>
 800f834:	e015      	b.n	800f862 <USBD_GetConfig+0x5a>
 800f836:	2b03      	cmp	r3, #3
 800f838:	d00b      	beq.n	800f852 <USBD_GetConfig+0x4a>
 800f83a:	e012      	b.n	800f862 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	3308      	adds	r3, #8
 800f846:	2201      	movs	r2, #1
 800f848:	4619      	mov	r1, r3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 f93c 	bl	800fac8 <USBD_CtlSendData>
        break;
 800f850:	e00c      	b.n	800f86c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	3304      	adds	r3, #4
 800f856:	2201      	movs	r2, #1
 800f858:	4619      	mov	r1, r3
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 f934 	bl	800fac8 <USBD_CtlSendData>
        break;
 800f860:	e004      	b.n	800f86c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f862:	6839      	ldr	r1, [r7, #0]
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 f8be 	bl	800f9e6 <USBD_CtlError>
        break;
 800f86a:	bf00      	nop
}
 800f86c:	bf00      	nop
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f884:	b2db      	uxtb	r3, r3
 800f886:	3b01      	subs	r3, #1
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d81e      	bhi.n	800f8ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	88db      	ldrh	r3, [r3, #6]
 800f890:	2b02      	cmp	r3, #2
 800f892:	d004      	beq.n	800f89e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f8a5 	bl	800f9e6 <USBD_CtlError>
        break;
 800f89c:	e01a      	b.n	800f8d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d005      	beq.n	800f8ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	f043 0202 	orr.w	r2, r3, #2
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	330c      	adds	r3, #12
 800f8be:	2202      	movs	r2, #2
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f900 	bl	800fac8 <USBD_CtlSendData>
      break;
 800f8c8:	e004      	b.n	800f8d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f88a 	bl	800f9e6 <USBD_CtlError>
      break;
 800f8d2:	bf00      	nop
  }
}
 800f8d4:	bf00      	nop
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	885b      	ldrh	r3, [r3, #2]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d107      	bne.n	800f8fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f940 	bl	800fb7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f8fc:	e013      	b.n	800f926 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	885b      	ldrh	r3, [r3, #2]
 800f902:	2b02      	cmp	r3, #2
 800f904:	d10b      	bne.n	800f91e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	889b      	ldrh	r3, [r3, #4]
 800f90a:	0a1b      	lsrs	r3, r3, #8
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f930 	bl	800fb7c <USBD_CtlSendStatus>
}
 800f91c:	e003      	b.n	800f926 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f91e:	6839      	ldr	r1, [r7, #0]
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 f860 	bl	800f9e6 <USBD_CtlError>
}
 800f926:	bf00      	nop
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	b082      	sub	sp, #8
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
 800f936:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	3b01      	subs	r3, #1
 800f942:	2b02      	cmp	r3, #2
 800f944:	d80b      	bhi.n	800f95e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	885b      	ldrh	r3, [r3, #2]
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d10c      	bne.n	800f968 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f910 	bl	800fb7c <USBD_CtlSendStatus>
      }
      break;
 800f95c:	e004      	b.n	800f968 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f840 	bl	800f9e6 <USBD_CtlError>
      break;
 800f966:	e000      	b.n	800f96a <USBD_ClrFeature+0x3c>
      break;
 800f968:	bf00      	nop
  }
}
 800f96a:	bf00      	nop
 800f96c:	3708      	adds	r7, #8
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}

0800f972 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b084      	sub	sp, #16
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
 800f97a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	781a      	ldrb	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	3301      	adds	r3, #1
 800f98c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	781a      	ldrb	r2, [r3, #0]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	3301      	adds	r3, #1
 800f99a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f7ff fa41 	bl	800ee24 <SWAPBYTE>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f7ff fa34 	bl	800ee24 <SWAPBYTE>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	461a      	mov	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff fa27 	bl	800ee24 <SWAPBYTE>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	461a      	mov	r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	80da      	strh	r2, [r3, #6]
}
 800f9de:	bf00      	nop
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b082      	sub	sp, #8
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9f0:	2180      	movs	r1, #128	; 0x80
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fcec 	bl	80103d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f9f8:	2100      	movs	r1, #0
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fce8 	bl	80103d0 <USBD_LL_StallEP>
}
 800fa00:	bf00      	nop
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b086      	sub	sp, #24
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa14:	2300      	movs	r3, #0
 800fa16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d036      	beq.n	800fa8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa22:	6938      	ldr	r0, [r7, #16]
 800fa24:	f000 f836 	bl	800fa94 <USBD_GetLen>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa36:	7dfb      	ldrb	r3, [r7, #23]
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	7812      	ldrb	r2, [r2, #0]
 800fa40:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa42:	7dfb      	ldrb	r3, [r7, #23]
 800fa44:	3301      	adds	r3, #1
 800fa46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	68ba      	ldr	r2, [r7, #8]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	2203      	movs	r2, #3
 800fa50:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa52:	7dfb      	ldrb	r3, [r7, #23]
 800fa54:	3301      	adds	r3, #1
 800fa56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa58:	e013      	b.n	800fa82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa5a:	7dfb      	ldrb	r3, [r7, #23]
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	4413      	add	r3, r2
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	7812      	ldrb	r2, [r2, #0]
 800fa64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	613b      	str	r3, [r7, #16]
    idx++;
 800fa6c:	7dfb      	ldrb	r3, [r7, #23]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
 800fa74:	68ba      	ldr	r2, [r7, #8]
 800fa76:	4413      	add	r3, r2
 800fa78:	2200      	movs	r2, #0
 800fa7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa7c:	7dfb      	ldrb	r3, [r7, #23]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1e7      	bne.n	800fa5a <USBD_GetString+0x52>
 800fa8a:	e000      	b.n	800fa8e <USBD_GetString+0x86>
    return;
 800fa8c:	bf00      	nop
  }
}
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800faa4:	e005      	b.n	800fab2 <USBD_GetLen+0x1e>
  {
    len++;
 800faa6:	7bfb      	ldrb	r3, [r7, #15]
 800faa8:	3301      	adds	r3, #1
 800faaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	3301      	adds	r3, #1
 800fab0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1f5      	bne.n	800faa6 <USBD_GetLen+0x12>
  }

  return len;
 800faba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3714      	adds	r7, #20
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2202      	movs	r2, #2
 800fad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	68ba      	ldr	r2, [r7, #8]
 800faec:	2100      	movs	r1, #0
 800faee:	68f8      	ldr	r0, [r7, #12]
 800faf0:	f000 fcf7 	bl	80104e2 <USBD_LL_Transmit>

  return USBD_OK;
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b084      	sub	sp, #16
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	60f8      	str	r0, [r7, #12]
 800fb06:	60b9      	str	r1, [r7, #8]
 800fb08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	68ba      	ldr	r2, [r7, #8]
 800fb0e:	2100      	movs	r1, #0
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f000 fce6 	bl	80104e2 <USBD_LL_Transmit>

  return USBD_OK;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2203      	movs	r2, #3
 800fb30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68ba      	ldr	r2, [r7, #8]
 800fb48:	2100      	movs	r1, #0
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 fcea 	bl	8010524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b084      	sub	sp, #16
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	60f8      	str	r0, [r7, #12]
 800fb62:	60b9      	str	r1, [r7, #8]
 800fb64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	f000 fcd9 	bl	8010524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2204      	movs	r2, #4
 800fb88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2100      	movs	r1, #0
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fca5 	bl	80104e2 <USBD_LL_Transmit>

  return USBD_OK;
 800fb98:	2300      	movs	r3, #0
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b082      	sub	sp, #8
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2205      	movs	r2, #5
 800fbae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 fcb3 	bl	8010524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbbe:	2300      	movs	r3, #0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	4913      	ldr	r1, [pc, #76]	; (800fc1c <MX_USB_DEVICE_Init+0x54>)
 800fbd0:	4813      	ldr	r0, [pc, #76]	; (800fc20 <MX_USB_DEVICE_Init+0x58>)
 800fbd2:	f7fe fd07 	bl	800e5e4 <USBD_Init>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fbdc:	f7f1 fbb8 	bl	8001350 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fbe0:	4910      	ldr	r1, [pc, #64]	; (800fc24 <MX_USB_DEVICE_Init+0x5c>)
 800fbe2:	480f      	ldr	r0, [pc, #60]	; (800fc20 <MX_USB_DEVICE_Init+0x58>)
 800fbe4:	f7fe fd2e 	bl	800e644 <USBD_RegisterClass>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fbee:	f7f1 fbaf 	bl	8001350 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fbf2:	490d      	ldr	r1, [pc, #52]	; (800fc28 <MX_USB_DEVICE_Init+0x60>)
 800fbf4:	480a      	ldr	r0, [pc, #40]	; (800fc20 <MX_USB_DEVICE_Init+0x58>)
 800fbf6:	f7fe fc65 	bl	800e4c4 <USBD_CDC_RegisterInterface>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d001      	beq.n	800fc04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fc00:	f7f1 fba6 	bl	8001350 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fc04:	4806      	ldr	r0, [pc, #24]	; (800fc20 <MX_USB_DEVICE_Init+0x58>)
 800fc06:	f7fe fd53 	bl	800e6b0 <USBD_Start>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d001      	beq.n	800fc14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fc10:	f7f1 fb9e 	bl	8001350 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fc14:	f7f7 fbe8 	bl	80073e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fc18:	bf00      	nop
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	240000b4 	.word	0x240000b4
 800fc20:	24000828 	.word	0x24000828
 800fc24:	24000020 	.word	0x24000020
 800fc28:	240000a0 	.word	0x240000a0

0800fc2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc30:	2200      	movs	r2, #0
 800fc32:	4905      	ldr	r1, [pc, #20]	; (800fc48 <CDC_Init_FS+0x1c>)
 800fc34:	4805      	ldr	r0, [pc, #20]	; (800fc4c <CDC_Init_FS+0x20>)
 800fc36:	f7fe fc5f 	bl	800e4f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fc3a:	4905      	ldr	r1, [pc, #20]	; (800fc50 <CDC_Init_FS+0x24>)
 800fc3c:	4803      	ldr	r0, [pc, #12]	; (800fc4c <CDC_Init_FS+0x20>)
 800fc3e:	f7fe fc7d 	bl	800e53c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	24001304 	.word	0x24001304
 800fc4c:	24000828 	.word	0x24000828
 800fc50:	24000b04 	.word	0x24000b04

0800fc54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc54:	b480      	push	{r7}
 800fc56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	6039      	str	r1, [r7, #0]
 800fc6e:	71fb      	strb	r3, [r7, #7]
 800fc70:	4613      	mov	r3, r2
 800fc72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	2b23      	cmp	r3, #35	; 0x23
 800fc78:	d84a      	bhi.n	800fd10 <CDC_Control_FS+0xac>
 800fc7a:	a201      	add	r2, pc, #4	; (adr r2, 800fc80 <CDC_Control_FS+0x1c>)
 800fc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc80:	0800fd11 	.word	0x0800fd11
 800fc84:	0800fd11 	.word	0x0800fd11
 800fc88:	0800fd11 	.word	0x0800fd11
 800fc8c:	0800fd11 	.word	0x0800fd11
 800fc90:	0800fd11 	.word	0x0800fd11
 800fc94:	0800fd11 	.word	0x0800fd11
 800fc98:	0800fd11 	.word	0x0800fd11
 800fc9c:	0800fd11 	.word	0x0800fd11
 800fca0:	0800fd11 	.word	0x0800fd11
 800fca4:	0800fd11 	.word	0x0800fd11
 800fca8:	0800fd11 	.word	0x0800fd11
 800fcac:	0800fd11 	.word	0x0800fd11
 800fcb0:	0800fd11 	.word	0x0800fd11
 800fcb4:	0800fd11 	.word	0x0800fd11
 800fcb8:	0800fd11 	.word	0x0800fd11
 800fcbc:	0800fd11 	.word	0x0800fd11
 800fcc0:	0800fd11 	.word	0x0800fd11
 800fcc4:	0800fd11 	.word	0x0800fd11
 800fcc8:	0800fd11 	.word	0x0800fd11
 800fccc:	0800fd11 	.word	0x0800fd11
 800fcd0:	0800fd11 	.word	0x0800fd11
 800fcd4:	0800fd11 	.word	0x0800fd11
 800fcd8:	0800fd11 	.word	0x0800fd11
 800fcdc:	0800fd11 	.word	0x0800fd11
 800fce0:	0800fd11 	.word	0x0800fd11
 800fce4:	0800fd11 	.word	0x0800fd11
 800fce8:	0800fd11 	.word	0x0800fd11
 800fcec:	0800fd11 	.word	0x0800fd11
 800fcf0:	0800fd11 	.word	0x0800fd11
 800fcf4:	0800fd11 	.word	0x0800fd11
 800fcf8:	0800fd11 	.word	0x0800fd11
 800fcfc:	0800fd11 	.word	0x0800fd11
 800fd00:	0800fd11 	.word	0x0800fd11
 800fd04:	0800fd11 	.word	0x0800fd11
 800fd08:	0800fd11 	.word	0x0800fd11
 800fd0c:	0800fd11 	.word	0x0800fd11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd10:	bf00      	nop
  }

  return (USBD_OK);
 800fd12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd2a:	6879      	ldr	r1, [r7, #4]
 800fd2c:	4805      	ldr	r0, [pc, #20]	; (800fd44 <CDC_Receive_FS+0x24>)
 800fd2e:	f7fe fc05 	bl	800e53c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd32:	4804      	ldr	r0, [pc, #16]	; (800fd44 <CDC_Receive_FS+0x24>)
 800fd34:	f7fe fc20 	bl	800e578 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fd38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3708      	adds	r7, #8
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	24000828 	.word	0x24000828

0800fd48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b087      	sub	sp, #28
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	4613      	mov	r3, r2
 800fd54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	371c      	adds	r7, #28
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr
	...

0800fd6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	6039      	str	r1, [r7, #0]
 800fd76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2212      	movs	r2, #18
 800fd7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fd7e:	4b03      	ldr	r3, [pc, #12]	; (800fd8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	240000d0 	.word	0x240000d0

0800fd90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	4603      	mov	r3, r0
 800fd98:	6039      	str	r1, [r7, #0]
 800fd9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	2204      	movs	r2, #4
 800fda0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fda2:	4b03      	ldr	r3, [pc, #12]	; (800fdb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr
 800fdb0:	240000e4 	.word	0x240000e4

0800fdb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	4603      	mov	r3, r0
 800fdbc:	6039      	str	r1, [r7, #0]
 800fdbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fdc0:	79fb      	ldrb	r3, [r7, #7]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d105      	bne.n	800fdd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdc6:	683a      	ldr	r2, [r7, #0]
 800fdc8:	4907      	ldr	r1, [pc, #28]	; (800fde8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdca:	4808      	ldr	r0, [pc, #32]	; (800fdec <USBD_FS_ProductStrDescriptor+0x38>)
 800fdcc:	f7ff fe1c 	bl	800fa08 <USBD_GetString>
 800fdd0:	e004      	b.n	800fddc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdd2:	683a      	ldr	r2, [r7, #0]
 800fdd4:	4904      	ldr	r1, [pc, #16]	; (800fde8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdd6:	4805      	ldr	r0, [pc, #20]	; (800fdec <USBD_FS_ProductStrDescriptor+0x38>)
 800fdd8:	f7ff fe16 	bl	800fa08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fddc:	4b02      	ldr	r3, [pc, #8]	; (800fde8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	24001b04 	.word	0x24001b04
 800fdec:	0801169c 	.word	0x0801169c

0800fdf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	6039      	str	r1, [r7, #0]
 800fdfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fdfc:	683a      	ldr	r2, [r7, #0]
 800fdfe:	4904      	ldr	r1, [pc, #16]	; (800fe10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe00:	4804      	ldr	r0, [pc, #16]	; (800fe14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe02:	f7ff fe01 	bl	800fa08 <USBD_GetString>
  return USBD_StrDesc;
 800fe06:	4b02      	ldr	r3, [pc, #8]	; (800fe10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	24001b04 	.word	0x24001b04
 800fe14:	080116b4 	.word	0x080116b4

0800fe18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	6039      	str	r1, [r7, #0]
 800fe22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	221a      	movs	r2, #26
 800fe28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fe2a:	f000 f843 	bl	800feb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fe2e:	4b02      	ldr	r3, [pc, #8]	; (800fe38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	240000e8 	.word	0x240000e8

0800fe3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	4603      	mov	r3, r0
 800fe44:	6039      	str	r1, [r7, #0]
 800fe46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d105      	bne.n	800fe5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	4907      	ldr	r1, [pc, #28]	; (800fe70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe52:	4808      	ldr	r0, [pc, #32]	; (800fe74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe54:	f7ff fdd8 	bl	800fa08 <USBD_GetString>
 800fe58:	e004      	b.n	800fe64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe5a:	683a      	ldr	r2, [r7, #0]
 800fe5c:	4904      	ldr	r1, [pc, #16]	; (800fe70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe5e:	4805      	ldr	r0, [pc, #20]	; (800fe74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe60:	f7ff fdd2 	bl	800fa08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe64:	4b02      	ldr	r3, [pc, #8]	; (800fe70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	24001b04 	.word	0x24001b04
 800fe74:	080116c8 	.word	0x080116c8

0800fe78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	4603      	mov	r3, r0
 800fe80:	6039      	str	r1, [r7, #0]
 800fe82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe84:	79fb      	ldrb	r3, [r7, #7]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d105      	bne.n	800fe96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe8a:	683a      	ldr	r2, [r7, #0]
 800fe8c:	4907      	ldr	r1, [pc, #28]	; (800feac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe8e:	4808      	ldr	r0, [pc, #32]	; (800feb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe90:	f7ff fdba 	bl	800fa08 <USBD_GetString>
 800fe94:	e004      	b.n	800fea0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe96:	683a      	ldr	r2, [r7, #0]
 800fe98:	4904      	ldr	r1, [pc, #16]	; (800feac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe9a:	4805      	ldr	r0, [pc, #20]	; (800feb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe9c:	f7ff fdb4 	bl	800fa08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fea0:	4b02      	ldr	r3, [pc, #8]	; (800feac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3708      	adds	r7, #8
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	24001b04 	.word	0x24001b04
 800feb0:	080116d4 	.word	0x080116d4

0800feb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800feba:	4b0f      	ldr	r3, [pc, #60]	; (800fef8 <Get_SerialNum+0x44>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fec0:	4b0e      	ldr	r3, [pc, #56]	; (800fefc <Get_SerialNum+0x48>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fec6:	4b0e      	ldr	r3, [pc, #56]	; (800ff00 <Get_SerialNum+0x4c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4413      	add	r3, r2
 800fed2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d009      	beq.n	800feee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800feda:	2208      	movs	r2, #8
 800fedc:	4909      	ldr	r1, [pc, #36]	; (800ff04 <Get_SerialNum+0x50>)
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f000 f814 	bl	800ff0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fee4:	2204      	movs	r2, #4
 800fee6:	4908      	ldr	r1, [pc, #32]	; (800ff08 <Get_SerialNum+0x54>)
 800fee8:	68b8      	ldr	r0, [r7, #8]
 800feea:	f000 f80f 	bl	800ff0c <IntToUnicode>
  }
}
 800feee:	bf00      	nop
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	1ff1e800 	.word	0x1ff1e800
 800fefc:	1ff1e804 	.word	0x1ff1e804
 800ff00:	1ff1e808 	.word	0x1ff1e808
 800ff04:	240000ea 	.word	0x240000ea
 800ff08:	240000fa 	.word	0x240000fa

0800ff0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b087      	sub	sp, #28
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	4613      	mov	r3, r2
 800ff18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff1e:	2300      	movs	r3, #0
 800ff20:	75fb      	strb	r3, [r7, #23]
 800ff22:	e027      	b.n	800ff74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	0f1b      	lsrs	r3, r3, #28
 800ff28:	2b09      	cmp	r3, #9
 800ff2a:	d80b      	bhi.n	800ff44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	0f1b      	lsrs	r3, r3, #28
 800ff30:	b2da      	uxtb	r2, r3
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	4619      	mov	r1, r3
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	440b      	add	r3, r1
 800ff3c:	3230      	adds	r2, #48	; 0x30
 800ff3e:	b2d2      	uxtb	r2, r2
 800ff40:	701a      	strb	r2, [r3, #0]
 800ff42:	e00a      	b.n	800ff5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	0f1b      	lsrs	r3, r3, #28
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	7dfb      	ldrb	r3, [r7, #23]
 800ff4c:	005b      	lsls	r3, r3, #1
 800ff4e:	4619      	mov	r1, r3
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	440b      	add	r3, r1
 800ff54:	3237      	adds	r2, #55	; 0x37
 800ff56:	b2d2      	uxtb	r2, r2
 800ff58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	011b      	lsls	r3, r3, #4
 800ff5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ff60:	7dfb      	ldrb	r3, [r7, #23]
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	3301      	adds	r3, #1
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	4413      	add	r3, r2
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff6e:	7dfb      	ldrb	r3, [r7, #23]
 800ff70:	3301      	adds	r3, #1
 800ff72:	75fb      	strb	r3, [r7, #23]
 800ff74:	7dfa      	ldrb	r2, [r7, #23]
 800ff76:	79fb      	ldrb	r3, [r7, #7]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d3d3      	bcc.n	800ff24 <IntToUnicode+0x18>
  }
}
 800ff7c:	bf00      	nop
 800ff7e:	bf00      	nop
 800ff80:	371c      	adds	r7, #28
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
	...

0800ff8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b0b8      	sub	sp, #224	; 0xe0
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ff98:	2200      	movs	r2, #0
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	605a      	str	r2, [r3, #4]
 800ff9e:	609a      	str	r2, [r3, #8]
 800ffa0:	60da      	str	r2, [r3, #12]
 800ffa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ffa4:	f107 0310 	add.w	r3, r7, #16
 800ffa8:	22bc      	movs	r2, #188	; 0xbc
 800ffaa:	2100      	movs	r1, #0
 800ffac:	4618      	mov	r0, r3
 800ffae:	f000 fb69 	bl	8010684 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4a32      	ldr	r2, [pc, #200]	; (8010080 <HAL_PCD_MspInit+0xf4>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d15d      	bne.n	8010078 <HAL_PCD_MspInit+0xec>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ffbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ffc0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 15;
 800ffc6:	230f      	movs	r3, #15
 800ffc8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800ffca:	2302      	movs	r3, #2
 800ffcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800ffce:	2303      	movs	r3, #3
 800ffd0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 15;
 800ffd2:	230f      	movs	r3, #15
 800ffd4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800ffd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ffda:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800ffe0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ffe4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ffe8:	f107 0310 	add.w	r3, r7, #16
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f8 f997 	bl	8008320 <HAL_RCCEx_PeriphCLKConfig>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d001      	beq.n	800fffc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800fff8:	f7f1 f9aa 	bl	8001350 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fffc:	f7f7 f9f4 	bl	80073e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010000:	4b20      	ldr	r3, [pc, #128]	; (8010084 <HAL_PCD_MspInit+0xf8>)
 8010002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010006:	4a1f      	ldr	r2, [pc, #124]	; (8010084 <HAL_PCD_MspInit+0xf8>)
 8010008:	f043 0301 	orr.w	r3, r3, #1
 801000c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010010:	4b1c      	ldr	r3, [pc, #112]	; (8010084 <HAL_PCD_MspInit+0xf8>)
 8010012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010016:	f003 0301 	and.w	r3, r3, #1
 801001a:	60fb      	str	r3, [r7, #12]
 801001c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801001e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010026:	2302      	movs	r3, #2
 8010028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801002c:	2300      	movs	r3, #0
 801002e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010032:	2300      	movs	r3, #0
 8010034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010038:	230a      	movs	r3, #10
 801003a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801003e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010042:	4619      	mov	r1, r3
 8010044:	4810      	ldr	r0, [pc, #64]	; (8010088 <HAL_PCD_MspInit+0xfc>)
 8010046:	f7f5 fbcf 	bl	80057e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801004a:	4b0e      	ldr	r3, [pc, #56]	; (8010084 <HAL_PCD_MspInit+0xf8>)
 801004c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010050:	4a0c      	ldr	r2, [pc, #48]	; (8010084 <HAL_PCD_MspInit+0xf8>)
 8010052:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010056:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801005a:	4b0a      	ldr	r3, [pc, #40]	; (8010084 <HAL_PCD_MspInit+0xf8>)
 801005c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010064:	60bb      	str	r3, [r7, #8]
 8010066:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010068:	2200      	movs	r2, #0
 801006a:	2100      	movs	r1, #0
 801006c:	2065      	movs	r0, #101	; 0x65
 801006e:	f7f3 fb5c 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010072:	2065      	movs	r0, #101	; 0x65
 8010074:	f7f3 fb73 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010078:	bf00      	nop
 801007a:	37e0      	adds	r7, #224	; 0xe0
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	40080000 	.word	0x40080000
 8010084:	58024400 	.word	0x58024400
 8010088:	58020000 	.word	0x58020000

0801008c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80100a0:	4619      	mov	r1, r3
 80100a2:	4610      	mov	r0, r2
 80100a4:	f7fe fb51 	bl	800e74a <USBD_LL_SetupStage>
}
 80100a8:	bf00      	nop
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80100c2:	78fa      	ldrb	r2, [r7, #3]
 80100c4:	6879      	ldr	r1, [r7, #4]
 80100c6:	4613      	mov	r3, r2
 80100c8:	00db      	lsls	r3, r3, #3
 80100ca:	4413      	add	r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	440b      	add	r3, r1
 80100d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	78fb      	ldrb	r3, [r7, #3]
 80100d8:	4619      	mov	r1, r3
 80100da:	f7fe fb8b 	bl	800e7f4 <USBD_LL_DataOutStage>
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	460b      	mov	r3, r1
 80100f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80100f8:	78fa      	ldrb	r2, [r7, #3]
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	4613      	mov	r3, r2
 80100fe:	00db      	lsls	r3, r3, #3
 8010100:	4413      	add	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	440b      	add	r3, r1
 8010106:	334c      	adds	r3, #76	; 0x4c
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	78fb      	ldrb	r3, [r7, #3]
 801010c:	4619      	mov	r1, r3
 801010e:	f7fe fc24 	bl	800e95a <USBD_LL_DataInStage>
}
 8010112:	bf00      	nop
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b082      	sub	sp, #8
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010128:	4618      	mov	r0, r3
 801012a:	f7fe fd58 	bl	800ebde <USBD_LL_SOF>
}
 801012e:	bf00      	nop
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b084      	sub	sp, #16
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801013e:	2301      	movs	r3, #1
 8010140:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d102      	bne.n	8010150 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801014a:	2300      	movs	r3, #0
 801014c:	73fb      	strb	r3, [r7, #15]
 801014e:	e008      	b.n	8010162 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	2b02      	cmp	r3, #2
 8010156:	d102      	bne.n	801015e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010158:	2301      	movs	r3, #1
 801015a:	73fb      	strb	r3, [r7, #15]
 801015c:	e001      	b.n	8010162 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801015e:	f7f1 f8f7 	bl	8001350 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010168:	7bfa      	ldrb	r2, [r7, #15]
 801016a:	4611      	mov	r1, r2
 801016c:	4618      	mov	r0, r3
 801016e:	f7fe fcf8 	bl	800eb62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010178:	4618      	mov	r0, r3
 801017a:	f7fe fca0 	bl	800eabe <USBD_LL_Reset>
}
 801017e:	bf00      	nop
 8010180:	3710      	adds	r7, #16
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
	...

08010188 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010196:	4618      	mov	r0, r3
 8010198:	f7fe fcf3 	bl	800eb82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	6812      	ldr	r2, [r2, #0]
 80101aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101ae:	f043 0301 	orr.w	r3, r3, #1
 80101b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6a1b      	ldr	r3, [r3, #32]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d005      	beq.n	80101c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101bc:	4b04      	ldr	r3, [pc, #16]	; (80101d0 <HAL_PCD_SuspendCallback+0x48>)
 80101be:	691b      	ldr	r3, [r3, #16]
 80101c0:	4a03      	ldr	r2, [pc, #12]	; (80101d0 <HAL_PCD_SuspendCallback+0x48>)
 80101c2:	f043 0306 	orr.w	r3, r3, #6
 80101c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80101c8:	bf00      	nop
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	e000ed00 	.word	0xe000ed00

080101d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe fce3 	bl	800ebae <USBD_LL_Resume>
}
 80101e8:	bf00      	nop
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	460b      	mov	r3, r1
 80101fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010202:	78fa      	ldrb	r2, [r7, #3]
 8010204:	4611      	mov	r1, r2
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe fd3b 	bl	800ec82 <USBD_LL_IsoOUTIncomplete>
}
 801020c:	bf00      	nop
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	460b      	mov	r3, r1
 801021e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010226:	78fa      	ldrb	r2, [r7, #3]
 8010228:	4611      	mov	r1, r2
 801022a:	4618      	mov	r0, r3
 801022c:	f7fe fcf7 	bl	800ec1e <USBD_LL_IsoINIncomplete>
}
 8010230:	bf00      	nop
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010246:	4618      	mov	r0, r3
 8010248:	f7fe fd4d 	bl	800ece6 <USBD_LL_DevConnected>
}
 801024c:	bf00      	nop
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe fd4a 	bl	800ecfc <USBD_LL_DevDisconnected>
}
 8010268:	bf00      	nop
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d13e      	bne.n	80102fe <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010280:	4a21      	ldr	r2, [pc, #132]	; (8010308 <USBD_LL_Init+0x98>)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4a1f      	ldr	r2, [pc, #124]	; (8010308 <USBD_LL_Init+0x98>)
 801028c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010290:	4b1d      	ldr	r3, [pc, #116]	; (8010308 <USBD_LL_Init+0x98>)
 8010292:	4a1e      	ldr	r2, [pc, #120]	; (801030c <USBD_LL_Init+0x9c>)
 8010294:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010296:	4b1c      	ldr	r3, [pc, #112]	; (8010308 <USBD_LL_Init+0x98>)
 8010298:	2209      	movs	r2, #9
 801029a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801029c:	4b1a      	ldr	r3, [pc, #104]	; (8010308 <USBD_LL_Init+0x98>)
 801029e:	2202      	movs	r2, #2
 80102a0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80102a2:	4b19      	ldr	r3, [pc, #100]	; (8010308 <USBD_LL_Init+0x98>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80102a8:	4b17      	ldr	r3, [pc, #92]	; (8010308 <USBD_LL_Init+0x98>)
 80102aa:	2202      	movs	r2, #2
 80102ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80102ae:	4b16      	ldr	r3, [pc, #88]	; (8010308 <USBD_LL_Init+0x98>)
 80102b0:	2200      	movs	r2, #0
 80102b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80102b4:	4b14      	ldr	r3, [pc, #80]	; (8010308 <USBD_LL_Init+0x98>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80102ba:	4b13      	ldr	r3, [pc, #76]	; (8010308 <USBD_LL_Init+0x98>)
 80102bc:	2200      	movs	r2, #0
 80102be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80102c0:	4b11      	ldr	r3, [pc, #68]	; (8010308 <USBD_LL_Init+0x98>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80102c6:	4b10      	ldr	r3, [pc, #64]	; (8010308 <USBD_LL_Init+0x98>)
 80102c8:	2200      	movs	r2, #0
 80102ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80102cc:	4b0e      	ldr	r3, [pc, #56]	; (8010308 <USBD_LL_Init+0x98>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80102d2:	480d      	ldr	r0, [pc, #52]	; (8010308 <USBD_LL_Init+0x98>)
 80102d4:	f7f5 fd79 	bl	8005dca <HAL_PCD_Init>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d001      	beq.n	80102e2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80102de:	f7f1 f837 	bl	8001350 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80102e2:	2180      	movs	r1, #128	; 0x80
 80102e4:	4808      	ldr	r0, [pc, #32]	; (8010308 <USBD_LL_Init+0x98>)
 80102e6:	f7f7 f804 	bl	80072f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80102ea:	2240      	movs	r2, #64	; 0x40
 80102ec:	2100      	movs	r1, #0
 80102ee:	4806      	ldr	r0, [pc, #24]	; (8010308 <USBD_LL_Init+0x98>)
 80102f0:	f7f6 ffb8 	bl	8007264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80102f4:	2280      	movs	r2, #128	; 0x80
 80102f6:	2101      	movs	r1, #1
 80102f8:	4803      	ldr	r0, [pc, #12]	; (8010308 <USBD_LL_Init+0x98>)
 80102fa:	f7f6 ffb3 	bl	8007264 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	24001d04 	.word	0x24001d04
 801030c:	40080000 	.word	0x40080000

08010310 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010326:	4618      	mov	r0, r3
 8010328:	f7f5 fe73 	bl	8006012 <HAL_PCD_Start>
 801032c:	4603      	mov	r3, r0
 801032e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010330:	7bfb      	ldrb	r3, [r7, #15]
 8010332:	4618      	mov	r0, r3
 8010334:	f000 f942 	bl	80105bc <USBD_Get_USB_Status>
 8010338:	4603      	mov	r3, r0
 801033a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801033c:	7bbb      	ldrb	r3, [r7, #14]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3710      	adds	r7, #16
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b084      	sub	sp, #16
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
 801034e:	4608      	mov	r0, r1
 8010350:	4611      	mov	r1, r2
 8010352:	461a      	mov	r2, r3
 8010354:	4603      	mov	r3, r0
 8010356:	70fb      	strb	r3, [r7, #3]
 8010358:	460b      	mov	r3, r1
 801035a:	70bb      	strb	r3, [r7, #2]
 801035c:	4613      	mov	r3, r2
 801035e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010360:	2300      	movs	r3, #0
 8010362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010364:	2300      	movs	r3, #0
 8010366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801036e:	78bb      	ldrb	r3, [r7, #2]
 8010370:	883a      	ldrh	r2, [r7, #0]
 8010372:	78f9      	ldrb	r1, [r7, #3]
 8010374:	f7f6 fb71 	bl	8006a5a <HAL_PCD_EP_Open>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801037c:	7bfb      	ldrb	r3, [r7, #15]
 801037e:	4618      	mov	r0, r3
 8010380:	f000 f91c 	bl	80105bc <USBD_Get_USB_Status>
 8010384:	4603      	mov	r3, r0
 8010386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010388:	7bbb      	ldrb	r3, [r7, #14]
}
 801038a:	4618      	mov	r0, r3
 801038c:	3710      	adds	r7, #16
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b084      	sub	sp, #16
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
 801039a:	460b      	mov	r3, r1
 801039c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801039e:	2300      	movs	r3, #0
 80103a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103a2:	2300      	movs	r3, #0
 80103a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103ac:	78fa      	ldrb	r2, [r7, #3]
 80103ae:	4611      	mov	r1, r2
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7f6 fbba 	bl	8006b2a <HAL_PCD_EP_Close>
 80103b6:	4603      	mov	r3, r0
 80103b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103ba:	7bfb      	ldrb	r3, [r7, #15]
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 f8fd 	bl	80105bc <USBD_Get_USB_Status>
 80103c2:	4603      	mov	r3, r0
 80103c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	460b      	mov	r3, r1
 80103da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103dc:	2300      	movs	r3, #0
 80103de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103e0:	2300      	movs	r3, #0
 80103e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103ea:	78fa      	ldrb	r2, [r7, #3]
 80103ec:	4611      	mov	r1, r2
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7f6 fc92 	bl	8006d18 <HAL_PCD_EP_SetStall>
 80103f4:	4603      	mov	r3, r0
 80103f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f000 f8de 	bl	80105bc <USBD_Get_USB_Status>
 8010400:	4603      	mov	r3, r0
 8010402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010404:	7bbb      	ldrb	r3, [r7, #14]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b084      	sub	sp, #16
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
 8010416:	460b      	mov	r3, r1
 8010418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801041a:	2300      	movs	r3, #0
 801041c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801041e:	2300      	movs	r3, #0
 8010420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010428:	78fa      	ldrb	r2, [r7, #3]
 801042a:	4611      	mov	r1, r2
 801042c:	4618      	mov	r0, r3
 801042e:	f7f6 fcd7 	bl	8006de0 <HAL_PCD_EP_ClrStall>
 8010432:	4603      	mov	r3, r0
 8010434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010436:	7bfb      	ldrb	r3, [r7, #15]
 8010438:	4618      	mov	r0, r3
 801043a:	f000 f8bf 	bl	80105bc <USBD_Get_USB_Status>
 801043e:	4603      	mov	r3, r0
 8010440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010442:	7bbb      	ldrb	r3, [r7, #14]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801045e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010464:	2b00      	cmp	r3, #0
 8010466:	da0b      	bge.n	8010480 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010468:	78fb      	ldrb	r3, [r7, #3]
 801046a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801046e:	68f9      	ldr	r1, [r7, #12]
 8010470:	4613      	mov	r3, r2
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	4413      	add	r3, r2
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	440b      	add	r3, r1
 801047a:	333e      	adds	r3, #62	; 0x3e
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	e00b      	b.n	8010498 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010480:	78fb      	ldrb	r3, [r7, #3]
 8010482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010486:	68f9      	ldr	r1, [r7, #12]
 8010488:	4613      	mov	r3, r2
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	4413      	add	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	440b      	add	r3, r1
 8010492:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010496:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010498:	4618      	mov	r0, r3
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	460b      	mov	r3, r1
 80104ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b0:	2300      	movs	r3, #0
 80104b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104be:	78fa      	ldrb	r2, [r7, #3]
 80104c0:	4611      	mov	r1, r2
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7f6 faa4 	bl	8006a10 <HAL_PCD_SetAddress>
 80104c8:	4603      	mov	r3, r0
 80104ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104cc:	7bfb      	ldrb	r3, [r7, #15]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f000 f874 	bl	80105bc <USBD_Get_USB_Status>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}

080104e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b086      	sub	sp, #24
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	60f8      	str	r0, [r7, #12]
 80104ea:	607a      	str	r2, [r7, #4]
 80104ec:	603b      	str	r3, [r7, #0]
 80104ee:	460b      	mov	r3, r1
 80104f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104f2:	2300      	movs	r3, #0
 80104f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104f6:	2300      	movs	r3, #0
 80104f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010500:	7af9      	ldrb	r1, [r7, #11]
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	f7f6 fbbd 	bl	8006c84 <HAL_PCD_EP_Transmit>
 801050a:	4603      	mov	r3, r0
 801050c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	4618      	mov	r0, r3
 8010512:	f000 f853 	bl	80105bc <USBD_Get_USB_Status>
 8010516:	4603      	mov	r3, r0
 8010518:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801051a:	7dbb      	ldrb	r3, [r7, #22]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3718      	adds	r7, #24
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	607a      	str	r2, [r7, #4]
 801052e:	603b      	str	r3, [r7, #0]
 8010530:	460b      	mov	r3, r1
 8010532:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010534:	2300      	movs	r3, #0
 8010536:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010538:	2300      	movs	r3, #0
 801053a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010542:	7af9      	ldrb	r1, [r7, #11]
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	f7f6 fb39 	bl	8006bbe <HAL_PCD_EP_Receive>
 801054c:	4603      	mov	r3, r0
 801054e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010550:	7dfb      	ldrb	r3, [r7, #23]
 8010552:	4618      	mov	r0, r3
 8010554:	f000 f832 	bl	80105bc <USBD_Get_USB_Status>
 8010558:	4603      	mov	r3, r0
 801055a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801055c:	7dbb      	ldrb	r3, [r7, #22]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3718      	adds	r7, #24
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b082      	sub	sp, #8
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
 801056e:	460b      	mov	r3, r1
 8010570:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010578:	78fa      	ldrb	r2, [r7, #3]
 801057a:	4611      	mov	r1, r2
 801057c:	4618      	mov	r0, r3
 801057e:	f7f6 fb69 	bl	8006c54 <HAL_PCD_EP_GetRxCount>
 8010582:	4603      	mov	r3, r0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010594:	4b03      	ldr	r3, [pc, #12]	; (80105a4 <USBD_static_malloc+0x18>)
}
 8010596:	4618      	mov	r0, r3
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	24000194 	.word	0x24000194

080105a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]

}
 80105b0:	bf00      	nop
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105c6:	2300      	movs	r3, #0
 80105c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80105ca:	79fb      	ldrb	r3, [r7, #7]
 80105cc:	2b03      	cmp	r3, #3
 80105ce:	d817      	bhi.n	8010600 <USBD_Get_USB_Status+0x44>
 80105d0:	a201      	add	r2, pc, #4	; (adr r2, 80105d8 <USBD_Get_USB_Status+0x1c>)
 80105d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d6:	bf00      	nop
 80105d8:	080105e9 	.word	0x080105e9
 80105dc:	080105ef 	.word	0x080105ef
 80105e0:	080105f5 	.word	0x080105f5
 80105e4:	080105fb 	.word	0x080105fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	73fb      	strb	r3, [r7, #15]
    break;
 80105ec:	e00b      	b.n	8010606 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80105ee:	2303      	movs	r3, #3
 80105f0:	73fb      	strb	r3, [r7, #15]
    break;
 80105f2:	e008      	b.n	8010606 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105f4:	2301      	movs	r3, #1
 80105f6:	73fb      	strb	r3, [r7, #15]
    break;
 80105f8:	e005      	b.n	8010606 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105fa:	2303      	movs	r3, #3
 80105fc:	73fb      	strb	r3, [r7, #15]
    break;
 80105fe:	e002      	b.n	8010606 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010600:	2303      	movs	r3, #3
 8010602:	73fb      	strb	r3, [r7, #15]
    break;
 8010604:	bf00      	nop
  }
  return usb_status;
 8010606:	7bfb      	ldrb	r3, [r7, #15]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3714      	adds	r7, #20
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <__errno>:
 8010614:	4b01      	ldr	r3, [pc, #4]	; (801061c <__errno+0x8>)
 8010616:	6818      	ldr	r0, [r3, #0]
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop
 801061c:	24000104 	.word	0x24000104

08010620 <__libc_init_array>:
 8010620:	b570      	push	{r4, r5, r6, lr}
 8010622:	4d0d      	ldr	r5, [pc, #52]	; (8010658 <__libc_init_array+0x38>)
 8010624:	4c0d      	ldr	r4, [pc, #52]	; (801065c <__libc_init_array+0x3c>)
 8010626:	1b64      	subs	r4, r4, r5
 8010628:	10a4      	asrs	r4, r4, #2
 801062a:	2600      	movs	r6, #0
 801062c:	42a6      	cmp	r6, r4
 801062e:	d109      	bne.n	8010644 <__libc_init_array+0x24>
 8010630:	4d0b      	ldr	r5, [pc, #44]	; (8010660 <__libc_init_array+0x40>)
 8010632:	4c0c      	ldr	r4, [pc, #48]	; (8010664 <__libc_init_array+0x44>)
 8010634:	f000 ff84 	bl	8011540 <_init>
 8010638:	1b64      	subs	r4, r4, r5
 801063a:	10a4      	asrs	r4, r4, #2
 801063c:	2600      	movs	r6, #0
 801063e:	42a6      	cmp	r6, r4
 8010640:	d105      	bne.n	801064e <__libc_init_array+0x2e>
 8010642:	bd70      	pop	{r4, r5, r6, pc}
 8010644:	f855 3b04 	ldr.w	r3, [r5], #4
 8010648:	4798      	blx	r3
 801064a:	3601      	adds	r6, #1
 801064c:	e7ee      	b.n	801062c <__libc_init_array+0xc>
 801064e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010652:	4798      	blx	r3
 8010654:	3601      	adds	r6, #1
 8010656:	e7f2      	b.n	801063e <__libc_init_array+0x1e>
 8010658:	08011794 	.word	0x08011794
 801065c:	08011794 	.word	0x08011794
 8010660:	08011794 	.word	0x08011794
 8010664:	08011798 	.word	0x08011798

08010668 <memcpy>:
 8010668:	440a      	add	r2, r1
 801066a:	4291      	cmp	r1, r2
 801066c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010670:	d100      	bne.n	8010674 <memcpy+0xc>
 8010672:	4770      	bx	lr
 8010674:	b510      	push	{r4, lr}
 8010676:	f811 4b01 	ldrb.w	r4, [r1], #1
 801067a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801067e:	4291      	cmp	r1, r2
 8010680:	d1f9      	bne.n	8010676 <memcpy+0xe>
 8010682:	bd10      	pop	{r4, pc}

08010684 <memset>:
 8010684:	4402      	add	r2, r0
 8010686:	4603      	mov	r3, r0
 8010688:	4293      	cmp	r3, r2
 801068a:	d100      	bne.n	801068e <memset+0xa>
 801068c:	4770      	bx	lr
 801068e:	f803 1b01 	strb.w	r1, [r3], #1
 8010692:	e7f9      	b.n	8010688 <memset+0x4>

08010694 <iprintf>:
 8010694:	b40f      	push	{r0, r1, r2, r3}
 8010696:	4b0a      	ldr	r3, [pc, #40]	; (80106c0 <iprintf+0x2c>)
 8010698:	b513      	push	{r0, r1, r4, lr}
 801069a:	681c      	ldr	r4, [r3, #0]
 801069c:	b124      	cbz	r4, 80106a8 <iprintf+0x14>
 801069e:	69a3      	ldr	r3, [r4, #24]
 80106a0:	b913      	cbnz	r3, 80106a8 <iprintf+0x14>
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 f866 	bl	8010774 <__sinit>
 80106a8:	ab05      	add	r3, sp, #20
 80106aa:	9a04      	ldr	r2, [sp, #16]
 80106ac:	68a1      	ldr	r1, [r4, #8]
 80106ae:	9301      	str	r3, [sp, #4]
 80106b0:	4620      	mov	r0, r4
 80106b2:	f000 f983 	bl	80109bc <_vfiprintf_r>
 80106b6:	b002      	add	sp, #8
 80106b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106bc:	b004      	add	sp, #16
 80106be:	4770      	bx	lr
 80106c0:	24000104 	.word	0x24000104

080106c4 <std>:
 80106c4:	2300      	movs	r3, #0
 80106c6:	b510      	push	{r4, lr}
 80106c8:	4604      	mov	r4, r0
 80106ca:	e9c0 3300 	strd	r3, r3, [r0]
 80106ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106d2:	6083      	str	r3, [r0, #8]
 80106d4:	8181      	strh	r1, [r0, #12]
 80106d6:	6643      	str	r3, [r0, #100]	; 0x64
 80106d8:	81c2      	strh	r2, [r0, #14]
 80106da:	6183      	str	r3, [r0, #24]
 80106dc:	4619      	mov	r1, r3
 80106de:	2208      	movs	r2, #8
 80106e0:	305c      	adds	r0, #92	; 0x5c
 80106e2:	f7ff ffcf 	bl	8010684 <memset>
 80106e6:	4b05      	ldr	r3, [pc, #20]	; (80106fc <std+0x38>)
 80106e8:	6263      	str	r3, [r4, #36]	; 0x24
 80106ea:	4b05      	ldr	r3, [pc, #20]	; (8010700 <std+0x3c>)
 80106ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80106ee:	4b05      	ldr	r3, [pc, #20]	; (8010704 <std+0x40>)
 80106f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80106f2:	4b05      	ldr	r3, [pc, #20]	; (8010708 <std+0x44>)
 80106f4:	6224      	str	r4, [r4, #32]
 80106f6:	6323      	str	r3, [r4, #48]	; 0x30
 80106f8:	bd10      	pop	{r4, pc}
 80106fa:	bf00      	nop
 80106fc:	08010f65 	.word	0x08010f65
 8010700:	08010f87 	.word	0x08010f87
 8010704:	08010fbf 	.word	0x08010fbf
 8010708:	08010fe3 	.word	0x08010fe3

0801070c <_cleanup_r>:
 801070c:	4901      	ldr	r1, [pc, #4]	; (8010714 <_cleanup_r+0x8>)
 801070e:	f000 b8af 	b.w	8010870 <_fwalk_reent>
 8010712:	bf00      	nop
 8010714:	080112bd 	.word	0x080112bd

08010718 <__sfmoreglue>:
 8010718:	b570      	push	{r4, r5, r6, lr}
 801071a:	1e4a      	subs	r2, r1, #1
 801071c:	2568      	movs	r5, #104	; 0x68
 801071e:	4355      	muls	r5, r2
 8010720:	460e      	mov	r6, r1
 8010722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010726:	f000 f8c5 	bl	80108b4 <_malloc_r>
 801072a:	4604      	mov	r4, r0
 801072c:	b140      	cbz	r0, 8010740 <__sfmoreglue+0x28>
 801072e:	2100      	movs	r1, #0
 8010730:	e9c0 1600 	strd	r1, r6, [r0]
 8010734:	300c      	adds	r0, #12
 8010736:	60a0      	str	r0, [r4, #8]
 8010738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801073c:	f7ff ffa2 	bl	8010684 <memset>
 8010740:	4620      	mov	r0, r4
 8010742:	bd70      	pop	{r4, r5, r6, pc}

08010744 <__sfp_lock_acquire>:
 8010744:	4801      	ldr	r0, [pc, #4]	; (801074c <__sfp_lock_acquire+0x8>)
 8010746:	f000 b8b3 	b.w	80108b0 <__retarget_lock_acquire_recursive>
 801074a:	bf00      	nop
 801074c:	24002218 	.word	0x24002218

08010750 <__sfp_lock_release>:
 8010750:	4801      	ldr	r0, [pc, #4]	; (8010758 <__sfp_lock_release+0x8>)
 8010752:	f000 b8ae 	b.w	80108b2 <__retarget_lock_release_recursive>
 8010756:	bf00      	nop
 8010758:	24002218 	.word	0x24002218

0801075c <__sinit_lock_acquire>:
 801075c:	4801      	ldr	r0, [pc, #4]	; (8010764 <__sinit_lock_acquire+0x8>)
 801075e:	f000 b8a7 	b.w	80108b0 <__retarget_lock_acquire_recursive>
 8010762:	bf00      	nop
 8010764:	24002213 	.word	0x24002213

08010768 <__sinit_lock_release>:
 8010768:	4801      	ldr	r0, [pc, #4]	; (8010770 <__sinit_lock_release+0x8>)
 801076a:	f000 b8a2 	b.w	80108b2 <__retarget_lock_release_recursive>
 801076e:	bf00      	nop
 8010770:	24002213 	.word	0x24002213

08010774 <__sinit>:
 8010774:	b510      	push	{r4, lr}
 8010776:	4604      	mov	r4, r0
 8010778:	f7ff fff0 	bl	801075c <__sinit_lock_acquire>
 801077c:	69a3      	ldr	r3, [r4, #24]
 801077e:	b11b      	cbz	r3, 8010788 <__sinit+0x14>
 8010780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010784:	f7ff bff0 	b.w	8010768 <__sinit_lock_release>
 8010788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801078c:	6523      	str	r3, [r4, #80]	; 0x50
 801078e:	4b13      	ldr	r3, [pc, #76]	; (80107dc <__sinit+0x68>)
 8010790:	4a13      	ldr	r2, [pc, #76]	; (80107e0 <__sinit+0x6c>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	62a2      	str	r2, [r4, #40]	; 0x28
 8010796:	42a3      	cmp	r3, r4
 8010798:	bf04      	itt	eq
 801079a:	2301      	moveq	r3, #1
 801079c:	61a3      	streq	r3, [r4, #24]
 801079e:	4620      	mov	r0, r4
 80107a0:	f000 f820 	bl	80107e4 <__sfp>
 80107a4:	6060      	str	r0, [r4, #4]
 80107a6:	4620      	mov	r0, r4
 80107a8:	f000 f81c 	bl	80107e4 <__sfp>
 80107ac:	60a0      	str	r0, [r4, #8]
 80107ae:	4620      	mov	r0, r4
 80107b0:	f000 f818 	bl	80107e4 <__sfp>
 80107b4:	2200      	movs	r2, #0
 80107b6:	60e0      	str	r0, [r4, #12]
 80107b8:	2104      	movs	r1, #4
 80107ba:	6860      	ldr	r0, [r4, #4]
 80107bc:	f7ff ff82 	bl	80106c4 <std>
 80107c0:	68a0      	ldr	r0, [r4, #8]
 80107c2:	2201      	movs	r2, #1
 80107c4:	2109      	movs	r1, #9
 80107c6:	f7ff ff7d 	bl	80106c4 <std>
 80107ca:	68e0      	ldr	r0, [r4, #12]
 80107cc:	2202      	movs	r2, #2
 80107ce:	2112      	movs	r1, #18
 80107d0:	f7ff ff78 	bl	80106c4 <std>
 80107d4:	2301      	movs	r3, #1
 80107d6:	61a3      	str	r3, [r4, #24]
 80107d8:	e7d2      	b.n	8010780 <__sinit+0xc>
 80107da:	bf00      	nop
 80107dc:	080116fc 	.word	0x080116fc
 80107e0:	0801070d 	.word	0x0801070d

080107e4 <__sfp>:
 80107e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e6:	4607      	mov	r7, r0
 80107e8:	f7ff ffac 	bl	8010744 <__sfp_lock_acquire>
 80107ec:	4b1e      	ldr	r3, [pc, #120]	; (8010868 <__sfp+0x84>)
 80107ee:	681e      	ldr	r6, [r3, #0]
 80107f0:	69b3      	ldr	r3, [r6, #24]
 80107f2:	b913      	cbnz	r3, 80107fa <__sfp+0x16>
 80107f4:	4630      	mov	r0, r6
 80107f6:	f7ff ffbd 	bl	8010774 <__sinit>
 80107fa:	3648      	adds	r6, #72	; 0x48
 80107fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010800:	3b01      	subs	r3, #1
 8010802:	d503      	bpl.n	801080c <__sfp+0x28>
 8010804:	6833      	ldr	r3, [r6, #0]
 8010806:	b30b      	cbz	r3, 801084c <__sfp+0x68>
 8010808:	6836      	ldr	r6, [r6, #0]
 801080a:	e7f7      	b.n	80107fc <__sfp+0x18>
 801080c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010810:	b9d5      	cbnz	r5, 8010848 <__sfp+0x64>
 8010812:	4b16      	ldr	r3, [pc, #88]	; (801086c <__sfp+0x88>)
 8010814:	60e3      	str	r3, [r4, #12]
 8010816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801081a:	6665      	str	r5, [r4, #100]	; 0x64
 801081c:	f000 f847 	bl	80108ae <__retarget_lock_init_recursive>
 8010820:	f7ff ff96 	bl	8010750 <__sfp_lock_release>
 8010824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801082c:	6025      	str	r5, [r4, #0]
 801082e:	61a5      	str	r5, [r4, #24]
 8010830:	2208      	movs	r2, #8
 8010832:	4629      	mov	r1, r5
 8010834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010838:	f7ff ff24 	bl	8010684 <memset>
 801083c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010844:	4620      	mov	r0, r4
 8010846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010848:	3468      	adds	r4, #104	; 0x68
 801084a:	e7d9      	b.n	8010800 <__sfp+0x1c>
 801084c:	2104      	movs	r1, #4
 801084e:	4638      	mov	r0, r7
 8010850:	f7ff ff62 	bl	8010718 <__sfmoreglue>
 8010854:	4604      	mov	r4, r0
 8010856:	6030      	str	r0, [r6, #0]
 8010858:	2800      	cmp	r0, #0
 801085a:	d1d5      	bne.n	8010808 <__sfp+0x24>
 801085c:	f7ff ff78 	bl	8010750 <__sfp_lock_release>
 8010860:	230c      	movs	r3, #12
 8010862:	603b      	str	r3, [r7, #0]
 8010864:	e7ee      	b.n	8010844 <__sfp+0x60>
 8010866:	bf00      	nop
 8010868:	080116fc 	.word	0x080116fc
 801086c:	ffff0001 	.word	0xffff0001

08010870 <_fwalk_reent>:
 8010870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010874:	4606      	mov	r6, r0
 8010876:	4688      	mov	r8, r1
 8010878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801087c:	2700      	movs	r7, #0
 801087e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010882:	f1b9 0901 	subs.w	r9, r9, #1
 8010886:	d505      	bpl.n	8010894 <_fwalk_reent+0x24>
 8010888:	6824      	ldr	r4, [r4, #0]
 801088a:	2c00      	cmp	r4, #0
 801088c:	d1f7      	bne.n	801087e <_fwalk_reent+0xe>
 801088e:	4638      	mov	r0, r7
 8010890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010894:	89ab      	ldrh	r3, [r5, #12]
 8010896:	2b01      	cmp	r3, #1
 8010898:	d907      	bls.n	80108aa <_fwalk_reent+0x3a>
 801089a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801089e:	3301      	adds	r3, #1
 80108a0:	d003      	beq.n	80108aa <_fwalk_reent+0x3a>
 80108a2:	4629      	mov	r1, r5
 80108a4:	4630      	mov	r0, r6
 80108a6:	47c0      	blx	r8
 80108a8:	4307      	orrs	r7, r0
 80108aa:	3568      	adds	r5, #104	; 0x68
 80108ac:	e7e9      	b.n	8010882 <_fwalk_reent+0x12>

080108ae <__retarget_lock_init_recursive>:
 80108ae:	4770      	bx	lr

080108b0 <__retarget_lock_acquire_recursive>:
 80108b0:	4770      	bx	lr

080108b2 <__retarget_lock_release_recursive>:
 80108b2:	4770      	bx	lr

080108b4 <_malloc_r>:
 80108b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b6:	1ccd      	adds	r5, r1, #3
 80108b8:	f025 0503 	bic.w	r5, r5, #3
 80108bc:	3508      	adds	r5, #8
 80108be:	2d0c      	cmp	r5, #12
 80108c0:	bf38      	it	cc
 80108c2:	250c      	movcc	r5, #12
 80108c4:	2d00      	cmp	r5, #0
 80108c6:	4606      	mov	r6, r0
 80108c8:	db01      	blt.n	80108ce <_malloc_r+0x1a>
 80108ca:	42a9      	cmp	r1, r5
 80108cc:	d903      	bls.n	80108d6 <_malloc_r+0x22>
 80108ce:	230c      	movs	r3, #12
 80108d0:	6033      	str	r3, [r6, #0]
 80108d2:	2000      	movs	r0, #0
 80108d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108d6:	f000 fda3 	bl	8011420 <__malloc_lock>
 80108da:	4921      	ldr	r1, [pc, #132]	; (8010960 <_malloc_r+0xac>)
 80108dc:	680a      	ldr	r2, [r1, #0]
 80108de:	4614      	mov	r4, r2
 80108e0:	b99c      	cbnz	r4, 801090a <_malloc_r+0x56>
 80108e2:	4f20      	ldr	r7, [pc, #128]	; (8010964 <_malloc_r+0xb0>)
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	b923      	cbnz	r3, 80108f2 <_malloc_r+0x3e>
 80108e8:	4621      	mov	r1, r4
 80108ea:	4630      	mov	r0, r6
 80108ec:	f000 fb2a 	bl	8010f44 <_sbrk_r>
 80108f0:	6038      	str	r0, [r7, #0]
 80108f2:	4629      	mov	r1, r5
 80108f4:	4630      	mov	r0, r6
 80108f6:	f000 fb25 	bl	8010f44 <_sbrk_r>
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	d123      	bne.n	8010946 <_malloc_r+0x92>
 80108fe:	230c      	movs	r3, #12
 8010900:	6033      	str	r3, [r6, #0]
 8010902:	4630      	mov	r0, r6
 8010904:	f000 fd92 	bl	801142c <__malloc_unlock>
 8010908:	e7e3      	b.n	80108d2 <_malloc_r+0x1e>
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	1b5b      	subs	r3, r3, r5
 801090e:	d417      	bmi.n	8010940 <_malloc_r+0x8c>
 8010910:	2b0b      	cmp	r3, #11
 8010912:	d903      	bls.n	801091c <_malloc_r+0x68>
 8010914:	6023      	str	r3, [r4, #0]
 8010916:	441c      	add	r4, r3
 8010918:	6025      	str	r5, [r4, #0]
 801091a:	e004      	b.n	8010926 <_malloc_r+0x72>
 801091c:	6863      	ldr	r3, [r4, #4]
 801091e:	42a2      	cmp	r2, r4
 8010920:	bf0c      	ite	eq
 8010922:	600b      	streq	r3, [r1, #0]
 8010924:	6053      	strne	r3, [r2, #4]
 8010926:	4630      	mov	r0, r6
 8010928:	f000 fd80 	bl	801142c <__malloc_unlock>
 801092c:	f104 000b 	add.w	r0, r4, #11
 8010930:	1d23      	adds	r3, r4, #4
 8010932:	f020 0007 	bic.w	r0, r0, #7
 8010936:	1ac2      	subs	r2, r0, r3
 8010938:	d0cc      	beq.n	80108d4 <_malloc_r+0x20>
 801093a:	1a1b      	subs	r3, r3, r0
 801093c:	50a3      	str	r3, [r4, r2]
 801093e:	e7c9      	b.n	80108d4 <_malloc_r+0x20>
 8010940:	4622      	mov	r2, r4
 8010942:	6864      	ldr	r4, [r4, #4]
 8010944:	e7cc      	b.n	80108e0 <_malloc_r+0x2c>
 8010946:	1cc4      	adds	r4, r0, #3
 8010948:	f024 0403 	bic.w	r4, r4, #3
 801094c:	42a0      	cmp	r0, r4
 801094e:	d0e3      	beq.n	8010918 <_malloc_r+0x64>
 8010950:	1a21      	subs	r1, r4, r0
 8010952:	4630      	mov	r0, r6
 8010954:	f000 faf6 	bl	8010f44 <_sbrk_r>
 8010958:	3001      	adds	r0, #1
 801095a:	d1dd      	bne.n	8010918 <_malloc_r+0x64>
 801095c:	e7cf      	b.n	80108fe <_malloc_r+0x4a>
 801095e:	bf00      	nop
 8010960:	240003b4 	.word	0x240003b4
 8010964:	240003b8 	.word	0x240003b8

08010968 <__sfputc_r>:
 8010968:	6893      	ldr	r3, [r2, #8]
 801096a:	3b01      	subs	r3, #1
 801096c:	2b00      	cmp	r3, #0
 801096e:	b410      	push	{r4}
 8010970:	6093      	str	r3, [r2, #8]
 8010972:	da08      	bge.n	8010986 <__sfputc_r+0x1e>
 8010974:	6994      	ldr	r4, [r2, #24]
 8010976:	42a3      	cmp	r3, r4
 8010978:	db01      	blt.n	801097e <__sfputc_r+0x16>
 801097a:	290a      	cmp	r1, #10
 801097c:	d103      	bne.n	8010986 <__sfputc_r+0x1e>
 801097e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010982:	f000 bb33 	b.w	8010fec <__swbuf_r>
 8010986:	6813      	ldr	r3, [r2, #0]
 8010988:	1c58      	adds	r0, r3, #1
 801098a:	6010      	str	r0, [r2, #0]
 801098c:	7019      	strb	r1, [r3, #0]
 801098e:	4608      	mov	r0, r1
 8010990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010994:	4770      	bx	lr

08010996 <__sfputs_r>:
 8010996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010998:	4606      	mov	r6, r0
 801099a:	460f      	mov	r7, r1
 801099c:	4614      	mov	r4, r2
 801099e:	18d5      	adds	r5, r2, r3
 80109a0:	42ac      	cmp	r4, r5
 80109a2:	d101      	bne.n	80109a8 <__sfputs_r+0x12>
 80109a4:	2000      	movs	r0, #0
 80109a6:	e007      	b.n	80109b8 <__sfputs_r+0x22>
 80109a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ac:	463a      	mov	r2, r7
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7ff ffda 	bl	8010968 <__sfputc_r>
 80109b4:	1c43      	adds	r3, r0, #1
 80109b6:	d1f3      	bne.n	80109a0 <__sfputs_r+0xa>
 80109b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109bc <_vfiprintf_r>:
 80109bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c0:	460d      	mov	r5, r1
 80109c2:	b09d      	sub	sp, #116	; 0x74
 80109c4:	4614      	mov	r4, r2
 80109c6:	4698      	mov	r8, r3
 80109c8:	4606      	mov	r6, r0
 80109ca:	b118      	cbz	r0, 80109d4 <_vfiprintf_r+0x18>
 80109cc:	6983      	ldr	r3, [r0, #24]
 80109ce:	b90b      	cbnz	r3, 80109d4 <_vfiprintf_r+0x18>
 80109d0:	f7ff fed0 	bl	8010774 <__sinit>
 80109d4:	4b89      	ldr	r3, [pc, #548]	; (8010bfc <_vfiprintf_r+0x240>)
 80109d6:	429d      	cmp	r5, r3
 80109d8:	d11b      	bne.n	8010a12 <_vfiprintf_r+0x56>
 80109da:	6875      	ldr	r5, [r6, #4]
 80109dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109de:	07d9      	lsls	r1, r3, #31
 80109e0:	d405      	bmi.n	80109ee <_vfiprintf_r+0x32>
 80109e2:	89ab      	ldrh	r3, [r5, #12]
 80109e4:	059a      	lsls	r2, r3, #22
 80109e6:	d402      	bmi.n	80109ee <_vfiprintf_r+0x32>
 80109e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109ea:	f7ff ff61 	bl	80108b0 <__retarget_lock_acquire_recursive>
 80109ee:	89ab      	ldrh	r3, [r5, #12]
 80109f0:	071b      	lsls	r3, r3, #28
 80109f2:	d501      	bpl.n	80109f8 <_vfiprintf_r+0x3c>
 80109f4:	692b      	ldr	r3, [r5, #16]
 80109f6:	b9eb      	cbnz	r3, 8010a34 <_vfiprintf_r+0x78>
 80109f8:	4629      	mov	r1, r5
 80109fa:	4630      	mov	r0, r6
 80109fc:	f000 fb5a 	bl	80110b4 <__swsetup_r>
 8010a00:	b1c0      	cbz	r0, 8010a34 <_vfiprintf_r+0x78>
 8010a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a04:	07dc      	lsls	r4, r3, #31
 8010a06:	d50e      	bpl.n	8010a26 <_vfiprintf_r+0x6a>
 8010a08:	f04f 30ff 	mov.w	r0, #4294967295
 8010a0c:	b01d      	add	sp, #116	; 0x74
 8010a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a12:	4b7b      	ldr	r3, [pc, #492]	; (8010c00 <_vfiprintf_r+0x244>)
 8010a14:	429d      	cmp	r5, r3
 8010a16:	d101      	bne.n	8010a1c <_vfiprintf_r+0x60>
 8010a18:	68b5      	ldr	r5, [r6, #8]
 8010a1a:	e7df      	b.n	80109dc <_vfiprintf_r+0x20>
 8010a1c:	4b79      	ldr	r3, [pc, #484]	; (8010c04 <_vfiprintf_r+0x248>)
 8010a1e:	429d      	cmp	r5, r3
 8010a20:	bf08      	it	eq
 8010a22:	68f5      	ldreq	r5, [r6, #12]
 8010a24:	e7da      	b.n	80109dc <_vfiprintf_r+0x20>
 8010a26:	89ab      	ldrh	r3, [r5, #12]
 8010a28:	0598      	lsls	r0, r3, #22
 8010a2a:	d4ed      	bmi.n	8010a08 <_vfiprintf_r+0x4c>
 8010a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a2e:	f7ff ff40 	bl	80108b2 <__retarget_lock_release_recursive>
 8010a32:	e7e9      	b.n	8010a08 <_vfiprintf_r+0x4c>
 8010a34:	2300      	movs	r3, #0
 8010a36:	9309      	str	r3, [sp, #36]	; 0x24
 8010a38:	2320      	movs	r3, #32
 8010a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a42:	2330      	movs	r3, #48	; 0x30
 8010a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010c08 <_vfiprintf_r+0x24c>
 8010a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a4c:	f04f 0901 	mov.w	r9, #1
 8010a50:	4623      	mov	r3, r4
 8010a52:	469a      	mov	sl, r3
 8010a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a58:	b10a      	cbz	r2, 8010a5e <_vfiprintf_r+0xa2>
 8010a5a:	2a25      	cmp	r2, #37	; 0x25
 8010a5c:	d1f9      	bne.n	8010a52 <_vfiprintf_r+0x96>
 8010a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8010a62:	d00b      	beq.n	8010a7c <_vfiprintf_r+0xc0>
 8010a64:	465b      	mov	r3, fp
 8010a66:	4622      	mov	r2, r4
 8010a68:	4629      	mov	r1, r5
 8010a6a:	4630      	mov	r0, r6
 8010a6c:	f7ff ff93 	bl	8010996 <__sfputs_r>
 8010a70:	3001      	adds	r0, #1
 8010a72:	f000 80aa 	beq.w	8010bca <_vfiprintf_r+0x20e>
 8010a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a78:	445a      	add	r2, fp
 8010a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8010a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f000 80a2 	beq.w	8010bca <_vfiprintf_r+0x20e>
 8010a86:	2300      	movs	r3, #0
 8010a88:	f04f 32ff 	mov.w	r2, #4294967295
 8010a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a90:	f10a 0a01 	add.w	sl, sl, #1
 8010a94:	9304      	str	r3, [sp, #16]
 8010a96:	9307      	str	r3, [sp, #28]
 8010a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8010a9e:	4654      	mov	r4, sl
 8010aa0:	2205      	movs	r2, #5
 8010aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aa6:	4858      	ldr	r0, [pc, #352]	; (8010c08 <_vfiprintf_r+0x24c>)
 8010aa8:	f7ef fc1a 	bl	80002e0 <memchr>
 8010aac:	9a04      	ldr	r2, [sp, #16]
 8010aae:	b9d8      	cbnz	r0, 8010ae8 <_vfiprintf_r+0x12c>
 8010ab0:	06d1      	lsls	r1, r2, #27
 8010ab2:	bf44      	itt	mi
 8010ab4:	2320      	movmi	r3, #32
 8010ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010aba:	0713      	lsls	r3, r2, #28
 8010abc:	bf44      	itt	mi
 8010abe:	232b      	movmi	r3, #43	; 0x2b
 8010ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8010aca:	d015      	beq.n	8010af8 <_vfiprintf_r+0x13c>
 8010acc:	9a07      	ldr	r2, [sp, #28]
 8010ace:	4654      	mov	r4, sl
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	f04f 0c0a 	mov.w	ip, #10
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010adc:	3b30      	subs	r3, #48	; 0x30
 8010ade:	2b09      	cmp	r3, #9
 8010ae0:	d94e      	bls.n	8010b80 <_vfiprintf_r+0x1c4>
 8010ae2:	b1b0      	cbz	r0, 8010b12 <_vfiprintf_r+0x156>
 8010ae4:	9207      	str	r2, [sp, #28]
 8010ae6:	e014      	b.n	8010b12 <_vfiprintf_r+0x156>
 8010ae8:	eba0 0308 	sub.w	r3, r0, r8
 8010aec:	fa09 f303 	lsl.w	r3, r9, r3
 8010af0:	4313      	orrs	r3, r2
 8010af2:	9304      	str	r3, [sp, #16]
 8010af4:	46a2      	mov	sl, r4
 8010af6:	e7d2      	b.n	8010a9e <_vfiprintf_r+0xe2>
 8010af8:	9b03      	ldr	r3, [sp, #12]
 8010afa:	1d19      	adds	r1, r3, #4
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	9103      	str	r1, [sp, #12]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	bfbb      	ittet	lt
 8010b04:	425b      	neglt	r3, r3
 8010b06:	f042 0202 	orrlt.w	r2, r2, #2
 8010b0a:	9307      	strge	r3, [sp, #28]
 8010b0c:	9307      	strlt	r3, [sp, #28]
 8010b0e:	bfb8      	it	lt
 8010b10:	9204      	strlt	r2, [sp, #16]
 8010b12:	7823      	ldrb	r3, [r4, #0]
 8010b14:	2b2e      	cmp	r3, #46	; 0x2e
 8010b16:	d10c      	bne.n	8010b32 <_vfiprintf_r+0x176>
 8010b18:	7863      	ldrb	r3, [r4, #1]
 8010b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8010b1c:	d135      	bne.n	8010b8a <_vfiprintf_r+0x1ce>
 8010b1e:	9b03      	ldr	r3, [sp, #12]
 8010b20:	1d1a      	adds	r2, r3, #4
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	9203      	str	r2, [sp, #12]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	bfb8      	it	lt
 8010b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b2e:	3402      	adds	r4, #2
 8010b30:	9305      	str	r3, [sp, #20]
 8010b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010c18 <_vfiprintf_r+0x25c>
 8010b36:	7821      	ldrb	r1, [r4, #0]
 8010b38:	2203      	movs	r2, #3
 8010b3a:	4650      	mov	r0, sl
 8010b3c:	f7ef fbd0 	bl	80002e0 <memchr>
 8010b40:	b140      	cbz	r0, 8010b54 <_vfiprintf_r+0x198>
 8010b42:	2340      	movs	r3, #64	; 0x40
 8010b44:	eba0 000a 	sub.w	r0, r0, sl
 8010b48:	fa03 f000 	lsl.w	r0, r3, r0
 8010b4c:	9b04      	ldr	r3, [sp, #16]
 8010b4e:	4303      	orrs	r3, r0
 8010b50:	3401      	adds	r4, #1
 8010b52:	9304      	str	r3, [sp, #16]
 8010b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b58:	482c      	ldr	r0, [pc, #176]	; (8010c0c <_vfiprintf_r+0x250>)
 8010b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b5e:	2206      	movs	r2, #6
 8010b60:	f7ef fbbe 	bl	80002e0 <memchr>
 8010b64:	2800      	cmp	r0, #0
 8010b66:	d03f      	beq.n	8010be8 <_vfiprintf_r+0x22c>
 8010b68:	4b29      	ldr	r3, [pc, #164]	; (8010c10 <_vfiprintf_r+0x254>)
 8010b6a:	bb1b      	cbnz	r3, 8010bb4 <_vfiprintf_r+0x1f8>
 8010b6c:	9b03      	ldr	r3, [sp, #12]
 8010b6e:	3307      	adds	r3, #7
 8010b70:	f023 0307 	bic.w	r3, r3, #7
 8010b74:	3308      	adds	r3, #8
 8010b76:	9303      	str	r3, [sp, #12]
 8010b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b7a:	443b      	add	r3, r7
 8010b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b7e:	e767      	b.n	8010a50 <_vfiprintf_r+0x94>
 8010b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b84:	460c      	mov	r4, r1
 8010b86:	2001      	movs	r0, #1
 8010b88:	e7a5      	b.n	8010ad6 <_vfiprintf_r+0x11a>
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	3401      	adds	r4, #1
 8010b8e:	9305      	str	r3, [sp, #20]
 8010b90:	4619      	mov	r1, r3
 8010b92:	f04f 0c0a 	mov.w	ip, #10
 8010b96:	4620      	mov	r0, r4
 8010b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b9c:	3a30      	subs	r2, #48	; 0x30
 8010b9e:	2a09      	cmp	r2, #9
 8010ba0:	d903      	bls.n	8010baa <_vfiprintf_r+0x1ee>
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d0c5      	beq.n	8010b32 <_vfiprintf_r+0x176>
 8010ba6:	9105      	str	r1, [sp, #20]
 8010ba8:	e7c3      	b.n	8010b32 <_vfiprintf_r+0x176>
 8010baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bae:	4604      	mov	r4, r0
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	e7f0      	b.n	8010b96 <_vfiprintf_r+0x1da>
 8010bb4:	ab03      	add	r3, sp, #12
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	462a      	mov	r2, r5
 8010bba:	4b16      	ldr	r3, [pc, #88]	; (8010c14 <_vfiprintf_r+0x258>)
 8010bbc:	a904      	add	r1, sp, #16
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f3af 8000 	nop.w
 8010bc4:	4607      	mov	r7, r0
 8010bc6:	1c78      	adds	r0, r7, #1
 8010bc8:	d1d6      	bne.n	8010b78 <_vfiprintf_r+0x1bc>
 8010bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bcc:	07d9      	lsls	r1, r3, #31
 8010bce:	d405      	bmi.n	8010bdc <_vfiprintf_r+0x220>
 8010bd0:	89ab      	ldrh	r3, [r5, #12]
 8010bd2:	059a      	lsls	r2, r3, #22
 8010bd4:	d402      	bmi.n	8010bdc <_vfiprintf_r+0x220>
 8010bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bd8:	f7ff fe6b 	bl	80108b2 <__retarget_lock_release_recursive>
 8010bdc:	89ab      	ldrh	r3, [r5, #12]
 8010bde:	065b      	lsls	r3, r3, #25
 8010be0:	f53f af12 	bmi.w	8010a08 <_vfiprintf_r+0x4c>
 8010be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010be6:	e711      	b.n	8010a0c <_vfiprintf_r+0x50>
 8010be8:	ab03      	add	r3, sp, #12
 8010bea:	9300      	str	r3, [sp, #0]
 8010bec:	462a      	mov	r2, r5
 8010bee:	4b09      	ldr	r3, [pc, #36]	; (8010c14 <_vfiprintf_r+0x258>)
 8010bf0:	a904      	add	r1, sp, #16
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f000 f880 	bl	8010cf8 <_printf_i>
 8010bf8:	e7e4      	b.n	8010bc4 <_vfiprintf_r+0x208>
 8010bfa:	bf00      	nop
 8010bfc:	08011720 	.word	0x08011720
 8010c00:	08011740 	.word	0x08011740
 8010c04:	08011700 	.word	0x08011700
 8010c08:	08011760 	.word	0x08011760
 8010c0c:	0801176a 	.word	0x0801176a
 8010c10:	00000000 	.word	0x00000000
 8010c14:	08010997 	.word	0x08010997
 8010c18:	08011766 	.word	0x08011766

08010c1c <_printf_common>:
 8010c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c20:	4616      	mov	r6, r2
 8010c22:	4699      	mov	r9, r3
 8010c24:	688a      	ldr	r2, [r1, #8]
 8010c26:	690b      	ldr	r3, [r1, #16]
 8010c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	bfb8      	it	lt
 8010c30:	4613      	movlt	r3, r2
 8010c32:	6033      	str	r3, [r6, #0]
 8010c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c38:	4607      	mov	r7, r0
 8010c3a:	460c      	mov	r4, r1
 8010c3c:	b10a      	cbz	r2, 8010c42 <_printf_common+0x26>
 8010c3e:	3301      	adds	r3, #1
 8010c40:	6033      	str	r3, [r6, #0]
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	0699      	lsls	r1, r3, #26
 8010c46:	bf42      	ittt	mi
 8010c48:	6833      	ldrmi	r3, [r6, #0]
 8010c4a:	3302      	addmi	r3, #2
 8010c4c:	6033      	strmi	r3, [r6, #0]
 8010c4e:	6825      	ldr	r5, [r4, #0]
 8010c50:	f015 0506 	ands.w	r5, r5, #6
 8010c54:	d106      	bne.n	8010c64 <_printf_common+0x48>
 8010c56:	f104 0a19 	add.w	sl, r4, #25
 8010c5a:	68e3      	ldr	r3, [r4, #12]
 8010c5c:	6832      	ldr	r2, [r6, #0]
 8010c5e:	1a9b      	subs	r3, r3, r2
 8010c60:	42ab      	cmp	r3, r5
 8010c62:	dc26      	bgt.n	8010cb2 <_printf_common+0x96>
 8010c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c68:	1e13      	subs	r3, r2, #0
 8010c6a:	6822      	ldr	r2, [r4, #0]
 8010c6c:	bf18      	it	ne
 8010c6e:	2301      	movne	r3, #1
 8010c70:	0692      	lsls	r2, r2, #26
 8010c72:	d42b      	bmi.n	8010ccc <_printf_common+0xb0>
 8010c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c78:	4649      	mov	r1, r9
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	47c0      	blx	r8
 8010c7e:	3001      	adds	r0, #1
 8010c80:	d01e      	beq.n	8010cc0 <_printf_common+0xa4>
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	68e5      	ldr	r5, [r4, #12]
 8010c86:	6832      	ldr	r2, [r6, #0]
 8010c88:	f003 0306 	and.w	r3, r3, #6
 8010c8c:	2b04      	cmp	r3, #4
 8010c8e:	bf08      	it	eq
 8010c90:	1aad      	subeq	r5, r5, r2
 8010c92:	68a3      	ldr	r3, [r4, #8]
 8010c94:	6922      	ldr	r2, [r4, #16]
 8010c96:	bf0c      	ite	eq
 8010c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c9c:	2500      	movne	r5, #0
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	bfc4      	itt	gt
 8010ca2:	1a9b      	subgt	r3, r3, r2
 8010ca4:	18ed      	addgt	r5, r5, r3
 8010ca6:	2600      	movs	r6, #0
 8010ca8:	341a      	adds	r4, #26
 8010caa:	42b5      	cmp	r5, r6
 8010cac:	d11a      	bne.n	8010ce4 <_printf_common+0xc8>
 8010cae:	2000      	movs	r0, #0
 8010cb0:	e008      	b.n	8010cc4 <_printf_common+0xa8>
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	4652      	mov	r2, sl
 8010cb6:	4649      	mov	r1, r9
 8010cb8:	4638      	mov	r0, r7
 8010cba:	47c0      	blx	r8
 8010cbc:	3001      	adds	r0, #1
 8010cbe:	d103      	bne.n	8010cc8 <_printf_common+0xac>
 8010cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc8:	3501      	adds	r5, #1
 8010cca:	e7c6      	b.n	8010c5a <_printf_common+0x3e>
 8010ccc:	18e1      	adds	r1, r4, r3
 8010cce:	1c5a      	adds	r2, r3, #1
 8010cd0:	2030      	movs	r0, #48	; 0x30
 8010cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cd6:	4422      	add	r2, r4
 8010cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ce0:	3302      	adds	r3, #2
 8010ce2:	e7c7      	b.n	8010c74 <_printf_common+0x58>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	4622      	mov	r2, r4
 8010ce8:	4649      	mov	r1, r9
 8010cea:	4638      	mov	r0, r7
 8010cec:	47c0      	blx	r8
 8010cee:	3001      	adds	r0, #1
 8010cf0:	d0e6      	beq.n	8010cc0 <_printf_common+0xa4>
 8010cf2:	3601      	adds	r6, #1
 8010cf4:	e7d9      	b.n	8010caa <_printf_common+0x8e>
	...

08010cf8 <_printf_i>:
 8010cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cfc:	460c      	mov	r4, r1
 8010cfe:	4691      	mov	r9, r2
 8010d00:	7e27      	ldrb	r7, [r4, #24]
 8010d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d04:	2f78      	cmp	r7, #120	; 0x78
 8010d06:	4680      	mov	r8, r0
 8010d08:	469a      	mov	sl, r3
 8010d0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d0e:	d807      	bhi.n	8010d20 <_printf_i+0x28>
 8010d10:	2f62      	cmp	r7, #98	; 0x62
 8010d12:	d80a      	bhi.n	8010d2a <_printf_i+0x32>
 8010d14:	2f00      	cmp	r7, #0
 8010d16:	f000 80d8 	beq.w	8010eca <_printf_i+0x1d2>
 8010d1a:	2f58      	cmp	r7, #88	; 0x58
 8010d1c:	f000 80a3 	beq.w	8010e66 <_printf_i+0x16e>
 8010d20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d28:	e03a      	b.n	8010da0 <_printf_i+0xa8>
 8010d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d2e:	2b15      	cmp	r3, #21
 8010d30:	d8f6      	bhi.n	8010d20 <_printf_i+0x28>
 8010d32:	a001      	add	r0, pc, #4	; (adr r0, 8010d38 <_printf_i+0x40>)
 8010d34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d38:	08010d91 	.word	0x08010d91
 8010d3c:	08010da5 	.word	0x08010da5
 8010d40:	08010d21 	.word	0x08010d21
 8010d44:	08010d21 	.word	0x08010d21
 8010d48:	08010d21 	.word	0x08010d21
 8010d4c:	08010d21 	.word	0x08010d21
 8010d50:	08010da5 	.word	0x08010da5
 8010d54:	08010d21 	.word	0x08010d21
 8010d58:	08010d21 	.word	0x08010d21
 8010d5c:	08010d21 	.word	0x08010d21
 8010d60:	08010d21 	.word	0x08010d21
 8010d64:	08010eb1 	.word	0x08010eb1
 8010d68:	08010dd5 	.word	0x08010dd5
 8010d6c:	08010e93 	.word	0x08010e93
 8010d70:	08010d21 	.word	0x08010d21
 8010d74:	08010d21 	.word	0x08010d21
 8010d78:	08010ed3 	.word	0x08010ed3
 8010d7c:	08010d21 	.word	0x08010d21
 8010d80:	08010dd5 	.word	0x08010dd5
 8010d84:	08010d21 	.word	0x08010d21
 8010d88:	08010d21 	.word	0x08010d21
 8010d8c:	08010e9b 	.word	0x08010e9b
 8010d90:	680b      	ldr	r3, [r1, #0]
 8010d92:	1d1a      	adds	r2, r3, #4
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	600a      	str	r2, [r1, #0]
 8010d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010da0:	2301      	movs	r3, #1
 8010da2:	e0a3      	b.n	8010eec <_printf_i+0x1f4>
 8010da4:	6825      	ldr	r5, [r4, #0]
 8010da6:	6808      	ldr	r0, [r1, #0]
 8010da8:	062e      	lsls	r6, r5, #24
 8010daa:	f100 0304 	add.w	r3, r0, #4
 8010dae:	d50a      	bpl.n	8010dc6 <_printf_i+0xce>
 8010db0:	6805      	ldr	r5, [r0, #0]
 8010db2:	600b      	str	r3, [r1, #0]
 8010db4:	2d00      	cmp	r5, #0
 8010db6:	da03      	bge.n	8010dc0 <_printf_i+0xc8>
 8010db8:	232d      	movs	r3, #45	; 0x2d
 8010dba:	426d      	negs	r5, r5
 8010dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010dc0:	485e      	ldr	r0, [pc, #376]	; (8010f3c <_printf_i+0x244>)
 8010dc2:	230a      	movs	r3, #10
 8010dc4:	e019      	b.n	8010dfa <_printf_i+0x102>
 8010dc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010dca:	6805      	ldr	r5, [r0, #0]
 8010dcc:	600b      	str	r3, [r1, #0]
 8010dce:	bf18      	it	ne
 8010dd0:	b22d      	sxthne	r5, r5
 8010dd2:	e7ef      	b.n	8010db4 <_printf_i+0xbc>
 8010dd4:	680b      	ldr	r3, [r1, #0]
 8010dd6:	6825      	ldr	r5, [r4, #0]
 8010dd8:	1d18      	adds	r0, r3, #4
 8010dda:	6008      	str	r0, [r1, #0]
 8010ddc:	0628      	lsls	r0, r5, #24
 8010dde:	d501      	bpl.n	8010de4 <_printf_i+0xec>
 8010de0:	681d      	ldr	r5, [r3, #0]
 8010de2:	e002      	b.n	8010dea <_printf_i+0xf2>
 8010de4:	0669      	lsls	r1, r5, #25
 8010de6:	d5fb      	bpl.n	8010de0 <_printf_i+0xe8>
 8010de8:	881d      	ldrh	r5, [r3, #0]
 8010dea:	4854      	ldr	r0, [pc, #336]	; (8010f3c <_printf_i+0x244>)
 8010dec:	2f6f      	cmp	r7, #111	; 0x6f
 8010dee:	bf0c      	ite	eq
 8010df0:	2308      	moveq	r3, #8
 8010df2:	230a      	movne	r3, #10
 8010df4:	2100      	movs	r1, #0
 8010df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010dfa:	6866      	ldr	r6, [r4, #4]
 8010dfc:	60a6      	str	r6, [r4, #8]
 8010dfe:	2e00      	cmp	r6, #0
 8010e00:	bfa2      	ittt	ge
 8010e02:	6821      	ldrge	r1, [r4, #0]
 8010e04:	f021 0104 	bicge.w	r1, r1, #4
 8010e08:	6021      	strge	r1, [r4, #0]
 8010e0a:	b90d      	cbnz	r5, 8010e10 <_printf_i+0x118>
 8010e0c:	2e00      	cmp	r6, #0
 8010e0e:	d04d      	beq.n	8010eac <_printf_i+0x1b4>
 8010e10:	4616      	mov	r6, r2
 8010e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e16:	fb03 5711 	mls	r7, r3, r1, r5
 8010e1a:	5dc7      	ldrb	r7, [r0, r7]
 8010e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e20:	462f      	mov	r7, r5
 8010e22:	42bb      	cmp	r3, r7
 8010e24:	460d      	mov	r5, r1
 8010e26:	d9f4      	bls.n	8010e12 <_printf_i+0x11a>
 8010e28:	2b08      	cmp	r3, #8
 8010e2a:	d10b      	bne.n	8010e44 <_printf_i+0x14c>
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	07df      	lsls	r7, r3, #31
 8010e30:	d508      	bpl.n	8010e44 <_printf_i+0x14c>
 8010e32:	6923      	ldr	r3, [r4, #16]
 8010e34:	6861      	ldr	r1, [r4, #4]
 8010e36:	4299      	cmp	r1, r3
 8010e38:	bfde      	ittt	le
 8010e3a:	2330      	movle	r3, #48	; 0x30
 8010e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e44:	1b92      	subs	r2, r2, r6
 8010e46:	6122      	str	r2, [r4, #16]
 8010e48:	f8cd a000 	str.w	sl, [sp]
 8010e4c:	464b      	mov	r3, r9
 8010e4e:	aa03      	add	r2, sp, #12
 8010e50:	4621      	mov	r1, r4
 8010e52:	4640      	mov	r0, r8
 8010e54:	f7ff fee2 	bl	8010c1c <_printf_common>
 8010e58:	3001      	adds	r0, #1
 8010e5a:	d14c      	bne.n	8010ef6 <_printf_i+0x1fe>
 8010e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e60:	b004      	add	sp, #16
 8010e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e66:	4835      	ldr	r0, [pc, #212]	; (8010f3c <_printf_i+0x244>)
 8010e68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	680e      	ldr	r6, [r1, #0]
 8010e70:	061f      	lsls	r7, r3, #24
 8010e72:	f856 5b04 	ldr.w	r5, [r6], #4
 8010e76:	600e      	str	r6, [r1, #0]
 8010e78:	d514      	bpl.n	8010ea4 <_printf_i+0x1ac>
 8010e7a:	07d9      	lsls	r1, r3, #31
 8010e7c:	bf44      	itt	mi
 8010e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8010e82:	6023      	strmi	r3, [r4, #0]
 8010e84:	b91d      	cbnz	r5, 8010e8e <_printf_i+0x196>
 8010e86:	6823      	ldr	r3, [r4, #0]
 8010e88:	f023 0320 	bic.w	r3, r3, #32
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	2310      	movs	r3, #16
 8010e90:	e7b0      	b.n	8010df4 <_printf_i+0xfc>
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	f043 0320 	orr.w	r3, r3, #32
 8010e98:	6023      	str	r3, [r4, #0]
 8010e9a:	2378      	movs	r3, #120	; 0x78
 8010e9c:	4828      	ldr	r0, [pc, #160]	; (8010f40 <_printf_i+0x248>)
 8010e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ea2:	e7e3      	b.n	8010e6c <_printf_i+0x174>
 8010ea4:	065e      	lsls	r6, r3, #25
 8010ea6:	bf48      	it	mi
 8010ea8:	b2ad      	uxthmi	r5, r5
 8010eaa:	e7e6      	b.n	8010e7a <_printf_i+0x182>
 8010eac:	4616      	mov	r6, r2
 8010eae:	e7bb      	b.n	8010e28 <_printf_i+0x130>
 8010eb0:	680b      	ldr	r3, [r1, #0]
 8010eb2:	6826      	ldr	r6, [r4, #0]
 8010eb4:	6960      	ldr	r0, [r4, #20]
 8010eb6:	1d1d      	adds	r5, r3, #4
 8010eb8:	600d      	str	r5, [r1, #0]
 8010eba:	0635      	lsls	r5, r6, #24
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	d501      	bpl.n	8010ec4 <_printf_i+0x1cc>
 8010ec0:	6018      	str	r0, [r3, #0]
 8010ec2:	e002      	b.n	8010eca <_printf_i+0x1d2>
 8010ec4:	0671      	lsls	r1, r6, #25
 8010ec6:	d5fb      	bpl.n	8010ec0 <_printf_i+0x1c8>
 8010ec8:	8018      	strh	r0, [r3, #0]
 8010eca:	2300      	movs	r3, #0
 8010ecc:	6123      	str	r3, [r4, #16]
 8010ece:	4616      	mov	r6, r2
 8010ed0:	e7ba      	b.n	8010e48 <_printf_i+0x150>
 8010ed2:	680b      	ldr	r3, [r1, #0]
 8010ed4:	1d1a      	adds	r2, r3, #4
 8010ed6:	600a      	str	r2, [r1, #0]
 8010ed8:	681e      	ldr	r6, [r3, #0]
 8010eda:	6862      	ldr	r2, [r4, #4]
 8010edc:	2100      	movs	r1, #0
 8010ede:	4630      	mov	r0, r6
 8010ee0:	f7ef f9fe 	bl	80002e0 <memchr>
 8010ee4:	b108      	cbz	r0, 8010eea <_printf_i+0x1f2>
 8010ee6:	1b80      	subs	r0, r0, r6
 8010ee8:	6060      	str	r0, [r4, #4]
 8010eea:	6863      	ldr	r3, [r4, #4]
 8010eec:	6123      	str	r3, [r4, #16]
 8010eee:	2300      	movs	r3, #0
 8010ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ef4:	e7a8      	b.n	8010e48 <_printf_i+0x150>
 8010ef6:	6923      	ldr	r3, [r4, #16]
 8010ef8:	4632      	mov	r2, r6
 8010efa:	4649      	mov	r1, r9
 8010efc:	4640      	mov	r0, r8
 8010efe:	47d0      	blx	sl
 8010f00:	3001      	adds	r0, #1
 8010f02:	d0ab      	beq.n	8010e5c <_printf_i+0x164>
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	079b      	lsls	r3, r3, #30
 8010f08:	d413      	bmi.n	8010f32 <_printf_i+0x23a>
 8010f0a:	68e0      	ldr	r0, [r4, #12]
 8010f0c:	9b03      	ldr	r3, [sp, #12]
 8010f0e:	4298      	cmp	r0, r3
 8010f10:	bfb8      	it	lt
 8010f12:	4618      	movlt	r0, r3
 8010f14:	e7a4      	b.n	8010e60 <_printf_i+0x168>
 8010f16:	2301      	movs	r3, #1
 8010f18:	4632      	mov	r2, r6
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	47d0      	blx	sl
 8010f20:	3001      	adds	r0, #1
 8010f22:	d09b      	beq.n	8010e5c <_printf_i+0x164>
 8010f24:	3501      	adds	r5, #1
 8010f26:	68e3      	ldr	r3, [r4, #12]
 8010f28:	9903      	ldr	r1, [sp, #12]
 8010f2a:	1a5b      	subs	r3, r3, r1
 8010f2c:	42ab      	cmp	r3, r5
 8010f2e:	dcf2      	bgt.n	8010f16 <_printf_i+0x21e>
 8010f30:	e7eb      	b.n	8010f0a <_printf_i+0x212>
 8010f32:	2500      	movs	r5, #0
 8010f34:	f104 0619 	add.w	r6, r4, #25
 8010f38:	e7f5      	b.n	8010f26 <_printf_i+0x22e>
 8010f3a:	bf00      	nop
 8010f3c:	08011771 	.word	0x08011771
 8010f40:	08011782 	.word	0x08011782

08010f44 <_sbrk_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4d06      	ldr	r5, [pc, #24]	; (8010f60 <_sbrk_r+0x1c>)
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	4608      	mov	r0, r1
 8010f4e:	602b      	str	r3, [r5, #0]
 8010f50:	f7f0 fe10 	bl	8001b74 <_sbrk>
 8010f54:	1c43      	adds	r3, r0, #1
 8010f56:	d102      	bne.n	8010f5e <_sbrk_r+0x1a>
 8010f58:	682b      	ldr	r3, [r5, #0]
 8010f5a:	b103      	cbz	r3, 8010f5e <_sbrk_r+0x1a>
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	bd38      	pop	{r3, r4, r5, pc}
 8010f60:	2400221c 	.word	0x2400221c

08010f64 <__sread>:
 8010f64:	b510      	push	{r4, lr}
 8010f66:	460c      	mov	r4, r1
 8010f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f6c:	f000 fab4 	bl	80114d8 <_read_r>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	bfab      	itete	ge
 8010f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f76:	89a3      	ldrhlt	r3, [r4, #12]
 8010f78:	181b      	addge	r3, r3, r0
 8010f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f7e:	bfac      	ite	ge
 8010f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f82:	81a3      	strhlt	r3, [r4, #12]
 8010f84:	bd10      	pop	{r4, pc}

08010f86 <__swrite>:
 8010f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f8a:	461f      	mov	r7, r3
 8010f8c:	898b      	ldrh	r3, [r1, #12]
 8010f8e:	05db      	lsls	r3, r3, #23
 8010f90:	4605      	mov	r5, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	4616      	mov	r6, r2
 8010f96:	d505      	bpl.n	8010fa4 <__swrite+0x1e>
 8010f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f000 f9c8 	bl	8011334 <_lseek_r>
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fae:	81a3      	strh	r3, [r4, #12]
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	463b      	mov	r3, r7
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	f000 b869 	b.w	8011090 <_write_r>

08010fbe <__sseek>:
 8010fbe:	b510      	push	{r4, lr}
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc6:	f000 f9b5 	bl	8011334 <_lseek_r>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	89a3      	ldrh	r3, [r4, #12]
 8010fce:	bf15      	itete	ne
 8010fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010fda:	81a3      	strheq	r3, [r4, #12]
 8010fdc:	bf18      	it	ne
 8010fde:	81a3      	strhne	r3, [r4, #12]
 8010fe0:	bd10      	pop	{r4, pc}

08010fe2 <__sclose>:
 8010fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe6:	f000 b8d3 	b.w	8011190 <_close_r>
	...

08010fec <__swbuf_r>:
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fee:	460e      	mov	r6, r1
 8010ff0:	4614      	mov	r4, r2
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	b118      	cbz	r0, 8010ffe <__swbuf_r+0x12>
 8010ff6:	6983      	ldr	r3, [r0, #24]
 8010ff8:	b90b      	cbnz	r3, 8010ffe <__swbuf_r+0x12>
 8010ffa:	f7ff fbbb 	bl	8010774 <__sinit>
 8010ffe:	4b21      	ldr	r3, [pc, #132]	; (8011084 <__swbuf_r+0x98>)
 8011000:	429c      	cmp	r4, r3
 8011002:	d12b      	bne.n	801105c <__swbuf_r+0x70>
 8011004:	686c      	ldr	r4, [r5, #4]
 8011006:	69a3      	ldr	r3, [r4, #24]
 8011008:	60a3      	str	r3, [r4, #8]
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	071a      	lsls	r2, r3, #28
 801100e:	d52f      	bpl.n	8011070 <__swbuf_r+0x84>
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	b36b      	cbz	r3, 8011070 <__swbuf_r+0x84>
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	1ac0      	subs	r0, r0, r3
 801101a:	6963      	ldr	r3, [r4, #20]
 801101c:	b2f6      	uxtb	r6, r6
 801101e:	4283      	cmp	r3, r0
 8011020:	4637      	mov	r7, r6
 8011022:	dc04      	bgt.n	801102e <__swbuf_r+0x42>
 8011024:	4621      	mov	r1, r4
 8011026:	4628      	mov	r0, r5
 8011028:	f000 f948 	bl	80112bc <_fflush_r>
 801102c:	bb30      	cbnz	r0, 801107c <__swbuf_r+0x90>
 801102e:	68a3      	ldr	r3, [r4, #8]
 8011030:	3b01      	subs	r3, #1
 8011032:	60a3      	str	r3, [r4, #8]
 8011034:	6823      	ldr	r3, [r4, #0]
 8011036:	1c5a      	adds	r2, r3, #1
 8011038:	6022      	str	r2, [r4, #0]
 801103a:	701e      	strb	r6, [r3, #0]
 801103c:	6963      	ldr	r3, [r4, #20]
 801103e:	3001      	adds	r0, #1
 8011040:	4283      	cmp	r3, r0
 8011042:	d004      	beq.n	801104e <__swbuf_r+0x62>
 8011044:	89a3      	ldrh	r3, [r4, #12]
 8011046:	07db      	lsls	r3, r3, #31
 8011048:	d506      	bpl.n	8011058 <__swbuf_r+0x6c>
 801104a:	2e0a      	cmp	r6, #10
 801104c:	d104      	bne.n	8011058 <__swbuf_r+0x6c>
 801104e:	4621      	mov	r1, r4
 8011050:	4628      	mov	r0, r5
 8011052:	f000 f933 	bl	80112bc <_fflush_r>
 8011056:	b988      	cbnz	r0, 801107c <__swbuf_r+0x90>
 8011058:	4638      	mov	r0, r7
 801105a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801105c:	4b0a      	ldr	r3, [pc, #40]	; (8011088 <__swbuf_r+0x9c>)
 801105e:	429c      	cmp	r4, r3
 8011060:	d101      	bne.n	8011066 <__swbuf_r+0x7a>
 8011062:	68ac      	ldr	r4, [r5, #8]
 8011064:	e7cf      	b.n	8011006 <__swbuf_r+0x1a>
 8011066:	4b09      	ldr	r3, [pc, #36]	; (801108c <__swbuf_r+0xa0>)
 8011068:	429c      	cmp	r4, r3
 801106a:	bf08      	it	eq
 801106c:	68ec      	ldreq	r4, [r5, #12]
 801106e:	e7ca      	b.n	8011006 <__swbuf_r+0x1a>
 8011070:	4621      	mov	r1, r4
 8011072:	4628      	mov	r0, r5
 8011074:	f000 f81e 	bl	80110b4 <__swsetup_r>
 8011078:	2800      	cmp	r0, #0
 801107a:	d0cb      	beq.n	8011014 <__swbuf_r+0x28>
 801107c:	f04f 37ff 	mov.w	r7, #4294967295
 8011080:	e7ea      	b.n	8011058 <__swbuf_r+0x6c>
 8011082:	bf00      	nop
 8011084:	08011720 	.word	0x08011720
 8011088:	08011740 	.word	0x08011740
 801108c:	08011700 	.word	0x08011700

08011090 <_write_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	4d07      	ldr	r5, [pc, #28]	; (80110b0 <_write_r+0x20>)
 8011094:	4604      	mov	r4, r0
 8011096:	4608      	mov	r0, r1
 8011098:	4611      	mov	r1, r2
 801109a:	2200      	movs	r2, #0
 801109c:	602a      	str	r2, [r5, #0]
 801109e:	461a      	mov	r2, r3
 80110a0:	f7f0 fd17 	bl	8001ad2 <_write>
 80110a4:	1c43      	adds	r3, r0, #1
 80110a6:	d102      	bne.n	80110ae <_write_r+0x1e>
 80110a8:	682b      	ldr	r3, [r5, #0]
 80110aa:	b103      	cbz	r3, 80110ae <_write_r+0x1e>
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	bd38      	pop	{r3, r4, r5, pc}
 80110b0:	2400221c 	.word	0x2400221c

080110b4 <__swsetup_r>:
 80110b4:	4b32      	ldr	r3, [pc, #200]	; (8011180 <__swsetup_r+0xcc>)
 80110b6:	b570      	push	{r4, r5, r6, lr}
 80110b8:	681d      	ldr	r5, [r3, #0]
 80110ba:	4606      	mov	r6, r0
 80110bc:	460c      	mov	r4, r1
 80110be:	b125      	cbz	r5, 80110ca <__swsetup_r+0x16>
 80110c0:	69ab      	ldr	r3, [r5, #24]
 80110c2:	b913      	cbnz	r3, 80110ca <__swsetup_r+0x16>
 80110c4:	4628      	mov	r0, r5
 80110c6:	f7ff fb55 	bl	8010774 <__sinit>
 80110ca:	4b2e      	ldr	r3, [pc, #184]	; (8011184 <__swsetup_r+0xd0>)
 80110cc:	429c      	cmp	r4, r3
 80110ce:	d10f      	bne.n	80110f0 <__swsetup_r+0x3c>
 80110d0:	686c      	ldr	r4, [r5, #4]
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110d8:	0719      	lsls	r1, r3, #28
 80110da:	d42c      	bmi.n	8011136 <__swsetup_r+0x82>
 80110dc:	06dd      	lsls	r5, r3, #27
 80110de:	d411      	bmi.n	8011104 <__swsetup_r+0x50>
 80110e0:	2309      	movs	r3, #9
 80110e2:	6033      	str	r3, [r6, #0]
 80110e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110e8:	81a3      	strh	r3, [r4, #12]
 80110ea:	f04f 30ff 	mov.w	r0, #4294967295
 80110ee:	e03e      	b.n	801116e <__swsetup_r+0xba>
 80110f0:	4b25      	ldr	r3, [pc, #148]	; (8011188 <__swsetup_r+0xd4>)
 80110f2:	429c      	cmp	r4, r3
 80110f4:	d101      	bne.n	80110fa <__swsetup_r+0x46>
 80110f6:	68ac      	ldr	r4, [r5, #8]
 80110f8:	e7eb      	b.n	80110d2 <__swsetup_r+0x1e>
 80110fa:	4b24      	ldr	r3, [pc, #144]	; (801118c <__swsetup_r+0xd8>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	bf08      	it	eq
 8011100:	68ec      	ldreq	r4, [r5, #12]
 8011102:	e7e6      	b.n	80110d2 <__swsetup_r+0x1e>
 8011104:	0758      	lsls	r0, r3, #29
 8011106:	d512      	bpl.n	801112e <__swsetup_r+0x7a>
 8011108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801110a:	b141      	cbz	r1, 801111e <__swsetup_r+0x6a>
 801110c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011110:	4299      	cmp	r1, r3
 8011112:	d002      	beq.n	801111a <__swsetup_r+0x66>
 8011114:	4630      	mov	r0, r6
 8011116:	f000 f98f 	bl	8011438 <_free_r>
 801111a:	2300      	movs	r3, #0
 801111c:	6363      	str	r3, [r4, #52]	; 0x34
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011124:	81a3      	strh	r3, [r4, #12]
 8011126:	2300      	movs	r3, #0
 8011128:	6063      	str	r3, [r4, #4]
 801112a:	6923      	ldr	r3, [r4, #16]
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	89a3      	ldrh	r3, [r4, #12]
 8011130:	f043 0308 	orr.w	r3, r3, #8
 8011134:	81a3      	strh	r3, [r4, #12]
 8011136:	6923      	ldr	r3, [r4, #16]
 8011138:	b94b      	cbnz	r3, 801114e <__swsetup_r+0x9a>
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011144:	d003      	beq.n	801114e <__swsetup_r+0x9a>
 8011146:	4621      	mov	r1, r4
 8011148:	4630      	mov	r0, r6
 801114a:	f000 f929 	bl	80113a0 <__smakebuf_r>
 801114e:	89a0      	ldrh	r0, [r4, #12]
 8011150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011154:	f010 0301 	ands.w	r3, r0, #1
 8011158:	d00a      	beq.n	8011170 <__swsetup_r+0xbc>
 801115a:	2300      	movs	r3, #0
 801115c:	60a3      	str	r3, [r4, #8]
 801115e:	6963      	ldr	r3, [r4, #20]
 8011160:	425b      	negs	r3, r3
 8011162:	61a3      	str	r3, [r4, #24]
 8011164:	6923      	ldr	r3, [r4, #16]
 8011166:	b943      	cbnz	r3, 801117a <__swsetup_r+0xc6>
 8011168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801116c:	d1ba      	bne.n	80110e4 <__swsetup_r+0x30>
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	0781      	lsls	r1, r0, #30
 8011172:	bf58      	it	pl
 8011174:	6963      	ldrpl	r3, [r4, #20]
 8011176:	60a3      	str	r3, [r4, #8]
 8011178:	e7f4      	b.n	8011164 <__swsetup_r+0xb0>
 801117a:	2000      	movs	r0, #0
 801117c:	e7f7      	b.n	801116e <__swsetup_r+0xba>
 801117e:	bf00      	nop
 8011180:	24000104 	.word	0x24000104
 8011184:	08011720 	.word	0x08011720
 8011188:	08011740 	.word	0x08011740
 801118c:	08011700 	.word	0x08011700

08011190 <_close_r>:
 8011190:	b538      	push	{r3, r4, r5, lr}
 8011192:	4d06      	ldr	r5, [pc, #24]	; (80111ac <_close_r+0x1c>)
 8011194:	2300      	movs	r3, #0
 8011196:	4604      	mov	r4, r0
 8011198:	4608      	mov	r0, r1
 801119a:	602b      	str	r3, [r5, #0]
 801119c:	f7f0 fcb5 	bl	8001b0a <_close>
 80111a0:	1c43      	adds	r3, r0, #1
 80111a2:	d102      	bne.n	80111aa <_close_r+0x1a>
 80111a4:	682b      	ldr	r3, [r5, #0]
 80111a6:	b103      	cbz	r3, 80111aa <_close_r+0x1a>
 80111a8:	6023      	str	r3, [r4, #0]
 80111aa:	bd38      	pop	{r3, r4, r5, pc}
 80111ac:	2400221c 	.word	0x2400221c

080111b0 <__sflush_r>:
 80111b0:	898a      	ldrh	r2, [r1, #12]
 80111b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b6:	4605      	mov	r5, r0
 80111b8:	0710      	lsls	r0, r2, #28
 80111ba:	460c      	mov	r4, r1
 80111bc:	d458      	bmi.n	8011270 <__sflush_r+0xc0>
 80111be:	684b      	ldr	r3, [r1, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	dc05      	bgt.n	80111d0 <__sflush_r+0x20>
 80111c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dc02      	bgt.n	80111d0 <__sflush_r+0x20>
 80111ca:	2000      	movs	r0, #0
 80111cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111d2:	2e00      	cmp	r6, #0
 80111d4:	d0f9      	beq.n	80111ca <__sflush_r+0x1a>
 80111d6:	2300      	movs	r3, #0
 80111d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111dc:	682f      	ldr	r7, [r5, #0]
 80111de:	602b      	str	r3, [r5, #0]
 80111e0:	d032      	beq.n	8011248 <__sflush_r+0x98>
 80111e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111e4:	89a3      	ldrh	r3, [r4, #12]
 80111e6:	075a      	lsls	r2, r3, #29
 80111e8:	d505      	bpl.n	80111f6 <__sflush_r+0x46>
 80111ea:	6863      	ldr	r3, [r4, #4]
 80111ec:	1ac0      	subs	r0, r0, r3
 80111ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111f0:	b10b      	cbz	r3, 80111f6 <__sflush_r+0x46>
 80111f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111f4:	1ac0      	subs	r0, r0, r3
 80111f6:	2300      	movs	r3, #0
 80111f8:	4602      	mov	r2, r0
 80111fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111fc:	6a21      	ldr	r1, [r4, #32]
 80111fe:	4628      	mov	r0, r5
 8011200:	47b0      	blx	r6
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	89a3      	ldrh	r3, [r4, #12]
 8011206:	d106      	bne.n	8011216 <__sflush_r+0x66>
 8011208:	6829      	ldr	r1, [r5, #0]
 801120a:	291d      	cmp	r1, #29
 801120c:	d82c      	bhi.n	8011268 <__sflush_r+0xb8>
 801120e:	4a2a      	ldr	r2, [pc, #168]	; (80112b8 <__sflush_r+0x108>)
 8011210:	40ca      	lsrs	r2, r1
 8011212:	07d6      	lsls	r6, r2, #31
 8011214:	d528      	bpl.n	8011268 <__sflush_r+0xb8>
 8011216:	2200      	movs	r2, #0
 8011218:	6062      	str	r2, [r4, #4]
 801121a:	04d9      	lsls	r1, r3, #19
 801121c:	6922      	ldr	r2, [r4, #16]
 801121e:	6022      	str	r2, [r4, #0]
 8011220:	d504      	bpl.n	801122c <__sflush_r+0x7c>
 8011222:	1c42      	adds	r2, r0, #1
 8011224:	d101      	bne.n	801122a <__sflush_r+0x7a>
 8011226:	682b      	ldr	r3, [r5, #0]
 8011228:	b903      	cbnz	r3, 801122c <__sflush_r+0x7c>
 801122a:	6560      	str	r0, [r4, #84]	; 0x54
 801122c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801122e:	602f      	str	r7, [r5, #0]
 8011230:	2900      	cmp	r1, #0
 8011232:	d0ca      	beq.n	80111ca <__sflush_r+0x1a>
 8011234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011238:	4299      	cmp	r1, r3
 801123a:	d002      	beq.n	8011242 <__sflush_r+0x92>
 801123c:	4628      	mov	r0, r5
 801123e:	f000 f8fb 	bl	8011438 <_free_r>
 8011242:	2000      	movs	r0, #0
 8011244:	6360      	str	r0, [r4, #52]	; 0x34
 8011246:	e7c1      	b.n	80111cc <__sflush_r+0x1c>
 8011248:	6a21      	ldr	r1, [r4, #32]
 801124a:	2301      	movs	r3, #1
 801124c:	4628      	mov	r0, r5
 801124e:	47b0      	blx	r6
 8011250:	1c41      	adds	r1, r0, #1
 8011252:	d1c7      	bne.n	80111e4 <__sflush_r+0x34>
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d0c4      	beq.n	80111e4 <__sflush_r+0x34>
 801125a:	2b1d      	cmp	r3, #29
 801125c:	d001      	beq.n	8011262 <__sflush_r+0xb2>
 801125e:	2b16      	cmp	r3, #22
 8011260:	d101      	bne.n	8011266 <__sflush_r+0xb6>
 8011262:	602f      	str	r7, [r5, #0]
 8011264:	e7b1      	b.n	80111ca <__sflush_r+0x1a>
 8011266:	89a3      	ldrh	r3, [r4, #12]
 8011268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801126c:	81a3      	strh	r3, [r4, #12]
 801126e:	e7ad      	b.n	80111cc <__sflush_r+0x1c>
 8011270:	690f      	ldr	r7, [r1, #16]
 8011272:	2f00      	cmp	r7, #0
 8011274:	d0a9      	beq.n	80111ca <__sflush_r+0x1a>
 8011276:	0793      	lsls	r3, r2, #30
 8011278:	680e      	ldr	r6, [r1, #0]
 801127a:	bf08      	it	eq
 801127c:	694b      	ldreq	r3, [r1, #20]
 801127e:	600f      	str	r7, [r1, #0]
 8011280:	bf18      	it	ne
 8011282:	2300      	movne	r3, #0
 8011284:	eba6 0807 	sub.w	r8, r6, r7
 8011288:	608b      	str	r3, [r1, #8]
 801128a:	f1b8 0f00 	cmp.w	r8, #0
 801128e:	dd9c      	ble.n	80111ca <__sflush_r+0x1a>
 8011290:	6a21      	ldr	r1, [r4, #32]
 8011292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011294:	4643      	mov	r3, r8
 8011296:	463a      	mov	r2, r7
 8011298:	4628      	mov	r0, r5
 801129a:	47b0      	blx	r6
 801129c:	2800      	cmp	r0, #0
 801129e:	dc06      	bgt.n	80112ae <__sflush_r+0xfe>
 80112a0:	89a3      	ldrh	r3, [r4, #12]
 80112a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112a6:	81a3      	strh	r3, [r4, #12]
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ac:	e78e      	b.n	80111cc <__sflush_r+0x1c>
 80112ae:	4407      	add	r7, r0
 80112b0:	eba8 0800 	sub.w	r8, r8, r0
 80112b4:	e7e9      	b.n	801128a <__sflush_r+0xda>
 80112b6:	bf00      	nop
 80112b8:	20400001 	.word	0x20400001

080112bc <_fflush_r>:
 80112bc:	b538      	push	{r3, r4, r5, lr}
 80112be:	690b      	ldr	r3, [r1, #16]
 80112c0:	4605      	mov	r5, r0
 80112c2:	460c      	mov	r4, r1
 80112c4:	b913      	cbnz	r3, 80112cc <_fflush_r+0x10>
 80112c6:	2500      	movs	r5, #0
 80112c8:	4628      	mov	r0, r5
 80112ca:	bd38      	pop	{r3, r4, r5, pc}
 80112cc:	b118      	cbz	r0, 80112d6 <_fflush_r+0x1a>
 80112ce:	6983      	ldr	r3, [r0, #24]
 80112d0:	b90b      	cbnz	r3, 80112d6 <_fflush_r+0x1a>
 80112d2:	f7ff fa4f 	bl	8010774 <__sinit>
 80112d6:	4b14      	ldr	r3, [pc, #80]	; (8011328 <_fflush_r+0x6c>)
 80112d8:	429c      	cmp	r4, r3
 80112da:	d11b      	bne.n	8011314 <_fflush_r+0x58>
 80112dc:	686c      	ldr	r4, [r5, #4]
 80112de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d0ef      	beq.n	80112c6 <_fflush_r+0xa>
 80112e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112e8:	07d0      	lsls	r0, r2, #31
 80112ea:	d404      	bmi.n	80112f6 <_fflush_r+0x3a>
 80112ec:	0599      	lsls	r1, r3, #22
 80112ee:	d402      	bmi.n	80112f6 <_fflush_r+0x3a>
 80112f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112f2:	f7ff fadd 	bl	80108b0 <__retarget_lock_acquire_recursive>
 80112f6:	4628      	mov	r0, r5
 80112f8:	4621      	mov	r1, r4
 80112fa:	f7ff ff59 	bl	80111b0 <__sflush_r>
 80112fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011300:	07da      	lsls	r2, r3, #31
 8011302:	4605      	mov	r5, r0
 8011304:	d4e0      	bmi.n	80112c8 <_fflush_r+0xc>
 8011306:	89a3      	ldrh	r3, [r4, #12]
 8011308:	059b      	lsls	r3, r3, #22
 801130a:	d4dd      	bmi.n	80112c8 <_fflush_r+0xc>
 801130c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801130e:	f7ff fad0 	bl	80108b2 <__retarget_lock_release_recursive>
 8011312:	e7d9      	b.n	80112c8 <_fflush_r+0xc>
 8011314:	4b05      	ldr	r3, [pc, #20]	; (801132c <_fflush_r+0x70>)
 8011316:	429c      	cmp	r4, r3
 8011318:	d101      	bne.n	801131e <_fflush_r+0x62>
 801131a:	68ac      	ldr	r4, [r5, #8]
 801131c:	e7df      	b.n	80112de <_fflush_r+0x22>
 801131e:	4b04      	ldr	r3, [pc, #16]	; (8011330 <_fflush_r+0x74>)
 8011320:	429c      	cmp	r4, r3
 8011322:	bf08      	it	eq
 8011324:	68ec      	ldreq	r4, [r5, #12]
 8011326:	e7da      	b.n	80112de <_fflush_r+0x22>
 8011328:	08011720 	.word	0x08011720
 801132c:	08011740 	.word	0x08011740
 8011330:	08011700 	.word	0x08011700

08011334 <_lseek_r>:
 8011334:	b538      	push	{r3, r4, r5, lr}
 8011336:	4d07      	ldr	r5, [pc, #28]	; (8011354 <_lseek_r+0x20>)
 8011338:	4604      	mov	r4, r0
 801133a:	4608      	mov	r0, r1
 801133c:	4611      	mov	r1, r2
 801133e:	2200      	movs	r2, #0
 8011340:	602a      	str	r2, [r5, #0]
 8011342:	461a      	mov	r2, r3
 8011344:	f7f0 fc08 	bl	8001b58 <_lseek>
 8011348:	1c43      	adds	r3, r0, #1
 801134a:	d102      	bne.n	8011352 <_lseek_r+0x1e>
 801134c:	682b      	ldr	r3, [r5, #0]
 801134e:	b103      	cbz	r3, 8011352 <_lseek_r+0x1e>
 8011350:	6023      	str	r3, [r4, #0]
 8011352:	bd38      	pop	{r3, r4, r5, pc}
 8011354:	2400221c 	.word	0x2400221c

08011358 <__swhatbuf_r>:
 8011358:	b570      	push	{r4, r5, r6, lr}
 801135a:	460e      	mov	r6, r1
 801135c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011360:	2900      	cmp	r1, #0
 8011362:	b096      	sub	sp, #88	; 0x58
 8011364:	4614      	mov	r4, r2
 8011366:	461d      	mov	r5, r3
 8011368:	da07      	bge.n	801137a <__swhatbuf_r+0x22>
 801136a:	2300      	movs	r3, #0
 801136c:	602b      	str	r3, [r5, #0]
 801136e:	89b3      	ldrh	r3, [r6, #12]
 8011370:	061a      	lsls	r2, r3, #24
 8011372:	d410      	bmi.n	8011396 <__swhatbuf_r+0x3e>
 8011374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011378:	e00e      	b.n	8011398 <__swhatbuf_r+0x40>
 801137a:	466a      	mov	r2, sp
 801137c:	f000 f8be 	bl	80114fc <_fstat_r>
 8011380:	2800      	cmp	r0, #0
 8011382:	dbf2      	blt.n	801136a <__swhatbuf_r+0x12>
 8011384:	9a01      	ldr	r2, [sp, #4]
 8011386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801138a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801138e:	425a      	negs	r2, r3
 8011390:	415a      	adcs	r2, r3
 8011392:	602a      	str	r2, [r5, #0]
 8011394:	e7ee      	b.n	8011374 <__swhatbuf_r+0x1c>
 8011396:	2340      	movs	r3, #64	; 0x40
 8011398:	2000      	movs	r0, #0
 801139a:	6023      	str	r3, [r4, #0]
 801139c:	b016      	add	sp, #88	; 0x58
 801139e:	bd70      	pop	{r4, r5, r6, pc}

080113a0 <__smakebuf_r>:
 80113a0:	898b      	ldrh	r3, [r1, #12]
 80113a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113a4:	079d      	lsls	r5, r3, #30
 80113a6:	4606      	mov	r6, r0
 80113a8:	460c      	mov	r4, r1
 80113aa:	d507      	bpl.n	80113bc <__smakebuf_r+0x1c>
 80113ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113b0:	6023      	str	r3, [r4, #0]
 80113b2:	6123      	str	r3, [r4, #16]
 80113b4:	2301      	movs	r3, #1
 80113b6:	6163      	str	r3, [r4, #20]
 80113b8:	b002      	add	sp, #8
 80113ba:	bd70      	pop	{r4, r5, r6, pc}
 80113bc:	ab01      	add	r3, sp, #4
 80113be:	466a      	mov	r2, sp
 80113c0:	f7ff ffca 	bl	8011358 <__swhatbuf_r>
 80113c4:	9900      	ldr	r1, [sp, #0]
 80113c6:	4605      	mov	r5, r0
 80113c8:	4630      	mov	r0, r6
 80113ca:	f7ff fa73 	bl	80108b4 <_malloc_r>
 80113ce:	b948      	cbnz	r0, 80113e4 <__smakebuf_r+0x44>
 80113d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113d4:	059a      	lsls	r2, r3, #22
 80113d6:	d4ef      	bmi.n	80113b8 <__smakebuf_r+0x18>
 80113d8:	f023 0303 	bic.w	r3, r3, #3
 80113dc:	f043 0302 	orr.w	r3, r3, #2
 80113e0:	81a3      	strh	r3, [r4, #12]
 80113e2:	e7e3      	b.n	80113ac <__smakebuf_r+0xc>
 80113e4:	4b0d      	ldr	r3, [pc, #52]	; (801141c <__smakebuf_r+0x7c>)
 80113e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	6020      	str	r0, [r4, #0]
 80113ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113f0:	81a3      	strh	r3, [r4, #12]
 80113f2:	9b00      	ldr	r3, [sp, #0]
 80113f4:	6163      	str	r3, [r4, #20]
 80113f6:	9b01      	ldr	r3, [sp, #4]
 80113f8:	6120      	str	r0, [r4, #16]
 80113fa:	b15b      	cbz	r3, 8011414 <__smakebuf_r+0x74>
 80113fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011400:	4630      	mov	r0, r6
 8011402:	f000 f88d 	bl	8011520 <_isatty_r>
 8011406:	b128      	cbz	r0, 8011414 <__smakebuf_r+0x74>
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	f023 0303 	bic.w	r3, r3, #3
 801140e:	f043 0301 	orr.w	r3, r3, #1
 8011412:	81a3      	strh	r3, [r4, #12]
 8011414:	89a0      	ldrh	r0, [r4, #12]
 8011416:	4305      	orrs	r5, r0
 8011418:	81a5      	strh	r5, [r4, #12]
 801141a:	e7cd      	b.n	80113b8 <__smakebuf_r+0x18>
 801141c:	0801070d 	.word	0x0801070d

08011420 <__malloc_lock>:
 8011420:	4801      	ldr	r0, [pc, #4]	; (8011428 <__malloc_lock+0x8>)
 8011422:	f7ff ba45 	b.w	80108b0 <__retarget_lock_acquire_recursive>
 8011426:	bf00      	nop
 8011428:	24002214 	.word	0x24002214

0801142c <__malloc_unlock>:
 801142c:	4801      	ldr	r0, [pc, #4]	; (8011434 <__malloc_unlock+0x8>)
 801142e:	f7ff ba40 	b.w	80108b2 <__retarget_lock_release_recursive>
 8011432:	bf00      	nop
 8011434:	24002214 	.word	0x24002214

08011438 <_free_r>:
 8011438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801143a:	2900      	cmp	r1, #0
 801143c:	d048      	beq.n	80114d0 <_free_r+0x98>
 801143e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011442:	9001      	str	r0, [sp, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	f1a1 0404 	sub.w	r4, r1, #4
 801144a:	bfb8      	it	lt
 801144c:	18e4      	addlt	r4, r4, r3
 801144e:	f7ff ffe7 	bl	8011420 <__malloc_lock>
 8011452:	4a20      	ldr	r2, [pc, #128]	; (80114d4 <_free_r+0x9c>)
 8011454:	9801      	ldr	r0, [sp, #4]
 8011456:	6813      	ldr	r3, [r2, #0]
 8011458:	4615      	mov	r5, r2
 801145a:	b933      	cbnz	r3, 801146a <_free_r+0x32>
 801145c:	6063      	str	r3, [r4, #4]
 801145e:	6014      	str	r4, [r2, #0]
 8011460:	b003      	add	sp, #12
 8011462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011466:	f7ff bfe1 	b.w	801142c <__malloc_unlock>
 801146a:	42a3      	cmp	r3, r4
 801146c:	d90b      	bls.n	8011486 <_free_r+0x4e>
 801146e:	6821      	ldr	r1, [r4, #0]
 8011470:	1862      	adds	r2, r4, r1
 8011472:	4293      	cmp	r3, r2
 8011474:	bf04      	itt	eq
 8011476:	681a      	ldreq	r2, [r3, #0]
 8011478:	685b      	ldreq	r3, [r3, #4]
 801147a:	6063      	str	r3, [r4, #4]
 801147c:	bf04      	itt	eq
 801147e:	1852      	addeq	r2, r2, r1
 8011480:	6022      	streq	r2, [r4, #0]
 8011482:	602c      	str	r4, [r5, #0]
 8011484:	e7ec      	b.n	8011460 <_free_r+0x28>
 8011486:	461a      	mov	r2, r3
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	b10b      	cbz	r3, 8011490 <_free_r+0x58>
 801148c:	42a3      	cmp	r3, r4
 801148e:	d9fa      	bls.n	8011486 <_free_r+0x4e>
 8011490:	6811      	ldr	r1, [r2, #0]
 8011492:	1855      	adds	r5, r2, r1
 8011494:	42a5      	cmp	r5, r4
 8011496:	d10b      	bne.n	80114b0 <_free_r+0x78>
 8011498:	6824      	ldr	r4, [r4, #0]
 801149a:	4421      	add	r1, r4
 801149c:	1854      	adds	r4, r2, r1
 801149e:	42a3      	cmp	r3, r4
 80114a0:	6011      	str	r1, [r2, #0]
 80114a2:	d1dd      	bne.n	8011460 <_free_r+0x28>
 80114a4:	681c      	ldr	r4, [r3, #0]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	6053      	str	r3, [r2, #4]
 80114aa:	4421      	add	r1, r4
 80114ac:	6011      	str	r1, [r2, #0]
 80114ae:	e7d7      	b.n	8011460 <_free_r+0x28>
 80114b0:	d902      	bls.n	80114b8 <_free_r+0x80>
 80114b2:	230c      	movs	r3, #12
 80114b4:	6003      	str	r3, [r0, #0]
 80114b6:	e7d3      	b.n	8011460 <_free_r+0x28>
 80114b8:	6825      	ldr	r5, [r4, #0]
 80114ba:	1961      	adds	r1, r4, r5
 80114bc:	428b      	cmp	r3, r1
 80114be:	bf04      	itt	eq
 80114c0:	6819      	ldreq	r1, [r3, #0]
 80114c2:	685b      	ldreq	r3, [r3, #4]
 80114c4:	6063      	str	r3, [r4, #4]
 80114c6:	bf04      	itt	eq
 80114c8:	1949      	addeq	r1, r1, r5
 80114ca:	6021      	streq	r1, [r4, #0]
 80114cc:	6054      	str	r4, [r2, #4]
 80114ce:	e7c7      	b.n	8011460 <_free_r+0x28>
 80114d0:	b003      	add	sp, #12
 80114d2:	bd30      	pop	{r4, r5, pc}
 80114d4:	240003b4 	.word	0x240003b4

080114d8 <_read_r>:
 80114d8:	b538      	push	{r3, r4, r5, lr}
 80114da:	4d07      	ldr	r5, [pc, #28]	; (80114f8 <_read_r+0x20>)
 80114dc:	4604      	mov	r4, r0
 80114de:	4608      	mov	r0, r1
 80114e0:	4611      	mov	r1, r2
 80114e2:	2200      	movs	r2, #0
 80114e4:	602a      	str	r2, [r5, #0]
 80114e6:	461a      	mov	r2, r3
 80114e8:	f7f0 fad6 	bl	8001a98 <_read>
 80114ec:	1c43      	adds	r3, r0, #1
 80114ee:	d102      	bne.n	80114f6 <_read_r+0x1e>
 80114f0:	682b      	ldr	r3, [r5, #0]
 80114f2:	b103      	cbz	r3, 80114f6 <_read_r+0x1e>
 80114f4:	6023      	str	r3, [r4, #0]
 80114f6:	bd38      	pop	{r3, r4, r5, pc}
 80114f8:	2400221c 	.word	0x2400221c

080114fc <_fstat_r>:
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	4d07      	ldr	r5, [pc, #28]	; (801151c <_fstat_r+0x20>)
 8011500:	2300      	movs	r3, #0
 8011502:	4604      	mov	r4, r0
 8011504:	4608      	mov	r0, r1
 8011506:	4611      	mov	r1, r2
 8011508:	602b      	str	r3, [r5, #0]
 801150a:	f7f0 fb0a 	bl	8001b22 <_fstat>
 801150e:	1c43      	adds	r3, r0, #1
 8011510:	d102      	bne.n	8011518 <_fstat_r+0x1c>
 8011512:	682b      	ldr	r3, [r5, #0]
 8011514:	b103      	cbz	r3, 8011518 <_fstat_r+0x1c>
 8011516:	6023      	str	r3, [r4, #0]
 8011518:	bd38      	pop	{r3, r4, r5, pc}
 801151a:	bf00      	nop
 801151c:	2400221c 	.word	0x2400221c

08011520 <_isatty_r>:
 8011520:	b538      	push	{r3, r4, r5, lr}
 8011522:	4d06      	ldr	r5, [pc, #24]	; (801153c <_isatty_r+0x1c>)
 8011524:	2300      	movs	r3, #0
 8011526:	4604      	mov	r4, r0
 8011528:	4608      	mov	r0, r1
 801152a:	602b      	str	r3, [r5, #0]
 801152c:	f7f0 fb09 	bl	8001b42 <_isatty>
 8011530:	1c43      	adds	r3, r0, #1
 8011532:	d102      	bne.n	801153a <_isatty_r+0x1a>
 8011534:	682b      	ldr	r3, [r5, #0]
 8011536:	b103      	cbz	r3, 801153a <_isatty_r+0x1a>
 8011538:	6023      	str	r3, [r4, #0]
 801153a:	bd38      	pop	{r3, r4, r5, pc}
 801153c:	2400221c 	.word	0x2400221c

08011540 <_init>:
 8011540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011542:	bf00      	nop
 8011544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011546:	bc08      	pop	{r3}
 8011548:	469e      	mov	lr, r3
 801154a:	4770      	bx	lr

0801154c <_fini>:
 801154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801154e:	bf00      	nop
 8011550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011552:	bc08      	pop	{r3}
 8011554:	469e      	mov	lr, r3
 8011556:	4770      	bx	lr
