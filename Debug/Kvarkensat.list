
Kvarkensat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08011544  08011544  00021544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011770  08011770  00021770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011774  08011774  00021774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  24000000  08011778  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000020b8  24000168  080118e0  00030168  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24002220  080118e0  00032220  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003d105  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005ee9  00000000  00000000  0006d29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000021c0  00000000  00000000  00073188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001fb8  00000000  00000000  00075348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003e4df  00000000  00000000  00077300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002aeb0  00000000  00000000  000b57df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00185dd6  00000000  00000000  000e068f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00266465  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009a74  00000000  00000000  002664b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000168 	.word	0x24000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801152c 	.word	0x0801152c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400016c 	.word	0x2400016c
 80002dc:	0801152c 	.word	0x0801152c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <write_register>:
uint32_t LO_FREQ = 324e6;

/*
 * Writes CMX register, addresses and values defined in main.h, refer to CMX994A datasheet
 */
void write_register(int reg, int val) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2101      	movs	r1, #1
 800038e:	480c      	ldr	r0, [pc, #48]	; (80003c0 <write_register+0x40>)
 8000390:	f005 fbd0 	bl	8005b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 8000394:	1d39      	adds	r1, r7, #4
 8000396:	2364      	movs	r3, #100	; 0x64
 8000398:	2201      	movs	r2, #1
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <write_register+0x44>)
 800039c:	f00a fa42 	bl	800a824 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&val, 1, 100);
 80003a0:	4639      	mov	r1, r7
 80003a2:	2364      	movs	r3, #100	; 0x64
 80003a4:	2201      	movs	r2, #1
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <write_register+0x44>)
 80003a8:	f00a fa3c 	bl	800a824 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2101      	movs	r1, #1
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <write_register+0x40>)
 80003b2:	f005 fbbf 	bl	8005b34 <HAL_GPIO_WritePin>

}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58020400 	.word	0x58020400
 80003c4:	24000408 	.word	0x24000408

080003c8 <write_register_2>:
/*
 * Required for writing the 2-byte long register in CMX994E for I and Q offset voltages
 */
void write_register_2(int reg, int Qval, int Ival) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]

	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2101      	movs	r1, #1
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <write_register_2+0x50>)
 80003da:	f005 fbab 	bl	8005b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 80003de:	f107 010c 	add.w	r1, r7, #12
 80003e2:	2364      	movs	r3, #100	; 0x64
 80003e4:	2201      	movs	r2, #1
 80003e6:	480d      	ldr	r0, [pc, #52]	; (800041c <write_register_2+0x54>)
 80003e8:	f00a fa1c 	bl	800a824 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&Qval, 1, 100);
 80003ec:	f107 0108 	add.w	r1, r7, #8
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	2201      	movs	r2, #1
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <write_register_2+0x54>)
 80003f6:	f00a fa15 	bl	800a824 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&Ival, 1, 100);
 80003fa:	1d39      	adds	r1, r7, #4
 80003fc:	2364      	movs	r3, #100	; 0x64
 80003fe:	2201      	movs	r2, #1
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <write_register_2+0x54>)
 8000402:	f00a fa0f 	bl	800a824 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2101      	movs	r1, #1
 800040a:	4803      	ldr	r0, [pc, #12]	; (8000418 <write_register_2+0x50>)
 800040c:	f005 fb92 	bl	8005b34 <HAL_GPIO_WritePin>

}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	58020400 	.word	0x58020400
 800041c:	24000408 	.word	0x24000408

08000420 <read_register>:

/*
 * Reads back CMX registers and prints them in binary through RTT
 */
uint8_t read_register(int reg) {
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	b08b      	sub	sp, #44	; 0x2c
 8000424:	af08      	add	r7, sp, #32
 8000426:	6078      	str	r0, [r7, #4]
	reg ^= 0xF0;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
 800042e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2101      	movs	r1, #1
 8000434:	483a      	ldr	r0, [pc, #232]	; (8000520 <read_register+0x100>)
 8000436:	f005 fb7d 	bl	8005b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 800043a:	1d39      	adds	r1, r7, #4
 800043c:	2364      	movs	r3, #100	; 0x64
 800043e:	2201      	movs	r2, #1
 8000440:	4838      	ldr	r0, [pc, #224]	; (8000524 <read_register+0x104>)
 8000442:	f00a f9ef 	bl	800a824 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)spi_buf, 1, 100);
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	2201      	movs	r2, #1
 800044a:	4937      	ldr	r1, [pc, #220]	; (8000528 <read_register+0x108>)
 800044c:	4835      	ldr	r0, [pc, #212]	; (8000524 <read_register+0x104>)
 800044e:	f00a fbdb 	bl	800ac08 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2101      	movs	r1, #1
 8000456:	4832      	ldr	r0, [pc, #200]	; (8000520 <read_register+0x100>)
 8000458:	f005 fb6c 	bl	8005b34 <HAL_GPIO_WritePin>
	printf("Register Address: %02x: read %02x = "BYTE_TO_BINARY_PATTERN"\n", reg, spi_buf[0], BYTE_TO_BINARY(spi_buf[0]));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	4b31      	ldr	r3, [pc, #196]	; (8000528 <read_register+0x108>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	469e      	mov	lr, r3
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <read_register+0x108>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	b25b      	sxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	da02      	bge.n	8000476 <read_register+0x56>
 8000470:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000474:	e001      	b.n	800047a <read_register+0x5a>
 8000476:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <read_register+0x108>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <read_register+0x6a>
 8000486:	2331      	movs	r3, #49	; 0x31
 8000488:	e000      	b.n	800048c <read_register+0x6c>
 800048a:	2330      	movs	r3, #48	; 0x30
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <read_register+0x108>)
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	f002 0220 	and.w	r2, r2, #32
 8000494:	2a00      	cmp	r2, #0
 8000496:	d001      	beq.n	800049c <read_register+0x7c>
 8000498:	2231      	movs	r2, #49	; 0x31
 800049a:	e000      	b.n	800049e <read_register+0x7e>
 800049c:	2230      	movs	r2, #48	; 0x30
 800049e:	4922      	ldr	r1, [pc, #136]	; (8000528 <read_register+0x108>)
 80004a0:	7809      	ldrb	r1, [r1, #0]
 80004a2:	f001 0110 	and.w	r1, r1, #16
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d001      	beq.n	80004ae <read_register+0x8e>
 80004aa:	2131      	movs	r1, #49	; 0x31
 80004ac:	e000      	b.n	80004b0 <read_register+0x90>
 80004ae:	2130      	movs	r1, #48	; 0x30
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <read_register+0x108>)
 80004b2:	7800      	ldrb	r0, [r0, #0]
 80004b4:	f000 0008 	and.w	r0, r0, #8
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d001      	beq.n	80004c0 <read_register+0xa0>
 80004bc:	2031      	movs	r0, #49	; 0x31
 80004be:	e000      	b.n	80004c2 <read_register+0xa2>
 80004c0:	2030      	movs	r0, #48	; 0x30
 80004c2:	4c19      	ldr	r4, [pc, #100]	; (8000528 <read_register+0x108>)
 80004c4:	7824      	ldrb	r4, [r4, #0]
 80004c6:	f004 0404 	and.w	r4, r4, #4
 80004ca:	2c00      	cmp	r4, #0
 80004cc:	d001      	beq.n	80004d2 <read_register+0xb2>
 80004ce:	2431      	movs	r4, #49	; 0x31
 80004d0:	e000      	b.n	80004d4 <read_register+0xb4>
 80004d2:	2430      	movs	r4, #48	; 0x30
 80004d4:	4d14      	ldr	r5, [pc, #80]	; (8000528 <read_register+0x108>)
 80004d6:	782d      	ldrb	r5, [r5, #0]
 80004d8:	f005 0502 	and.w	r5, r5, #2
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d001      	beq.n	80004e4 <read_register+0xc4>
 80004e0:	2531      	movs	r5, #49	; 0x31
 80004e2:	e000      	b.n	80004e6 <read_register+0xc6>
 80004e4:	2530      	movs	r5, #48	; 0x30
 80004e6:	4e10      	ldr	r6, [pc, #64]	; (8000528 <read_register+0x108>)
 80004e8:	7836      	ldrb	r6, [r6, #0]
 80004ea:	f006 0601 	and.w	r6, r6, #1
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d001      	beq.n	80004f6 <read_register+0xd6>
 80004f2:	2631      	movs	r6, #49	; 0x31
 80004f4:	e000      	b.n	80004f8 <read_register+0xd8>
 80004f6:	2630      	movs	r6, #48	; 0x30
 80004f8:	9606      	str	r6, [sp, #24]
 80004fa:	9505      	str	r5, [sp, #20]
 80004fc:	9404      	str	r4, [sp, #16]
 80004fe:	9003      	str	r0, [sp, #12]
 8000500:	9102      	str	r1, [sp, #8]
 8000502:	9201      	str	r2, [sp, #4]
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	4663      	mov	r3, ip
 8000508:	4672      	mov	r2, lr
 800050a:	6839      	ldr	r1, [r7, #0]
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <read_register+0x10c>)
 800050e:	f010 f8b7 	bl	8010680 <iprintf>
	return spi_buf[0];
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <read_register+0x108>)
 8000514:	781b      	ldrb	r3, [r3, #0]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	bf00      	nop
 8000520:	58020400 	.word	0x58020400
 8000524:	24000408 	.word	0x24000408
 8000528:	24000490 	.word	0x24000490
 800052c:	08011544 	.word	0x08011544

08000530 <demod_set_vco>:

/*
 * Sets the VCO frequency to the given input frequency by calculating and writing correct values to CMX register
 */
void demod_set_vco(uint32_t freq, uint32_t pll_r_div) { // TODO: Clean up
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	 // uint32_t pll_m = freq / demod_pll_step;
	 // uint32_t pll_r = (frequency_t)HSE_VALUE / demod_pll_step;

	  uint32_t pll_r = pll_r_div;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	617b      	str	r3, [r7, #20]
	  uint32_t pll_m = freq/10e6*pll_r_div;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	ee07 3a90 	vmov	s15, r3
 8000544:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000548:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80005c8 <demod_set_vco+0x98>
 800054c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	ee07 3a90 	vmov	s15, r3
 8000556:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800055a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800055e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000562:	ee17 3a90 	vmov	r3, s15
 8000566:	613b      	str	r3, [r7, #16]
	  const uint8_t pll_r_23 = pll_r & 0xFF;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	73fb      	strb	r3, [r7, #15]
	  const uint8_t pll_r_24 = (pll_r >> 8) & 0xFF;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	73bb      	strb	r3, [r7, #14]
	  // 0x23 has to be written before 0x24
	  write_register(CMX994A_PLLR23, pll_r_23);
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4619      	mov	r1, r3
 8000576:	2023      	movs	r0, #35	; 0x23
 8000578:	f7ff ff02 	bl	8000380 <write_register>
	  write_register(CMX994A_PLLR24, pll_r_24);
 800057c:	7bbb      	ldrb	r3, [r7, #14]
 800057e:	4619      	mov	r1, r3
 8000580:	2024      	movs	r0, #36	; 0x24
 8000582:	f7ff fefd 	bl	8000380 <write_register>
	  //printf("Set R register: $23: %02x, $24: %02x\n", pll_r_23, pll_r_24);
	  //read_register(CMX994A_PLLR23);
	  //read_register(CMX994A_PLLR24);
	  const uint8_t pll_m_20 = pll_m & 0xFF;
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	737b      	strb	r3, [r7, #13]
	  const uint8_t pll_m_21 = (pll_m >> 8) & 0xFF;
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	733b      	strb	r3, [r7, #12]
	  const uint8_t pll_m_22 = ((pll_m >> 16) & 0x07) | (1<<7) | (1<<5); // b5 = charge pump enable , b7 = Enable PLL
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80005a0:	72fb      	strb	r3, [r7, #11]
	  write_register(CMX994A_PLLM20, pll_m_20);
 80005a2:	7b7b      	ldrb	r3, [r7, #13]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2020      	movs	r0, #32
 80005a8:	f7ff feea 	bl	8000380 <write_register>
	  write_register(CMX994A_PLLM21, pll_m_21);
 80005ac:	7b3b      	ldrb	r3, [r7, #12]
 80005ae:	4619      	mov	r1, r3
 80005b0:	2021      	movs	r0, #33	; 0x21
 80005b2:	f7ff fee5 	bl	8000380 <write_register>
	  write_register(CMX994A_PLLM22, pll_m_22);
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	4619      	mov	r1, r3
 80005ba:	2022      	movs	r0, #34	; 0x22
 80005bc:	f7ff fee0 	bl	8000380 <write_register>
	  //printf("Set VCO: $20: %02x, $21: %02x, $22: %02x\n", pll_m_20, pll_m_21, pll_m_22);
	  //read_register(CMX994A_PLLM20);
	  //read_register(CMX994A_PLLM21);
	  //read_register(CMX994A_PLLM22);
}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	00000000 	.word	0x00000000
 80005cc:	416312d0 	.word	0x416312d0

080005d0 <demod_is_locked_2>:

/*
 * Check from register if VCO is frequency locked
 */
uint8_t demod_is_locked_2(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	return ( read_register(CMX994A_PLLM22) & (1<<6)) ? 0 : 1;
 80005d4:	2022      	movs	r0, #34	; 0x22
 80005d6:	f7ff ff23 	bl	8000420 <read_register>
 80005da:	4603      	mov	r3, r0
 80005dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf0c      	ite	eq
 80005e4:	2301      	moveq	r3, #1
 80005e6:	2300      	movne	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <configureRadio>:

void configureRadio(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
	   */
	  //General reset


	/* First Enable The Radio and give LDO time to settle */
	HAL_GPIO_WritePin(EN_3V0_GPIO_Port, EN_3V0_Pin, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2110      	movs	r1, #16
 80005fa:	4835      	ldr	r0, [pc, #212]	; (80006d0 <configureRadio+0xe0>)
 80005fc:	f005 fa9a 	bl	8005b34 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000600:	20c8      	movs	r0, #200	; 0xc8
 8000602:	f001 fc27 	bl	8001e54 <HAL_Delay>

	/* Define all the registry values */
	uint8_t CMX994A_GCR_T = 0b10101111;
 8000606:	23af      	movs	r3, #175	; 0xaf
 8000608:	73fb      	strb	r3, [r7, #15]
	 * 	2 - PLL Enable		1
	 * 	1 - CBUS RX Enable	1 (ORred with GPIO RX Enable pin)
	 * 	0 - CBUS TX Enable  1 (Enables TX divider) (ORred with GPIO TX Enable pin)
	 * 	*/

	uint8_t CMX994A_RXR_T = 0b00000000;
 800060a:	2300      	movs	r3, #0
 800060c:	73bb      	strb	r3, [r7, #14]
	 * 5 - Disable LNA		0
	 * 4,3 - ACR Filter		00 for minimum BW , 10 for maximum BW
	 * 2 - DC Correction X	0 (0 for nominal , 1 for double)
	 * 1,0 - LO Divider		00 (divided by 2)
	 * */
	uint8_t CMX994A_OCR_T = 0b00000011;
 800060e:	2303      	movs	r3, #3
 8000610:	737b      	strb	r3, [r7, #13]
	 * 3 - Q path disable	0
	 * 2 - I path disable 	0
	 * 1,0 - LO phase corr	00 (enabled 00 , powered down 11)
	 * */

	uint8_t CMX994A_VCOCR_T = 0b00000011;
 8000612:	2303      	movs	r3, #3
 8000614:	733b      	strb	r3, [r7, #12]

	/* RX Offset register
	 * Recommended value from datasheet : 0x88
	 */
	// Experimentally found values for voltage offsets - the offset should be < 25 mV between each channels P and N.
	uint8_t CMX994A_RXOFFI_T = 0b00001001;
 8000616:	2309      	movs	r3, #9
 8000618:	72fb      	strb	r3, [r7, #11]
	uint8_t CMX994A_RXOFFQ_T = 0b00101010;
 800061a:	232a      	movs	r3, #42	; 0x2a
 800061c:	72bb      	strb	r3, [r7, #10]

	/* LNA Intermodulation Control Register
	 * Recommended value from datasheet (440 MHz : 0x3F , 100 MHz : 0x00 )
	 * Could be set to 0, as very low powers are expected at input
	 */
	uint8_t CMX994A_LNAIM_T = 0x10;
 800061e:	2310      	movs	r3, #16
 8000620:	727b      	strb	r3, [r7, #9]
	/*
	 *  Write registers with values from above
	 */

	  //printf("General reset\n");
	  write_register(CMX994A_GR, 0);
 8000622:	2100      	movs	r1, #0
 8000624:	2010      	movs	r0, #16
 8000626:	f7ff feab 	bl	8000380 <write_register>

	  //RX Control Register config
	  write_register(CMX994A_RXR, CMX994A_RXR_T);
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	4619      	mov	r1, r3
 800062e:	2012      	movs	r0, #18
 8000630:	f7ff fea6 	bl	8000380 <write_register>
	  //printf("RX Control Register configured: 00000001\n");
	  printf("RX Control Register read:  ");
 8000634:	4827      	ldr	r0, [pc, #156]	; (80006d4 <configureRadio+0xe4>)
 8000636:	f010 f823 	bl	8010680 <iprintf>
	  read_register(CMX994A_RXR);
 800063a:	2012      	movs	r0, #18
 800063c:	f7ff fef0 	bl	8000420 <read_register>

	  //Options Control Register config
	  write_register(CMX994A_OCR, CMX994A_OCR_T);
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	4619      	mov	r1, r3
 8000644:	2015      	movs	r0, #21
 8000646:	f7ff fe9b 	bl	8000380 <write_register>
	  //printf("Options Control Register configured: 00000011\n");
	  printf("Options Control Register read:  ");
 800064a:	4823      	ldr	r0, [pc, #140]	; (80006d8 <configureRadio+0xe8>)
 800064c:	f010 f818 	bl	8010680 <iprintf>
	  read_register(CMX994A_OCR);
 8000650:	2015      	movs	r0, #21
 8000652:	f7ff fee5 	bl	8000420 <read_register>

	  //VCO Control Register config
	  write_register(CMX994A_VCOCR, CMX994A_VCOCR_T);//CMX994A_VCOCR_TXDIV1
 8000656:	7b3b      	ldrb	r3, [r7, #12]
 8000658:	4619      	mov	r1, r3
 800065a:	2025      	movs	r0, #37	; 0x25
 800065c:	f7ff fe90 	bl	8000380 <write_register>
	  //printf("VCO Control Register configured: 01100011\n");
	  printf("VCO Control Register read:  ");
 8000660:	481e      	ldr	r0, [pc, #120]	; (80006dc <configureRadio+0xec>)
 8000662:	f010 f80d 	bl	8010680 <iprintf>
	  read_register(CMX994A_VCOCR);
 8000666:	2025      	movs	r0, #37	; 0x25
 8000668:	f7ff feda 	bl	8000420 <read_register>


	  //VCO Control Register config
	  write_register(CMX994A_LNAINT, CMX994A_LNAIM_T);
 800066c:	7a7b      	ldrb	r3, [r7, #9]
 800066e:	4619      	mov	r1, r3
 8000670:	2014      	movs	r0, #20
 8000672:	f7ff fe85 	bl	8000380 <write_register>
	  write_register_2(CMX994A_RXEXTOFF, CMX994A_RXOFFQ_T, CMX994A_RXOFFI_T);
 8000676:	7abb      	ldrb	r3, [r7, #10]
 8000678:	7afa      	ldrb	r2, [r7, #11]
 800067a:	4619      	mov	r1, r3
 800067c:	2017      	movs	r0, #23
 800067e:	f7ff fea3 	bl	80003c8 <write_register_2>
	  //HAL_GPIO_WritePin (DEMOD_TXEN_GPIO_Port, DEMOD_TXEN_Pin, GPIO_PIN_SET);
	  //HAL_GPIO_WritePin (DEMOD_RXEN_GPIO_Port, DEMOD_RXEN_Pin, GPIO_PIN_SET);


	  /* Write the VCO registers (R and M dividers for the VCO) */
	  uint32_t RVAL = 5000; // Make sure this value is used in the external filter design of the VCO !!
 8000682:	f241 3388 	movw	r3, #5000	; 0x1388
 8000686:	607b      	str	r3, [r7, #4]
	  demod_set_vco(LO_FREQ, RVAL);
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <configureRadio+0xf0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff4e 	bl	8000530 <demod_set_vco>

	  //General Control Register config (Write this register last as it will enable the VCO)
	  write_register(CMX994A_GCR, CMX994A_GCR_T);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4619      	mov	r1, r3
 8000698:	2011      	movs	r0, #17
 800069a:	f7ff fe71 	bl	8000380 <write_register>

	  //printf("General Control Register configured: 10111111\n");
	  printf("General Control Register read: ");
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <configureRadio+0xf4>)
 80006a0:	f00f ffee 	bl	8010680 <iprintf>
	  read_register(CMX994A_GCR);
 80006a4:	2011      	movs	r0, #17
 80006a6:	f7ff febb 	bl	8000420 <read_register>

	  HAL_Delay(10);
 80006aa:	200a      	movs	r0, #10
 80006ac:	f001 fbd2 	bl	8001e54 <HAL_Delay>

	  printf("Radio: PLL locked (1/0): %d \n", demod_is_locked_2());
 80006b0:	f7ff ff8e 	bl	80005d0 <demod_is_locked_2>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <configureRadio+0xf8>)
 80006ba:	f00f ffe1 	bl	8010680 <iprintf>
	  HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f001 fbc7 	bl	8001e54 <HAL_Delay>
			  demod_set_vco(200e6, RVAL);
			  HAL_Delay(5000);
		  }

	#endif
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58020000 	.word	0x58020000
 80006d4:	0801157c 	.word	0x0801157c
 80006d8:	08011598 	.word	0x08011598
 80006dc:	080115bc 	.word	0x080115bc
 80006e0:	24000000 	.word	0x24000000
 80006e4:	080115dc 	.word	0x080115dc
 80006e8:	080115fc 	.word	0x080115fc

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f001 fb1d 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f847 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fc75 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fc53 	bl	8000fa8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000702:	f000 fa07 	bl	8000b14 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000706:	f000 fa69 	bl	8000bdc <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800070a:	f000 facb 	bl	8000ca4 <MX_I2C1_Init>
  MX_I2C4_Init();
 800070e:	f000 fb09 	bl	8000d24 <MX_I2C4_Init>
  MX_SPI2_Init();
 8000712:	f000 fb47 	bl	8000da4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000716:	f000 f8bb 	bl	8000890 <MX_ADC1_Init>
  MX_ADC3_Init();
 800071a:	f000 f995 	bl	8000a48 <MX_ADC3_Init>
  MX_ADC2_Init();
 800071e:	f000 f935 	bl	800098c <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000722:	f00f fa47 	bl	800fbb4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000726:	f000 fb93 	bl	8000e50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // START RADIO RECEIVER
  printf("Hello space!");
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <main+0x90>)
 800072c:	f00f ffa8 	bl	8010680 <iprintf>
  configureRadio();
 8000730:	f7ff ff5e 	bl	80005f0 <configureRadio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* If no flags were set by interrupts, go back to sleep */
		if (!eventflags.dont_sleep)
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <main+0x94>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d019      	beq.n	8000776 <main+0x8a>
			continue;
		eventflags.dont_sleep = 0;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <main+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

		/* Go through all flags to check which of them are up. Flags could indicate for example the need
		 * for data processing or */
		if (eventflags.tick) {
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <main+0x94>)
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f2      	beq.n	8000738 <main+0x4c>
			eventflags.tick = 0;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <main+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	705a      	strb	r2, [r3, #1]
			GPIOW(CANLED, 1 & (a >> 8));	// Blink LED while system is running.
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	121b      	asrs	r3, r3, #8
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	2120      	movs	r1, #32
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <main+0x98>)
 800076a:	f005 f9e3 	bl	8005b34 <HAL_GPIO_WritePin>
			++a;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	e7e0      	b.n	8000738 <main+0x4c>
			continue;
 8000776:	bf00      	nop
		if (!eventflags.dont_sleep)
 8000778:	e7de      	b.n	8000738 <main+0x4c>
 800077a:	bf00      	nop
 800077c:	0801161c 	.word	0x0801161c
 8000780:	24000780 	.word	0x24000780
 8000784:	58020400 	.word	0x58020400

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09c      	sub	sp, #112	; 0x70
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	224c      	movs	r2, #76	; 0x4c
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f00f ff6a 	bl	8010670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2220      	movs	r2, #32
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00f ff64 	bl	8010670 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f006 fdd9 	bl	8007360 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <SystemClock_Config+0xfc>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a33      	ldr	r2, [pc, #204]	; (8000884 <SystemClock_Config+0xfc>)
 80007b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <SystemClock_Config+0xfc>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <SystemClock_Config+0x100>)
 80007ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007cc:	4a2e      	ldr	r2, [pc, #184]	; (8000888 <SystemClock_Config+0x100>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d4:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <SystemClock_Config+0x100>)
 80007d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e0:	bf00      	nop
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <SystemClock_Config+0xfc>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ee:	d1f8      	bne.n	80007e2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <SystemClock_Config+0x104>)
 80007f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f4:	f023 0303 	bic.w	r3, r3, #3
 80007f8:	4a24      	ldr	r2, [pc, #144]	; (800088c <SystemClock_Config+0x104>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000800:	2301      	movs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	2302      	movs	r3, #2
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000816:	2360      	movs	r3, #96	; 0x60
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800081e:	2308      	movs	r3, #8
 8000820:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000826:	230c      	movs	r3, #12
 8000828:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082a:	2300      	movs	r3, #0
 800082c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4618      	mov	r0, r3
 8000838:	f006 fddc 	bl	80073f4 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000842:	f000 fd7b 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	233f      	movs	r3, #63	; 0x3f
 8000848:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000852:	2308      	movs	r3, #8
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000862:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2104      	movs	r1, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f007 f9ed 	bl	8007c4c <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000878:	f000 fd60 	bl	800133c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3770      	adds	r7, #112	; 0x70
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58024800 	.word	0x58024800
 8000888:	58000400 	.word	0x58000400
 800088c:	58024400 	.word	0x58024400

08000890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_ADC1_Init+0xec>)
 80008b6:	4a32      	ldr	r2, [pc, #200]	; (8000980 <MX_ADC1_Init+0xf0>)
 80008b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_ADC1_Init+0xec>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_ADC1_Init+0xec>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_ADC1_Init+0xec>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_ADC1_Init+0xec>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_ADC1_Init+0xec>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC1_Init+0xec>)
 80008da:	2201      	movs	r2, #1
 80008dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_ADC1_Init+0xec>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC1_Init+0xec>)
 80008e6:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_ADC1_Init+0xec>)
 80008ee:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_ADC1_Init+0xec>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_ADC1_Init+0xec>)
 80008fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000900:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_ADC1_Init+0xec>)
 8000904:	2200      	movs	r2, #0
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_ADC1_Init+0xec>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000910:	481a      	ldr	r0, [pc, #104]	; (800097c <MX_ADC1_Init+0xec>)
 8000912:	f001 fc9d 	bl	8002250 <HAL_ADC_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800091c:	f000 fd0e 	bl	800133c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000920:	2306      	movs	r3, #6
 8000922:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000928:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_ADC1_Init+0xec>)
 8000936:	f002 fd35 	bl	80033a4 <HAL_ADCEx_MultiModeConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000940:	f000 fcfc 	bl	800133c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_ADC1_Init+0xf4>)
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000948:	2306      	movs	r3, #6
 800094a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800094c:	2303      	movs	r3, #3
 800094e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_ADC1_Init+0xf8>)
 8000952:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000954:	2304      	movs	r3, #4
 8000956:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_ADC1_Init+0xec>)
 8000966:	f002 f86b 	bl	8002a40 <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000970:	f000 fce4 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	24000554 	.word	0x24000554
 8000980:	40022000 	.word	0x40022000
 8000984:	0c900008 	.word	0x0c900008
 8000988:	47ff0000 	.word	0x47ff0000

0800098c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009a6:	4a25      	ldr	r2, [pc, #148]	; (8000a3c <MX_ADC2_Init+0xb0>)
 80009a8:	601a      	str	r2, [r3, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_ADC2_Init+0xac>)
 80009f2:	f001 fc2d 	bl	8002250 <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80009fc:	f000 fc9e 	bl	800133c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_ADC2_Init+0xb4>)
 8000a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2306      	movs	r3, #6
 8000a06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_ADC2_Init+0xb8>)
 8000a0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a10:	2304      	movs	r3, #4
 8000a12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_ADC2_Init+0xac>)
 8000a22:	f002 f80d 	bl	8002a40 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000a2c:	f000 fc86 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	240004a4 	.word	0x240004a4
 8000a3c:	40022100 	.word	0x40022100
 8000a40:	10c00010 	.word	0x10c00010
 8000a44:	47ff0000 	.word	0x47ff0000

08000a48 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a62:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <MX_ADC3_Init+0xc4>)
 8000a64:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000ac0:	f001 fbc6 	bl	8002250 <HAL_ADC_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000aca:	f000 fc37 	bl	800133c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_ADC3_Init+0xc8>)
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ada:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ade:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_ADC3_Init+0xc0>)
 8000af2:	f001 ffa5 	bl	8002a40 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000afc:	f000 fc1e 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240005b8 	.word	0x240005b8
 8000b0c:	58026000 	.word	0x58026000
 8000b10:	cb840000 	.word	0xcb840000

08000b14 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <MX_FDCAN1_Init+0xc4>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b86:	2204      	movs	r2, #4
 8000b88:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_FDCAN1_Init+0xc0>)
 8000bc2:	f004 fa9f 	bl	8005104 <HAL_FDCAN_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bcc:	f000 fbb6 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24000694 	.word	0x24000694
 8000bd8:	4000a000 	.word	0x4000a000

08000bdc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000be2:	4a2f      	ldr	r2, [pc, #188]	; (8000ca0 <MX_FDCAN2_Init+0xc4>)
 8000be4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bfe:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c04:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_FDCAN2_Init+0xc0>)
 8000c8a:	f004 fa3b 	bl	8005104 <HAL_FDCAN_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c94:	f000 fb52 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	24000784 	.word	0x24000784
 8000ca0:	4000a400 	.word	0x4000a400

08000ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_I2C1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <MX_I2C1_Init+0x7c>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000ce0:	f004 ff42 	bl	8005b68 <HAL_I2C_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cea:	f000 fb27 	bl	800133c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cf2:	f004 ffc9 	bl	8005c88 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f000 fb1e 	bl	800133c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000d04:	f005 f80b 	bl	8005d1e <HAL_I2CEx_ConfigDigitalFilter>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 fb15 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000508 	.word	0x24000508
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	307075b1 	.word	0x307075b1

08000d24 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <MX_I2C4_Init+0x78>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <MX_I2C4_Init+0x7c>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d60:	f004 ff02 	bl	8005b68 <HAL_I2C_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d6a:	f000 fae7 	bl	800133c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d72:	f004 ff89 	bl	8005c88 <HAL_I2CEx_ConfigAnalogFilter>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d7c:	f000 fade 	bl	800133c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_I2C4_Init+0x74>)
 8000d84:	f004 ffcb 	bl	8005d1e <HAL_I2CEx_ConfigDigitalFilter>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 fad5 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	240003bc 	.word	0x240003bc
 8000d9c:	58001c00 	.word	0x58001c00
 8000da0:	307075b1 	.word	0x307075b1

08000da4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000daa:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <MX_SPI2_Init+0xa8>)
 8000dac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000db0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000db4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000dd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000dd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ddc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_SPI2_Init+0xa4>)
 8000e34:	f009 fbf0 	bl	800a618 <HAL_SPI_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000e3e:	f000 fa7d 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24000408 	.word	0x24000408
 8000e4c:	40003800 	.word	0x40003800

08000e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09a      	sub	sp, #104	; 0x68
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	222c      	movs	r2, #44	; 0x2c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f00f fbf0 	bl	8010670 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e92:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <MX_TIM1_Init+0x154>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ea4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ea8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ebc:	4838      	ldr	r0, [pc, #224]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000ebe:	f00a fb50 	bl	800b562 <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ec8:	f000 fa38 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4831      	ldr	r0, [pc, #196]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eda:	f00a fc75 	bl	800b7c8 <HAL_TIM_ConfigClockSource>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ee4:	f000 fa2a 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ee8:	482d      	ldr	r0, [pc, #180]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000eea:	f00a fb91 	bl	800b610 <HAL_TIM_OC_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ef4:	f000 fa22 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f0c:	f00b f962 	bl	800c1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f16:	f000 fa11 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f1a:	2330      	movs	r3, #48	; 0x30
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f40:	f00a fbc8 	bl	800b6d4 <HAL_TIM_OC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f4a:	f000 f9f7 	bl	800133c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f84:	f00b f9b4 	bl	800c2f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f8e:	f000 f9d5 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000f94:	f000 fce6 	bl	8001964 <HAL_TIM_MspPostInit>

}
 8000f98:	bf00      	nop
 8000f9a:	3768      	adds	r7, #104	; 0x68
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24000734 	.word	0x24000734
 8000fa4:	40010000 	.word	0x40010000

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <MX_DMA_Init+0x3c>)
 8000fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <MX_DMA_Init+0x3c>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_DMA_Init+0x3c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2038      	movs	r0, #56	; 0x38
 8000fd2:	f002 fba0 	bl	8003716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fd6:	2038      	movs	r0, #56	; 0x38
 8000fd8:	f002 fbb7 	bl	800374a <HAL_NVIC_EnableIRQ>

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffe:	4bbf      	ldr	r3, [pc, #764]	; (80012fc <MX_GPIO_Init+0x314>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4abd      	ldr	r2, [pc, #756]	; (80012fc <MX_GPIO_Init+0x314>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4bbb      	ldr	r3, [pc, #748]	; (80012fc <MX_GPIO_Init+0x314>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4bb7      	ldr	r3, [pc, #732]	; (80012fc <MX_GPIO_Init+0x314>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4ab6      	ldr	r2, [pc, #728]	; (80012fc <MX_GPIO_Init+0x314>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4bb3      	ldr	r3, [pc, #716]	; (80012fc <MX_GPIO_Init+0x314>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103a:	4bb0      	ldr	r3, [pc, #704]	; (80012fc <MX_GPIO_Init+0x314>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4aae      	ldr	r2, [pc, #696]	; (80012fc <MX_GPIO_Init+0x314>)
 8001042:	f043 0320 	orr.w	r3, r3, #32
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4bac      	ldr	r3, [pc, #688]	; (80012fc <MX_GPIO_Init+0x314>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f003 0320 	and.w	r3, r3, #32
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001058:	4ba8      	ldr	r3, [pc, #672]	; (80012fc <MX_GPIO_Init+0x314>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	4aa7      	ldr	r2, [pc, #668]	; (80012fc <MX_GPIO_Init+0x314>)
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001068:	4ba4      	ldr	r3, [pc, #656]	; (80012fc <MX_GPIO_Init+0x314>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4ba1      	ldr	r3, [pc, #644]	; (80012fc <MX_GPIO_Init+0x314>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a9f      	ldr	r2, [pc, #636]	; (80012fc <MX_GPIO_Init+0x314>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b9d      	ldr	r3, [pc, #628]	; (80012fc <MX_GPIO_Init+0x314>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b99      	ldr	r3, [pc, #612]	; (80012fc <MX_GPIO_Init+0x314>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4a98      	ldr	r2, [pc, #608]	; (80012fc <MX_GPIO_Init+0x314>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b95      	ldr	r3, [pc, #596]	; (80012fc <MX_GPIO_Init+0x314>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	4b92      	ldr	r3, [pc, #584]	; (80012fc <MX_GPIO_Init+0x314>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a90      	ldr	r2, [pc, #576]	; (80012fc <MX_GPIO_Init+0x314>)
 80010ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b8e      	ldr	r3, [pc, #568]	; (80012fc <MX_GPIO_Init+0x314>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d0:	4b8a      	ldr	r3, [pc, #552]	; (80012fc <MX_GPIO_Init+0x314>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a89      	ldr	r2, [pc, #548]	; (80012fc <MX_GPIO_Init+0x314>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b86      	ldr	r3, [pc, #536]	; (80012fc <MX_GPIO_Init+0x314>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V0_GPIO_Port, EN_3V0_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2110      	movs	r1, #16
 80010f2:	4883      	ldr	r0, [pc, #524]	; (8001300 <MX_GPIO_Init+0x318>)
 80010f4:	f004 fd1e 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_RESET_GPIO_Port, DEMOD_RESET_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2120      	movs	r1, #32
 80010fc:	4880      	ldr	r0, [pc, #512]	; (8001300 <MX_GPIO_Init+0x318>)
 80010fe:	f004 fd19 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2101      	movs	r1, #1
 8001106:	487f      	ldr	r0, [pc, #508]	; (8001304 <MX_GPIO_Init+0x31c>)
 8001108:	f004 fd14 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2126      	movs	r1, #38	; 0x26
 8001110:	487c      	ldr	r0, [pc, #496]	; (8001304 <MX_GPIO_Init+0x31c>)
 8001112:	f004 fd0f 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001116:	2374      	movs	r3, #116	; 0x74
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001126:	2305      	movs	r3, #5
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4875      	ldr	r0, [pc, #468]	; (8001308 <MX_GPIO_Init+0x320>)
 8001132:	f004 fb4f 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8001136:	230b      	movs	r3, #11
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	486f      	ldr	r0, [pc, #444]	; (8001308 <MX_GPIO_Init+0x320>)
 800114a:	f004 fb43 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800114e:	f24e 33c2 	movw	r3, #58306	; 0xe3c2
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	486a      	ldr	r0, [pc, #424]	; (800130c <MX_GPIO_Init+0x324>)
 8001164:	f004 fb36 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001168:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800117a:	230c      	movs	r3, #12
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4862      	ldr	r0, [pc, #392]	; (8001310 <MX_GPIO_Init+0x328>)
 8001186:	f004 fb25 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800118a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	485c      	ldr	r0, [pc, #368]	; (8001310 <MX_GPIO_Init+0x328>)
 80011a0:	f004 fb18 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80011a4:	230d      	movs	r3, #13
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011b4:	230c      	movs	r3, #12
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4853      	ldr	r0, [pc, #332]	; (800130c <MX_GPIO_Init+0x324>)
 80011c0:	f004 fb08 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011c4:	230f      	movs	r3, #15
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	484a      	ldr	r0, [pc, #296]	; (8001300 <MX_GPIO_Init+0x318>)
 80011d8:	f004 fafc 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_3V0_Pin DEMOD_RESET_Pin */
  GPIO_InitStruct.Pin = EN_3V0_Pin|DEMOD_RESET_Pin;
 80011dc:	2330      	movs	r3, #48	; 0x30
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	4843      	ldr	r0, [pc, #268]	; (8001300 <MX_GPIO_Init+0x318>)
 80011f4:	f004 faee 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEMOD_CS_Pin DEMOD_RXEN_Pin DEMOD_TXEN_Pin CANLED_Pin */
  GPIO_InitStruct.Pin = DEMOD_CS_Pin|DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin;
 80011f8:	2327      	movs	r3, #39	; 0x27
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	483d      	ldr	r0, [pc, #244]	; (8001304 <MX_GPIO_Init+0x31c>)
 8001210:	f004 fae0 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG4
                           PG5 PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001214:	f248 1337 	movw	r3, #33079	; 0x8137
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4838      	ldr	r0, [pc, #224]	; (8001314 <MX_GPIO_Init+0x32c>)
 8001232:	f004 facf 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001236:	f64f 7380 	movw	r3, #65408	; 0xff80
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001248:	230c      	movs	r3, #12
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	482d      	ldr	r0, [pc, #180]	; (8001308 <MX_GPIO_Init+0x320>)
 8001254:	f004 fabe 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4825      	ldr	r0, [pc, #148]	; (8001304 <MX_GPIO_Init+0x31c>)
 800126e:	f004 fab1 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD14
                           PD15 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001272:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001284:	230c      	movs	r3, #12
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <MX_GPIO_Init+0x330>)
 8001290:	f004 faa0 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001294:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	481b      	ldr	r0, [pc, #108]	; (8001318 <MX_GPIO_Init+0x330>)
 80012aa:	f004 fa93 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 80012ae:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4814      	ldr	r0, [pc, #80]	; (8001314 <MX_GPIO_Init+0x32c>)
 80012c4:	f004 fa86 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012da:	2307      	movs	r3, #7
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	4619      	mov	r1, r3
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_GPIO_Init+0x318>)
 80012e6:	f004 fa75 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f8:	e010      	b.n	800131c <MX_GPIO_Init+0x334>
 80012fa:	bf00      	nop
 80012fc:	58024400 	.word	0x58024400
 8001300:	58020000 	.word	0x58020000
 8001304:	58020400 	.word	0x58020400
 8001308:	58021000 	.word	0x58021000
 800130c:	58020800 	.word	0x58020800
 8001310:	58021400 	.word	0x58021400
 8001314:	58021800 	.word	0x58021800
 8001318:	58020c00 	.word	0x58020c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001320:	2306      	movs	r3, #6
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <MX_GPIO_Init+0x350>)
 800132c:	f004 fa52 	bl	80057d4 <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3738      	adds	r7, #56	; 0x38
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58020800 	.word	0x58020800

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_MspInit+0x30>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x30>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x30>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	58024400 	.word	0x58024400

0800137c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	; 0x30
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a68      	ldr	r2, [pc, #416]	; (800153c <HAL_ADC_MspInit+0x1c0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d175      	bne.n	800148a <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800139e:	4b68      	ldr	r3, [pc, #416]	; (8001540 <HAL_ADC_MspInit+0x1c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a66      	ldr	r2, [pc, #408]	; (8001540 <HAL_ADC_MspInit+0x1c4>)
 80013a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013a8:	4b65      	ldr	r3, [pc, #404]	; (8001540 <HAL_ADC_MspInit+0x1c4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d10e      	bne.n	80013ce <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80013b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b6:	4a63      	ldr	r2, [pc, #396]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013c0:	4b60      	ldr	r3, [pc, #384]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80013c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	4a5b      	ldr	r2, [pc, #364]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ec:	23c0      	movs	r3, #192	; 0xc0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4852      	ldr	r0, [pc, #328]	; (8001548 <HAL_ADC_MspInit+0x1cc>)
 8001400:	f004 f9e8 	bl	80057d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001406:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_ADC_MspInit+0x1d4>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 800140c:	2209      	movs	r2, #9
 800140e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001410:	4b4e      	ldr	r3, [pc, #312]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001416:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 800141e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001422:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001424:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800142a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001434:	4b45      	ldr	r3, [pc, #276]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 800143e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001442:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001446:	2204      	movs	r2, #4
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800144a:	4b40      	ldr	r3, [pc, #256]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 800144c:	2203      	movs	r2, #3
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800145c:	483b      	ldr	r0, [pc, #236]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 800145e:	f002 f98f 	bl	8003780 <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001468:	f7ff ff68 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a37      	ldr	r2, [pc, #220]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001470:	64da      	str	r2, [r3, #76]	; 0x4c
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <HAL_ADC_MspInit+0x1d0>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2012      	movs	r0, #18
 800147e:	f002 f94a 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001482:	2012      	movs	r0, #18
 8001484:	f002 f961 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001488:	e054      	b.n	8001534 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a31      	ldr	r2, [pc, #196]	; (8001554 <HAL_ADC_MspInit+0x1d8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d13b      	bne.n	800150c <HAL_ADC_MspInit+0x190>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_ADC_MspInit+0x1c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_ADC_MspInit+0x1c4>)
 800149c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_ADC_MspInit+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d10e      	bne.n	80014c4 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80014a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ac:	4a25      	ldr	r2, [pc, #148]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80014ae:	f043 0320 	orr.w	r3, r3, #32
 80014b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80014b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014e2:	2330      	movs	r3, #48	; 0x30
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4818      	ldr	r0, [pc, #96]	; (8001558 <HAL_ADC_MspInit+0x1dc>)
 80014f6:	f004 f96d 	bl	80057d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2012      	movs	r0, #18
 8001500:	f002 f909 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001504:	2012      	movs	r0, #18
 8001506:	f002 f920 	bl	800374a <HAL_NVIC_EnableIRQ>
}
 800150a:	e013      	b.n	8001534 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_ADC_MspInit+0x1e0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10e      	bne.n	8001534 <HAL_ADC_MspInit+0x1b8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 800151e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_ADC_MspInit+0x1c8>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
}
 8001534:	bf00      	nop
 8001536:	3730      	adds	r7, #48	; 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40022000 	.word	0x40022000
 8001540:	24000184 	.word	0x24000184
 8001544:	58024400 	.word	0x58024400
 8001548:	58020000 	.word	0x58020000
 800154c:	2400061c 	.word	0x2400061c
 8001550:	40020410 	.word	0x40020410
 8001554:	40022100 	.word	0x40022100
 8001558:	58020800 	.word	0x58020800
 800155c:	58026000 	.word	0x58026000

08001560 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ba      	sub	sp, #232	; 0xe8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	22bc      	movs	r2, #188	; 0xbc
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00f f875 	bl	8010670 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a54      	ldr	r2, [pc, #336]	; (80016dc <HAL_FDCAN_MspInit+0x17c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d14e      	bne.n	800162e <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001594:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001596:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800159a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 feb2 	bl	800830c <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80015ae:	f7ff fec5 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <HAL_FDCAN_MspInit+0x180>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_FDCAN_MspInit+0x180>)
 80015ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80015bc:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <HAL_FDCAN_MspInit+0x180>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10e      	bne.n	80015e2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80015c4:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 80015c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015ca:	4a46      	ldr	r2, [pc, #280]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 80015d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e8:	4a3e      	ldr	r2, [pc, #248]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f2:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 80015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800161a:	2309      	movs	r3, #9
 800161c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001624:	4619      	mov	r1, r3
 8001626:	4830      	ldr	r0, [pc, #192]	; (80016e8 <HAL_FDCAN_MspInit+0x188>)
 8001628:	f004 f8d4 	bl	80057d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800162c:	e052      	b.n	80016d4 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <HAL_FDCAN_MspInit+0x18c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d14d      	bne.n	80016d4 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800163e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f006 fe5e 	bl	800830c <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001656:	f7ff fe71 	bl	800133c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_FDCAN_MspInit+0x180>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_FDCAN_MspInit+0x180>)
 8001662:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_FDCAN_MspInit+0x180>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10e      	bne.n	800168a <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 800166e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 800167e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_FDCAN_MspInit+0x184>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80016a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80016c2:	2309      	movs	r3, #9
 80016c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <HAL_FDCAN_MspInit+0x188>)
 80016d0:	f004 f880 	bl	80057d4 <HAL_GPIO_Init>
}
 80016d4:	bf00      	nop
 80016d6:	37e8      	adds	r7, #232	; 0xe8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	4000a000 	.word	0x4000a000
 80016e0:	24000188 	.word	0x24000188
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58020400 	.word	0x58020400
 80016ec:	4000a400 	.word	0x4000a400

080016f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0ba      	sub	sp, #232	; 0xe8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	22bc      	movs	r2, #188	; 0xbc
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f00e ffad 	bl	8010670 <memset>
  if(hi2c->Instance==I2C1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a49      	ldr	r2, [pc, #292]	; (8001840 <HAL_I2C_MspInit+0x150>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d142      	bne.n	80017a6 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001720:	2308      	movs	r3, #8
 8001722:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	f107 0318 	add.w	r3, r7, #24
 800172e:	4618      	mov	r0, r3
 8001730:	f006 fdec 	bl	800830c <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800173a:	f7ff fdff 	bl	800133c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_I2C_MspInit+0x154>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001744:	4a3f      	ldr	r2, [pc, #252]	; (8001844 <HAL_I2C_MspInit+0x154>)
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_I2C_MspInit+0x154>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175c:	23c0      	movs	r3, #192	; 0xc0
 800175e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001774:	2304      	movs	r3, #4
 8001776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800177e:	4619      	mov	r1, r3
 8001780:	4831      	ldr	r0, [pc, #196]	; (8001848 <HAL_I2C_MspInit+0x158>)
 8001782:	f004 f827 	bl	80057d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <HAL_I2C_MspInit+0x154>)
 8001788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <HAL_I2C_MspInit+0x154>)
 800178e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001792:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_I2C_MspInit+0x154>)
 8001798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80017a4:	e047      	b.n	8001836 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C4)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_I2C_MspInit+0x15c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d142      	bne.n	8001836 <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80017b0:	2310      	movs	r3, #16
 80017b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fda4 	bl	800830c <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80017ca:	f7ff fdb7 	bl	800133c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_I2C_MspInit+0x154>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_I2C_MspInit+0x154>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_I2C_MspInit+0x154>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001806:	2304      	movs	r3, #4
 8001808:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001810:	4619      	mov	r1, r3
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <HAL_I2C_MspInit+0x160>)
 8001814:	f003 ffde 	bl	80057d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_I2C_MspInit+0x154>)
 800181a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_I2C_MspInit+0x154>)
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_I2C_MspInit+0x154>)
 800182a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
}
 8001836:	bf00      	nop
 8001838:	37e8      	adds	r7, #232	; 0xe8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40005400 	.word	0x40005400
 8001844:	58024400 	.word	0x58024400
 8001848:	58020400 	.word	0x58020400
 800184c:	58001c00 	.word	0x58001c00
 8001850:	58020c00 	.word	0x58020c00

08001854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0b8      	sub	sp, #224	; 0xe0
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	22bc      	movs	r2, #188	; 0xbc
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f00e fefb 	bl	8010670 <memset>
  if(hspi->Instance==SPI2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a25      	ldr	r2, [pc, #148]	; (8001914 <HAL_SPI_MspInit+0xc0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d142      	bne.n	800190a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800188a:	2300      	movs	r3, #0
 800188c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f006 fd3a 	bl	800830c <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800189e:	f7ff fd4d 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80018de:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80018e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f8:	2305      	movs	r3, #5
 80018fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_SPI_MspInit+0xc8>)
 8001906:	f003 ff65 	bl	80057d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	37e0      	adds	r7, #224	; 0xe0
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40003800 	.word	0x40003800
 8001918:	58024400 	.word	0x58024400
 800191c:	58020400 	.word	0x58020400

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_TIM_Base_MspInit+0x3c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d10e      	bne.n	8001950 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_TIM_Base_MspInit+0x40>)
 8001934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001938:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_TIM_Base_MspInit+0x40>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_TIM_Base_MspInit+0x40>)
 8001944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40010000 	.word	0x40010000
 8001960:	58024400 	.word	0x58024400

08001964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_TIM_MspPostInit+0x6c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d11f      	bne.n	80019c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_TIM_MspPostInit+0x70>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_TIM_MspPostInit+0x70>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_TIM_MspPostInit+0x70>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_TIM_MspPostInit+0x74>)
 80019c2:	f003 ff07 	bl	80057d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40010000 	.word	0x40010000
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58020000 	.word	0x58020000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SET_EVENT(tick);
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Handler+0x18>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	705a      	strb	r2, [r3, #1]
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <SysTick_Handler+0x18>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f9ee 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	24000780 	.word	0x24000780

08001a40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <ADC_IRQHandler+0x14>)
 8001a46:	f000 fda3 	bl	8002590 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <ADC_IRQHandler+0x18>)
 8001a4c:	f000 fda0 	bl	8002590 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	24000554 	.word	0x24000554
 8001a58:	240004a4 	.word	0x240004a4

08001a5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <DMA2_Stream0_IRQHandler+0x10>)
 8001a62:	f002 f9e9 	bl	8003e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2400061c 	.word	0x2400061c

08001a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <OTG_FS_IRQHandler+0x10>)
 8001a76:	f004 faf5 	bl	8006064 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	24001d04 	.word	0x24001d04

08001a84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
	}

return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e009      	b.n	8001ae4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf1      	blt.n	8001ad0 <_write+0x12>
	}
	return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f00e fd36 	bl	8010600 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	24080000 	.word	0x24080000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	2400018c 	.word	0x2400018c
 8001bc8:	24002220 	.word	0x24002220

08001bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <SystemInit+0xe4>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a36      	ldr	r2, [pc, #216]	; (8001cb0 <SystemInit+0xe4>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <SystemInit+0xe8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d807      	bhi.n	8001bfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <SystemInit+0xe8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 030f 	bic.w	r3, r3, #15
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <SystemInit+0xe8>)
 8001bf6:	f043 0307 	orr.w	r3, r3, #7
 8001bfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <SystemInit+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <SystemInit+0xec>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <SystemInit+0xec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <SystemInit+0xec>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4929      	ldr	r1, [pc, #164]	; (8001cb8 <SystemInit+0xec>)
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <SystemInit+0xf0>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <SystemInit+0xe8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <SystemInit+0xe8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 030f 	bic.w	r3, r3, #15
 8001c2e:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <SystemInit+0xe8>)
 8001c30:	f043 0307 	orr.w	r3, r3, #7
 8001c34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <SystemInit+0xec>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <SystemInit+0xec>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <SystemInit+0xec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <SystemInit+0xec>)
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <SystemInit+0xf4>)
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <SystemInit+0xec>)
 8001c50:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <SystemInit+0xf8>)
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <SystemInit+0xec>)
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <SystemInit+0xfc>)
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <SystemInit+0xec>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <SystemInit+0xec>)
 8001c62:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <SystemInit+0xfc>)
 8001c64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <SystemInit+0xec>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <SystemInit+0xec>)
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <SystemInit+0xfc>)
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <SystemInit+0xec>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <SystemInit+0xec>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <SystemInit+0xec>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <SystemInit+0xec>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <SystemInit+0x100>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <SystemInit+0x104>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c96:	d202      	bcs.n	8001c9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <SystemInit+0x108>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <SystemInit+0x10c>)
 8001ca0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ca4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00
 8001cb4:	52002000 	.word	0x52002000
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cc0:	02020200 	.word	0x02020200
 8001cc4:	01ff0000 	.word	0x01ff0000
 8001cc8:	01010280 	.word	0x01010280
 8001ccc:	5c001000 	.word	0x5c001000
 8001cd0:	ffff0000 	.word	0xffff0000
 8001cd4:	51008108 	.word	0x51008108
 8001cd8:	52004000 	.word	0x52004000

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce0:	f7ff ff74 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	; (8001d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f00e fc7f 	bl	801060c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7fe fced 	bl	80006ec <main>
  bx  lr
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d1c:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8001d20:	08011778 	.word	0x08011778
  ldr r2, =_sbss
 8001d24:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8001d28:	24002220 	.word	0x24002220

08001d2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC3_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d36:	2003      	movs	r0, #3
 8001d38:	f001 fce2 	bl	8003700 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d3c:	f006 f93c 	bl	8007fb8 <HAL_RCC_GetSysClockFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_Init+0x68>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	4913      	ldr	r1, [pc, #76]	; (8001d9c <HAL_Init+0x6c>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_Init+0x68>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_Init+0x6c>)
 8001d64:	5cd3      	ldrb	r3, [r2, r3]
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_Init+0x70>)
 8001d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_Init+0x74>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f814 	bl	8001da8 <HAL_InitTick>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e002      	b.n	8001d90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8a:	f7ff fadd 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	080116c0 	.word	0x080116c0
 8001da0:	24000008 	.word	0x24000008
 8001da4:	24000004 	.word	0x24000004

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_InitTick+0x60>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e021      	b.n	8001e00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_InitTick+0x64>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_InitTick+0x60>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fcc7 	bl	8003766 <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f001 fc91 	bl	8003716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_InitTick+0x68>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	24000010 	.word	0x24000010
 8001e0c:	24000004 	.word	0x24000004
 8001e10:	2400000c 	.word	0x2400000c

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	24000010 	.word	0x24000010
 8001e38:	24000824 	.word	0x24000824

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	24000824 	.word	0x24000824

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	24000010 	.word	0x24000010

08001e9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_GetREVID+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	5c001000 	.word	0x5c001000

08001eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3360      	adds	r3, #96	; 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	611a      	str	r2, [r3, #16]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b087      	sub	sp, #28
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3360      	adds	r3, #96	; 0x60
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	601a      	str	r2, [r3, #0]
  }
}
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b087      	sub	sp, #28
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3330      	adds	r3, #48	; 0x30
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	211f      	movs	r1, #31
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 011f 	and.w	r1, r3, #31
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002036:	bf00      	nop
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3314      	adds	r3, #20
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	0e5b      	lsrs	r3, r3, #25
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	4413      	add	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	0d1b      	lsrs	r3, r3, #20
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2107      	movs	r1, #7
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	401a      	ands	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	0d1b      	lsrs	r3, r3, #20
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0318 	and.w	r3, r3, #24
 80020e2:	4908      	ldr	r1, [pc, #32]	; (8002104 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020e4:	40d9      	lsrs	r1, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	400b      	ands	r3, r1
 80020ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ee:	431a      	orrs	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	000fffff 	.word	0x000fffff

08002108 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 031f 	and.w	r3, r3, #31
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <LL_ADC_DisableDeepPowerDown+0x20>)
 800214e:	4013      	ands	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6093      	str	r3, [r2, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	5fffffc0 	.word	0x5fffffc0

08002164 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002178:	d101      	bne.n	800217e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800219a:	4013      	ands	r3, r2
 800219c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	6fffffc0 	.word	0x6fffffc0

080021b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <LL_ADC_IsEnabled+0x18>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <LL_ADC_IsEnabled+0x1a>
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b04      	cmp	r3, #4
 8002214:	d101      	bne.n	800221a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e18e      	b.n	8002588 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff f87f 	bl	800137c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff67 	bl	8002164 <LL_ADC_IsDeepPowerDownEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff4d 	bl	8002140 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff82 	bl	80021b4 <LL_ADC_IsInternalRegulatorEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d114      	bne.n	80022e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff66 	bl	800218c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c0:	4b9a      	ldr	r3, [pc, #616]	; (800252c <HAL_ADC_Init+0x2dc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	4a9a      	ldr	r2, [pc, #616]	; (8002530 <HAL_ADC_Init+0x2e0>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	3301      	adds	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d2:	e002      	b.n	80022da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f9      	bne.n	80022d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff65 	bl	80021b4 <LL_ADC_IsInternalRegulatorEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10d      	bne.n	800230c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0210 	orr.w	r2, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff76 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002316:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 8128 	bne.w	8002576 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 8124 	bne.w	8002576 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff4a 	bl	80021dc <LL_ADC_IsEnabled>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d136      	bne.n	80023bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a78      	ldr	r2, [pc, #480]	; (8002534 <HAL_ADC_Init+0x2e4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_ADC_Init+0x112>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a76      	ldr	r2, [pc, #472]	; (8002538 <HAL_ADC_Init+0x2e8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10e      	bne.n	8002380 <HAL_ADC_Init+0x130>
 8002362:	4874      	ldr	r0, [pc, #464]	; (8002534 <HAL_ADC_Init+0x2e4>)
 8002364:	f7ff ff3a 	bl	80021dc <LL_ADC_IsEnabled>
 8002368:	4604      	mov	r4, r0
 800236a:	4873      	ldr	r0, [pc, #460]	; (8002538 <HAL_ADC_Init+0x2e8>)
 800236c:	f7ff ff36 	bl	80021dc <LL_ADC_IsEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	4323      	orrs	r3, r4
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e008      	b.n	8002392 <HAL_ADC_Init+0x142>
 8002380:	486e      	ldr	r0, [pc, #440]	; (800253c <HAL_ADC_Init+0x2ec>)
 8002382:	f7ff ff2b 	bl	80021dc <LL_ADC_IsEnabled>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a66      	ldr	r2, [pc, #408]	; (8002534 <HAL_ADC_Init+0x2e4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d004      	beq.n	80023aa <HAL_ADC_Init+0x15a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a64      	ldr	r2, [pc, #400]	; (8002538 <HAL_ADC_Init+0x2e8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Init+0x15e>
 80023aa:	4a65      	ldr	r2, [pc, #404]	; (8002540 <HAL_ADC_Init+0x2f0>)
 80023ac:	e000      	b.n	80023b0 <HAL_ADC_Init+0x160>
 80023ae:	4a65      	ldr	r2, [pc, #404]	; (8002544 <HAL_ADC_Init+0x2f4>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f7ff fd7c 	bl	8001eb4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023bc:	f7ff fd6e 	bl	8001e9c <HAL_GetREVID>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d914      	bls.n	80023f4 <HAL_ADC_Init+0x1a4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d110      	bne.n	80023f4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7d5b      	ldrb	r3, [r3, #21]
 80023d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7f1b      	ldrb	r3, [r3, #28]
 80023e8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023ea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023ec:	f043 030c 	orr.w	r3, r3, #12
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e00d      	b.n	8002410 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7d5b      	ldrb	r3, [r3, #21]
 80023f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002404:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7f1b      	ldrb	r3, [r3, #28]
 800240a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7f1b      	ldrb	r3, [r3, #28]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	3b01      	subs	r3, #1
 800241e:	045b      	lsls	r3, r3, #17
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_ADC_Init+0x2f8>)
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	69b9      	ldr	r1, [r7, #24]
 8002452:	430b      	orrs	r3, r1
 8002454:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fed1 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002460:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fede 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 800246c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d14a      	bne.n	800250a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d147      	bne.n	800250a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7d1b      	ldrb	r3, [r3, #20]
 800247e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_ADC_Init+0x2fc>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	430b      	orrs	r3, r1
 800249a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d11b      	bne.n	80024de <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_ADC_Init+0x300>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ba:	3a01      	subs	r2, #1
 80024bc:	0411      	lsls	r1, r2, #16
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024c2:	4311      	orrs	r1, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024c8:	4311      	orrs	r1, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ce:	430a      	orrs	r2, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	611a      	str	r2, [r3, #16]
 80024dc:	e007      	b.n	80024ee <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fdeb 	bl	80030e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d120      	bne.n	8002554 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f023 010f 	bic.w	r1, r3, #15
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
 800252a:	e01b      	b.n	8002564 <HAL_ADC_Init+0x314>
 800252c:	24000004 	.word	0x24000004
 8002530:	053e2d63 	.word	0x053e2d63
 8002534:	40022000 	.word	0x40022000
 8002538:	40022100 	.word	0x40022100
 800253c:	58026000 	.word	0x58026000
 8002540:	40022300 	.word	0x40022300
 8002544:	58026300 	.word	0x58026300
 8002548:	fff0c003 	.word	0xfff0c003
 800254c:	ffffbffc 	.word	0xffffbffc
 8002550:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 020f 	bic.w	r2, r2, #15
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f023 0303 	bic.w	r3, r3, #3
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
 8002574:	e007      	b.n	8002586 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0210 	orr.w	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002586:	7ffb      	ldrb	r3, [r7, #31]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3724      	adds	r7, #36	; 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}

08002590 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a87      	ldr	r2, [pc, #540]	; (80027d0 <HAL_ADC_IRQHandler+0x240>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_ADC_IRQHandler+0x30>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a86      	ldr	r2, [pc, #536]	; (80027d4 <HAL_ADC_IRQHandler+0x244>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x34>
 80025c0:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <HAL_ADC_IRQHandler+0x248>)
 80025c2:	e000      	b.n	80025c6 <HAL_ADC_IRQHandler+0x36>
 80025c4:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_ADC_IRQHandler+0x24c>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fd9e 	bl	8002108 <LL_ADC_GetMultimode>
 80025cc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d017      	beq.n	8002608 <HAL_ADC_IRQHandler+0x78>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fec8 	bl	8003390 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2202      	movs	r2, #2
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_ADC_IRQHandler+0x8c>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8083 	beq.w	800272e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07d      	beq.n	800272e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fcb8 	bl	8001fc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d062      	beq.n	8002720 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5d      	ldr	r2, [pc, #372]	; (80027d4 <HAL_ADC_IRQHandler+0x244>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d002      	beq.n	800266a <HAL_ADC_IRQHandler+0xda>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	e000      	b.n	800266c <HAL_ADC_IRQHandler+0xdc>
 800266a:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_ADC_IRQHandler+0x240>)
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4293      	cmp	r3, r2
 8002672:	d008      	beq.n	8002686 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d002      	beq.n	8002686 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b09      	cmp	r3, #9
 8002684:	d104      	bne.n	8002690 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	e00c      	b.n	80026aa <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_ADC_IRQHandler+0x244>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d002      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x110>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e000      	b.n	80026a2 <HAL_ADC_IRQHandler+0x112>
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_ADC_IRQHandler+0x240>)
 80026a2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d135      	bne.n	8002720 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d12e      	bne.n	8002720 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fd9b 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11a      	bne.n	8002708 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020c 	bic.w	r2, r2, #12
 80026e0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d112      	bne.n	8002720 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
 8002706:	e00b      	b.n	8002720 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f043 0210 	orr.w	r2, r3, #16
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f96f 	bl	8002a04 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_ADC_IRQHandler+0x1b2>
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a0 	beq.w	800288e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 809a 	beq.w	800288e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fc63 	bl	8002042 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800277c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fc1e 	bl	8001fc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002788:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_ADC_IRQHandler+0x244>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d002      	beq.n	800279a <HAL_ADC_IRQHandler+0x20a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e000      	b.n	800279c <HAL_ADC_IRQHandler+0x20c>
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_ADC_IRQHandler+0x240>)
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d008      	beq.n	80027b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d104      	bne.n	80027c0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	623b      	str	r3, [r7, #32]
 80027be:	e014      	b.n	80027ea <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a03      	ldr	r2, [pc, #12]	; (80027d4 <HAL_ADC_IRQHandler+0x244>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00a      	beq.n	80027e0 <HAL_ADC_IRQHandler+0x250>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e008      	b.n	80027e2 <HAL_ADC_IRQHandler+0x252>
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40022100 	.word	0x40022100
 80027d8:	40022300 	.word	0x40022300
 80027dc:	58026300 	.word	0x58026300
 80027e0:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_ADC_IRQHandler+0x464>)
 80027e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d047      	beq.n	8002880 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_ADC_IRQHandler+0x27a>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d03f      	beq.n	8002880 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d13a      	bne.n	8002880 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d133      	bne.n	8002880 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d12e      	bne.n	8002880 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fcfe 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d11a      	bne.n	8002868 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002840:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d112      	bne.n	8002880 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
 8002866:	e00b      	b.n	8002880 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0210 	orr.w	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fd5d 	bl	8003340 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2260      	movs	r2, #96	; 0x60
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	d011      	beq.n	80028bc <HAL_ADC_IRQHandler+0x32c>
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8b2 	bl	8002a18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <HAL_ADC_IRQHandler+0x35c>
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fd43 	bl	8003368 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_ADC_IRQHandler+0x38c>
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fd35 	bl	800337c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d043      	beq.n	80029ae <HAL_ADC_IRQHandler+0x41e>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d03e      	beq.n	80029ae <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	e021      	b.n	8002982 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_ADC_IRQHandler+0x464>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_ADC_IRQHandler+0x3c8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <HAL_ADC_IRQHandler+0x468>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_ADC_IRQHandler+0x3cc>
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_ADC_IRQHandler+0x46c>)
 800295a:	e000      	b.n	800295e <HAL_ADC_IRQHandler+0x3ce>
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_ADC_IRQHandler+0x470>)
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fbe0 	bl	8002124 <LL_ADC_GetMultiDMATransfer>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800296a:	2301      	movs	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	e008      	b.n	8002982 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800297e:	2301      	movs	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10e      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f043 0202 	orr.w	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f843 	bl	8002a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2210      	movs	r2, #16
 80029ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d018      	beq.n	80029ea <HAL_ADC_IRQHandler+0x45a>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d013      	beq.n	80029ea <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f043 0208 	orr.w	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fcb5 	bl	8003354 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80029ea:	bf00      	nop
 80029ec:	3728      	adds	r7, #40	; 0x28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40022000 	.word	0x40022000
 80029f8:	40022100 	.word	0x40022100
 80029fc:	40022300 	.word	0x40022300
 8002a00:	58026300 	.word	0x58026300

08002a04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b0a1      	sub	sp, #132	; 0x84
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a9d      	ldr	r2, [pc, #628]	; (8002cd0 <HAL_ADC_ConfigChannel+0x290>)
 8002a5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x2a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e321      	b.n	80030ae <HAL_ADC_ConfigChannel+0x66e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fbc3 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 8306 	bne.w	8003090 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x62>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	e016      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x90>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e003      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2201      	movs	r2, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	69d1      	ldr	r1, [r2, #28]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	430b      	orrs	r3, r1
 8002adc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f7ff fa7d 	bl	8001fea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fb84 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002afa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fb91 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 8002b06:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 80b3 	bne.w	8002c76 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 80af 	bne.w	8002c76 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	461a      	mov	r2, r3
 8002b26:	f7ff fa9f 	bl	8002068 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_ADC_ConfigChannel+0x294>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b36:	d10b      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x110>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	e01d      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x14c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x136>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	e00a      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x14c>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d027      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6919      	ldr	r1, [r3, #16]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba4:	f7ff f9ba 	bl	8001f1c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	6919      	ldr	r1, [r3, #16]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7e5b      	ldrb	r3, [r3, #25]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x17e>
 8002bb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bbc:	e000      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x180>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f7ff f9e4 	bl	8001f8e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	7e1b      	ldrb	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x19c>
 8002bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bda:	e000      	b.n	8002bde <HAL_ADC_ConfigChannel+0x19e>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	461a      	mov	r2, r3
 8002be0:	f7ff f9bc 	bl	8001f5c <LL_ADC_SetDataRightShift>
 8002be4:	e047      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	069b      	lsls	r3, r3, #26
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d107      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	069b      	lsls	r3, r3, #26
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d107      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c2c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	069b      	lsls	r3, r3, #26
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d107      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c50:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	069b      	lsls	r3, r3, #26
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d107      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c74:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff faae 	bl	80021dc <LL_ADC_IsEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 820d 	bne.w	80030a2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	461a      	mov	r2, r3
 8002c96:	f7ff fa13 	bl	80020c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <HAL_ADC_ConfigChannel+0x290>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f040 8133 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d110      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x298>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2b09      	cmp	r3, #9
 8002cc4:	bf94      	ite	ls
 8002cc6:	2301      	movls	r3, #1
 8002cc8:	2300      	movhi	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	e01e      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x2cc>
 8002cce:	bf00      	nop
 8002cd0:	47ff0000 	.word	0x47ff0000
 8002cd4:	5c001000 	.word	0x5c001000
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	e003      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2b09      	cmp	r3, #9
 8002d04:	bf94      	ite	ls
 8002d06:	2301      	movls	r3, #1
 8002d08:	2300      	movhi	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d079      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x2ec>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	069b      	lsls	r3, r3, #26
 8002d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2a:	e015      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x318>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e003      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	069b      	lsls	r3, r3, #26
 8002d54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x338>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	e017      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x368>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e003      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	ea42 0103 	orr.w	r1, r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x38e>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	051b      	lsls	r3, r3, #20
 8002dcc:	e018      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x3c0>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e00:	430b      	orrs	r3, r1
 8002e02:	e07e      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x3e0>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	069b      	lsls	r3, r3, #26
 8002e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e1e:	e015      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x40c>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	069b      	lsls	r3, r3, #26
 8002e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x42c>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	e017      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x45c>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	61bb      	str	r3, [r7, #24]
  return result;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x488>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b1e      	subs	r3, #30
 8002ec0:	051b      	lsls	r3, r3, #20
 8002ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	e01b      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x4c0>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e003      	b.n	8002eec <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	3301      	adds	r3, #1
 8002eee:	f003 021f 	and.w	r2, r3, #31
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b1e      	subs	r3, #30
 8002efa:	051b      	lsls	r3, r3, #20
 8002efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f00:	430b      	orrs	r3, r1
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	4619      	mov	r1, r3
 8002f08:	f7ff f8ae 	bl	8002068 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f280 80c6 	bge.w	80030a2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a67      	ldr	r2, [pc, #412]	; (80030b8 <HAL_ADC_ConfigChannel+0x678>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x4ea>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	; (80030bc <HAL_ADC_ConfigChannel+0x67c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x4ee>
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_ADC_ConfigChannel+0x680>)
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x4f0>
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_ADC_ConfigChannel+0x684>)
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe ffe5 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8002f36:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5e      	ldr	r2, [pc, #376]	; (80030b8 <HAL_ADC_ConfigChannel+0x678>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_ADC_ConfigChannel+0x50c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <HAL_ADC_ConfigChannel+0x67c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d10e      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x52a>
 8002f4c:	485a      	ldr	r0, [pc, #360]	; (80030b8 <HAL_ADC_ConfigChannel+0x678>)
 8002f4e:	f7ff f945 	bl	80021dc <LL_ADC_IsEnabled>
 8002f52:	4604      	mov	r4, r0
 8002f54:	4859      	ldr	r0, [pc, #356]	; (80030bc <HAL_ADC_ConfigChannel+0x67c>)
 8002f56:	f7ff f941 	bl	80021dc <LL_ADC_IsEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4323      	orrs	r3, r4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e008      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x53c>
 8002f6a:	4857      	ldr	r0, [pc, #348]	; (80030c8 <HAL_ADC_ConfigChannel+0x688>)
 8002f6c:	f7ff f936 	bl	80021dc <LL_ADC_IsEnabled>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d07d      	beq.n	800307c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a51      	ldr	r2, [pc, #324]	; (80030cc <HAL_ADC_ConfigChannel+0x68c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d130      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x5ac>
 8002f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d12b      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <HAL_ADC_ConfigChannel+0x688>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	f040 8081 	bne.w	80030a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a44      	ldr	r2, [pc, #272]	; (80030b8 <HAL_ADC_ConfigChannel+0x678>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x574>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a43      	ldr	r2, [pc, #268]	; (80030bc <HAL_ADC_ConfigChannel+0x67c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x578>
 8002fb4:	4a42      	ldr	r2, [pc, #264]	; (80030c0 <HAL_ADC_ConfigChannel+0x680>)
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x57a>
 8002fb8:	4a42      	ldr	r2, [pc, #264]	; (80030c4 <HAL_ADC_ConfigChannel+0x684>)
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7fe ff89 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc8:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_ADC_ConfigChannel+0x690>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	4a41      	ldr	r2, [pc, #260]	; (80030d4 <HAL_ADC_ConfigChannel+0x694>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f9      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fea:	e05a      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a39      	ldr	r2, [pc, #228]	; (80030d8 <HAL_ADC_ConfigChannel+0x698>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d11e      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x5f4>
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d119      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a30      	ldr	r2, [pc, #192]	; (80030c8 <HAL_ADC_ConfigChannel+0x688>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d14b      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <HAL_ADC_ConfigChannel+0x678>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_ADC_ConfigChannel+0x5de>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a28      	ldr	r2, [pc, #160]	; (80030bc <HAL_ADC_ConfigChannel+0x67c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x5e2>
 800301e:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_ADC_ConfigChannel+0x680>)
 8003020:	e000      	b.n	8003024 <HAL_ADC_ConfigChannel+0x5e4>
 8003022:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_ADC_ConfigChannel+0x684>)
 8003024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302a:	4619      	mov	r1, r3
 800302c:	4610      	mov	r0, r2
 800302e:	f7fe ff54 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003032:	e036      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_ADC_ConfigChannel+0x69c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d131      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d12c      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <HAL_ADC_ConfigChannel+0x688>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d127      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_ADC_ConfigChannel+0x678>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x626>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_ADC_ConfigChannel+0x67c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_ADC_ConfigChannel+0x62a>
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_ADC_ConfigChannel+0x680>)
 8003068:	e000      	b.n	800306c <HAL_ADC_ConfigChannel+0x62c>
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <HAL_ADC_ConfigChannel+0x684>)
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f7fe ff30 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 800307a:	e012      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800308e:	e008      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3784      	adds	r7, #132	; 0x84
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40022100 	.word	0x40022100
 80030c0:	40022300 	.word	0x40022300
 80030c4:	58026300 	.word	0x58026300
 80030c8:	58026000 	.word	0x58026000
 80030cc:	cb840000 	.word	0xcb840000
 80030d0:	24000004 	.word	0x24000004
 80030d4:	053e2d63 	.word	0x053e2d63
 80030d8:	c7520000 	.word	0xc7520000
 80030dc:	cfb80000 	.word	0xcfb80000

080030e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a79      	ldr	r2, [pc, #484]	; (80032d4 <ADC_ConfigureBoostMode+0x1f4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <ADC_ConfigureBoostMode+0x1c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a78      	ldr	r2, [pc, #480]	; (80032d8 <ADC_ConfigureBoostMode+0x1f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d109      	bne.n	8003110 <ADC_ConfigureBoostMode+0x30>
 80030fc:	4b77      	ldr	r3, [pc, #476]	; (80032dc <ADC_ConfigureBoostMode+0x1fc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e008      	b.n	8003122 <ADC_ConfigureBoostMode+0x42>
 8003110:	4b73      	ldr	r3, [pc, #460]	; (80032e0 <ADC_ConfigureBoostMode+0x200>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01c      	beq.n	8003160 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003126:	f005 f8c1 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 800312a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003134:	d010      	beq.n	8003158 <ADC_ConfigureBoostMode+0x78>
 8003136:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800313a:	d871      	bhi.n	8003220 <ADC_ConfigureBoostMode+0x140>
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003140:	d002      	beq.n	8003148 <ADC_ConfigureBoostMode+0x68>
 8003142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003146:	d16b      	bne.n	8003220 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	60fb      	str	r3, [r7, #12]
        break;
 8003156:	e066      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	60fb      	str	r3, [r7, #12]
        break;
 800315e:	e062      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003160:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003164:	f006 f812 	bl	800918c <HAL_RCCEx_GetPeriphCLKFreq>
 8003168:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003172:	d051      	beq.n	8003218 <ADC_ConfigureBoostMode+0x138>
 8003174:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003178:	d854      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 800317a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800317e:	d047      	beq.n	8003210 <ADC_ConfigureBoostMode+0x130>
 8003180:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003184:	d84e      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 8003186:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800318a:	d03d      	beq.n	8003208 <ADC_ConfigureBoostMode+0x128>
 800318c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003190:	d848      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 8003192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003196:	d033      	beq.n	8003200 <ADC_ConfigureBoostMode+0x120>
 8003198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800319c:	d842      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 800319e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031a2:	d029      	beq.n	80031f8 <ADC_ConfigureBoostMode+0x118>
 80031a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031a8:	d83c      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 80031aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031ae:	d01a      	beq.n	80031e6 <ADC_ConfigureBoostMode+0x106>
 80031b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031b4:	d836      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 80031b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031ba:	d014      	beq.n	80031e6 <ADC_ConfigureBoostMode+0x106>
 80031bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031c0:	d830      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d00e      	beq.n	80031e6 <ADC_ConfigureBoostMode+0x106>
 80031c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031cc:	d82a      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 80031ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031d2:	d008      	beq.n	80031e6 <ADC_ConfigureBoostMode+0x106>
 80031d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031d8:	d824      	bhi.n	8003224 <ADC_ConfigureBoostMode+0x144>
 80031da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031de:	d002      	beq.n	80031e6 <ADC_ConfigureBoostMode+0x106>
 80031e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e4:	d11e      	bne.n	8003224 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0c9b      	lsrs	r3, r3, #18
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	60fb      	str	r3, [r7, #12]
        break;
 80031f6:	e016      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
        break;
 80031fe:	e012      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	60fb      	str	r3, [r7, #12]
        break;
 8003206:	e00e      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	60fb      	str	r3, [r7, #12]
        break;
 800320e:	e00a      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	09db      	lsrs	r3, r3, #7
 8003214:	60fb      	str	r3, [r7, #12]
        break;
 8003216:	e006      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	60fb      	str	r3, [r7, #12]
        break;
 800321e:	e002      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
        break;
 8003220:	bf00      	nop
 8003222:	e000      	b.n	8003226 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003224:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003226:	f7fe fe39 	bl	8001e9c <HAL_GetREVID>
 800322a:	4603      	mov	r3, r0
 800322c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003230:	4293      	cmp	r3, r2
 8003232:	d815      	bhi.n	8003260 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <ADC_ConfigureBoostMode+0x204>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d908      	bls.n	800324e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800324c:	e03e      	b.n	80032cc <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800325c:	609a      	str	r2, [r3, #8]
}
 800325e:	e035      	b.n	80032cc <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <ADC_ConfigureBoostMode+0x208>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d808      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800327c:	609a      	str	r2, [r3, #8]
}
 800327e:	e025      	b.n	80032cc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <ADC_ConfigureBoostMode+0x20c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d80a      	bhi.n	800329e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	e016      	b.n	80032cc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <ADC_ConfigureBoostMode+0x210>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d80a      	bhi.n	80032bc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	609a      	str	r2, [r3, #8]
}
 80032ba:	e007      	b.n	80032cc <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40022100 	.word	0x40022100
 80032dc:	40022300 	.word	0x40022300
 80032e0:	58026300 	.word	0x58026300
 80032e4:	01312d00 	.word	0x01312d00
 80032e8:	005f5e10 	.word	0x005f5e10
 80032ec:	00bebc20 	.word	0x00bebc20
 80032f0:	017d7840 	.word	0x017d7840

080032f4 <LL_ADC_IsEnabled>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <LL_ADC_IsEnabled+0x18>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <LL_ADC_IsEnabled+0x1a>
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <LL_ADC_REG_IsConversionOngoing>:
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d101      	bne.n	8003332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b09f      	sub	sp, #124	; 0x7c
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033be:	2302      	movs	r3, #2
 80033c0:	e0be      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a5c      	ldr	r2, [pc, #368]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033dc:	4b5b      	ldr	r3, [pc, #364]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	e001      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e09d      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff87 	bl	800331a <LL_ADC_REG_IsConversionOngoing>
 800340c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff81 	bl	800331a <LL_ADC_REG_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d17f      	bne.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800341e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003420:	2b00      	cmp	r3, #0
 8003422:	d17c      	bne.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a47      	ldr	r2, [pc, #284]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a46      	ldr	r2, [pc, #280]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003438:	4b45      	ldr	r3, [pc, #276]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800343a:	e000      	b.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800343c:	4b45      	ldr	r3, [pc, #276]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800343e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d039      	beq.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	431a      	orrs	r2, r3
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3a      	ldr	r2, [pc, #232]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a38      	ldr	r2, [pc, #224]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10e      	bne.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800346e:	4836      	ldr	r0, [pc, #216]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003470:	f7ff ff40 	bl	80032f4 <LL_ADC_IsEnabled>
 8003474:	4604      	mov	r4, r0
 8003476:	4835      	ldr	r0, [pc, #212]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003478:	f7ff ff3c 	bl	80032f4 <LL_ADC_IsEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	4323      	orrs	r3, r4
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e008      	b.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800348c:	4832      	ldr	r0, [pc, #200]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800348e:	f7ff ff31 	bl	80032f4 <LL_ADC_IsEnabled>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d047      	beq.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	6892      	ldr	r2, [r2, #8]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	431a      	orrs	r2, r3
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ba:	e03a      	b.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d10e      	bne.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80034dc:	481a      	ldr	r0, [pc, #104]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034de:	f7ff ff09 	bl	80032f4 <LL_ADC_IsEnabled>
 80034e2:	4604      	mov	r4, r0
 80034e4:	4819      	ldr	r0, [pc, #100]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034e6:	f7ff ff05 	bl	80032f4 <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4323      	orrs	r3, r4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	e008      	b.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034fa:	4817      	ldr	r0, [pc, #92]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034fc:	f7ff fefa 	bl	80032f4 <LL_ADC_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003516:	4013      	ands	r3, r2
 8003518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800351a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800351c:	e009      	b.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003530:	e000      	b.n	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003532:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800353c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003540:	4618      	mov	r0, r3
 8003542:	377c      	adds	r7, #124	; 0x7c
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	40022000 	.word	0x40022000
 800354c:	40022100 	.word	0x40022100
 8003550:	40022300 	.word	0x40022300
 8003554:	58026300 	.word	0x58026300
 8003558:	58026000 	.word	0x58026000
 800355c:	fffff0e0 	.word	0xfffff0e0

08003560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	4313      	orrs	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358e:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	60d3      	str	r3, [r2, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00
 80035a4:	05fa0000 	.word	0x05fa0000

080035a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 0307 	and.w	r3, r3, #7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db0b      	blt.n	80035ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4907      	ldr	r1, [pc, #28]	; (80035fc <__NVIC_EnableIRQ+0x38>)
 80035de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2001      	movs	r0, #1
 80035e6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800360c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003610:	2b00      	cmp	r3, #0
 8003612:	db0a      	blt.n	800362a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <__NVIC_SetPriority+0x4c>)
 800361a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	440b      	add	r3, r1
 8003624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003628:	e00a      	b.n	8003640 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4908      	ldr	r1, [pc, #32]	; (8003650 <__NVIC_SetPriority+0x50>)
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	3b04      	subs	r3, #4
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	440b      	add	r3, r1
 800363e:	761a      	strb	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000e100 	.word	0xe000e100
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f1c3 0307 	rsb	r3, r3, #7
 800366e:	2b04      	cmp	r3, #4
 8003670:	bf28      	it	cs
 8003672:	2304      	movcs	r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3304      	adds	r3, #4
 800367a:	2b06      	cmp	r3, #6
 800367c:	d902      	bls.n	8003684 <NVIC_EncodePriority+0x30>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3b03      	subs	r3, #3
 8003682:	e000      	b.n	8003686 <NVIC_EncodePriority+0x32>
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	f04f 32ff 	mov.w	r2, #4294967295
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	401a      	ands	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43d9      	mvns	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	4313      	orrs	r3, r2
         );
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036cc:	d301      	bcc.n	80036d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00f      	b.n	80036f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <SysTick_Config+0x40>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036da:	210f      	movs	r1, #15
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	f7ff ff8e 	bl	8003600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <SysTick_Config+0x40>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <SysTick_Config+0x40>)
 80036ec:	2207      	movs	r2, #7
 80036ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	e000e010 	.word	0xe000e010

08003700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff29 	bl	8003560 <__NVIC_SetPriorityGrouping>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003724:	f7ff ff40 	bl	80035a8 <__NVIC_GetPriorityGrouping>
 8003728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7ff ff90 	bl	8003654 <NVIC_EncodePriority>
 8003734:	4602      	mov	r2, r0
 8003736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff5f 	bl	8003600 <__NVIC_SetPriority>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff33 	bl	80035c4 <__NVIC_EnableIRQ>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffa4 	bl	80036bc <SysTick_Config>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7fe fb58 	bl	8001e3c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e316      	b.n	8003dc6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a66      	ldr	r2, [pc, #408]	; (8003938 <HAL_DMA_Init+0x1b8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04a      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a65      	ldr	r2, [pc, #404]	; (800393c <HAL_DMA_Init+0x1bc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d045      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a63      	ldr	r2, [pc, #396]	; (8003940 <HAL_DMA_Init+0x1c0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d040      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a62      	ldr	r2, [pc, #392]	; (8003944 <HAL_DMA_Init+0x1c4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d03b      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a60      	ldr	r2, [pc, #384]	; (8003948 <HAL_DMA_Init+0x1c8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d036      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5f      	ldr	r2, [pc, #380]	; (800394c <HAL_DMA_Init+0x1cc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d031      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5d      	ldr	r2, [pc, #372]	; (8003950 <HAL_DMA_Init+0x1d0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02c      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5c      	ldr	r2, [pc, #368]	; (8003954 <HAL_DMA_Init+0x1d4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d027      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5a      	ldr	r2, [pc, #360]	; (8003958 <HAL_DMA_Init+0x1d8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a59      	ldr	r2, [pc, #356]	; (800395c <HAL_DMA_Init+0x1dc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d01d      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <HAL_DMA_Init+0x1e0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a56      	ldr	r2, [pc, #344]	; (8003964 <HAL_DMA_Init+0x1e4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a54      	ldr	r2, [pc, #336]	; (8003968 <HAL_DMA_Init+0x1e8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a53      	ldr	r2, [pc, #332]	; (800396c <HAL_DMA_Init+0x1ec>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a51      	ldr	r2, [pc, #324]	; (8003970 <HAL_DMA_Init+0x1f0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_DMA_Init+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a50      	ldr	r2, [pc, #320]	; (8003974 <HAL_DMA_Init+0x1f4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_DMA_Init+0xbc>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_DMA_Init+0xbe>
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 813b 	beq.w	8003aba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_DMA_Init+0x1b8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d04a      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a36      	ldr	r2, [pc, #216]	; (800393c <HAL_DMA_Init+0x1bc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d045      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a34      	ldr	r2, [pc, #208]	; (8003940 <HAL_DMA_Init+0x1c0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d040      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a33      	ldr	r2, [pc, #204]	; (8003944 <HAL_DMA_Init+0x1c4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d03b      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a31      	ldr	r2, [pc, #196]	; (8003948 <HAL_DMA_Init+0x1c8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d036      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a30      	ldr	r2, [pc, #192]	; (800394c <HAL_DMA_Init+0x1cc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d031      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <HAL_DMA_Init+0x1d0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02c      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <HAL_DMA_Init+0x1d4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d027      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2b      	ldr	r2, [pc, #172]	; (8003958 <HAL_DMA_Init+0x1d8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2a      	ldr	r2, [pc, #168]	; (800395c <HAL_DMA_Init+0x1dc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a28      	ldr	r2, [pc, #160]	; (8003960 <HAL_DMA_Init+0x1e0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a27      	ldr	r2, [pc, #156]	; (8003964 <HAL_DMA_Init+0x1e4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <HAL_DMA_Init+0x1e8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a24      	ldr	r2, [pc, #144]	; (800396c <HAL_DMA_Init+0x1ec>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <HAL_DMA_Init+0x1f0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_Init+0x174>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a21      	ldr	r2, [pc, #132]	; (8003974 <HAL_DMA_Init+0x1f4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d108      	bne.n	8003906 <HAL_DMA_Init+0x186>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e007      	b.n	8003916 <HAL_DMA_Init+0x196>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003916:	e02f      	b.n	8003978 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003918:	f7fe fa90 	bl	8001e3c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b05      	cmp	r3, #5
 8003924:	d928      	bls.n	8003978 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2203      	movs	r2, #3
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e246      	b.n	8003dc6 <HAL_DMA_Init+0x646>
 8003938:	40020010 	.word	0x40020010
 800393c:	40020028 	.word	0x40020028
 8003940:	40020040 	.word	0x40020040
 8003944:	40020058 	.word	0x40020058
 8003948:	40020070 	.word	0x40020070
 800394c:	40020088 	.word	0x40020088
 8003950:	400200a0 	.word	0x400200a0
 8003954:	400200b8 	.word	0x400200b8
 8003958:	40020410 	.word	0x40020410
 800395c:	40020428 	.word	0x40020428
 8003960:	40020440 	.word	0x40020440
 8003964:	40020458 	.word	0x40020458
 8003968:	40020470 	.word	0x40020470
 800396c:	40020488 	.word	0x40020488
 8003970:	400204a0 	.word	0x400204a0
 8003974:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1c8      	bne.n	8003918 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <HAL_DMA_Init+0x420>)
 8003992:	4013      	ands	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800399e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d107      	bne.n	80039dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4313      	orrs	r3, r2
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039dc:	4b71      	ldr	r3, [pc, #452]	; (8003ba4 <HAL_DMA_Init+0x424>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b71      	ldr	r3, [pc, #452]	; (8003ba8 <HAL_DMA_Init+0x428>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e8:	d328      	bcc.n	8003a3c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b28      	cmp	r3, #40	; 0x28
 80039f0:	d903      	bls.n	80039fa <HAL_DMA_Init+0x27a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b2e      	cmp	r3, #46	; 0x2e
 80039f8:	d917      	bls.n	8003a2a <HAL_DMA_Init+0x2aa>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003a00:	d903      	bls.n	8003a0a <HAL_DMA_Init+0x28a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b42      	cmp	r3, #66	; 0x42
 8003a08:	d90f      	bls.n	8003a2a <HAL_DMA_Init+0x2aa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b46      	cmp	r3, #70	; 0x46
 8003a10:	d903      	bls.n	8003a1a <HAL_DMA_Init+0x29a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b48      	cmp	r3, #72	; 0x48
 8003a18:	d907      	bls.n	8003a2a <HAL_DMA_Init+0x2aa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b4e      	cmp	r3, #78	; 0x4e
 8003a20:	d905      	bls.n	8003a2e <HAL_DMA_Init+0x2ae>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b52      	cmp	r3, #82	; 0x52
 8003a28:	d801      	bhi.n	8003a2e <HAL_DMA_Init+0x2ae>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_DMA_Init+0x2b0>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0307 	bic.w	r3, r3, #7
 8003a52:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d117      	bne.n	8003a96 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f001 f9b9 	bl	8004df0 <DMA_CheckFifoParam>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2240      	movs	r2, #64	; 0x40
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e197      	b.n	8003dc6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 f8f4 	bl	8004c8c <DMA_CalcBaseAndBitshift>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	223f      	movs	r2, #63	; 0x3f
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	e0cd      	b.n	8003c56 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <HAL_DMA_Init+0x42c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <HAL_DMA_Init+0x38a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a39      	ldr	r2, [pc, #228]	; (8003bb0 <HAL_DMA_Init+0x430>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <HAL_DMA_Init+0x38a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a38      	ldr	r2, [pc, #224]	; (8003bb4 <HAL_DMA_Init+0x434>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_Init+0x38a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a36      	ldr	r2, [pc, #216]	; (8003bb8 <HAL_DMA_Init+0x438>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_DMA_Init+0x38a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a35      	ldr	r2, [pc, #212]	; (8003bbc <HAL_DMA_Init+0x43c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_Init+0x38a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a33      	ldr	r2, [pc, #204]	; (8003bc0 <HAL_DMA_Init+0x440>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_DMA_Init+0x38a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <HAL_DMA_Init+0x444>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_Init+0x38a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a30      	ldr	r2, [pc, #192]	; (8003bc8 <HAL_DMA_Init+0x448>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_Init+0x38e>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_DMA_Init+0x390>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8097 	beq.w	8003c44 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a24      	ldr	r2, [pc, #144]	; (8003bac <HAL_DMA_Init+0x42c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d021      	beq.n	8003b64 <HAL_DMA_Init+0x3e4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_DMA_Init+0x430>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01c      	beq.n	8003b64 <HAL_DMA_Init+0x3e4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_DMA_Init+0x434>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d017      	beq.n	8003b64 <HAL_DMA_Init+0x3e4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_DMA_Init+0x438>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d012      	beq.n	8003b64 <HAL_DMA_Init+0x3e4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_DMA_Init+0x43c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00d      	beq.n	8003b64 <HAL_DMA_Init+0x3e4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_DMA_Init+0x440>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d008      	beq.n	8003b64 <HAL_DMA_Init+0x3e4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_DMA_Init+0x444>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <HAL_DMA_Init+0x3e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_DMA_Init+0x448>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_DMA_Init+0x44c>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d020      	beq.n	8003bd0 <HAL_DMA_Init+0x450>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d102      	bne.n	8003b9c <HAL_DMA_Init+0x41c>
 8003b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b9a:	e01a      	b.n	8003bd2 <HAL_DMA_Init+0x452>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e018      	b.n	8003bd2 <HAL_DMA_Init+0x452>
 8003ba0:	fe10803f 	.word	0xfe10803f
 8003ba4:	5c001000 	.word	0x5c001000
 8003ba8:	ffff0000 	.word	0xffff0000
 8003bac:	58025408 	.word	0x58025408
 8003bb0:	5802541c 	.word	0x5802541c
 8003bb4:	58025430 	.word	0x58025430
 8003bb8:	58025444 	.word	0x58025444
 8003bbc:	58025458 	.word	0x58025458
 8003bc0:	5802546c 	.word	0x5802546c
 8003bc4:	58025480 	.word	0x58025480
 8003bc8:	58025494 	.word	0x58025494
 8003bcc:	fffe000f 	.word	0xfffe000f
 8003bd0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68d2      	ldr	r2, [r2, #12]
 8003bd6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003be0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003be8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b6e      	ldr	r3, [pc, #440]	; (8003dd0 <HAL_DMA_Init+0x650>)
 8003c18:	4413      	add	r3, r2
 8003c1a:	4a6e      	ldr	r2, [pc, #440]	; (8003dd4 <HAL_DMA_Init+0x654>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f001 f82f 	bl	8004c8c <DMA_CalcBaseAndBitshift>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	e008      	b.n	8003c56 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0b7      	b.n	8003dc6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a5f      	ldr	r2, [pc, #380]	; (8003dd8 <HAL_DMA_Init+0x658>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d072      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a5d      	ldr	r2, [pc, #372]	; (8003ddc <HAL_DMA_Init+0x65c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d06d      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5c      	ldr	r2, [pc, #368]	; (8003de0 <HAL_DMA_Init+0x660>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d068      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5a      	ldr	r2, [pc, #360]	; (8003de4 <HAL_DMA_Init+0x664>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d063      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a59      	ldr	r2, [pc, #356]	; (8003de8 <HAL_DMA_Init+0x668>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d05e      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a57      	ldr	r2, [pc, #348]	; (8003dec <HAL_DMA_Init+0x66c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d059      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a56      	ldr	r2, [pc, #344]	; (8003df0 <HAL_DMA_Init+0x670>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d054      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a54      	ldr	r2, [pc, #336]	; (8003df4 <HAL_DMA_Init+0x674>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d04f      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a53      	ldr	r2, [pc, #332]	; (8003df8 <HAL_DMA_Init+0x678>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a51      	ldr	r2, [pc, #324]	; (8003dfc <HAL_DMA_Init+0x67c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a50      	ldr	r2, [pc, #320]	; (8003e00 <HAL_DMA_Init+0x680>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <HAL_DMA_Init+0x684>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4d      	ldr	r2, [pc, #308]	; (8003e08 <HAL_DMA_Init+0x688>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4b      	ldr	r2, [pc, #300]	; (8003e0c <HAL_DMA_Init+0x68c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4a      	ldr	r2, [pc, #296]	; (8003e10 <HAL_DMA_Init+0x690>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a48      	ldr	r2, [pc, #288]	; (8003e14 <HAL_DMA_Init+0x694>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a47      	ldr	r2, [pc, #284]	; (8003e18 <HAL_DMA_Init+0x698>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a45      	ldr	r2, [pc, #276]	; (8003e1c <HAL_DMA_Init+0x69c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a44      	ldr	r2, [pc, #272]	; (8003e20 <HAL_DMA_Init+0x6a0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a42      	ldr	r2, [pc, #264]	; (8003e24 <HAL_DMA_Init+0x6a4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a41      	ldr	r2, [pc, #260]	; (8003e28 <HAL_DMA_Init+0x6a8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a3f      	ldr	r2, [pc, #252]	; (8003e2c <HAL_DMA_Init+0x6ac>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3e      	ldr	r2, [pc, #248]	; (8003e30 <HAL_DMA_Init+0x6b0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_Init+0x5c6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <HAL_DMA_Init+0x6b4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_DMA_Init+0x5ca>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_DMA_Init+0x5cc>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d032      	beq.n	8003db6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f001 f8c9 	bl	8004ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d102      	bne.n	8003d64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d010      	beq.n	8003da4 <HAL_DMA_Init+0x624>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d80c      	bhi.n	8003da4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f946 	bl	800501c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	e008      	b.n	8003db6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	a7fdabf8 	.word	0xa7fdabf8
 8003dd4:	cccccccd 	.word	0xcccccccd
 8003dd8:	40020010 	.word	0x40020010
 8003ddc:	40020028 	.word	0x40020028
 8003de0:	40020040 	.word	0x40020040
 8003de4:	40020058 	.word	0x40020058
 8003de8:	40020070 	.word	0x40020070
 8003dec:	40020088 	.word	0x40020088
 8003df0:	400200a0 	.word	0x400200a0
 8003df4:	400200b8 	.word	0x400200b8
 8003df8:	40020410 	.word	0x40020410
 8003dfc:	40020428 	.word	0x40020428
 8003e00:	40020440 	.word	0x40020440
 8003e04:	40020458 	.word	0x40020458
 8003e08:	40020470 	.word	0x40020470
 8003e0c:	40020488 	.word	0x40020488
 8003e10:	400204a0 	.word	0x400204a0
 8003e14:	400204b8 	.word	0x400204b8
 8003e18:	58025408 	.word	0x58025408
 8003e1c:	5802541c 	.word	0x5802541c
 8003e20:	58025430 	.word	0x58025430
 8003e24:	58025444 	.word	0x58025444
 8003e28:	58025458 	.word	0x58025458
 8003e2c:	5802546c 	.word	0x5802546c
 8003e30:	58025480 	.word	0x58025480
 8003e34:	58025494 	.word	0x58025494

08003e38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e44:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <HAL_DMA_IRQHandler+0x1ac>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a67      	ldr	r2, [pc, #412]	; (8003fe8 <HAL_DMA_IRQHandler+0x1b0>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	0a9b      	lsrs	r3, r3, #10
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5f      	ldr	r2, [pc, #380]	; (8003fec <HAL_DMA_IRQHandler+0x1b4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d04a      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5d      	ldr	r2, [pc, #372]	; (8003ff0 <HAL_DMA_IRQHandler+0x1b8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d045      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5c      	ldr	r2, [pc, #368]	; (8003ff4 <HAL_DMA_IRQHandler+0x1bc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d040      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5a      	ldr	r2, [pc, #360]	; (8003ff8 <HAL_DMA_IRQHandler+0x1c0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d03b      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a59      	ldr	r2, [pc, #356]	; (8003ffc <HAL_DMA_IRQHandler+0x1c4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d036      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_DMA_IRQHandler+0x1c8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d031      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a56      	ldr	r2, [pc, #344]	; (8004004 <HAL_DMA_IRQHandler+0x1cc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d02c      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a54      	ldr	r2, [pc, #336]	; (8004008 <HAL_DMA_IRQHandler+0x1d0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d027      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a53      	ldr	r2, [pc, #332]	; (800400c <HAL_DMA_IRQHandler+0x1d4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d022      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a51      	ldr	r2, [pc, #324]	; (8004010 <HAL_DMA_IRQHandler+0x1d8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01d      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a50      	ldr	r2, [pc, #320]	; (8004014 <HAL_DMA_IRQHandler+0x1dc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d018      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <HAL_DMA_IRQHandler+0x1e0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_DMA_IRQHandler+0x1e4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4b      	ldr	r2, [pc, #300]	; (8004020 <HAL_DMA_IRQHandler+0x1e8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4a      	ldr	r2, [pc, #296]	; (8004024 <HAL_DMA_IRQHandler+0x1ec>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a48      	ldr	r2, [pc, #288]	; (8004028 <HAL_DMA_IRQHandler+0x1f0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <HAL_DMA_IRQHandler+0xd6>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_DMA_IRQHandler+0xd8>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 842b 	beq.w	800476c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	2208      	movs	r2, #8
 8003f20:	409a      	lsls	r2, r3
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80a2 	beq.w	8004070 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2e      	ldr	r2, [pc, #184]	; (8003fec <HAL_DMA_IRQHandler+0x1b4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d04a      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ff0 <HAL_DMA_IRQHandler+0x1b8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d045      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2b      	ldr	r2, [pc, #172]	; (8003ff4 <HAL_DMA_IRQHandler+0x1bc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d040      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <HAL_DMA_IRQHandler+0x1c0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d03b      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <HAL_DMA_IRQHandler+0x1c4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d036      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a27      	ldr	r2, [pc, #156]	; (8004000 <HAL_DMA_IRQHandler+0x1c8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d031      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <HAL_DMA_IRQHandler+0x1cc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02c      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a24      	ldr	r2, [pc, #144]	; (8004008 <HAL_DMA_IRQHandler+0x1d0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d027      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a22      	ldr	r2, [pc, #136]	; (800400c <HAL_DMA_IRQHandler+0x1d4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d022      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a21      	ldr	r2, [pc, #132]	; (8004010 <HAL_DMA_IRQHandler+0x1d8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d01d      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <HAL_DMA_IRQHandler+0x1dc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <HAL_DMA_IRQHandler+0x1e0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <HAL_DMA_IRQHandler+0x1e4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <HAL_DMA_IRQHandler+0x1e8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_DMA_IRQHandler+0x1ec>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_DMA_IRQHandler+0x1f0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d12f      	bne.n	800402c <HAL_DMA_IRQHandler+0x1f4>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf14      	ite	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	2300      	moveq	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e02e      	b.n	8004040 <HAL_DMA_IRQHandler+0x208>
 8003fe2:	bf00      	nop
 8003fe4:	24000004 	.word	0x24000004
 8003fe8:	1b4e81b5 	.word	0x1b4e81b5
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2208      	movs	r2, #8
 800405e:	409a      	lsls	r2, r3
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	f043 0201 	orr.w	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	fa22 f303 	lsr.w	r3, r2, r3
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d06e      	beq.n	8004164 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a69      	ldr	r2, [pc, #420]	; (8004230 <HAL_DMA_IRQHandler+0x3f8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d04a      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a67      	ldr	r2, [pc, #412]	; (8004234 <HAL_DMA_IRQHandler+0x3fc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d045      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a66      	ldr	r2, [pc, #408]	; (8004238 <HAL_DMA_IRQHandler+0x400>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d040      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a64      	ldr	r2, [pc, #400]	; (800423c <HAL_DMA_IRQHandler+0x404>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d03b      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a63      	ldr	r2, [pc, #396]	; (8004240 <HAL_DMA_IRQHandler+0x408>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d036      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a61      	ldr	r2, [pc, #388]	; (8004244 <HAL_DMA_IRQHandler+0x40c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d031      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a60      	ldr	r2, [pc, #384]	; (8004248 <HAL_DMA_IRQHandler+0x410>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d02c      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a5e      	ldr	r2, [pc, #376]	; (800424c <HAL_DMA_IRQHandler+0x414>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d027      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5d      	ldr	r2, [pc, #372]	; (8004250 <HAL_DMA_IRQHandler+0x418>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d022      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5b      	ldr	r2, [pc, #364]	; (8004254 <HAL_DMA_IRQHandler+0x41c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01d      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5a      	ldr	r2, [pc, #360]	; (8004258 <HAL_DMA_IRQHandler+0x420>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d018      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_DMA_IRQHandler+0x424>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a57      	ldr	r2, [pc, #348]	; (8004260 <HAL_DMA_IRQHandler+0x428>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a55      	ldr	r2, [pc, #340]	; (8004264 <HAL_DMA_IRQHandler+0x42c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a54      	ldr	r2, [pc, #336]	; (8004268 <HAL_DMA_IRQHandler+0x430>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_DMA_IRQHandler+0x434>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10a      	bne.n	800413c <HAL_DMA_IRQHandler+0x304>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e003      	b.n	8004144 <HAL_DMA_IRQHandler+0x30c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2300      	movs	r3, #0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	2201      	movs	r2, #1
 8004152:	409a      	lsls	r2, r3
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 0202 	orr.w	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2204      	movs	r2, #4
 800416e:	409a      	lsls	r2, r3
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 808f 	beq.w	8004298 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <HAL_DMA_IRQHandler+0x3f8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d04a      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <HAL_DMA_IRQHandler+0x3fc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d045      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a29      	ldr	r2, [pc, #164]	; (8004238 <HAL_DMA_IRQHandler+0x400>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d040      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <HAL_DMA_IRQHandler+0x404>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d03b      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <HAL_DMA_IRQHandler+0x408>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d036      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a24      	ldr	r2, [pc, #144]	; (8004244 <HAL_DMA_IRQHandler+0x40c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d031      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a23      	ldr	r2, [pc, #140]	; (8004248 <HAL_DMA_IRQHandler+0x410>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d02c      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <HAL_DMA_IRQHandler+0x414>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d027      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a20      	ldr	r2, [pc, #128]	; (8004250 <HAL_DMA_IRQHandler+0x418>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_DMA_IRQHandler+0x41c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01d      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <HAL_DMA_IRQHandler+0x420>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_DMA_IRQHandler+0x424>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_DMA_IRQHandler+0x428>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <HAL_DMA_IRQHandler+0x42c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <HAL_DMA_IRQHandler+0x430>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a15      	ldr	r2, [pc, #84]	; (800426c <HAL_DMA_IRQHandler+0x434>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d12a      	bne.n	8004270 <HAL_DMA_IRQHandler+0x438>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e023      	b.n	8004278 <HAL_DMA_IRQHandler+0x440>
 8004230:	40020010 	.word	0x40020010
 8004234:	40020028 	.word	0x40020028
 8004238:	40020040 	.word	0x40020040
 800423c:	40020058 	.word	0x40020058
 8004240:	40020070 	.word	0x40020070
 8004244:	40020088 	.word	0x40020088
 8004248:	400200a0 	.word	0x400200a0
 800424c:	400200b8 	.word	0x400200b8
 8004250:	40020410 	.word	0x40020410
 8004254:	40020428 	.word	0x40020428
 8004258:	40020440 	.word	0x40020440
 800425c:	40020458 	.word	0x40020458
 8004260:	40020470 	.word	0x40020470
 8004264:	40020488 	.word	0x40020488
 8004268:	400204a0 	.word	0x400204a0
 800426c:	400204b8 	.word	0x400204b8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2204      	movs	r2, #4
 8004286:	409a      	lsls	r2, r3
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2210      	movs	r2, #16
 80042a2:	409a      	lsls	r2, r3
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80a6 	beq.w	80043fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a85      	ldr	r2, [pc, #532]	; (80044c8 <HAL_DMA_IRQHandler+0x690>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d04a      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a83      	ldr	r2, [pc, #524]	; (80044cc <HAL_DMA_IRQHandler+0x694>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d045      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a82      	ldr	r2, [pc, #520]	; (80044d0 <HAL_DMA_IRQHandler+0x698>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d040      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a80      	ldr	r2, [pc, #512]	; (80044d4 <HAL_DMA_IRQHandler+0x69c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d03b      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7f      	ldr	r2, [pc, #508]	; (80044d8 <HAL_DMA_IRQHandler+0x6a0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d036      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7d      	ldr	r2, [pc, #500]	; (80044dc <HAL_DMA_IRQHandler+0x6a4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d031      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7c      	ldr	r2, [pc, #496]	; (80044e0 <HAL_DMA_IRQHandler+0x6a8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d02c      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7a      	ldr	r2, [pc, #488]	; (80044e4 <HAL_DMA_IRQHandler+0x6ac>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d027      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a79      	ldr	r2, [pc, #484]	; (80044e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d022      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a77      	ldr	r2, [pc, #476]	; (80044ec <HAL_DMA_IRQHandler+0x6b4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01d      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a76      	ldr	r2, [pc, #472]	; (80044f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d018      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a74      	ldr	r2, [pc, #464]	; (80044f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a73      	ldr	r2, [pc, #460]	; (80044f8 <HAL_DMA_IRQHandler+0x6c0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a71      	ldr	r2, [pc, #452]	; (80044fc <HAL_DMA_IRQHandler+0x6c4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a70      	ldr	r2, [pc, #448]	; (8004500 <HAL_DMA_IRQHandler+0x6c8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6e      	ldr	r2, [pc, #440]	; (8004504 <HAL_DMA_IRQHandler+0x6cc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10a      	bne.n	8004364 <HAL_DMA_IRQHandler+0x52c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e009      	b.n	8004378 <HAL_DMA_IRQHandler+0x540>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d03e      	beq.n	80043fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2210      	movs	r2, #16
 8004386:	409a      	lsls	r2, r3
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d024      	beq.n	80043fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
 80043b8:	e01f      	b.n	80043fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01b      	beq.n	80043fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
 80043ca:	e016      	b.n	80043fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d107      	bne.n	80043ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0208 	bic.w	r2, r2, #8
 80043e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2220      	movs	r2, #32
 8004404:	409a      	lsls	r2, r3
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8110 	beq.w	8004630 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <HAL_DMA_IRQHandler+0x690>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d04a      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <HAL_DMA_IRQHandler+0x694>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d045      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <HAL_DMA_IRQHandler+0x698>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d040      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a28      	ldr	r2, [pc, #160]	; (80044d4 <HAL_DMA_IRQHandler+0x69c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d03b      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <HAL_DMA_IRQHandler+0x6a0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d036      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a25      	ldr	r2, [pc, #148]	; (80044dc <HAL_DMA_IRQHandler+0x6a4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d031      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02c      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <HAL_DMA_IRQHandler+0x6ac>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d027      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a20      	ldr	r2, [pc, #128]	; (80044e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_DMA_IRQHandler+0x6b4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d01d      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_DMA_IRQHandler+0x6b8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <HAL_DMA_IRQHandler+0x6c0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a19      	ldr	r2, [pc, #100]	; (80044fc <HAL_DMA_IRQHandler+0x6c4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a17      	ldr	r2, [pc, #92]	; (8004500 <HAL_DMA_IRQHandler+0x6c8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a16      	ldr	r2, [pc, #88]	; (8004504 <HAL_DMA_IRQHandler+0x6cc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d12b      	bne.n	8004508 <HAL_DMA_IRQHandler+0x6d0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bf14      	ite	ne
 80044be:	2301      	movne	r3, #1
 80044c0:	2300      	moveq	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	e02a      	b.n	800451c <HAL_DMA_IRQHandler+0x6e4>
 80044c6:	bf00      	nop
 80044c8:	40020010 	.word	0x40020010
 80044cc:	40020028 	.word	0x40020028
 80044d0:	40020040 	.word	0x40020040
 80044d4:	40020058 	.word	0x40020058
 80044d8:	40020070 	.word	0x40020070
 80044dc:	40020088 	.word	0x40020088
 80044e0:	400200a0 	.word	0x400200a0
 80044e4:	400200b8 	.word	0x400200b8
 80044e8:	40020410 	.word	0x40020410
 80044ec:	40020428 	.word	0x40020428
 80044f0:	40020440 	.word	0x40020440
 80044f4:	40020458 	.word	0x40020458
 80044f8:	40020470 	.word	0x40020470
 80044fc:	40020488 	.word	0x40020488
 8004500:	400204a0 	.word	0x400204a0
 8004504:	400204b8 	.word	0x400204b8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8087 	beq.w	8004630 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2220      	movs	r2, #32
 800452c:	409a      	lsls	r2, r3
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b04      	cmp	r3, #4
 800453c:	d139      	bne.n	80045b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0216 	bic.w	r2, r2, #22
 800454c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800455c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_DMA_IRQHandler+0x736>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0208 	bic.w	r2, r2, #8
 800457c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	223f      	movs	r2, #63	; 0x3f
 8004588:	409a      	lsls	r2, r3
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 834a 	beq.w	8004c3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
          }
          return;
 80045b0:	e344      	b.n	8004c3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d018      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02c      	beq.n	8004630 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
 80045de:	e027      	b.n	8004630 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d023      	beq.n	8004630 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
 80045f0:	e01e      	b.n	8004630 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10f      	bne.n	8004620 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0210 	bic.w	r2, r2, #16
 800460e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8306 	beq.w	8004c46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8088 	beq.w	8004758 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2204      	movs	r2, #4
 800464c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <HAL_DMA_IRQHandler+0xa08>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d04a      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a79      	ldr	r2, [pc, #484]	; (8004844 <HAL_DMA_IRQHandler+0xa0c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d045      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_DMA_IRQHandler+0xa10>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d040      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a76      	ldr	r2, [pc, #472]	; (800484c <HAL_DMA_IRQHandler+0xa14>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d03b      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a74      	ldr	r2, [pc, #464]	; (8004850 <HAL_DMA_IRQHandler+0xa18>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d036      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a73      	ldr	r2, [pc, #460]	; (8004854 <HAL_DMA_IRQHandler+0xa1c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d031      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a71      	ldr	r2, [pc, #452]	; (8004858 <HAL_DMA_IRQHandler+0xa20>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02c      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a70      	ldr	r2, [pc, #448]	; (800485c <HAL_DMA_IRQHandler+0xa24>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d027      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a6e      	ldr	r2, [pc, #440]	; (8004860 <HAL_DMA_IRQHandler+0xa28>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d022      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6d      	ldr	r2, [pc, #436]	; (8004864 <HAL_DMA_IRQHandler+0xa2c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d01d      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6b      	ldr	r2, [pc, #428]	; (8004868 <HAL_DMA_IRQHandler+0xa30>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d018      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6a      	ldr	r2, [pc, #424]	; (800486c <HAL_DMA_IRQHandler+0xa34>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a68      	ldr	r2, [pc, #416]	; (8004870 <HAL_DMA_IRQHandler+0xa38>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a67      	ldr	r2, [pc, #412]	; (8004874 <HAL_DMA_IRQHandler+0xa3c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a65      	ldr	r2, [pc, #404]	; (8004878 <HAL_DMA_IRQHandler+0xa40>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a64      	ldr	r2, [pc, #400]	; (800487c <HAL_DMA_IRQHandler+0xa44>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d108      	bne.n	8004702 <HAL_DMA_IRQHandler+0x8ca>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e007      	b.n	8004712 <HAL_DMA_IRQHandler+0x8da>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3301      	adds	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	429a      	cmp	r2, r3
 800471c:	d307      	bcc.n	800472e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f2      	bne.n	8004712 <HAL_DMA_IRQHandler+0x8da>
 800472c:	e000      	b.n	8004730 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800472e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2203      	movs	r2, #3
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004746:	e003      	b.n	8004750 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8272 	beq.w	8004c46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
 800476a:	e26c      	b.n	8004c46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a43      	ldr	r2, [pc, #268]	; (8004880 <HAL_DMA_IRQHandler+0xa48>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMA_IRQHandler+0x984>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a42      	ldr	r2, [pc, #264]	; (8004884 <HAL_DMA_IRQHandler+0xa4c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01d      	beq.n	80047bc <HAL_DMA_IRQHandler+0x984>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a40      	ldr	r2, [pc, #256]	; (8004888 <HAL_DMA_IRQHandler+0xa50>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_DMA_IRQHandler+0x984>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a3f      	ldr	r2, [pc, #252]	; (800488c <HAL_DMA_IRQHandler+0xa54>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_DMA_IRQHandler+0x984>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a3d      	ldr	r2, [pc, #244]	; (8004890 <HAL_DMA_IRQHandler+0xa58>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_DMA_IRQHandler+0x984>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <HAL_DMA_IRQHandler+0xa5c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_DMA_IRQHandler+0x984>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3a      	ldr	r2, [pc, #232]	; (8004898 <HAL_DMA_IRQHandler+0xa60>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_DMA_IRQHandler+0x984>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a39      	ldr	r2, [pc, #228]	; (800489c <HAL_DMA_IRQHandler+0xa64>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x988>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_DMA_IRQHandler+0x98a>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 823f 	beq.w	8004c46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2204      	movs	r2, #4
 80047da:	409a      	lsls	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80cd 	beq.w	8004980 <HAL_DMA_IRQHandler+0xb48>
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80c7 	beq.w	8004980 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2204      	movs	r2, #4
 80047fc:	409a      	lsls	r2, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d049      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8210 	beq.w	8004c40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004828:	e20a      	b.n	8004c40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8206 	beq.w	8004c40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483c:	e200      	b.n	8004c40 <HAL_DMA_IRQHandler+0xe08>
 800483e:	bf00      	nop
 8004840:	40020010 	.word	0x40020010
 8004844:	40020028 	.word	0x40020028
 8004848:	40020040 	.word	0x40020040
 800484c:	40020058 	.word	0x40020058
 8004850:	40020070 	.word	0x40020070
 8004854:	40020088 	.word	0x40020088
 8004858:	400200a0 	.word	0x400200a0
 800485c:	400200b8 	.word	0x400200b8
 8004860:	40020410 	.word	0x40020410
 8004864:	40020428 	.word	0x40020428
 8004868:	40020440 	.word	0x40020440
 800486c:	40020458 	.word	0x40020458
 8004870:	40020470 	.word	0x40020470
 8004874:	40020488 	.word	0x40020488
 8004878:	400204a0 	.word	0x400204a0
 800487c:	400204b8 	.word	0x400204b8
 8004880:	58025408 	.word	0x58025408
 8004884:	5802541c 	.word	0x5802541c
 8004888:	58025430 	.word	0x58025430
 800488c:	58025444 	.word	0x58025444
 8004890:	58025458 	.word	0x58025458
 8004894:	5802546c 	.word	0x5802546c
 8004898:	58025480 	.word	0x58025480
 800489c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d160      	bne.n	800496c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a8c      	ldr	r2, [pc, #560]	; (8004ae0 <HAL_DMA_IRQHandler+0xca8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d04a      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a8a      	ldr	r2, [pc, #552]	; (8004ae4 <HAL_DMA_IRQHandler+0xcac>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d045      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a89      	ldr	r2, [pc, #548]	; (8004ae8 <HAL_DMA_IRQHandler+0xcb0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d040      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a87      	ldr	r2, [pc, #540]	; (8004aec <HAL_DMA_IRQHandler+0xcb4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d03b      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a86      	ldr	r2, [pc, #536]	; (8004af0 <HAL_DMA_IRQHandler+0xcb8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d036      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a84      	ldr	r2, [pc, #528]	; (8004af4 <HAL_DMA_IRQHandler+0xcbc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a83      	ldr	r2, [pc, #524]	; (8004af8 <HAL_DMA_IRQHandler+0xcc0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d02c      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a81      	ldr	r2, [pc, #516]	; (8004afc <HAL_DMA_IRQHandler+0xcc4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d027      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a80      	ldr	r2, [pc, #512]	; (8004b00 <HAL_DMA_IRQHandler+0xcc8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7e      	ldr	r2, [pc, #504]	; (8004b04 <HAL_DMA_IRQHandler+0xccc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01d      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7d      	ldr	r2, [pc, #500]	; (8004b08 <HAL_DMA_IRQHandler+0xcd0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d018      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7b      	ldr	r2, [pc, #492]	; (8004b0c <HAL_DMA_IRQHandler+0xcd4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7a      	ldr	r2, [pc, #488]	; (8004b10 <HAL_DMA_IRQHandler+0xcd8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a78      	ldr	r2, [pc, #480]	; (8004b14 <HAL_DMA_IRQHandler+0xcdc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a77      	ldr	r2, [pc, #476]	; (8004b18 <HAL_DMA_IRQHandler+0xce0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a75      	ldr	r2, [pc, #468]	; (8004b1c <HAL_DMA_IRQHandler+0xce4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <HAL_DMA_IRQHandler+0xb24>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0208 	bic.w	r2, r2, #8
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e007      	b.n	800496c <HAL_DMA_IRQHandler+0xb34>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0204 	bic.w	r2, r2, #4
 800496a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8165 	beq.w	8004c40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497e:	e15f      	b.n	8004c40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2202      	movs	r2, #2
 800498a:	409a      	lsls	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80c5 	beq.w	8004b20 <HAL_DMA_IRQHandler+0xce8>
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80bf 	beq.w	8004b20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2202      	movs	r2, #2
 80049ac:	409a      	lsls	r2, r3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d018      	beq.n	80049ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 813a 	beq.w	8004c44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d8:	e134      	b.n	8004c44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8130 	beq.w	8004c44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ec:	e12a      	b.n	8004c44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d168      	bne.n	8004aca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a38      	ldr	r2, [pc, #224]	; (8004ae0 <HAL_DMA_IRQHandler+0xca8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d04a      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a37      	ldr	r2, [pc, #220]	; (8004ae4 <HAL_DMA_IRQHandler+0xcac>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d045      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a35      	ldr	r2, [pc, #212]	; (8004ae8 <HAL_DMA_IRQHandler+0xcb0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d040      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a34      	ldr	r2, [pc, #208]	; (8004aec <HAL_DMA_IRQHandler+0xcb4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d03b      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a32      	ldr	r2, [pc, #200]	; (8004af0 <HAL_DMA_IRQHandler+0xcb8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d036      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a31      	ldr	r2, [pc, #196]	; (8004af4 <HAL_DMA_IRQHandler+0xcbc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d031      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <HAL_DMA_IRQHandler+0xcc0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02c      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <HAL_DMA_IRQHandler+0xcc4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d027      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <HAL_DMA_IRQHandler+0xcc8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d022      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2b      	ldr	r2, [pc, #172]	; (8004b04 <HAL_DMA_IRQHandler+0xccc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01d      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <HAL_DMA_IRQHandler+0xcd0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d018      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <HAL_DMA_IRQHandler+0xcd4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <HAL_DMA_IRQHandler+0xcd8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <HAL_DMA_IRQHandler+0xcdc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_DMA_IRQHandler+0xce0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xc60>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <HAL_DMA_IRQHandler+0xce4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d108      	bne.n	8004aaa <HAL_DMA_IRQHandler+0xc72>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0214 	bic.w	r2, r2, #20
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e007      	b.n	8004aba <HAL_DMA_IRQHandler+0xc82>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 020a 	bic.w	r2, r2, #10
 8004ab8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80b8 	beq.w	8004c44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004adc:	e0b2      	b.n	8004c44 <HAL_DMA_IRQHandler+0xe0c>
 8004ade:	bf00      	nop
 8004ae0:	40020010 	.word	0x40020010
 8004ae4:	40020028 	.word	0x40020028
 8004ae8:	40020040 	.word	0x40020040
 8004aec:	40020058 	.word	0x40020058
 8004af0:	40020070 	.word	0x40020070
 8004af4:	40020088 	.word	0x40020088
 8004af8:	400200a0 	.word	0x400200a0
 8004afc:	400200b8 	.word	0x400200b8
 8004b00:	40020410 	.word	0x40020410
 8004b04:	40020428 	.word	0x40020428
 8004b08:	40020440 	.word	0x40020440
 8004b0c:	40020458 	.word	0x40020458
 8004b10:	40020470 	.word	0x40020470
 8004b14:	40020488 	.word	0x40020488
 8004b18:	400204a0 	.word	0x400204a0
 8004b1c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2208      	movs	r2, #8
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8088 	beq.w	8004c46 <HAL_DMA_IRQHandler+0xe0e>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8082 	beq.w	8004c46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a41      	ldr	r2, [pc, #260]	; (8004c4c <HAL_DMA_IRQHandler+0xe14>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d04a      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a3f      	ldr	r2, [pc, #252]	; (8004c50 <HAL_DMA_IRQHandler+0xe18>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d045      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a3e      	ldr	r2, [pc, #248]	; (8004c54 <HAL_DMA_IRQHandler+0xe1c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d040      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3c      	ldr	r2, [pc, #240]	; (8004c58 <HAL_DMA_IRQHandler+0xe20>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d03b      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3b      	ldr	r2, [pc, #236]	; (8004c5c <HAL_DMA_IRQHandler+0xe24>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d036      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a39      	ldr	r2, [pc, #228]	; (8004c60 <HAL_DMA_IRQHandler+0xe28>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d031      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a38      	ldr	r2, [pc, #224]	; (8004c64 <HAL_DMA_IRQHandler+0xe2c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d02c      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a36      	ldr	r2, [pc, #216]	; (8004c68 <HAL_DMA_IRQHandler+0xe30>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d027      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a35      	ldr	r2, [pc, #212]	; (8004c6c <HAL_DMA_IRQHandler+0xe34>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d022      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a33      	ldr	r2, [pc, #204]	; (8004c70 <HAL_DMA_IRQHandler+0xe38>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01d      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a32      	ldr	r2, [pc, #200]	; (8004c74 <HAL_DMA_IRQHandler+0xe3c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d018      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <HAL_DMA_IRQHandler+0xe40>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <HAL_DMA_IRQHandler+0xe44>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2d      	ldr	r2, [pc, #180]	; (8004c80 <HAL_DMA_IRQHandler+0xe48>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <HAL_DMA_IRQHandler+0xe4c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <HAL_DMA_IRQHandler+0xe50>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d108      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0xdbc>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 021c 	bic.w	r2, r2, #28
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e007      	b.n	8004c04 <HAL_DMA_IRQHandler+0xdcc>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 020e 	bic.w	r2, r2, #14
 8004c02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
 8004c3a:	e004      	b.n	8004c46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c3c:	bf00      	nop
 8004c3e:	e002      	b.n	8004c46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c46:	3728      	adds	r7, #40	; 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40020010 	.word	0x40020010
 8004c50:	40020028 	.word	0x40020028
 8004c54:	40020040 	.word	0x40020040
 8004c58:	40020058 	.word	0x40020058
 8004c5c:	40020070 	.word	0x40020070
 8004c60:	40020088 	.word	0x40020088
 8004c64:	400200a0 	.word	0x400200a0
 8004c68:	400200b8 	.word	0x400200b8
 8004c6c:	40020410 	.word	0x40020410
 8004c70:	40020428 	.word	0x40020428
 8004c74:	40020440 	.word	0x40020440
 8004c78:	40020458 	.word	0x40020458
 8004c7c:	40020470 	.word	0x40020470
 8004c80:	40020488 	.word	0x40020488
 8004c84:	400204a0 	.word	0x400204a0
 8004c88:	400204b8 	.word	0x400204b8

08004c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a42      	ldr	r2, [pc, #264]	; (8004da4 <DMA_CalcBaseAndBitshift+0x118>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d04a      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a41      	ldr	r2, [pc, #260]	; (8004da8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d045      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3f      	ldr	r2, [pc, #252]	; (8004dac <DMA_CalcBaseAndBitshift+0x120>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d040      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3e      	ldr	r2, [pc, #248]	; (8004db0 <DMA_CalcBaseAndBitshift+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d03b      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3c      	ldr	r2, [pc, #240]	; (8004db4 <DMA_CalcBaseAndBitshift+0x128>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d036      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3b      	ldr	r2, [pc, #236]	; (8004db8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d031      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a39      	ldr	r2, [pc, #228]	; (8004dbc <DMA_CalcBaseAndBitshift+0x130>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02c      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a38      	ldr	r2, [pc, #224]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x134>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d027      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a36      	ldr	r2, [pc, #216]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x138>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a35      	ldr	r2, [pc, #212]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01d      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a33      	ldr	r2, [pc, #204]	; (8004dcc <DMA_CalcBaseAndBitshift+0x140>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a32      	ldr	r2, [pc, #200]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x144>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a30      	ldr	r2, [pc, #192]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x148>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2f      	ldr	r2, [pc, #188]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2d      	ldr	r2, [pc, #180]	; (8004ddc <DMA_CalcBaseAndBitshift+0x150>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <DMA_CalcBaseAndBitshift+0x154>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d101      	bne.n	8004d38 <DMA_CalcBaseAndBitshift+0xac>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <DMA_CalcBaseAndBitshift+0xae>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d024      	beq.n	8004d88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3b10      	subs	r3, #16
 8004d46:	4a27      	ldr	r2, [pc, #156]	; (8004de4 <DMA_CalcBaseAndBitshift+0x158>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d58:	5cd3      	ldrb	r3, [r2, r3]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d908      	bls.n	8004d78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <DMA_CalcBaseAndBitshift+0x160>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	659a      	str	r2, [r3, #88]	; 0x58
 8004d76:	e00d      	b.n	8004d94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <DMA_CalcBaseAndBitshift+0x160>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6593      	str	r3, [r2, #88]	; 0x58
 8004d86:	e005      	b.n	8004d94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40020010 	.word	0x40020010
 8004da8:	40020028 	.word	0x40020028
 8004dac:	40020040 	.word	0x40020040
 8004db0:	40020058 	.word	0x40020058
 8004db4:	40020070 	.word	0x40020070
 8004db8:	40020088 	.word	0x40020088
 8004dbc:	400200a0 	.word	0x400200a0
 8004dc0:	400200b8 	.word	0x400200b8
 8004dc4:	40020410 	.word	0x40020410
 8004dc8:	40020428 	.word	0x40020428
 8004dcc:	40020440 	.word	0x40020440
 8004dd0:	40020458 	.word	0x40020458
 8004dd4:	40020470 	.word	0x40020470
 8004dd8:	40020488 	.word	0x40020488
 8004ddc:	400204a0 	.word	0x400204a0
 8004de0:	400204b8 	.word	0x400204b8
 8004de4:	aaaaaaab 	.word	0xaaaaaaab
 8004de8:	080116d0 	.word	0x080116d0
 8004dec:	fffffc00 	.word	0xfffffc00

08004df0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d120      	bne.n	8004e46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d858      	bhi.n	8004ebe <DMA_CheckFifoParam+0xce>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <DMA_CheckFifoParam+0x24>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e37 	.word	0x08004e37
 8004e1c:	08004e25 	.word	0x08004e25
 8004e20:	08004ebf 	.word	0x08004ebf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d048      	beq.n	8004ec2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e34:	e045      	b.n	8004ec2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e3e:	d142      	bne.n	8004ec6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e44:	e03f      	b.n	8004ec6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4e:	d123      	bne.n	8004e98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d838      	bhi.n	8004eca <DMA_CheckFifoParam+0xda>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <DMA_CheckFifoParam+0x70>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e77 	.word	0x08004e77
 8004e68:	08004e71 	.word	0x08004e71
 8004e6c:	08004e89 	.word	0x08004e89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
        break;
 8004e74:	e030      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d025      	beq.n	8004ece <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e86:	e022      	b.n	8004ece <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e90:	d11f      	bne.n	8004ed2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e96:	e01c      	b.n	8004ed2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d902      	bls.n	8004ea6 <DMA_CheckFifoParam+0xb6>
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d003      	beq.n	8004eac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ea4:	e018      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eaa:	e015      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00e      	beq.n	8004ed6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
    break;
 8004ebc:	e00b      	b.n	8004ed6 <DMA_CheckFifoParam+0xe6>
        break;
 8004ebe:	bf00      	nop
 8004ec0:	e00a      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ec2:	bf00      	nop
 8004ec4:	e008      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e006      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e004      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e002      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ed6:	bf00      	nop
    }
  }

  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a38      	ldr	r2, [pc, #224]	; (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a36      	ldr	r2, [pc, #216]	; (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a35      	ldr	r2, [pc, #212]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a33      	ldr	r2, [pc, #204]	; (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a32      	ldr	r2, [pc, #200]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a30      	ldr	r2, [pc, #192]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01a      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	3b08      	subs	r3, #8
 8004f58:	4a28      	ldr	r2, [pc, #160]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4b26      	ldr	r3, [pc, #152]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a24      	ldr	r2, [pc, #144]	; (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f84:	e024      	b.n	8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	3b10      	subs	r3, #16
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d806      	bhi.n	8004fae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d902      	bls.n	8004fae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3308      	adds	r3, #8
 8004fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4b18      	ldr	r3, [pc, #96]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a16      	ldr	r2, [pc, #88]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2201      	movs	r2, #1
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	58025408 	.word	0x58025408
 8004fe0:	5802541c 	.word	0x5802541c
 8004fe4:	58025430 	.word	0x58025430
 8004fe8:	58025444 	.word	0x58025444
 8004fec:	58025458 	.word	0x58025458
 8004ff0:	5802546c 	.word	0x5802546c
 8004ff4:	58025480 	.word	0x58025480
 8004ff8:	58025494 	.word	0x58025494
 8004ffc:	cccccccd 	.word	0xcccccccd
 8005000:	16009600 	.word	0x16009600
 8005004:	58025880 	.word	0x58025880
 8005008:	aaaaaaab 	.word	0xaaaaaaab
 800500c:	400204b8 	.word	0x400204b8
 8005010:	4002040f 	.word	0x4002040f
 8005014:	10008200 	.word	0x10008200
 8005018:	40020880 	.word	0x40020880

0800501c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d04a      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d847      	bhi.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d022      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a24      	ldr	r2, [pc, #144]	; (80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d01d      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a22      	ldr	r2, [pc, #136]	; (80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d018      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00e      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d009      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050a4:	671a      	str	r2, [r3, #112]	; 0x70
 80050a6:	e009      	b.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	461a      	mov	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a11      	ldr	r2, [pc, #68]	; (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3b01      	subs	r3, #1
 80050c0:	2201      	movs	r2, #1
 80050c2:	409a      	lsls	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	58025408 	.word	0x58025408
 80050d8:	5802541c 	.word	0x5802541c
 80050dc:	58025430 	.word	0x58025430
 80050e0:	58025444 	.word	0x58025444
 80050e4:	58025458 	.word	0x58025458
 80050e8:	5802546c 	.word	0x5802546c
 80050ec:	58025480 	.word	0x58025480
 80050f0:	58025494 	.word	0x58025494
 80050f4:	1600963f 	.word	0x1600963f
 80050f8:	58025940 	.word	0x58025940
 80050fc:	1000823f 	.word	0x1000823f
 8005100:	40020940 	.word	0x40020940

08005104 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b098      	sub	sp, #96	; 0x60
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800510c:	4a84      	ldr	r2, [pc, #528]	; (8005320 <HAL_FDCAN_Init+0x21c>)
 800510e:	f107 030c 	add.w	r3, r7, #12
 8005112:	4611      	mov	r1, r2
 8005114:	224c      	movs	r2, #76	; 0x4c
 8005116:	4618      	mov	r0, r3
 8005118:	f00b fa9c 	bl	8010654 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e1ca      	b.n	80054bc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7e      	ldr	r2, [pc, #504]	; (8005324 <HAL_FDCAN_Init+0x220>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d106      	bne.n	800513e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fc fa04 	bl	8001560 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0210 	bic.w	r2, r2, #16
 8005166:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005168:	f7fc fe68 	bl	8001e3c <HAL_GetTick>
 800516c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800516e:	e014      	b.n	800519a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005170:	f7fc fe64 	bl	8001e3c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b0a      	cmp	r3, #10
 800517c:	d90d      	bls.n	800519a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005184:	f043 0201 	orr.w	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e190      	b.n	80054bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d0e3      	beq.n	8005170 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051b8:	f7fc fe40 	bl	8001e3c <HAL_GetTick>
 80051bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80051be:	e014      	b.n	80051ea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80051c0:	f7fc fe3c 	bl	8001e3c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b0a      	cmp	r3, #10
 80051cc:	d90d      	bls.n	80051ea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051d4:	f043 0201 	orr.w	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2203      	movs	r2, #3
 80051e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e168      	b.n	80054bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0e3      	beq.n	80051c0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0202 	orr.w	r2, r2, #2
 8005206:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	7c1b      	ldrb	r3, [r3, #16]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d108      	bne.n	8005222 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521e:	619a      	str	r2, [r3, #24]
 8005220:	e007      	b.n	8005232 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005230:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7c5b      	ldrb	r3, [r3, #17]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d108      	bne.n	800524c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005248:	619a      	str	r2, [r3, #24]
 800524a:	e007      	b.n	800525c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800525a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7c9b      	ldrb	r3, [r3, #18]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d108      	bne.n	8005276 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005272:	619a      	str	r2, [r3, #24]
 8005274:	e007      	b.n	8005286 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005284:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80052aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0210 	bic.w	r2, r2, #16
 80052ba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d108      	bne.n	80052d6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0204 	orr.w	r2, r2, #4
 80052d2:	619a      	str	r2, [r3, #24]
 80052d4:	e030      	b.n	8005338 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d02c      	beq.n	8005338 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d020      	beq.n	8005328 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0210 	orr.w	r2, r2, #16
 8005304:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d114      	bne.n	8005338 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0220 	orr.w	r2, r2, #32
 800531c:	619a      	str	r2, [r3, #24]
 800531e:	e00b      	b.n	8005338 <HAL_FDCAN_Init+0x234>
 8005320:	0801162c 	.word	0x0801162c
 8005324:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0220 	orr.w	r2, r2, #32
 8005336:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	3b01      	subs	r3, #1
 800533e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	3b01      	subs	r3, #1
 8005346:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005348:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005350:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	3b01      	subs	r3, #1
 800535a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005360:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005362:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536c:	d115      	bne.n	800539a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	3b01      	subs	r3, #1
 800537a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800537c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	3b01      	subs	r3, #1
 8005384:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005386:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	3b01      	subs	r3, #1
 8005390:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005396:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005398:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	4413      	add	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d012      	beq.n	80053ec <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80053ce:	f023 0107 	bic.w	r1, r3, #7
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053dc:	4413      	add	r3, r2
 80053de:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d012      	beq.n	800541a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80053fc:	f023 0107 	bic.w	r1, r3, #7
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800540a:	4413      	add	r3, r2
 800540c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800542a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005438:	4413      	add	r3, r2
 800543a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800543e:	011a      	lsls	r2, r3, #4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800545a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005468:	4413      	add	r3, r2
 800546a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <HAL_FDCAN_Init+0x3c0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d107      	bne.n	8005494 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f022 0203 	bic.w	r2, r2, #3
 8005492:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f80b 	bl	80054c8 <FDCAN_CalcultateRamBlockAddresses>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80054b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3760      	adds	r7, #96	; 0x60
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	4000a000 	.word	0x4000a000

080054c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80054de:	4ba7      	ldr	r3, [pc, #668]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0091      	lsls	r1, r2, #2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	430b      	orrs	r3, r1
 80054ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	041a      	lsls	r2, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	4413      	add	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800551e:	4b97      	ldr	r3, [pc, #604]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005520:	4013      	ands	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0091      	lsls	r1, r2, #2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	430b      	orrs	r3, r1
 800552c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005540:	041a      	lsls	r2, r3, #16
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4413      	add	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005560:	4b86      	ldr	r3, [pc, #536]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	0091      	lsls	r1, r2, #2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	430b      	orrs	r3, r1
 800556e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800557a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	041a      	lsls	r2, r3, #16
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4413      	add	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80055a8:	4b74      	ldr	r3, [pc, #464]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	0091      	lsls	r1, r2, #2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ca:	041a      	lsls	r2, r3, #16
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80055f0:	4b62      	ldr	r3, [pc, #392]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	0091      	lsls	r1, r2, #2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	430b      	orrs	r3, r1
 80055fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800561c:	4b57      	ldr	r3, [pc, #348]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800561e:	4013      	ands	r3, r2
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	0091      	lsls	r1, r2, #2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	430b      	orrs	r3, r1
 800562a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005636:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	041a      	lsls	r2, r3, #16
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	4413      	add	r3, r2
 8005654:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800565e:	4b47      	ldr	r3, [pc, #284]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005660:	4013      	ands	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0091      	lsls	r1, r2, #2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	430b      	orrs	r3, r1
 800566c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005678:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005680:	041a      	lsls	r2, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005694:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	061a      	lsls	r2, r3, #24
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ac:	4b34      	ldr	r3, [pc, #208]	; (8005780 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80056ae:	4413      	add	r3, r2
 80056b0:	009a      	lsls	r2, r3, #2
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	441a      	add	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800575e:	fb01 f303 	mul.w	r3, r1, r3
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d915      	bls.n	80057a4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005778:	e006      	b.n	8005788 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800577a:	bf00      	nop
 800577c:	ffff0003 	.word	0xffff0003
 8005780:	10002b00 	.word	0x10002b00
 8005784:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2203      	movs	r2, #3
 800579c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e010      	b.n	80057c6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e005      	b.n	80057b8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3304      	adds	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d3f3      	bcc.n	80057ac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop

080057d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057e2:	4b89      	ldr	r3, [pc, #548]	; (8005a08 <HAL_GPIO_Init+0x234>)
 80057e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057e6:	e194      	b.n	8005b12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	fa01 f303 	lsl.w	r3, r1, r3
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8186 	beq.w	8005b0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d005      	beq.n	8005818 <HAL_GPIO_Init+0x44>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d130      	bne.n	800587a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	2203      	movs	r2, #3
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800584e:	2201      	movs	r2, #1
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	f003 0201 	and.w	r2, r3, #1
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4313      	orrs	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b03      	cmp	r3, #3
 8005884:	d017      	beq.n	80058b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	2203      	movs	r2, #3
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d123      	bne.n	800590a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	08da      	lsrs	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3208      	adds	r2, #8
 80058ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	220f      	movs	r2, #15
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4013      	ands	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	08da      	lsrs	r2, r3, #3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3208      	adds	r2, #8
 8005904:	69b9      	ldr	r1, [r7, #24]
 8005906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2203      	movs	r2, #3
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f003 0203 	and.w	r2, r3, #3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 80e0 	beq.w	8005b0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800594c:	4b2f      	ldr	r3, [pc, #188]	; (8005a0c <HAL_GPIO_Init+0x238>)
 800594e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005952:	4a2e      	ldr	r2, [pc, #184]	; (8005a0c <HAL_GPIO_Init+0x238>)
 8005954:	f043 0302 	orr.w	r3, r3, #2
 8005958:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800595c:	4b2b      	ldr	r3, [pc, #172]	; (8005a0c <HAL_GPIO_Init+0x238>)
 800595e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800596a:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <HAL_GPIO_Init+0x23c>)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	089b      	lsrs	r3, r3, #2
 8005970:	3302      	adds	r3, #2
 8005972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	220f      	movs	r2, #15
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4013      	ands	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <HAL_GPIO_Init+0x240>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d052      	beq.n	8005a3c <HAL_GPIO_Init+0x268>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1f      	ldr	r2, [pc, #124]	; (8005a18 <HAL_GPIO_Init+0x244>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d031      	beq.n	8005a02 <HAL_GPIO_Init+0x22e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <HAL_GPIO_Init+0x248>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02b      	beq.n	80059fe <HAL_GPIO_Init+0x22a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <HAL_GPIO_Init+0x24c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d025      	beq.n	80059fa <HAL_GPIO_Init+0x226>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <HAL_GPIO_Init+0x250>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01f      	beq.n	80059f6 <HAL_GPIO_Init+0x222>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <HAL_GPIO_Init+0x254>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d019      	beq.n	80059f2 <HAL_GPIO_Init+0x21e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1a      	ldr	r2, [pc, #104]	; (8005a2c <HAL_GPIO_Init+0x258>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_GPIO_Init+0x21a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a19      	ldr	r2, [pc, #100]	; (8005a30 <HAL_GPIO_Init+0x25c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00d      	beq.n	80059ea <HAL_GPIO_Init+0x216>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <HAL_GPIO_Init+0x260>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <HAL_GPIO_Init+0x212>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <HAL_GPIO_Init+0x264>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d101      	bne.n	80059e2 <HAL_GPIO_Init+0x20e>
 80059de:	2309      	movs	r3, #9
 80059e0:	e02d      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059e2:	230a      	movs	r3, #10
 80059e4:	e02b      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059e6:	2308      	movs	r3, #8
 80059e8:	e029      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059ea:	2307      	movs	r3, #7
 80059ec:	e027      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059ee:	2306      	movs	r3, #6
 80059f0:	e025      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059f2:	2305      	movs	r3, #5
 80059f4:	e023      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059f6:	2304      	movs	r3, #4
 80059f8:	e021      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e01f      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e01d      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e01b      	b.n	8005a3e <HAL_GPIO_Init+0x26a>
 8005a06:	bf00      	nop
 8005a08:	58000080 	.word	0x58000080
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	58000400 	.word	0x58000400
 8005a14:	58020000 	.word	0x58020000
 8005a18:	58020400 	.word	0x58020400
 8005a1c:	58020800 	.word	0x58020800
 8005a20:	58020c00 	.word	0x58020c00
 8005a24:	58021000 	.word	0x58021000
 8005a28:	58021400 	.word	0x58021400
 8005a2c:	58021800 	.word	0x58021800
 8005a30:	58021c00 	.word	0x58021c00
 8005a34:	58022000 	.word	0x58022000
 8005a38:	58022400 	.word	0x58022400
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	f002 0203 	and.w	r2, r2, #3
 8005a44:	0092      	lsls	r2, r2, #2
 8005a46:	4093      	lsls	r3, r2
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a4e:	4938      	ldr	r1, [pc, #224]	; (8005b30 <HAL_GPIO_Init+0x35c>)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	3302      	adds	r3, #2
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f47f ae63 	bne.w	80057e8 <HAL_GPIO_Init+0x14>
  }
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	3724      	adds	r7, #36	; 0x24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	58000400 	.word	0x58000400

08005b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
 8005b40:	4613      	mov	r3, r2
 8005b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b44:	787b      	ldrb	r3, [r7, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b50:	e003      	b.n	8005b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b52:	887b      	ldrh	r3, [r7, #2]
 8005b54:	041a      	lsls	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	619a      	str	r2, [r3, #24]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e07f      	b.n	8005c7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fb fdae 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d107      	bne.n	8005be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bde:	609a      	str	r2, [r3, #8]
 8005be0:	e006      	b.n	8005bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d104      	bne.n	8005c02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <HAL_I2C_Init+0x11c>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	02008000 	.word	0x02008000

08005c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d138      	bne.n	8005d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e032      	b.n	8005d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2224      	movs	r2, #36	; 0x24
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d139      	bne.n	8005da8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e033      	b.n	8005daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2224      	movs	r2, #36	; 0x24
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db8:	b08f      	sub	sp, #60	; 0x3c
 8005dba:	af0a      	add	r7, sp, #40	; 0x28
 8005dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e116      	b.n	8005ff6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f00a f8c8 	bl	800ff78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2203      	movs	r2, #3
 8005dec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f006 fc11 	bl	800c62e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	687e      	ldr	r6, [r7, #4]
 8005e14:	466d      	mov	r5, sp
 8005e16:	f106 0410 	add.w	r4, r6, #16
 8005e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e2a:	1d33      	adds	r3, r6, #4
 8005e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e2e:	6838      	ldr	r0, [r7, #0]
 8005e30:	f006 fadc 	bl	800c3ec <USB_CoreInit>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e0d7      	b.n	8005ff6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f006 fbff 	bl	800c650 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
 8005e56:	e04a      	b.n	8005eee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e58:	7bfa      	ldrb	r2, [r7, #15]
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	333d      	adds	r3, #61	; 0x3d
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	333c      	adds	r3, #60	; 0x3c
 8005e7c:	7bfa      	ldrb	r2, [r7, #15]
 8005e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	b298      	uxth	r0, r3
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	3344      	adds	r3, #68	; 0x44
 8005e94:	4602      	mov	r2, r0
 8005e96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	3340      	adds	r3, #64	; 0x40
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	3348      	adds	r3, #72	; 0x48
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	334c      	adds	r3, #76	; 0x4c
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3354      	adds	r3, #84	; 0x54
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	3301      	adds	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
 8005eee:	7bfa      	ldrb	r2, [r7, #15]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d3af      	bcc.n	8005e58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e044      	b.n	8005f88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005efe:	7bfa      	ldrb	r2, [r7, #15]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f40:	7bfa      	ldrb	r2, [r7, #15]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f6c:	7bfa      	ldrb	r2, [r7, #15]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	3301      	adds	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	7bfa      	ldrb	r2, [r7, #15]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d3b5      	bcc.n	8005efe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	687e      	ldr	r6, [r7, #4]
 8005f9a:	466d      	mov	r5, sp
 8005f9c:	f106 0410 	add.w	r4, r6, #16
 8005fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fb0:	1d33      	adds	r3, r6, #4
 8005fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fb4:	6838      	ldr	r0, [r7, #0]
 8005fb6:	f006 fb97 	bl	800c6e8 <USB_DevInit>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e014      	b.n	8005ff6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d102      	bne.n	8005fea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 f98b 	bl	8007300 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f007 fce5 	bl	800d9be <USB_DevDisconnect>

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ffe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_PCD_Start+0x1c>
 8006016:	2302      	movs	r3, #2
 8006018:	e020      	b.n	800605c <HAL_PCD_Start+0x5e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	2b01      	cmp	r3, #1
 8006028:	d109      	bne.n	800603e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800602e:	2b01      	cmp	r3, #1
 8006030:	d005      	beq.n	800603e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f006 fae2 	bl	800c60c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f007 fc95 	bl	800d97c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b08d      	sub	sp, #52	; 0x34
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f007 fd53 	bl	800db26 <USB_GetMode>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 84b7 	bne.w	80069f6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f007 fcb7 	bl	800da00 <USB_ReadInterrupts>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 84ad 	beq.w	80069f4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f007 fca4 	bl	800da00 <USB_ReadInterrupts>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d107      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f002 0202 	and.w	r2, r2, #2
 80060d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f007 fc92 	bl	800da00 <USB_ReadInterrupts>
 80060dc:	4603      	mov	r3, r0
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d161      	bne.n	80061aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0210 	bic.w	r2, r2, #16
 80060f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	4613      	mov	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	3304      	adds	r3, #4
 8006114:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	0c5b      	lsrs	r3, r3, #17
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	2b02      	cmp	r3, #2
 8006120:	d124      	bne.n	800616c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d035      	beq.n	800619a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800613c:	b29b      	uxth	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	6a38      	ldr	r0, [r7, #32]
 8006142:	f007 fac9 	bl	800d6d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006152:	441a      	add	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006164:	441a      	add	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
 800616a:	e016      	b.n	800619a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	0c5b      	lsrs	r3, r3, #17
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2b06      	cmp	r3, #6
 8006176:	d110      	bne.n	800619a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800617e:	2208      	movs	r2, #8
 8006180:	4619      	mov	r1, r3
 8006182:	6a38      	ldr	r0, [r7, #32]
 8006184:	f007 faa8 	bl	800d6d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	6a1a      	ldr	r2, [r3, #32]
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006194:	441a      	add	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0210 	orr.w	r2, r2, #16
 80061a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f007 fc26 	bl	800da00 <USB_ReadInterrupts>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061be:	f040 80a7 	bne.w	8006310 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f007 fc2b 	bl	800da26 <USB_ReadDevAllOutEpInterrupt>
 80061d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80061d2:	e099      	b.n	8006308 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 808e 	beq.w	80062fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f007 fc4f 	bl	800da8e <USB_ReadDevOutEPInterrupt>
 80061f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	2301      	movs	r3, #1
 800620c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800620e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 feef 	bl	8006ff4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	461a      	mov	r2, r3
 800622e:	2308      	movs	r3, #8
 8006230:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 ffc5 	bl	80071c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	461a      	mov	r2, r3
 8006252:	2310      	movs	r3, #16
 8006254:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d030      	beq.n	80062c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	d109      	bne.n	8006280 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800627e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	4613      	mov	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	3304      	adds	r3, #4
 8006294:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	78db      	ldrb	r3, [r3, #3]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d108      	bne.n	80062b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f009 ff96 	bl	80101dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	461a      	mov	r2, r3
 80062be:	2302      	movs	r3, #2
 80062c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	461a      	mov	r2, r3
 80062da:	2320      	movs	r3, #32
 80062dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	461a      	mov	r2, r3
 80062f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	3301      	adds	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	f47f af62 	bne.w	80061d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f007 fb73 	bl	800da00 <USB_ReadInterrupts>
 800631a:	4603      	mov	r3, r0
 800631c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006324:	f040 80db 	bne.w	80064de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f007 fb94 	bl	800da5a <USB_ReadDevAllInEpInterrupt>
 8006332:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006338:	e0cd      	b.n	80064d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80c2 	beq.w	80064ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	4611      	mov	r1, r2
 8006350:	4618      	mov	r0, r3
 8006352:	f007 fbba 	bl	800daca <USB_ReadDevInEPInterrupt>
 8006356:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d057      	beq.n	8006412 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	2201      	movs	r2, #1
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	43db      	mvns	r3, r3
 800637c:	69f9      	ldr	r1, [r7, #28]
 800637e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006382:	4013      	ands	r3, r2
 8006384:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006392:	461a      	mov	r2, r3
 8006394:	2301      	movs	r3, #1
 8006396:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d132      	bne.n	8006406 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	334c      	adds	r3, #76	; 0x4c
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b6:	4613      	mov	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4403      	add	r3, r0
 80063c0:	3348      	adds	r3, #72	; 0x48
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4419      	add	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4403      	add	r3, r0
 80063d4:	334c      	adds	r3, #76	; 0x4c
 80063d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d113      	bne.n	8006406 <HAL_PCD_IRQHandler+0x3a2>
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e2:	4613      	mov	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	3354      	adds	r3, #84	; 0x54
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d108      	bne.n	8006406 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063fe:	461a      	mov	r2, r3
 8006400:	2101      	movs	r1, #1
 8006402:	f007 fbc3 	bl	800db8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	b2db      	uxtb	r3, r3
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f009 fe60 	bl	80100d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	461a      	mov	r2, r3
 800642a:	2308      	movs	r3, #8
 800642c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	461a      	mov	r2, r3
 8006446:	2310      	movs	r3, #16
 8006448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	461a      	mov	r2, r3
 8006462:	2340      	movs	r3, #64	; 0x40
 8006464:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d023      	beq.n	80064b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006472:	6a38      	ldr	r0, [r7, #32]
 8006474:	f006 fa96 	bl	800c9a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647a:	4613      	mov	r3, r2
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	3338      	adds	r3, #56	; 0x38
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	3304      	adds	r3, #4
 800648a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	78db      	ldrb	r3, [r3, #3]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d108      	bne.n	80064a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2200      	movs	r2, #0
 8006498:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f009 fead 	bl	8010200 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b2:	461a      	mov	r2, r3
 80064b4:	2302      	movs	r3, #2
 80064b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80064c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fd08 	bl	8006eda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	3301      	adds	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f af2e 	bne.w	800633a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f007 fa8c 	bl	800da00 <USB_ReadInterrupts>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f2:	d122      	bne.n	800653a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800650e:	2b01      	cmp	r3, #1
 8006510:	d108      	bne.n	8006524 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800651a:	2100      	movs	r1, #0
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 ff13 	bl	8007348 <HAL_PCDEx_LPM_Callback>
 8006522:	e002      	b.n	800652a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f009 fe4b 	bl	80101c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f007 fa5e 	bl	800da00 <USB_ReadInterrupts>
 8006544:	4603      	mov	r3, r0
 8006546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	d112      	bne.n	8006576 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d102      	bne.n	8006566 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f009 fe07 	bl	8010174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006574:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f007 fa40 	bl	800da00 <USB_ReadInterrupts>
 8006580:	4603      	mov	r3, r0
 8006582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658a:	d121      	bne.n	80065d0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800659a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d111      	bne.n	80065ca <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	089b      	lsrs	r3, r3, #2
 80065b6:	f003 020f 	and.w	r2, r3, #15
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80065c0:	2101      	movs	r1, #1
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fec0 	bl	8007348 <HAL_PCDEx_LPM_Callback>
 80065c8:	e002      	b.n	80065d0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f009 fdd2 	bl	8010174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f007 fa13 	bl	800da00 <USB_ReadInterrupts>
 80065da:	4603      	mov	r3, r0
 80065dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e4:	f040 80b7 	bne.w	8006756 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2110      	movs	r1, #16
 8006602:	4618      	mov	r0, r3
 8006604:	f006 f9ce 	bl	800c9a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006608:	2300      	movs	r3, #0
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800660c:	e046      	b.n	800669c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	461a      	mov	r2, r3
 800661c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006620:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006640:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	461a      	mov	r2, r3
 8006650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006654:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006670:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006674:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006694:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	3301      	adds	r3, #1
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d3b3      	bcc.n	800660e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d2:	f043 030b 	orr.w	r3, r3, #11
 80066d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e8:	f043 030b 	orr.w	r3, r3, #11
 80066ec:	6453      	str	r3, [r2, #68]	; 0x44
 80066ee:	e015      	b.n	800671c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	4619      	mov	r1, r3
 8006700:	f242 032b 	movw	r3, #8235	; 0x202b
 8006704:	4313      	orrs	r3, r2
 8006706:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006716:	f043 030b 	orr.w	r3, r3, #11
 800671a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800672e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006740:	461a      	mov	r2, r3
 8006742:	f007 fa23 	bl	800db8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695a      	ldr	r2, [r3, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f007 f950 	bl	800da00 <USB_ReadInterrupts>
 8006760:	4603      	mov	r3, r0
 8006762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d124      	bne.n	80067b6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f007 f9e7 	bl	800db44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f006 f98f 	bl	800ca9e <USB_GetDevSpeed>
 8006780:	4603      	mov	r3, r0
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681c      	ldr	r4, [r3, #0]
 800678c:	f001 fd8e 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 8006790:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	4620      	mov	r0, r4
 800679c:	f005 fe94 	bl	800c4c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f009 fcbe 	bl	8010122 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695a      	ldr	r2, [r3, #20]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f007 f920 	bl	800da00 <USB_ReadInterrupts>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d10a      	bne.n	80067e0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f009 fc9b 	bl	8010106 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f002 0208 	and.w	r2, r2, #8
 80067de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f007 f90b 	bl	800da00 <USB_ReadInterrupts>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d122      	bne.n	800683a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006800:	2301      	movs	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	e014      	b.n	8006830 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d105      	bne.n	800682a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	b2db      	uxtb	r3, r3
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb27 	bl	8006e78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	3301      	adds	r3, #1
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006836:	429a      	cmp	r2, r3
 8006838:	d3e5      	bcc.n	8006806 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f007 f8de 	bl	800da00 <USB_ReadInterrupts>
 8006844:	4603      	mov	r3, r0
 8006846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800684a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684e:	d13b      	bne.n	80068c8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006850:	2301      	movs	r3, #1
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
 8006854:	e02b      	b.n	80068ae <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	4613      	mov	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	3340      	adds	r3, #64	; 0x40
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d115      	bne.n	80068a8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800687c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800687e:	2b00      	cmp	r3, #0
 8006880:	da12      	bge.n	80068a8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	333f      	adds	r3, #63	; 0x3f
 8006892:	2201      	movs	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fae8 	bl	8006e78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	3301      	adds	r3, #1
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3ce      	bcc.n	8006856 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80068c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f007 f897 	bl	800da00 <USB_ReadInterrupts>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068dc:	d155      	bne.n	800698a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068de:	2301      	movs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
 80068e2:	e045      	b.n	8006970 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f8:	4613      	mov	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d12e      	bne.n	800696a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800690c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800690e:	2b00      	cmp	r3, #0
 8006910:	da2b      	bge.n	800696a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800691e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006922:	429a      	cmp	r2, r3
 8006924:	d121      	bne.n	800696a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006966:	6053      	str	r3, [r2, #4]
            break;
 8006968:	e007      	b.n	800697a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	3301      	adds	r3, #1
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006976:	429a      	cmp	r2, r3
 8006978:	d3b4      	bcc.n	80068e4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695a      	ldr	r2, [r3, #20]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f007 f836 	bl	800da00 <USB_ReadInterrupts>
 8006994:	4603      	mov	r3, r0
 8006996:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699e:	d10a      	bne.n	80069b6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f009 fc3f 	bl	8010224 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695a      	ldr	r2, [r3, #20]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80069b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f007 f820 	bl	800da00 <USB_ReadInterrupts>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d115      	bne.n	80069f6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f009 fc2f 	bl	8010240 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
 80069f2:	e000      	b.n	80069f6 <HAL_PCD_IRQHandler+0x992>
      return;
 80069f4:	bf00      	nop
    }
  }
}
 80069f6:	3734      	adds	r7, #52	; 0x34
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd90      	pop	{r4, r7, pc}

080069fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_PCD_SetAddress+0x1a>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e013      	b.n	8006a3e <HAL_PCD_SetAddress+0x42>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	78fa      	ldrb	r2, [r7, #3]
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f006 ff7e 	bl	800d930 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	461a      	mov	r2, r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	70fb      	strb	r3, [r7, #3]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	803b      	strh	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	da0f      	bge.n	8006a8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	f003 020f 	and.w	r2, r3, #15
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	3338      	adds	r3, #56	; 0x38
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	4413      	add	r3, r2
 8006a80:	3304      	adds	r3, #4
 8006a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	705a      	strb	r2, [r3, #1]
 8006a8a:	e00f      	b.n	8006aac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	4613      	mov	r3, r2
 8006a94:	00db      	lsls	r3, r3, #3
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006ab8:	883a      	ldrh	r2, [r7, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	78ba      	ldrb	r2, [r7, #2]
 8006ac2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ad6:	78bb      	ldrb	r3, [r7, #2]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d102      	bne.n	8006ae2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_PCD_EP_Open+0xaa>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e00e      	b.n	8006b0e <HAL_PCD_EP_Open+0xc8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68f9      	ldr	r1, [r7, #12]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f005 fff2 	bl	800cae8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da0f      	bge.n	8006b4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	4613      	mov	r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	3338      	adds	r3, #56	; 0x38
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3304      	adds	r3, #4
 8006b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	705a      	strb	r2, [r3, #1]
 8006b48:	e00f      	b.n	8006b6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	3304      	adds	r3, #4
 8006b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_PCD_EP_Close+0x6e>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e00e      	b.n	8006ba2 <HAL_PCD_EP_Close+0x8c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68f9      	ldr	r1, [r7, #12]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f006 f830 	bl	800cbf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b086      	sub	sp, #24
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bba:	7afb      	ldrb	r3, [r7, #11]
 8006bbc:	f003 020f 	and.w	r2, r3, #15
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2200      	movs	r2, #0
 8006be4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2200      	movs	r2, #0
 8006bea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d102      	bne.n	8006c06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6979      	ldr	r1, [r7, #20]
 8006c1e:	f006 fb17 	bl	800d250 <USB_EP0StartXfer>
 8006c22:	e008      	b.n	8006c36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6979      	ldr	r1, [r7, #20]
 8006c32:	f006 f8bd 	bl	800cdb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	f003 020f 	and.w	r2, r3, #15
 8006c86:	4613      	mov	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	3338      	adds	r3, #56	; 0x38
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	3304      	adds	r3, #4
 8006c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2201      	movs	r2, #1
 8006cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d102      	bne.n	8006cca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6979      	ldr	r1, [r7, #20]
 8006ce2:	f006 fab5 	bl	800d250 <USB_EP0StartXfer>
 8006ce6:	e008      	b.n	8006cfa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6979      	ldr	r1, [r7, #20]
 8006cf6:	f006 f85b 	bl	800cdb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 020f 	and.w	r2, r3, #15
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d901      	bls.n	8006d22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e050      	b.n	8006dc4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da0f      	bge.n	8006d4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	f003 020f 	and.w	r2, r3, #15
 8006d30:	4613      	mov	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	3338      	adds	r3, #56	; 0x38
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	705a      	strb	r2, [r3, #1]
 8006d48:	e00d      	b.n	8006d66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d4a:	78fa      	ldrb	r2, [r7, #3]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_PCD_EP_SetStall+0x82>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e01e      	b.n	8006dc4 <HAL_PCD_EP_SetStall+0xc0>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68f9      	ldr	r1, [r7, #12]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f006 fcf7 	bl	800d788 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	b2d9      	uxtb	r1, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006db4:	461a      	mov	r2, r3
 8006db6:	f006 fee9 	bl	800db8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	f003 020f 	and.w	r2, r3, #15
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d901      	bls.n	8006dea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e042      	b.n	8006e70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da0f      	bge.n	8006e12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	f003 020f 	and.w	r2, r3, #15
 8006df8:	4613      	mov	r3, r2
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	3338      	adds	r3, #56	; 0x38
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	3304      	adds	r3, #4
 8006e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	705a      	strb	r2, [r3, #1]
 8006e10:	e00f      	b.n	8006e32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	3304      	adds	r3, #4
 8006e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_PCD_EP_ClrStall+0x86>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e00e      	b.n	8006e70 <HAL_PCD_EP_ClrStall+0xa4>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f006 fcff 	bl	800d864 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	da0c      	bge.n	8006ea6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	f003 020f 	and.w	r2, r3, #15
 8006e92:	4613      	mov	r3, r2
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	3338      	adds	r3, #56	; 0x38
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e00c      	b.n	8006ec0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68f9      	ldr	r1, [r7, #12]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f006 fb1e 	bl	800d508 <USB_EPStopXfer>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b08a      	sub	sp, #40	; 0x28
 8006ede:	af02      	add	r7, sp, #8
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	3338      	adds	r3, #56	; 0x38
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	3304      	adds	r3, #4
 8006f00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1a      	ldr	r2, [r3, #32]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d901      	bls.n	8006f12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e06c      	b.n	8006fec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d902      	bls.n	8006f2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	3303      	adds	r3, #3
 8006f32:	089b      	lsrs	r3, r3, #2
 8006f34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f36:	e02b      	b.n	8006f90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d902      	bls.n	8006f54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	3303      	adds	r3, #3
 8006f58:	089b      	lsrs	r3, r3, #2
 8006f5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6919      	ldr	r1, [r3, #16]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	4603      	mov	r3, r0
 8006f72:	6978      	ldr	r0, [r7, #20]
 8006f74:	f006 fb72 	bl	800d65c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	441a      	add	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	441a      	add	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d809      	bhi.n	8006fba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1a      	ldr	r2, [r3, #32]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d203      	bcs.n	8006fba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1be      	bne.n	8006f38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d811      	bhi.n	8006fea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	2201      	movs	r2, #1
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	43db      	mvns	r3, r3
 8006fe0:	6939      	ldr	r1, [r7, #16]
 8006fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	333c      	adds	r3, #60	; 0x3c
 800700c:	3304      	adds	r3, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d17b      	bne.n	8007122 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d015      	beq.n	8007060 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	4a61      	ldr	r2, [pc, #388]	; (80071bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	f240 80b9 	bls.w	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80b3 	beq.w	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	461a      	mov	r2, r3
 8007058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705c:	6093      	str	r3, [r2, #8]
 800705e:	e0a7      	b.n	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	461a      	mov	r2, r3
 8007078:	2320      	movs	r3, #32
 800707a:	6093      	str	r3, [r2, #8]
 800707c:	e098      	b.n	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007084:	2b00      	cmp	r3, #0
 8007086:	f040 8093 	bne.w	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	4a4b      	ldr	r2, [pc, #300]	; (80071bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d90f      	bls.n	80070b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	461a      	mov	r2, r3
 80070aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ae:	6093      	str	r3, [r2, #8]
 80070b0:	e07e      	b.n	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	4413      	add	r3, r2
 80070c4:	3304      	adds	r3, #4
 80070c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	69da      	ldr	r2, [r3, #28]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	0159      	lsls	r1, r3, #5
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	440b      	add	r3, r1
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d114      	bne.n	8007114 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070fc:	461a      	mov	r2, r3
 80070fe:	2101      	movs	r1, #1
 8007100:	f006 fd44 	bl	800db8c <USB_EP0_OutStart>
 8007104:	e006      	b.n	8007114 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	441a      	add	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f008 ffbe 	bl	801009c <HAL_PCD_DataOutStageCallback>
 8007120:	e046      	b.n	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d124      	bne.n	8007174 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	461a      	mov	r2, r3
 8007142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007146:	6093      	str	r3, [r2, #8]
 8007148:	e032      	b.n	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d008      	beq.n	8007166 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	461a      	mov	r2, r3
 8007162:	2320      	movs	r3, #32
 8007164:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f008 ff95 	bl	801009c <HAL_PCD_DataOutStageCallback>
 8007172:	e01d      	b.n	80071b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d114      	bne.n	80071a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d108      	bne.n	80071a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800719c:	461a      	mov	r2, r3
 800719e:	2100      	movs	r1, #0
 80071a0:	f006 fcf4 	bl	800db8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f008 ff76 	bl	801009c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	4f54300a 	.word	0x4f54300a
 80071c0:	4f54310a 	.word	0x4f54310a

080071c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	333c      	adds	r3, #60	; 0x3c
 80071dc:	3304      	adds	r3, #4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a15      	ldr	r2, [pc, #84]	; (800724c <PCD_EP_OutSetupPacket_int+0x88>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d90e      	bls.n	8007218 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	461a      	mov	r2, r3
 8007212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007216:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f008 ff2d 	bl	8010078 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4a0a      	ldr	r2, [pc, #40]	; (800724c <PCD_EP_OutSetupPacket_int+0x88>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d90c      	bls.n	8007240 <PCD_EP_OutSetupPacket_int+0x7c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d108      	bne.n	8007240 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007238:	461a      	mov	r2, r3
 800723a:	2101      	movs	r1, #1
 800723c:	f006 fca6 	bl	800db8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	4f54300a 	.word	0x4f54300a

08007250 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
 800725c:	4613      	mov	r3, r2
 800725e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d107      	bne.n	800727e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800726e:	883b      	ldrh	r3, [r7, #0]
 8007270:	0419      	lsls	r1, r3, #16
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	430a      	orrs	r2, r1
 800727a:	629a      	str	r2, [r3, #40]	; 0x28
 800727c:	e028      	b.n	80072d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4413      	add	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	e00d      	b.n	80072ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	3340      	adds	r3, #64	; 0x40
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	0c1b      	lsrs	r3, r3, #16
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	4413      	add	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	3301      	adds	r3, #1
 80072ac:	73fb      	strb	r3, [r7, #15]
 80072ae:	7bfa      	ldrb	r2, [r7, #15]
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d3ec      	bcc.n	8007292 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80072b8:	883b      	ldrh	r3, [r7, #0]
 80072ba:	0418      	lsls	r0, r3, #16
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6819      	ldr	r1, [r3, #0]
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	4302      	orrs	r2, r0
 80072c8:	3340      	adds	r3, #64	; 0x40
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	887a      	ldrh	r2, [r7, #2]
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800732e:	4b05      	ldr	r3, [pc, #20]	; (8007344 <HAL_PCDEx_ActivateLPM+0x44>)
 8007330:	4313      	orrs	r3, r2
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	10000003 	.word	0x10000003

08007348 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007368:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <HAL_PWREx_ConfigSupply+0x70>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b04      	cmp	r3, #4
 8007372:	d00a      	beq.n	800738a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007374:	4b16      	ldr	r3, [pc, #88]	; (80073d0 <HAL_PWREx_ConfigSupply+0x70>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	429a      	cmp	r2, r3
 8007380:	d001      	beq.n	8007386 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e01f      	b.n	80073c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	e01d      	b.n	80073c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800738a:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <HAL_PWREx_ConfigSupply+0x70>)
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f023 0207 	bic.w	r2, r3, #7
 8007392:	490f      	ldr	r1, [pc, #60]	; (80073d0 <HAL_PWREx_ConfigSupply+0x70>)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4313      	orrs	r3, r2
 8007398:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800739a:	f7fa fd4f 	bl	8001e3c <HAL_GetTick>
 800739e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073a0:	e009      	b.n	80073b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073a2:	f7fa fd4b 	bl	8001e3c <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b0:	d901      	bls.n	80073b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e007      	b.n	80073c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <HAL_PWREx_ConfigSupply+0x70>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c2:	d1ee      	bne.n	80073a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	58024800 	.word	0x58024800

080073d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a04      	ldr	r2, [pc, #16]	; (80073f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80073de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073e2:	60d3      	str	r3, [r2, #12]
}
 80073e4:	bf00      	nop
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	58024800 	.word	0x58024800

080073f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08c      	sub	sp, #48	; 0x30
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f000 bc1c 	b.w	8007c40 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8087 	beq.w	8007524 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007416:	4b9e      	ldr	r3, [pc, #632]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007420:	4b9b      	ldr	r3, [pc, #620]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007424:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	2b10      	cmp	r3, #16
 800742a:	d007      	beq.n	800743c <HAL_RCC_OscConfig+0x48>
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	2b18      	cmp	r3, #24
 8007430:	d110      	bne.n	8007454 <HAL_RCC_OscConfig+0x60>
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d10b      	bne.n	8007454 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800743c:	4b94      	ldr	r3, [pc, #592]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d06c      	beq.n	8007522 <HAL_RCC_OscConfig+0x12e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d168      	bne.n	8007522 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e3f5      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745c:	d106      	bne.n	800746c <HAL_RCC_OscConfig+0x78>
 800745e:	4b8c      	ldr	r3, [pc, #560]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a8b      	ldr	r2, [pc, #556]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	e02e      	b.n	80074ca <HAL_RCC_OscConfig+0xd6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10c      	bne.n	800748e <HAL_RCC_OscConfig+0x9a>
 8007474:	4b86      	ldr	r3, [pc, #536]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a85      	ldr	r2, [pc, #532]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800747a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	4b83      	ldr	r3, [pc, #524]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a82      	ldr	r2, [pc, #520]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	e01d      	b.n	80074ca <HAL_RCC_OscConfig+0xd6>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007496:	d10c      	bne.n	80074b2 <HAL_RCC_OscConfig+0xbe>
 8007498:	4b7d      	ldr	r3, [pc, #500]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a7c      	ldr	r2, [pc, #496]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800749e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	4b7a      	ldr	r3, [pc, #488]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a79      	ldr	r2, [pc, #484]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80074aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e00b      	b.n	80074ca <HAL_RCC_OscConfig+0xd6>
 80074b2:	4b77      	ldr	r3, [pc, #476]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a76      	ldr	r2, [pc, #472]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80074b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	4b74      	ldr	r3, [pc, #464]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a73      	ldr	r2, [pc, #460]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80074c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d013      	beq.n	80074fa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d2:	f7fa fcb3 	bl	8001e3c <HAL_GetTick>
 80074d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074d8:	e008      	b.n	80074ec <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074da:	f7fa fcaf 	bl	8001e3c <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b64      	cmp	r3, #100	; 0x64
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e3a9      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ec:	4b68      	ldr	r3, [pc, #416]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <HAL_RCC_OscConfig+0xe6>
 80074f8:	e014      	b.n	8007524 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fa:	f7fa fc9f 	bl	8001e3c <HAL_GetTick>
 80074fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007500:	e008      	b.n	8007514 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007502:	f7fa fc9b 	bl	8001e3c <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b64      	cmp	r3, #100	; 0x64
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e395      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007514:	4b5e      	ldr	r3, [pc, #376]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f0      	bne.n	8007502 <HAL_RCC_OscConfig+0x10e>
 8007520:	e000      	b.n	8007524 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007522:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80ca 	beq.w	80076c6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007532:	4b57      	ldr	r3, [pc, #348]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800753a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800753c:	4b54      	ldr	r3, [pc, #336]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <HAL_RCC_OscConfig+0x164>
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2b18      	cmp	r3, #24
 800754c:	d156      	bne.n	80075fc <HAL_RCC_OscConfig+0x208>
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d151      	bne.n	80075fc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007558:	4b4d      	ldr	r3, [pc, #308]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <HAL_RCC_OscConfig+0x17c>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e367      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007570:	4b47      	ldr	r3, [pc, #284]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f023 0219 	bic.w	r2, r3, #25
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	4944      	ldr	r1, [pc, #272]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007582:	f7fa fc5b 	bl	8001e3c <HAL_GetTick>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007588:	e008      	b.n	800759c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800758a:	f7fa fc57 	bl	8001e3c <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d901      	bls.n	800759c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e351      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800759c:	4b3c      	ldr	r3, [pc, #240]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0f0      	beq.n	800758a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075a8:	f7fa fc78 	bl	8001e9c <HAL_GetREVID>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d817      	bhi.n	80075e6 <HAL_RCC_OscConfig+0x1f2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d108      	bne.n	80075d0 <HAL_RCC_OscConfig+0x1dc>
 80075be:	4b34      	ldr	r3, [pc, #208]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80075c6:	4a32      	ldr	r2, [pc, #200]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80075c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ce:	e07a      	b.n	80076c6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d0:	4b2f      	ldr	r3, [pc, #188]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	031b      	lsls	r3, r3, #12
 80075de:	492c      	ldr	r1, [pc, #176]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075e4:	e06f      	b.n	80076c6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e6:	4b2a      	ldr	r3, [pc, #168]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	061b      	lsls	r3, r3, #24
 80075f4:	4926      	ldr	r1, [pc, #152]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075fa:	e064      	b.n	80076c6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d047      	beq.n	8007694 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007604:	4b22      	ldr	r3, [pc, #136]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f023 0219 	bic.w	r2, r3, #25
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	491f      	ldr	r1, [pc, #124]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007612:	4313      	orrs	r3, r2
 8007614:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007616:	f7fa fc11 	bl	8001e3c <HAL_GetTick>
 800761a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800761c:	e008      	b.n	8007630 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800761e:	f7fa fc0d 	bl	8001e3c <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e307      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007630:	4b17      	ldr	r3, [pc, #92]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0f0      	beq.n	800761e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763c:	f7fa fc2e 	bl	8001e9c <HAL_GetREVID>
 8007640:	4603      	mov	r3, r0
 8007642:	f241 0203 	movw	r2, #4099	; 0x1003
 8007646:	4293      	cmp	r3, r2
 8007648:	d817      	bhi.n	800767a <HAL_RCC_OscConfig+0x286>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d108      	bne.n	8007664 <HAL_RCC_OscConfig+0x270>
 8007652:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800765a:	4a0d      	ldr	r2, [pc, #52]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800765c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007660:	6053      	str	r3, [r2, #4]
 8007662:	e030      	b.n	80076c6 <HAL_RCC_OscConfig+0x2d2>
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	031b      	lsls	r3, r3, #12
 8007672:	4907      	ldr	r1, [pc, #28]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 8007674:	4313      	orrs	r3, r2
 8007676:	604b      	str	r3, [r1, #4]
 8007678:	e025      	b.n	80076c6 <HAL_RCC_OscConfig+0x2d2>
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	061b      	lsls	r3, r3, #24
 8007688:	4901      	ldr	r1, [pc, #4]	; (8007690 <HAL_RCC_OscConfig+0x29c>)
 800768a:	4313      	orrs	r3, r2
 800768c:	604b      	str	r3, [r1, #4]
 800768e:	e01a      	b.n	80076c6 <HAL_RCC_OscConfig+0x2d2>
 8007690:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007694:	4b9e      	ldr	r3, [pc, #632]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a9d      	ldr	r2, [pc, #628]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a0:	f7fa fbcc 	bl	8001e3c <HAL_GetTick>
 80076a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076a8:	f7fa fbc8 	bl	8001e3c <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e2c2      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076ba:	4b95      	ldr	r3, [pc, #596]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f0      	bne.n	80076a8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80a9 	beq.w	8007826 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076d4:	4b8e      	ldr	r3, [pc, #568]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076de:	4b8c      	ldr	r3, [pc, #560]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d007      	beq.n	80076fa <HAL_RCC_OscConfig+0x306>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b18      	cmp	r3, #24
 80076ee:	d13a      	bne.n	8007766 <HAL_RCC_OscConfig+0x372>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d135      	bne.n	8007766 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076fa:	4b85      	ldr	r3, [pc, #532]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <HAL_RCC_OscConfig+0x31e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	2b80      	cmp	r3, #128	; 0x80
 800770c:	d001      	beq.n	8007712 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e296      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007712:	f7fa fbc3 	bl	8001e9c <HAL_GetREVID>
 8007716:	4603      	mov	r3, r0
 8007718:	f241 0203 	movw	r2, #4099	; 0x1003
 800771c:	4293      	cmp	r3, r2
 800771e:	d817      	bhi.n	8007750 <HAL_RCC_OscConfig+0x35c>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	2b20      	cmp	r3, #32
 8007726:	d108      	bne.n	800773a <HAL_RCC_OscConfig+0x346>
 8007728:	4b79      	ldr	r3, [pc, #484]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007730:	4a77      	ldr	r2, [pc, #476]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007736:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007738:	e075      	b.n	8007826 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800773a:	4b75      	ldr	r3, [pc, #468]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	069b      	lsls	r3, r3, #26
 8007748:	4971      	ldr	r1, [pc, #452]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800774e:	e06a      	b.n	8007826 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007750:	4b6f      	ldr	r3, [pc, #444]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	061b      	lsls	r3, r3, #24
 800775e:	496c      	ldr	r1, [pc, #432]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007764:	e05f      	b.n	8007826 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d042      	beq.n	80077f4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800776e:	4b68      	ldr	r3, [pc, #416]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a67      	ldr	r2, [pc, #412]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777a:	f7fa fb5f 	bl	8001e3c <HAL_GetTick>
 800777e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007782:	f7fa fb5b 	bl	8001e3c <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e255      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007794:	4b5e      	ldr	r3, [pc, #376]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0f0      	beq.n	8007782 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077a0:	f7fa fb7c 	bl	8001e9c <HAL_GetREVID>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d817      	bhi.n	80077de <HAL_RCC_OscConfig+0x3ea>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d108      	bne.n	80077c8 <HAL_RCC_OscConfig+0x3d4>
 80077b6:	4b56      	ldr	r3, [pc, #344]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077be:	4a54      	ldr	r2, [pc, #336]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c4:	6053      	str	r3, [r2, #4]
 80077c6:	e02e      	b.n	8007826 <HAL_RCC_OscConfig+0x432>
 80077c8:	4b51      	ldr	r3, [pc, #324]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	069b      	lsls	r3, r3, #26
 80077d6:	494e      	ldr	r1, [pc, #312]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	604b      	str	r3, [r1, #4]
 80077dc:	e023      	b.n	8007826 <HAL_RCC_OscConfig+0x432>
 80077de:	4b4c      	ldr	r3, [pc, #304]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	061b      	lsls	r3, r3, #24
 80077ec:	4948      	ldr	r1, [pc, #288]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60cb      	str	r3, [r1, #12]
 80077f2:	e018      	b.n	8007826 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077f4:	4b46      	ldr	r3, [pc, #280]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a45      	ldr	r2, [pc, #276]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80077fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7fa fb1c 	bl	8001e3c <HAL_GetTick>
 8007804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007808:	f7fa fb18 	bl	8001e3c <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e212      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800781a:	4b3d      	ldr	r3, [pc, #244]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d036      	beq.n	80078a0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d019      	beq.n	800786e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800783a:	4b35      	ldr	r3, [pc, #212]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 800783c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783e:	4a34      	ldr	r2, [pc, #208]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007840:	f043 0301 	orr.w	r3, r3, #1
 8007844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007846:	f7fa faf9 	bl	8001e3c <HAL_GetTick>
 800784a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800784c:	e008      	b.n	8007860 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800784e:	f7fa faf5 	bl	8001e3c <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e1ef      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007860:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0f0      	beq.n	800784e <HAL_RCC_OscConfig+0x45a>
 800786c:	e018      	b.n	80078a0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800786e:	4b28      	ldr	r3, [pc, #160]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007872:	4a27      	ldr	r2, [pc, #156]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007874:	f023 0301 	bic.w	r3, r3, #1
 8007878:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787a:	f7fa fadf 	bl	8001e3c <HAL_GetTick>
 800787e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007882:	f7fa fadb 	bl	8001e3c <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e1d5      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007894:	4b1e      	ldr	r3, [pc, #120]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 8007896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f0      	bne.n	8007882 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d039      	beq.n	8007920 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d019      	beq.n	80078e8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078b4:	4b16      	ldr	r3, [pc, #88]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80078ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078c0:	f7fa fabc 	bl	8001e3c <HAL_GetTick>
 80078c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078c8:	f7fa fab8 	bl	8001e3c <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e1b2      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x4d4>
 80078e6:	e01b      	b.n	8007920 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a08      	ldr	r2, [pc, #32]	; (8007910 <HAL_RCC_OscConfig+0x51c>)
 80078ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078f4:	f7fa faa2 	bl	8001e3c <HAL_GetTick>
 80078f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078fa:	e00b      	b.n	8007914 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078fc:	f7fa fa9e 	bl	8001e3c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d904      	bls.n	8007914 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e198      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
 800790e:	bf00      	nop
 8007910:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007914:	4ba3      	ldr	r3, [pc, #652]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1ed      	bne.n	80078fc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8081 	beq.w	8007a30 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800792e:	4b9e      	ldr	r3, [pc, #632]	; (8007ba8 <HAL_RCC_OscConfig+0x7b4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a9d      	ldr	r2, [pc, #628]	; (8007ba8 <HAL_RCC_OscConfig+0x7b4>)
 8007934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800793a:	f7fa fa7f 	bl	8001e3c <HAL_GetTick>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007942:	f7fa fa7b 	bl	8001e3c <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b64      	cmp	r3, #100	; 0x64
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e175      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007954:	4b94      	ldr	r3, [pc, #592]	; (8007ba8 <HAL_RCC_OscConfig+0x7b4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d106      	bne.n	8007976 <HAL_RCC_OscConfig+0x582>
 8007968:	4b8e      	ldr	r3, [pc, #568]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4a8d      	ldr	r2, [pc, #564]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	6713      	str	r3, [r2, #112]	; 0x70
 8007974:	e02d      	b.n	80079d2 <HAL_RCC_OscConfig+0x5de>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10c      	bne.n	8007998 <HAL_RCC_OscConfig+0x5a4>
 800797e:	4b89      	ldr	r3, [pc, #548]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	4a88      	ldr	r2, [pc, #544]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	6713      	str	r3, [r2, #112]	; 0x70
 800798a:	4b86      	ldr	r3, [pc, #536]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	4a85      	ldr	r2, [pc, #532]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007990:	f023 0304 	bic.w	r3, r3, #4
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
 8007996:	e01c      	b.n	80079d2 <HAL_RCC_OscConfig+0x5de>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b05      	cmp	r3, #5
 800799e:	d10c      	bne.n	80079ba <HAL_RCC_OscConfig+0x5c6>
 80079a0:	4b80      	ldr	r3, [pc, #512]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a4:	4a7f      	ldr	r2, [pc, #508]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079a6:	f043 0304 	orr.w	r3, r3, #4
 80079aa:	6713      	str	r3, [r2, #112]	; 0x70
 80079ac:	4b7d      	ldr	r3, [pc, #500]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4a7c      	ldr	r2, [pc, #496]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6713      	str	r3, [r2, #112]	; 0x70
 80079b8:	e00b      	b.n	80079d2 <HAL_RCC_OscConfig+0x5de>
 80079ba:	4b7a      	ldr	r3, [pc, #488]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	4a79      	ldr	r2, [pc, #484]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079c0:	f023 0301 	bic.w	r3, r3, #1
 80079c4:	6713      	str	r3, [r2, #112]	; 0x70
 80079c6:	4b77      	ldr	r3, [pc, #476]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	4a76      	ldr	r2, [pc, #472]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079cc:	f023 0304 	bic.w	r3, r3, #4
 80079d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d015      	beq.n	8007a06 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079da:	f7fa fa2f 	bl	8001e3c <HAL_GetTick>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e0:	e00a      	b.n	80079f8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e2:	f7fa fa2b 	bl	8001e3c <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e123      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079f8:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 80079fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ee      	beq.n	80079e2 <HAL_RCC_OscConfig+0x5ee>
 8007a04:	e014      	b.n	8007a30 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a06:	f7fa fa19 	bl	8001e3c <HAL_GetTick>
 8007a0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a0c:	e00a      	b.n	8007a24 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a0e:	f7fa fa15 	bl	8001e3c <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d901      	bls.n	8007a24 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e10d      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a24:	4b5f      	ldr	r3, [pc, #380]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1ee      	bne.n	8007a0e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8102 	beq.w	8007c3e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a3a:	4b5a      	ldr	r3, [pc, #360]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a42:	2b18      	cmp	r3, #24
 8007a44:	f000 80bd 	beq.w	8007bc2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	f040 8095 	bne.w	8007b7c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a52:	4b54      	ldr	r3, [pc, #336]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a53      	ldr	r2, [pc, #332]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5e:	f7fa f9ed 	bl	8001e3c <HAL_GetTick>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a64:	e008      	b.n	8007a78 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a66:	f7fa f9e9 	bl	8001e3c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e0e3      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a78:	4b4a      	ldr	r3, [pc, #296]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a84:	4b47      	ldr	r3, [pc, #284]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a88:	4b48      	ldr	r3, [pc, #288]	; (8007bac <HAL_RCC_OscConfig+0x7b8>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a94:	0112      	lsls	r2, r2, #4
 8007a96:	430a      	orrs	r2, r1
 8007a98:	4942      	ldr	r1, [pc, #264]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	628b      	str	r3, [r1, #40]	; 0x28
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aac:	3b01      	subs	r3, #1
 8007aae:	025b      	lsls	r3, r3, #9
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	041b      	lsls	r3, r3, #16
 8007abc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	061b      	lsls	r3, r3, #24
 8007aca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ace:	4935      	ldr	r1, [pc, #212]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007ad4:	4b33      	ldr	r3, [pc, #204]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	4a32      	ldr	r2, [pc, #200]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007ada:	f023 0301 	bic.w	r3, r3, #1
 8007ade:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ae0:	4b30      	ldr	r3, [pc, #192]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ae4:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <HAL_RCC_OscConfig+0x7bc>)
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007aec:	00d2      	lsls	r2, r2, #3
 8007aee:	492d      	ldr	r1, [pc, #180]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007af4:	4b2b      	ldr	r3, [pc, #172]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	f023 020c 	bic.w	r2, r3, #12
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	4928      	ldr	r1, [pc, #160]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b06:	4b27      	ldr	r3, [pc, #156]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	f023 0202 	bic.w	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	4924      	ldr	r1, [pc, #144]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b18:	4b22      	ldr	r3, [pc, #136]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	4a21      	ldr	r2, [pc, #132]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b24:	4b1f      	ldr	r3, [pc, #124]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	4a1e      	ldr	r2, [pc, #120]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b30:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b3c:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	4a18      	ldr	r2, [pc, #96]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b48:	4b16      	ldr	r3, [pc, #88]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a15      	ldr	r2, [pc, #84]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7fa f972 	bl	8001e3c <HAL_GetTick>
 8007b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b5c:	f7fa f96e 	bl	8001e3c <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e068      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f0      	beq.n	8007b5c <HAL_RCC_OscConfig+0x768>
 8007b7a:	e060      	b.n	8007c3e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a08      	ldr	r2, [pc, #32]	; (8007ba4 <HAL_RCC_OscConfig+0x7b0>)
 8007b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fa f958 	bl	8001e3c <HAL_GetTick>
 8007b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b8e:	e011      	b.n	8007bb4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b90:	f7fa f954 	bl	8001e3c <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d90a      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e04e      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
 8007ba2:	bf00      	nop
 8007ba4:	58024400 	.word	0x58024400
 8007ba8:	58024800 	.word	0x58024800
 8007bac:	fffffc0c 	.word	0xfffffc0c
 8007bb0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bb4:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <HAL_RCC_OscConfig+0x854>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e7      	bne.n	8007b90 <HAL_RCC_OscConfig+0x79c>
 8007bc0:	e03d      	b.n	8007c3e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bc2:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <HAL_RCC_OscConfig+0x854>)
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <HAL_RCC_OscConfig+0x854>)
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d031      	beq.n	8007c3a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f003 0203 	and.w	r2, r3, #3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d12a      	bne.n	8007c3a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	091b      	lsrs	r3, r3, #4
 8007be8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d122      	bne.n	8007c3a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d11a      	bne.n	8007c3a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	0a5b      	lsrs	r3, r3, #9
 8007c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d111      	bne.n	8007c3a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d108      	bne.n	8007c3a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	0e1b      	lsrs	r3, r3, #24
 8007c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c34:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d001      	beq.n	8007c3e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3730      	adds	r7, #48	; 0x30
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	58024400 	.word	0x58024400

08007c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e19c      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c60:	4b8a      	ldr	r3, [pc, #552]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d910      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6e:	4b87      	ldr	r3, [pc, #540]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f023 020f 	bic.w	r2, r3, #15
 8007c76:	4985      	ldr	r1, [pc, #532]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b83      	ldr	r3, [pc, #524]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e184      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d010      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	4b7b      	ldr	r3, [pc, #492]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d908      	bls.n	8007cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cac:	4b78      	ldr	r3, [pc, #480]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	4975      	ldr	r1, [pc, #468]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d010      	beq.n	8007cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695a      	ldr	r2, [r3, #20]
 8007cce:	4b70      	ldr	r3, [pc, #448]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d908      	bls.n	8007cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cda:	4b6d      	ldr	r3, [pc, #436]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	496a      	ldr	r1, [pc, #424]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d010      	beq.n	8007d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	4b64      	ldr	r3, [pc, #400]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d908      	bls.n	8007d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d08:	4b61      	ldr	r3, [pc, #388]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	495e      	ldr	r1, [pc, #376]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d010      	beq.n	8007d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69da      	ldr	r2, [r3, #28]
 8007d2a:	4b59      	ldr	r3, [pc, #356]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d908      	bls.n	8007d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d36:	4b56      	ldr	r3, [pc, #344]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	4953      	ldr	r1, [pc, #332]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d010      	beq.n	8007d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	4b4d      	ldr	r3, [pc, #308]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d908      	bls.n	8007d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d64:	4b4a      	ldr	r3, [pc, #296]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f023 020f 	bic.w	r2, r3, #15
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4947      	ldr	r1, [pc, #284]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d055      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d82:	4b43      	ldr	r3, [pc, #268]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	4940      	ldr	r1, [pc, #256]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d107      	bne.n	8007dac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d9c:	4b3c      	ldr	r3, [pc, #240]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d121      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e0f6      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d107      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007db4:	4b36      	ldr	r3, [pc, #216]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0ea      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dcc:	4b30      	ldr	r3, [pc, #192]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0de      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ddc:	4b2c      	ldr	r3, [pc, #176]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0d6      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dec:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f023 0207 	bic.w	r2, r3, #7
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	4925      	ldr	r1, [pc, #148]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfe:	f7fa f81d 	bl	8001e3c <HAL_GetTick>
 8007e02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e04:	e00a      	b.n	8007e1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e06:	f7fa f819 	bl	8001e3c <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e0be      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d1eb      	bne.n	8007e06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d010      	beq.n	8007e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d208      	bcs.n	8007e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	f023 020f 	bic.w	r2, r3, #15
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	490e      	ldr	r1, [pc, #56]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d214      	bcs.n	8007e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6a:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f023 020f 	bic.w	r2, r3, #15
 8007e72:	4906      	ldr	r1, [pc, #24]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7a:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d005      	beq.n	8007e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e086      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
 8007e8c:	52002000 	.word	0x52002000
 8007e90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	4b3f      	ldr	r3, [pc, #252]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d208      	bcs.n	8007ec2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007eb0:	4b3c      	ldr	r3, [pc, #240]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4939      	ldr	r1, [pc, #228]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0308 	and.w	r3, r3, #8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d010      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695a      	ldr	r2, [r3, #20]
 8007ed2:	4b34      	ldr	r3, [pc, #208]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d208      	bcs.n	8007ef0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ede:	4b31      	ldr	r3, [pc, #196]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	492e      	ldr	r1, [pc, #184]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d010      	beq.n	8007f1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d208      	bcs.n	8007f1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f0c:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	4922      	ldr	r1, [pc, #136]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d010      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69da      	ldr	r2, [r3, #28]
 8007f2e:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d208      	bcs.n	8007f4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	4917      	ldr	r1, [pc, #92]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f4c:	f000 f834 	bl	8007fb8 <HAL_RCC_GetSysClockFreq>
 8007f50:	4602      	mov	r2, r0
 8007f52:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	4912      	ldr	r1, [pc, #72]	; (8007fa8 <HAL_RCC_ClockConfig+0x35c>)
 8007f5e:	5ccb      	ldrb	r3, [r1, r3]
 8007f60:	f003 031f 	and.w	r3, r3, #31
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
 8007f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	4a0d      	ldr	r2, [pc, #52]	; (8007fa8 <HAL_RCC_ClockConfig+0x35c>)
 8007f74:	5cd3      	ldrb	r3, [r2, r3]
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <HAL_RCC_ClockConfig+0x360>)
 8007f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f84:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <HAL_RCC_ClockConfig+0x364>)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <HAL_RCC_ClockConfig+0x368>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7f9 ff0a 	bl	8001da8 <HAL_InitTick>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	080116c0 	.word	0x080116c0
 8007fac:	24000008 	.word	0x24000008
 8007fb0:	24000004 	.word	0x24000004
 8007fb4:	2400000c 	.word	0x2400000c

08007fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b089      	sub	sp, #36	; 0x24
 8007fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fbe:	4bb3      	ldr	r3, [pc, #716]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fc6:	2b18      	cmp	r3, #24
 8007fc8:	f200 8155 	bhi.w	8008276 <HAL_RCC_GetSysClockFreq+0x2be>
 8007fcc:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd2:	bf00      	nop
 8007fd4:	08008039 	.word	0x08008039
 8007fd8:	08008277 	.word	0x08008277
 8007fdc:	08008277 	.word	0x08008277
 8007fe0:	08008277 	.word	0x08008277
 8007fe4:	08008277 	.word	0x08008277
 8007fe8:	08008277 	.word	0x08008277
 8007fec:	08008277 	.word	0x08008277
 8007ff0:	08008277 	.word	0x08008277
 8007ff4:	0800805f 	.word	0x0800805f
 8007ff8:	08008277 	.word	0x08008277
 8007ffc:	08008277 	.word	0x08008277
 8008000:	08008277 	.word	0x08008277
 8008004:	08008277 	.word	0x08008277
 8008008:	08008277 	.word	0x08008277
 800800c:	08008277 	.word	0x08008277
 8008010:	08008277 	.word	0x08008277
 8008014:	08008065 	.word	0x08008065
 8008018:	08008277 	.word	0x08008277
 800801c:	08008277 	.word	0x08008277
 8008020:	08008277 	.word	0x08008277
 8008024:	08008277 	.word	0x08008277
 8008028:	08008277 	.word	0x08008277
 800802c:	08008277 	.word	0x08008277
 8008030:	08008277 	.word	0x08008277
 8008034:	0800806b 	.word	0x0800806b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008038:	4b94      	ldr	r3, [pc, #592]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b00      	cmp	r3, #0
 8008042:	d009      	beq.n	8008058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008044:	4b91      	ldr	r3, [pc, #580]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	08db      	lsrs	r3, r3, #3
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	4a90      	ldr	r2, [pc, #576]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
 8008054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008056:	e111      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008058:	4b8d      	ldr	r3, [pc, #564]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800805a:	61bb      	str	r3, [r7, #24]
    break;
 800805c:	e10e      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800805e:	4b8d      	ldr	r3, [pc, #564]	; (8008294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008060:	61bb      	str	r3, [r7, #24]
    break;
 8008062:	e10b      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008064:	4b8c      	ldr	r3, [pc, #560]	; (8008298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008066:	61bb      	str	r3, [r7, #24]
    break;
 8008068:	e108      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800806a:	4b88      	ldr	r3, [pc, #544]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008074:	4b85      	ldr	r3, [pc, #532]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	091b      	lsrs	r3, r3, #4
 800807a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800807e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008080:	4b82      	ldr	r3, [pc, #520]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800808a:	4b80      	ldr	r3, [pc, #512]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808e:	08db      	lsrs	r3, r3, #3
 8008090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80e1 	beq.w	8008270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	f000 8083 	beq.w	80081bc <HAL_RCC_GetSysClockFreq+0x204>
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	f200 80a1 	bhi.w	8008200 <HAL_RCC_GetSysClockFreq+0x248>
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x114>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d056      	beq.n	8008178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80080ca:	e099      	b.n	8008200 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080cc:	4b6f      	ldr	r3, [pc, #444]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02d      	beq.n	8008134 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080d8:	4b6c      	ldr	r3, [pc, #432]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	08db      	lsrs	r3, r3, #3
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	4a6b      	ldr	r2, [pc, #428]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
 80080e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	ee07 3a90 	vmov	s15, r3
 80080f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008102:	4b62      	ldr	r3, [pc, #392]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008112:	ed97 6a02 	vldr	s12, [r7, #8]
 8008116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 800811a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008132:	e087      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008146:	4b51      	ldr	r3, [pc, #324]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008156:	ed97 6a02 	vldr	s12, [r7, #8]
 800815a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 800815e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008176:	e065      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008182:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818a:	4b40      	ldr	r3, [pc, #256]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819a:	ed97 6a02 	vldr	s12, [r7, #8]
 800819e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ba:	e043      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80081ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ce:	4b2f      	ldr	r3, [pc, #188]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081de:	ed97 6a02 	vldr	s12, [r7, #8]
 80081e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081fe:	e021      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800820e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008212:	4b1e      	ldr	r3, [pc, #120]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008222:	ed97 6a02 	vldr	s12, [r7, #8]
 8008226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 800822a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008242:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008244:	4b11      	ldr	r3, [pc, #68]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008248:	0a5b      	lsrs	r3, r3, #9
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	3301      	adds	r3, #1
 8008250:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800825c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008268:	ee17 3a90 	vmov	r3, s15
 800826c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800826e:	e005      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
    break;
 8008274:	e002      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008276:	4b07      	ldr	r3, [pc, #28]	; (8008294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008278:	61bb      	str	r3, [r7, #24]
    break;
 800827a:	bf00      	nop
  }

  return sysclockfreq;
 800827c:	69bb      	ldr	r3, [r7, #24]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3724      	adds	r7, #36	; 0x24
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400
 8008290:	03d09000 	.word	0x03d09000
 8008294:	003d0900 	.word	0x003d0900
 8008298:	00989680 	.word	0x00989680
 800829c:	46000000 	.word	0x46000000
 80082a0:	4c742400 	.word	0x4c742400
 80082a4:	4a742400 	.word	0x4a742400
 80082a8:	4b189680 	.word	0x4b189680

080082ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082b2:	f7ff fe81 	bl	8007fb8 <HAL_RCC_GetSysClockFreq>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b10      	ldr	r3, [pc, #64]	; (80082fc <HAL_RCC_GetHCLKFreq+0x50>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	0a1b      	lsrs	r3, r3, #8
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	490f      	ldr	r1, [pc, #60]	; (8008300 <HAL_RCC_GetHCLKFreq+0x54>)
 80082c4:	5ccb      	ldrb	r3, [r1, r3]
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082d0:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <HAL_RCC_GetHCLKFreq+0x50>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <HAL_RCC_GetHCLKFreq+0x54>)
 80082da:	5cd3      	ldrb	r3, [r2, r3]
 80082dc:	f003 031f 	and.w	r3, r3, #31
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	fa22 f303 	lsr.w	r3, r2, r3
 80082e6:	4a07      	ldr	r2, [pc, #28]	; (8008304 <HAL_RCC_GetHCLKFreq+0x58>)
 80082e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082ea:	4a07      	ldr	r2, [pc, #28]	; (8008308 <HAL_RCC_GetHCLKFreq+0x5c>)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <HAL_RCC_GetHCLKFreq+0x58>)
 80082f2:	681b      	ldr	r3, [r3, #0]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58024400 	.word	0x58024400
 8008300:	080116c0 	.word	0x080116c0
 8008304:	24000008 	.word	0x24000008
 8008308:	24000004 	.word	0x24000004

0800830c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008314:	2300      	movs	r3, #0
 8008316:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008318:	2300      	movs	r3, #0
 800831a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d03f      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008330:	d02a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008336:	d824      	bhi.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800833c:	d018      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800833e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008342:	d81e      	bhi.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800834c:	d007      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800834e:	e018      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008350:	4bab      	ldr	r3, [pc, #684]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	4aaa      	ldr	r2, [pc, #680]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800835c:	e015      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3304      	adds	r3, #4
 8008362:	2102      	movs	r1, #2
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fff3 	bl	800a350 <RCCEx_PLL2_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800836e:	e00c      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3324      	adds	r3, #36	; 0x24
 8008374:	2102      	movs	r1, #2
 8008376:	4618      	mov	r0, r3
 8008378:	f002 f89c 	bl	800a4b4 <RCCEx_PLL3_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008380:	e003      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	75fb      	strb	r3, [r7, #23]
      break;
 8008386:	e000      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d109      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008390:	4b9b      	ldr	r3, [pc, #620]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800839c:	4998      	ldr	r1, [pc, #608]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	650b      	str	r3, [r1, #80]	; 0x50
 80083a2:	e001      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d03d      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d826      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083d9 	.word	0x080083d9
 80083c8:	080083e7 	.word	0x080083e7
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	08008411 	.word	0x08008411
 80083d4:	08008411 	.word	0x08008411
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d8:	4b89      	ldr	r3, [pc, #548]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	4a88      	ldr	r2, [pc, #544]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083e4:	e015      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3304      	adds	r3, #4
 80083ea:	2100      	movs	r1, #0
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 ffaf 	bl	800a350 <RCCEx_PLL2_Config>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083f6:	e00c      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3324      	adds	r3, #36	; 0x24
 80083fc:	2100      	movs	r1, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f002 f858 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008404:	4603      	mov	r3, r0
 8008406:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008408:	e003      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	75fb      	strb	r3, [r7, #23]
      break;
 800840e:	e000      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d109      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008418:	4b79      	ldr	r3, [pc, #484]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841c:	f023 0207 	bic.w	r2, r3, #7
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008424:	4976      	ldr	r1, [pc, #472]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008426:	4313      	orrs	r3, r2
 8008428:	650b      	str	r3, [r1, #80]	; 0x50
 800842a:	e001      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008438:	2b00      	cmp	r3, #0
 800843a:	d042      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008444:	d02b      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844a:	d825      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800844c:	2bc0      	cmp	r3, #192	; 0xc0
 800844e:	d028      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008450:	2bc0      	cmp	r3, #192	; 0xc0
 8008452:	d821      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008454:	2b80      	cmp	r3, #128	; 0x80
 8008456:	d016      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	d81d      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	d007      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008464:	e018      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008466:	4b66      	ldr	r3, [pc, #408]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	4a65      	ldr	r2, [pc, #404]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800846c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008472:	e017      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3304      	adds	r3, #4
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f001 ff68 	bl	800a350 <RCCEx_PLL2_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008484:	e00e      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3324      	adds	r3, #36	; 0x24
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f002 f811 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008496:	e005      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
      break;
 800849c:	e002      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800849e:	bf00      	nop
 80084a0:	e000      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80084a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80084aa:	4b55      	ldr	r3, [pc, #340]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b6:	4952      	ldr	r1, [pc, #328]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	650b      	str	r3, [r1, #80]	; 0x50
 80084bc:	e001      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d049      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084d8:	d030      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80084da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084de:	d82a      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80084e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084e4:	d02c      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80084e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084ea:	d824      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80084ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f0:	d018      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80084f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f6:	d81e      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80084fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008500:	d007      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008502:	e018      	b.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008504:	4b3e      	ldr	r3, [pc, #248]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	4a3d      	ldr	r2, [pc, #244]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800850a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800850e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008510:	e017      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3304      	adds	r3, #4
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f001 ff19 	bl	800a350 <RCCEx_PLL2_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008522:	e00e      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3324      	adds	r3, #36	; 0x24
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f001 ffc2 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008534:	e005      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	75fb      	strb	r3, [r7, #23]
      break;
 800853a:	e002      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008548:	4b2d      	ldr	r3, [pc, #180]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800854a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008556:	492a      	ldr	r1, [pc, #168]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008558:	4313      	orrs	r3, r2
 800855a:	658b      	str	r3, [r1, #88]	; 0x58
 800855c:	e001      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800856a:	2b00      	cmp	r3, #0
 800856c:	d04c      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008578:	d030      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800857a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800857e:	d82a      	bhi.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008584:	d02c      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008586:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800858a:	d824      	bhi.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800858c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008590:	d018      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008596:	d81e      	bhi.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800859c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085a0:	d007      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80085a2:	e018      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a4:	4b16      	ldr	r3, [pc, #88]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	4a15      	ldr	r2, [pc, #84]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085b0:	e017      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3304      	adds	r3, #4
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 fec9 	bl	800a350 <RCCEx_PLL2_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80085c2:	e00e      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3324      	adds	r3, #36	; 0x24
 80085c8:	2100      	movs	r1, #0
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 ff72 	bl	800a4b4 <RCCEx_PLL3_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085d4:	e005      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]
      break;
 80085da:	e002      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80085dc:	bf00      	nop
 80085de:	e000      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80085e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10d      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80085e8:	4b05      	ldr	r3, [pc, #20]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80085f6:	4902      	ldr	r1, [pc, #8]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	658b      	str	r3, [r1, #88]	; 0x58
 80085fc:	e004      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80085fe:	bf00      	nop
 8008600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008604:	7dfb      	ldrb	r3, [r7, #23]
 8008606:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d032      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008618:	2b30      	cmp	r3, #48	; 0x30
 800861a:	d01c      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800861c:	2b30      	cmp	r3, #48	; 0x30
 800861e:	d817      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008620:	2b20      	cmp	r3, #32
 8008622:	d00c      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008624:	2b20      	cmp	r3, #32
 8008626:	d813      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d016      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800862c:	2b10      	cmp	r3, #16
 800862e:	d10f      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008630:	4baf      	ldr	r3, [pc, #700]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	4aae      	ldr	r2, [pc, #696]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800863a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800863c:	e00e      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3304      	adds	r3, #4
 8008642:	2102      	movs	r1, #2
 8008644:	4618      	mov	r0, r3
 8008646:	f001 fe83 	bl	800a350 <RCCEx_PLL2_Config>
 800864a:	4603      	mov	r3, r0
 800864c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800864e:	e005      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	75fb      	strb	r3, [r7, #23]
      break;
 8008654:	e002      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008656:	bf00      	nop
 8008658:	e000      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800865a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008662:	4ba3      	ldr	r3, [pc, #652]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008666:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866e:	49a0      	ldr	r1, [pc, #640]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008670:	4313      	orrs	r3, r2
 8008672:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008674:	e001      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d047      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800868a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800868e:	d030      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008694:	d82a      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008696:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800869a:	d02c      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800869c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086a0:	d824      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a6:	d018      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ac:	d81e      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80086b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b6:	d007      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80086b8:	e018      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ba:	4b8d      	ldr	r3, [pc, #564]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	4a8c      	ldr	r2, [pc, #560]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086c6:	e017      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fe3e 	bl	800a350 <RCCEx_PLL2_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086d8:	e00e      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3324      	adds	r3, #36	; 0x24
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 fee7 	bl	800a4b4 <RCCEx_PLL3_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086ea:	e005      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
      break;
 80086f0:	e002      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80086f2:	bf00      	nop
 80086f4:	e000      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80086f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80086fe:	4b7c      	ldr	r3, [pc, #496]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008702:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870a:	4979      	ldr	r1, [pc, #484]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800870c:	4313      	orrs	r3, r2
 800870e:	650b      	str	r3, [r1, #80]	; 0x50
 8008710:	e001      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d049      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800872a:	d02e      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800872c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008730:	d828      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008732:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008736:	d02a      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800873c:	d822      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800873e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008742:	d026      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008744:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008748:	d81c      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800874a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800874e:	d010      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008754:	d816      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01d      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800875a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800875e:	d111      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	2101      	movs	r1, #1
 8008766:	4618      	mov	r0, r3
 8008768:	f001 fdf2 	bl	800a350 <RCCEx_PLL2_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008770:	e012      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3324      	adds	r3, #36	; 0x24
 8008776:	2101      	movs	r1, #1
 8008778:	4618      	mov	r0, r3
 800877a:	f001 fe9b 	bl	800a4b4 <RCCEx_PLL3_Config>
 800877e:	4603      	mov	r3, r0
 8008780:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008782:	e009      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	75fb      	strb	r3, [r7, #23]
      break;
 8008788:	e006      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800878a:	bf00      	nop
 800878c:	e004      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d109      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800879e:	4b54      	ldr	r3, [pc, #336]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087aa:	4951      	ldr	r1, [pc, #324]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	650b      	str	r3, [r1, #80]	; 0x50
 80087b0:	e001      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d04b      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087cc:	d02e      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80087ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087d2:	d828      	bhi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d8:	d02a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087de:	d822      	bhi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087e4:	d026      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80087e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ea:	d81c      	bhi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f0:	d010      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80087f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f6:	d816      	bhi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01d      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80087fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008800:	d111      	bne.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3304      	adds	r3, #4
 8008806:	2101      	movs	r1, #1
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fda1 	bl	800a350 <RCCEx_PLL2_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008812:	e012      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3324      	adds	r3, #36	; 0x24
 8008818:	2101      	movs	r1, #1
 800881a:	4618      	mov	r0, r3
 800881c:	f001 fe4a 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008824:	e009      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
      break;
 800882a:	e006      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800882c:	bf00      	nop
 800882e:	e004      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008830:	bf00      	nop
 8008832:	e002      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008834:	bf00      	nop
 8008836:	e000      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008840:	4b2b      	ldr	r3, [pc, #172]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008844:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800884e:	4928      	ldr	r1, [pc, #160]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008850:	4313      	orrs	r3, r2
 8008852:	658b      	str	r3, [r1, #88]	; 0x58
 8008854:	e001      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d02f      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800886e:	d00e      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008874:	d814      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d015      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800887a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800887e:	d10f      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a1a      	ldr	r2, [pc, #104]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800888c:	e00c      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3304      	adds	r3, #4
 8008892:	2101      	movs	r1, #1
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fd5b 	bl	800a350 <RCCEx_PLL2_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800889e:	e003      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e000      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80088a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088ae:	4b10      	ldr	r3, [pc, #64]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ba:	490d      	ldr	r1, [pc, #52]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	650b      	str	r3, [r1, #80]	; 0x50
 80088c0:	e001      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d033      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d81c      	bhi.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80088da:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	0800891b 	.word	0x0800891b
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	08008903 	.word	0x08008903
 80088ec:	0800891b 	.word	0x0800891b
 80088f0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f4:	4bb8      	ldr	r3, [pc, #736]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	4ab7      	ldr	r2, [pc, #732]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008900:	e00c      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	2102      	movs	r1, #2
 8008908:	4618      	mov	r0, r3
 800890a:	f001 fd21 	bl	800a350 <RCCEx_PLL2_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008912:	e003      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
      break;
 8008918:	e000      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800891a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008922:	4bad      	ldr	r3, [pc, #692]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008926:	f023 0203 	bic.w	r2, r3, #3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	49aa      	ldr	r1, [pc, #680]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008930:	4313      	orrs	r3, r2
 8008932:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008934:	e001      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8086 	beq.w	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008948:	4ba4      	ldr	r3, [pc, #656]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4aa3      	ldr	r2, [pc, #652]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800894e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008954:	f7f9 fa72 	bl	8001e3c <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800895a:	e009      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895c:	f7f9 fa6e 	bl	8001e3c <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b64      	cmp	r3, #100	; 0x64
 8008968:	d902      	bls.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	75fb      	strb	r3, [r7, #23]
        break;
 800896e:	e005      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008970:	4b9a      	ldr	r3, [pc, #616]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0ef      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d166      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008982:	4b95      	ldr	r3, [pc, #596]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800898c:	4053      	eors	r3, r2
 800898e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008992:	2b00      	cmp	r3, #0
 8008994:	d013      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008996:	4b90      	ldr	r3, [pc, #576]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089a0:	4b8d      	ldr	r3, [pc, #564]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a4:	4a8c      	ldr	r2, [pc, #560]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089ac:	4b8a      	ldr	r3, [pc, #552]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	4a89      	ldr	r2, [pc, #548]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089b8:	4a87      	ldr	r2, [pc, #540]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c8:	d115      	bne.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ca:	f7f9 fa37 	bl	8001e3c <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089d0:	e00b      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d2:	f7f9 fa33 	bl	8001e3c <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d902      	bls.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	75fb      	strb	r3, [r7, #23]
            break;
 80089e8:	e005      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089ea:	4b7b      	ldr	r3, [pc, #492]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0ed      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d126      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a0a:	d10d      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008a0c:	4b72      	ldr	r3, [pc, #456]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a1a:	0919      	lsrs	r1, r3, #4
 8008a1c:	4b70      	ldr	r3, [pc, #448]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008a1e:	400b      	ands	r3, r1
 8008a20:	496d      	ldr	r1, [pc, #436]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	610b      	str	r3, [r1, #16]
 8008a26:	e005      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008a28:	4b6b      	ldr	r3, [pc, #428]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	4a6a      	ldr	r2, [pc, #424]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a32:	6113      	str	r3, [r2, #16]
 8008a34:	4b68      	ldr	r3, [pc, #416]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a42:	4965      	ldr	r1, [pc, #404]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	670b      	str	r3, [r1, #112]	; 0x70
 8008a48:	e004      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	75bb      	strb	r3, [r7, #22]
 8008a4e:	e001      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
 8008a52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d07e      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a64:	2b28      	cmp	r3, #40	; 0x28
 8008a66:	d867      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008b3f 	.word	0x08008b3f
 8008a74:	08008b39 	.word	0x08008b39
 8008a78:	08008b39 	.word	0x08008b39
 8008a7c:	08008b39 	.word	0x08008b39
 8008a80:	08008b39 	.word	0x08008b39
 8008a84:	08008b39 	.word	0x08008b39
 8008a88:	08008b39 	.word	0x08008b39
 8008a8c:	08008b39 	.word	0x08008b39
 8008a90:	08008b15 	.word	0x08008b15
 8008a94:	08008b39 	.word	0x08008b39
 8008a98:	08008b39 	.word	0x08008b39
 8008a9c:	08008b39 	.word	0x08008b39
 8008aa0:	08008b39 	.word	0x08008b39
 8008aa4:	08008b39 	.word	0x08008b39
 8008aa8:	08008b39 	.word	0x08008b39
 8008aac:	08008b39 	.word	0x08008b39
 8008ab0:	08008b27 	.word	0x08008b27
 8008ab4:	08008b39 	.word	0x08008b39
 8008ab8:	08008b39 	.word	0x08008b39
 8008abc:	08008b39 	.word	0x08008b39
 8008ac0:	08008b39 	.word	0x08008b39
 8008ac4:	08008b39 	.word	0x08008b39
 8008ac8:	08008b39 	.word	0x08008b39
 8008acc:	08008b39 	.word	0x08008b39
 8008ad0:	08008b3f 	.word	0x08008b3f
 8008ad4:	08008b39 	.word	0x08008b39
 8008ad8:	08008b39 	.word	0x08008b39
 8008adc:	08008b39 	.word	0x08008b39
 8008ae0:	08008b39 	.word	0x08008b39
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008b39 	.word	0x08008b39
 8008aec:	08008b39 	.word	0x08008b39
 8008af0:	08008b3f 	.word	0x08008b3f
 8008af4:	08008b39 	.word	0x08008b39
 8008af8:	08008b39 	.word	0x08008b39
 8008afc:	08008b39 	.word	0x08008b39
 8008b00:	08008b39 	.word	0x08008b39
 8008b04:	08008b39 	.word	0x08008b39
 8008b08:	08008b39 	.word	0x08008b39
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b3f 	.word	0x08008b3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3304      	adds	r3, #4
 8008b18:	2101      	movs	r1, #1
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f001 fc18 	bl	800a350 <RCCEx_PLL2_Config>
 8008b20:	4603      	mov	r3, r0
 8008b22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b24:	e00c      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3324      	adds	r3, #36	; 0x24
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fcc1 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b36:	e003      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3c:	e000      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b46:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b52:	4921      	ldr	r1, [pc, #132]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	654b      	str	r3, [r1, #84]	; 0x54
 8008b58:	e001      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d03e      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b6e:	2b05      	cmp	r3, #5
 8008b70:	d820      	bhi.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008bbb 	.word	0x08008bbb
 8008b7c:	08008b91 	.word	0x08008b91
 8008b80:	08008ba3 	.word	0x08008ba3
 8008b84:	08008bbb 	.word	0x08008bbb
 8008b88:	08008bbb 	.word	0x08008bbb
 8008b8c:	08008bbb 	.word	0x08008bbb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3304      	adds	r3, #4
 8008b94:	2101      	movs	r1, #1
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 fbda 	bl	800a350 <RCCEx_PLL2_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008ba0:	e00c      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3324      	adds	r3, #36	; 0x24
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fc83 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bb2:	e003      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb8:	e000      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d110      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008bc2:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	f023 0207 	bic.w	r2, r3, #7
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bce:	4902      	ldr	r1, [pc, #8]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	654b      	str	r3, [r1, #84]	; 0x54
 8008bd4:	e008      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	58024800 	.word	0x58024800
 8008be0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d039      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d820      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c47 	.word	0x08008c47
 8008c08:	08008c1d 	.word	0x08008c1d
 8008c0c:	08008c2f 	.word	0x08008c2f
 8008c10:	08008c47 	.word	0x08008c47
 8008c14:	08008c47 	.word	0x08008c47
 8008c18:	08008c47 	.word	0x08008c47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	2101      	movs	r1, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 fb94 	bl	800a350 <RCCEx_PLL2_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c2c:	e00c      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3324      	adds	r3, #36	; 0x24
 8008c32:	2101      	movs	r1, #1
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 fc3d 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c3e:	e003      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	75fb      	strb	r3, [r7, #23]
      break;
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c4e:	4bb7      	ldr	r3, [pc, #732]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f023 0207 	bic.w	r2, r3, #7
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5c:	49b3      	ldr	r1, [pc, #716]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	658b      	str	r3, [r1, #88]	; 0x58
 8008c62:	e001      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d04b      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c7e:	d02e      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c84:	d828      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c8a:	d02a      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c90:	d822      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c96:	d026      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c9c:	d81c      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca2:	d010      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca8:	d816      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d01d      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb2:	d111      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fb48 	bl	800a350 <RCCEx_PLL2_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cc4:	e012      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3324      	adds	r3, #36	; 0x24
 8008cca:	2102      	movs	r1, #2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 fbf1 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cd6:	e009      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	75fb      	strb	r3, [r7, #23]
      break;
 8008cdc:	e006      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008cde:	bf00      	nop
 8008ce0:	e004      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ce2:	bf00      	nop
 8008ce4:	e002      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ce6:	bf00      	nop
 8008ce8:	e000      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cf2:	4b8e      	ldr	r3, [pc, #568]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d00:	498a      	ldr	r1, [pc, #552]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	654b      	str	r3, [r1, #84]	; 0x54
 8008d06:	e001      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d04b      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d22:	d02e      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008d24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d28:	d828      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d02a      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d34:	d822      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d3a:	d026      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d40:	d81c      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d46:	d010      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4c:	d816      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d01d      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d56:	d111      	bne.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 faf6 	bl	800a350 <RCCEx_PLL2_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d68:	e012      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3324      	adds	r3, #36	; 0x24
 8008d6e:	2102      	movs	r1, #2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 fb9f 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d7a:	e009      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d80:	e006      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d82:	bf00      	nop
 8008d84:	e004      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d86:	bf00      	nop
 8008d88:	e002      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d8a:	bf00      	nop
 8008d8c:	e000      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d96:	4b65      	ldr	r3, [pc, #404]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008da4:	4961      	ldr	r1, [pc, #388]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	658b      	str	r3, [r1, #88]	; 0x58
 8008daa:	e001      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d04b      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008dc6:	d02e      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008dc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008dcc:	d828      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd2:	d02a      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd8:	d822      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008dda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008dde:	d026      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008de0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008de4:	d81c      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dea:	d010      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008df0:	d816      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01d      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dfa:	d111      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 faa4 	bl	800a350 <RCCEx_PLL2_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e0c:	e012      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3324      	adds	r3, #36	; 0x24
 8008e12:	2102      	movs	r1, #2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 fb4d 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e1e:	e009      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	75fb      	strb	r3, [r7, #23]
      break;
 8008e24:	e006      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e26:	bf00      	nop
 8008e28:	e004      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e2a:	bf00      	nop
 8008e2c:	e002      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e3a:	4b3c      	ldr	r3, [pc, #240]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e48:	4938      	ldr	r1, [pc, #224]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8008e4e:	e001      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01a      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e6a:	d10a      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3324      	adds	r3, #36	; 0x24
 8008e70:	2102      	movs	r1, #2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 fb1e 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e82:	4b2a      	ldr	r3, [pc, #168]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e90:	4926      	ldr	r1, [pc, #152]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01a      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eac:	d10a      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3324      	adds	r3, #36	; 0x24
 8008eb2:	2102      	movs	r1, #2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 fafd 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ec4:	4b19      	ldr	r3, [pc, #100]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ed2:	4916      	ldr	r1, [pc, #88]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d036      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eee:	d01f      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef4:	d817      	bhi.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008efe:	d009      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008f00:	e011      	b.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3304      	adds	r3, #4
 8008f06:	2100      	movs	r1, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 fa21 	bl	800a350 <RCCEx_PLL2_Config>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f12:	e00e      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3324      	adds	r3, #36	; 0x24
 8008f18:	2102      	movs	r1, #2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 faca 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f24:	e005      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2a:	e002      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008f2c:	58024400 	.word	0x58024400
      break;
 8008f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f38:	4b93      	ldr	r3, [pc, #588]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f46:	4990      	ldr	r1, [pc, #576]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8008f4c:	e001      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d033      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f68:	d01c      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008f6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f6e:	d816      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f74:	d003      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f7a:	d007      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008f7c:	e00f      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7e:	4b82      	ldr	r3, [pc, #520]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	4a81      	ldr	r2, [pc, #516]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f8a:	e00c      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	2101      	movs	r1, #1
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 fa8e 	bl	800a4b4 <RCCEx_PLL3_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f9c:	e003      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fac:	4b76      	ldr	r3, [pc, #472]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fba:	4973      	ldr	r1, [pc, #460]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	654b      	str	r3, [r1, #84]	; 0x54
 8008fc0:	e001      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d029      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fde:	d007      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008fe0:	e00f      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe2:	4b69      	ldr	r3, [pc, #420]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	4a68      	ldr	r2, [pc, #416]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fee:	e00b      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	2102      	movs	r1, #2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 f9aa 	bl	800a350 <RCCEx_PLL2_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009000:	e002      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
      break;
 8009006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800900e:	4b5e      	ldr	r3, [pc, #376]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901a:	495b      	ldr	r1, [pc, #364]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800901c:	4313      	orrs	r3, r2
 800901e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009020:	e001      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3324      	adds	r3, #36	; 0x24
 8009036:	2102      	movs	r1, #2
 8009038:	4618      	mov	r0, r3
 800903a:	f001 fa3b 	bl	800a4b4 <RCCEx_PLL3_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d030      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800905c:	d017      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800905e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009062:	d811      	bhi.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009068:	d013      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800906a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800906e:	d80b      	bhi.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d010      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009078:	d106      	bne.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800907a:	4b43      	ldr	r3, [pc, #268]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	4a42      	ldr	r2, [pc, #264]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009086:	e007      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	75fb      	strb	r3, [r7, #23]
      break;
 800908c:	e004      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800908e:	bf00      	nop
 8009090:	e002      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009092:	bf00      	nop
 8009094:	e000      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800909e:	4b3a      	ldr	r3, [pc, #232]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090aa:	4937      	ldr	r1, [pc, #220]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	654b      	str	r3, [r1, #84]	; 0x54
 80090b0:	e001      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090c2:	4b31      	ldr	r3, [pc, #196]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ce:	492e      	ldr	r1, [pc, #184]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d009      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80090e0:	4b29      	ldr	r3, [pc, #164]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090ee:	4926      	ldr	r1, [pc, #152]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d008      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009100:	4b21      	ldr	r3, [pc, #132]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009104:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800910c:	491e      	ldr	r1, [pc, #120]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800910e:	4313      	orrs	r3, r2
 8009110:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00d      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800911e:	4b1a      	ldr	r3, [pc, #104]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	4a19      	ldr	r2, [pc, #100]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009128:	6113      	str	r3, [r2, #16]
 800912a:	4b17      	ldr	r3, [pc, #92]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800912c:	691a      	ldr	r2, [r3, #16]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009134:	4914      	ldr	r1, [pc, #80]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009136:	4313      	orrs	r3, r2
 8009138:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	da08      	bge.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009142:	4b11      	ldr	r3, [pc, #68]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914e:	490e      	ldr	r1, [pc, #56]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009150:	4313      	orrs	r3, r2
 8009152:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d009      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009160:	4b09      	ldr	r3, [pc, #36]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916e:	4906      	ldr	r1, [pc, #24]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009170:	4313      	orrs	r3, r2
 8009172:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009174:	7dbb      	ldrb	r3, [r7, #22]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	e000      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	58024400 	.word	0x58024400

0800918c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b090      	sub	sp, #64	; 0x40
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919a:	f040 8095 	bne.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800919e:	4bae      	ldr	r3, [pc, #696]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	633b      	str	r3, [r7, #48]	; 0x30
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	f200 8088 	bhi.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80091b0:	a201      	add	r2, pc, #4	; (adr r2, 80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091f5 	.word	0x080091f5
 80091c0:	0800921d 	.word	0x0800921d
 80091c4:	080092b9 	.word	0x080092b9
 80091c8:	08009245 	.word	0x08009245

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091cc:	4ba2      	ldr	r3, [pc, #648]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091d8:	d108      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 ff64 	bl	800a0ac <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091e8:	f000 bc95 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f0:	f000 bc91 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091f4:	4b98      	ldr	r3, [pc, #608]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009200:	d108      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009202:	f107 0318 	add.w	r3, r7, #24
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fca8 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009210:	f000 bc81 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009218:	f000 bc7d 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800921c:	4b8e      	ldr	r3, [pc, #568]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009228:	d108      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800922a:	f107 030c 	add.w	r3, r7, #12
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fde8 	bl	8009e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009238:	f000 bc6d 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009240:	f000 bc69 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009244:	4b84      	ldr	r3, [pc, #528]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800924c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800924e:	4b82      	ldr	r3, [pc, #520]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b04      	cmp	r3, #4
 8009258:	d10c      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800925a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009260:	4b7d      	ldr	r3, [pc, #500]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	08db      	lsrs	r3, r3, #3
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	4a7c      	ldr	r2, [pc, #496]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800926c:	fa22 f303 	lsr.w	r3, r2, r3
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009272:	e01f      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009274:	4b78      	ldr	r3, [pc, #480]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009280:	d106      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009288:	d102      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800928a:	4b75      	ldr	r3, [pc, #468]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800928c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800928e:	e011      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009290:	4b71      	ldr	r3, [pc, #452]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800929c:	d106      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a4:	d102      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092a6:	4b6f      	ldr	r3, [pc, #444]	; (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092aa:	e003      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092b0:	f000 bc31 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092b4:	f000 bc2f 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092b8:	4b6b      	ldr	r3, [pc, #428]	; (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092bc:	f000 bc2b 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c4:	f000 bc27 	b.w	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ce:	f040 8095 	bne.w	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80092d2:	4b61      	ldr	r3, [pc, #388]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80092d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80092da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e2:	d04d      	beq.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ea:	f200 8084 	bhi.w	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	2bc0      	cmp	r3, #192	; 0xc0
 80092f2:	d07d      	beq.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	2bc0      	cmp	r3, #192	; 0xc0
 80092f8:	d87d      	bhi.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	2b80      	cmp	r3, #128	; 0x80
 80092fe:	d02d      	beq.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	2b80      	cmp	r3, #128	; 0x80
 8009304:	d877      	bhi.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d012      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009312:	e070      	b.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009314:	4b50      	ldr	r3, [pc, #320]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009320:	d107      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fec0 	bl	800a0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009330:	e3f1      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009336:	e3ee      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009338:	4b47      	ldr	r3, [pc, #284]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009344:	d107      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009346:	f107 0318 	add.w	r3, r7, #24
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fc06 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009354:	e3df      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800935a:	e3dc      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800935c:	4b3e      	ldr	r3, [pc, #248]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009368:	d107      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936a:	f107 030c 	add.w	r3, r7, #12
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fd48 	bl	8009e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009378:	e3cd      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800937e:	e3ca      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009380:	4b35      	ldr	r3, [pc, #212]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009388:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800938a:	4b33      	ldr	r3, [pc, #204]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d10c      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800939c:	4b2e      	ldr	r3, [pc, #184]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	08db      	lsrs	r3, r3, #3
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	4a2d      	ldr	r2, [pc, #180]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ae:	e01e      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093b0:	4b29      	ldr	r3, [pc, #164]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093bc:	d106      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c4:	d102      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80093c6:	4b26      	ldr	r3, [pc, #152]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ca:	e010      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093cc:	4b22      	ldr	r3, [pc, #136]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093d8:	d106      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80093da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e0:	d102      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093e2:	4b20      	ldr	r3, [pc, #128]	; (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e6:	e002      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093ec:	e393      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093ee:	e392      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093f0:	4b1d      	ldr	r3, [pc, #116]	; (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093f4:	e38f      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093fa:	e38c      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009402:	f040 80a7 	bne.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009406:	4b14      	ldr	r3, [pc, #80]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800940e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009416:	d05f      	beq.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800941e:	f200 8096 	bhi.w	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009428:	f000 808e 	beq.w	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009432:	f200 808c 	bhi.w	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800943c:	d03a      	beq.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009444:	f200 8083 	bhi.w	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009454:	d01c      	beq.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009456:	e07a      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009458:	58024400 	.word	0x58024400
 800945c:	03d09000 	.word	0x03d09000
 8009460:	003d0900 	.word	0x003d0900
 8009464:	00989680 	.word	0x00989680
 8009468:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800946c:	4baa      	ldr	r3, [pc, #680]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009478:	d107      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800947a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fe14 	bl	800a0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009488:	e345      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800948e:	e342      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009490:	4ba1      	ldr	r3, [pc, #644]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800949c:	d107      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949e:	f107 0318 	add.w	r3, r7, #24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fb5a 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094ac:	e333      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b2:	e330      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094b4:	4b98      	ldr	r3, [pc, #608]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094c0:	d107      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094c2:	f107 030c 	add.w	r3, r7, #12
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fc9c 	bl	8009e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094d0:	e321      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d6:	e31e      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094d8:	4b8f      	ldr	r3, [pc, #572]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094e2:	4b8d      	ldr	r3, [pc, #564]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d10c      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d109      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094f4:	4b88      	ldr	r3, [pc, #544]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	08db      	lsrs	r3, r3, #3
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	4a87      	ldr	r2, [pc, #540]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009500:	fa22 f303 	lsr.w	r3, r2, r3
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009506:	e01e      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009508:	4b83      	ldr	r3, [pc, #524]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009514:	d106      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800951c:	d102      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800951e:	4b80      	ldr	r3, [pc, #512]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009522:	e010      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009524:	4b7c      	ldr	r3, [pc, #496]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009530:	d106      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009538:	d102      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800953a:	4b7a      	ldr	r3, [pc, #488]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800953e:	e002      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009544:	e2e7      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009546:	e2e6      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009548:	4b77      	ldr	r3, [pc, #476]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800954c:	e2e3      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009552:	e2e0      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800955a:	f040 809c 	bne.w	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800955e:	4b6e      	ldr	r3, [pc, #440]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009562:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009566:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800956e:	d054      	beq.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009576:	f200 808b 	bhi.w	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009580:	f000 8083 	beq.w	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800958a:	f200 8081 	bhi.w	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009594:	d02f      	beq.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800959c:	d878      	bhi.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80095a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095aa:	d012      	beq.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80095ac:	e070      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095ae:	4b5a      	ldr	r3, [pc, #360]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ba:	d107      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fd73 	bl	800a0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095ca:	e2a4      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d0:	e2a1      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095d2:	4b51      	ldr	r3, [pc, #324]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095de:	d107      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e0:	f107 0318 	add.w	r3, r7, #24
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fab9 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80095ee:	e292      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095f4:	e28f      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095f6:	4b48      	ldr	r3, [pc, #288]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009602:	d107      	bne.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	4618      	mov	r0, r3
 800960a:	f000 fbfb 	bl	8009e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009612:	e280      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009618:	e27d      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800961a:	4b3f      	ldr	r3, [pc, #252]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800961c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800961e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009622:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009624:	4b3c      	ldr	r3, [pc, #240]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b04      	cmp	r3, #4
 800962e:	d10c      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009636:	4b38      	ldr	r3, [pc, #224]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	08db      	lsrs	r3, r3, #3
 800963c:	f003 0303 	and.w	r3, r3, #3
 8009640:	4a36      	ldr	r2, [pc, #216]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009642:	fa22 f303 	lsr.w	r3, r2, r3
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009648:	e01e      	b.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800964a:	4b33      	ldr	r3, [pc, #204]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009656:	d106      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800965e:	d102      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009660:	4b2f      	ldr	r3, [pc, #188]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009664:	e010      	b.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009666:	4b2c      	ldr	r3, [pc, #176]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800966e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009672:	d106      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800967a:	d102      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800967c:	4b29      	ldr	r3, [pc, #164]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009680:	e002      	b.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009686:	e246      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009688:	e245      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800968a:	4b27      	ldr	r3, [pc, #156]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800968e:	e242      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009694:	e23f      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969c:	f040 80a8 	bne.w	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80096a0:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80096a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80096aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b0:	d060      	beq.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b8:	f200 8097 	bhi.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80096bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096c2:	f000 808f 	beq.w	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096cc:	f200 808d 	bhi.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d6:	d03b      	beq.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096de:	f200 8084 	bhi.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d004      	beq.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ee:	d01d      	beq.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80096f0:	e07b      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096fe:	d107      	bne.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fcd1 	bl	800a0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800970e:	e202      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009714:	e1ff      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009716:	bf00      	nop
 8009718:	58024400 	.word	0x58024400
 800971c:	03d09000 	.word	0x03d09000
 8009720:	003d0900 	.word	0x003d0900
 8009724:	00989680 	.word	0x00989680
 8009728:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800972c:	4ba3      	ldr	r3, [pc, #652]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009738:	d107      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800973a:	f107 0318 	add.w	r3, r7, #24
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fa0c 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009748:	e1e5      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974e:	e1e2      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009750:	4b9a      	ldr	r3, [pc, #616]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800975c:	d107      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800975e:	f107 030c 	add.w	r3, r7, #12
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fb4e 	bl	8009e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800976c:	e1d3      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009772:	e1d0      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009774:	4b91      	ldr	r3, [pc, #580]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800977c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800977e:	4b8f      	ldr	r3, [pc, #572]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0304 	and.w	r3, r3, #4
 8009786:	2b04      	cmp	r3, #4
 8009788:	d10c      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800978a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009790:	4b8a      	ldr	r3, [pc, #552]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	4a89      	ldr	r2, [pc, #548]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
 80097a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097a2:	e01e      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097a4:	4b85      	ldr	r3, [pc, #532]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097b0:	d106      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80097b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b8:	d102      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80097ba:	4b82      	ldr	r3, [pc, #520]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097be:	e010      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097c0:	4b7e      	ldr	r3, [pc, #504]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097cc:	d106      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d4:	d102      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80097d6:	4b7c      	ldr	r3, [pc, #496]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097da:	e002      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80097e0:	e199      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097e2:	e198      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80097e4:	4b79      	ldr	r3, [pc, #484]	; (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097e8:	e195      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ee:	e192      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097f6:	d173      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80097f8:	4b70      	ldr	r3, [pc, #448]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009800:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009808:	d02f      	beq.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009810:	d863      	bhi.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	d004      	beq.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800981e:	d012      	beq.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009820:	e05b      	b.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009822:	4b66      	ldr	r3, [pc, #408]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800982a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800982e:	d107      	bne.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009830:	f107 0318 	add.w	r3, r7, #24
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f991 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800983e:	e16a      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009844:	e167      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009846:	4b5d      	ldr	r3, [pc, #372]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800984e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009852:	d107      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009854:	f107 030c 	add.w	r3, r7, #12
 8009858:	4618      	mov	r0, r3
 800985a:	f000 fad3 	bl	8009e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009862:	e158      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009868:	e155      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800986a:	4b54      	ldr	r3, [pc, #336]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800986c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009872:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009874:	4b51      	ldr	r3, [pc, #324]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0304 	and.w	r3, r3, #4
 800987c:	2b04      	cmp	r3, #4
 800987e:	d10c      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009886:	4b4d      	ldr	r3, [pc, #308]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	08db      	lsrs	r3, r3, #3
 800988c:	f003 0303 	and.w	r3, r3, #3
 8009890:	4a4b      	ldr	r2, [pc, #300]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009892:	fa22 f303 	lsr.w	r3, r2, r3
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009898:	e01e      	b.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800989a:	4b48      	ldr	r3, [pc, #288]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a6:	d106      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098ae:	d102      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80098b0:	4b44      	ldr	r3, [pc, #272]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098b4:	e010      	b.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098b6:	4b41      	ldr	r3, [pc, #260]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098c2:	d106      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80098c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ca:	d102      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80098cc:	4b3e      	ldr	r3, [pc, #248]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d0:	e002      	b.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80098d6:	e11e      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80098d8:	e11d      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098de:	e11a      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e6:	d133      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80098e8:	4b34      	ldr	r3, [pc, #208]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d004      	beq.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098fe:	d012      	beq.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009900:	e023      	b.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009902:	4b2e      	ldr	r3, [pc, #184]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800990a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800990e:	d107      	bne.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009914:	4618      	mov	r0, r3
 8009916:	f000 fbc9 	bl	800a0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800991e:	e0fa      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009924:	e0f7      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009926:	4b25      	ldr	r3, [pc, #148]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800992e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009932:	d107      	bne.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009934:	f107 0318 	add.w	r3, r7, #24
 8009938:	4618      	mov	r0, r3
 800993a:	f000 f90f 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009942:	e0e8      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009948:	e0e5      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800994e:	e0e2      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009956:	f040 808f 	bne.w	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800995a:	4b18      	ldr	r3, [pc, #96]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800995c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009962:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800996a:	d075      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009972:	d87e      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997a:	d060      	beq.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009982:	d876      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800998a:	d045      	beq.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009992:	d86e      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800999a:	d02b      	beq.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a2:	d866      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d004      	beq.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099b0:	d00e      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80099b2:	e05e      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80099b4:	f000 f8bc 	bl	8009b30 <HAL_RCCEx_GetD3PCLK1Freq>
 80099b8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80099ba:	e0ac      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80099bc:	58024400 	.word	0x58024400
 80099c0:	03d09000 	.word	0x03d09000
 80099c4:	003d0900 	.word	0x003d0900
 80099c8:	00989680 	.word	0x00989680
 80099cc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099d0:	4b53      	ldr	r3, [pc, #332]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099dc:	d107      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099de:	f107 0318 	add.w	r3, r7, #24
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f8ba 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099ec:	e093      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f2:	e090      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099f4:	4b4a      	ldr	r3, [pc, #296]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a00:	d107      	bne.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a02:	f107 030c 	add.w	r3, r7, #12
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 f9fc 	bl	8009e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a10:	e081      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a16:	e07e      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a18:	4b41      	ldr	r3, [pc, #260]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d109      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a24:	4b3e      	ldr	r3, [pc, #248]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	08db      	lsrs	r3, r3, #3
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	4a3d      	ldr	r2, [pc, #244]	; (8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
 8009a34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a36:	e06e      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a3c:	e06b      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a3e:	4b38      	ldr	r3, [pc, #224]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4a:	d102      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009a4c:	4b36      	ldr	r3, [pc, #216]	; (8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a50:	e061      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a56:	e05e      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a58:	4b31      	ldr	r3, [pc, #196]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a64:	d102      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009a66:	4b31      	ldr	r3, [pc, #196]	; (8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a6a:	e054      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a70:	e051      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a76:	e04e      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a7e:	d148      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009a80:	4b27      	ldr	r3, [pc, #156]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a88:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a90:	d02a      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a98:	d838      	bhi.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d004      	beq.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aa6:	d00d      	beq.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009aa8:	e030      	b.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009aaa:	4b1d      	ldr	r3, [pc, #116]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ab6:	d102      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009ab8:	4b1c      	ldr	r3, [pc, #112]	; (8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009aba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009abc:	e02b      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac2:	e028      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ac4:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ad0:	d107      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fae8 	bl	800a0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ae0:	e019      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ae6:	e016      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ae8:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009af4:	d107      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af6:	f107 0318 	add.w	r3, r7, #24
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 f82e 	bl	8009b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b04:	e007      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0a:	e004      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b10:	e001      	b.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3740      	adds	r7, #64	; 0x40
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	58024400 	.word	0x58024400
 8009b24:	03d09000 	.word	0x03d09000
 8009b28:	003d0900 	.word	0x003d0900
 8009b2c:	00989680 	.word	0x00989680

08009b30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b34:	f7fe fbba 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	091b      	lsrs	r3, r3, #4
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	4904      	ldr	r1, [pc, #16]	; (8009b58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b46:	5ccb      	ldrb	r3, [r1, r3]
 8009b48:	f003 031f 	and.w	r3, r3, #31
 8009b4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	58024400 	.word	0x58024400
 8009b58:	080116c0 	.word	0x080116c0

08009b5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b089      	sub	sp, #36	; 0x24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b64:	4ba1      	ldr	r3, [pc, #644]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009b6e:	4b9f      	ldr	r3, [pc, #636]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b72:	0b1b      	lsrs	r3, r3, #12
 8009b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b7a:	4b9c      	ldr	r3, [pc, #624]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	091b      	lsrs	r3, r3, #4
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b86:	4b99      	ldr	r3, [pc, #612]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8a:	08db      	lsrs	r3, r3, #3
 8009b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	fb02 f303 	mul.w	r3, r2, r3
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 8111 	beq.w	8009dcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	f000 8083 	beq.w	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	f200 80a1 	bhi.w	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d056      	beq.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009bc6:	e099      	b.n	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc8:	4b88      	ldr	r3, [pc, #544]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0320 	and.w	r3, r3, #32
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d02d      	beq.n	8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bd4:	4b85      	ldr	r3, [pc, #532]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	08db      	lsrs	r3, r3, #3
 8009bda:	f003 0303 	and.w	r3, r3, #3
 8009bde:	4a84      	ldr	r2, [pc, #528]	; (8009df0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009be0:	fa22 f303 	lsr.w	r3, r2, r3
 8009be4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfe:	4b7b      	ldr	r3, [pc, #492]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c2e:	e087      	b.n	8009d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c42:	4b6a      	ldr	r3, [pc, #424]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c72:	e065      	b.n	8009d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c86:	4b59      	ldr	r3, [pc, #356]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cb6:	e043      	b.n	8009d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cca:	4b48      	ldr	r3, [pc, #288]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cfa:	e021      	b.n	8009d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0e:	4b37      	ldr	r3, [pc, #220]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009d40:	4b2a      	ldr	r3, [pc, #168]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d44:	0a5b      	lsrs	r3, r3, #9
 8009d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d66:	ee17 2a90 	vmov	r2, s15
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009d6e:	4b1f      	ldr	r3, [pc, #124]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d72:	0c1b      	lsrs	r3, r3, #16
 8009d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d94:	ee17 2a90 	vmov	r2, s15
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009d9c:	4b13      	ldr	r3, [pc, #76]	; (8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	0e1b      	lsrs	r3, r3, #24
 8009da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dc2:	ee17 2a90 	vmov	r2, s15
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009dca:	e008      	b.n	8009dde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	609a      	str	r2, [r3, #8]
}
 8009dde:	bf00      	nop
 8009de0:	3724      	adds	r7, #36	; 0x24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	58024400 	.word	0x58024400
 8009df0:	03d09000 	.word	0x03d09000
 8009df4:	46000000 	.word	0x46000000
 8009df8:	4c742400 	.word	0x4c742400
 8009dfc:	4a742400 	.word	0x4a742400
 8009e00:	4b189680 	.word	0x4b189680

08009e04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b089      	sub	sp, #36	; 0x24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e0c:	4ba1      	ldr	r3, [pc, #644]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009e16:	4b9f      	ldr	r3, [pc, #636]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1a:	0d1b      	lsrs	r3, r3, #20
 8009e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e22:	4b9c      	ldr	r3, [pc, #624]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	0a1b      	lsrs	r3, r3, #8
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009e2e:	4b99      	ldr	r3, [pc, #612]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e32:	08db      	lsrs	r3, r3, #3
 8009e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	fb02 f303 	mul.w	r3, r2, r3
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8111 	beq.w	800a074 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	f000 8083 	beq.w	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	f200 80a1 	bhi.w	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d056      	beq.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e6e:	e099      	b.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e70:	4b88      	ldr	r3, [pc, #544]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0320 	and.w	r3, r3, #32
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d02d      	beq.n	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e7c:	4b85      	ldr	r3, [pc, #532]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	08db      	lsrs	r3, r3, #3
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	4a84      	ldr	r2, [pc, #528]	; (800a098 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e88:	fa22 f303 	lsr.w	r3, r2, r3
 8009e8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	ee07 3a90 	vmov	s15, r3
 8009e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b7b      	ldr	r3, [pc, #492]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ed6:	e087      	b.n	8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eea:	4b6a      	ldr	r3, [pc, #424]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1a:	e065      	b.n	8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2e:	4b59      	ldr	r3, [pc, #356]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f5e:	e043      	b.n	8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f72:	4b48      	ldr	r3, [pc, #288]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fa2:	e021      	b.n	8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb6:	4b37      	ldr	r3, [pc, #220]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fe6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009fe8:	4b2a      	ldr	r3, [pc, #168]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	0a5b      	lsrs	r3, r3, #9
 8009fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a002:	edd7 6a07 	vldr	s13, [r7, #28]
 800a006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a00e:	ee17 2a90 	vmov	r2, s15
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a016:	4b1f      	ldr	r3, [pc, #124]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01a:	0c1b      	lsrs	r3, r3, #16
 800a01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a020:	ee07 3a90 	vmov	s15, r3
 800a024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a02c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a030:	edd7 6a07 	vldr	s13, [r7, #28]
 800a034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a03c:	ee17 2a90 	vmov	r2, s15
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a044:	4b13      	ldr	r3, [pc, #76]	; (800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a048:	0e1b      	lsrs	r3, r3, #24
 800a04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a06a:	ee17 2a90 	vmov	r2, s15
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a072:	e008      	b.n	800a086 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	609a      	str	r2, [r3, #8]
}
 800a086:	bf00      	nop
 800a088:	3724      	adds	r7, #36	; 0x24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	58024400 	.word	0x58024400
 800a098:	03d09000 	.word	0x03d09000
 800a09c:	46000000 	.word	0x46000000
 800a0a0:	4c742400 	.word	0x4c742400
 800a0a4:	4a742400 	.word	0x4a742400
 800a0a8:	4b189680 	.word	0x4b189680

0800a0ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b089      	sub	sp, #36	; 0x24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0b4:	4ba0      	ldr	r3, [pc, #640]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a0be:	4b9e      	ldr	r3, [pc, #632]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	091b      	lsrs	r3, r3, #4
 800a0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a0ca:	4b9b      	ldr	r3, [pc, #620]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a0d4:	4b98      	ldr	r3, [pc, #608]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d8:	08db      	lsrs	r3, r3, #3
 800a0da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	fb02 f303 	mul.w	r3, r2, r3
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 8111 	beq.w	800a31a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	f000 8083 	beq.w	800a206 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	2b02      	cmp	r3, #2
 800a104:	f200 80a1 	bhi.w	800a24a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d056      	beq.n	800a1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a114:	e099      	b.n	800a24a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a116:	4b88      	ldr	r3, [pc, #544]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0320 	and.w	r3, r3, #32
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d02d      	beq.n	800a17e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a122:	4b85      	ldr	r3, [pc, #532]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	08db      	lsrs	r3, r3, #3
 800a128:	f003 0303 	and.w	r3, r3, #3
 800a12c:	4a83      	ldr	r2, [pc, #524]	; (800a33c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a12e:	fa22 f303 	lsr.w	r3, r2, r3
 800a132:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	ee07 3a90 	vmov	s15, r3
 800a144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14c:	4b7a      	ldr	r3, [pc, #488]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a154:	ee07 3a90 	vmov	s15, r3
 800a158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a160:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a174:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a178:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a17c:	e087      	b.n	800a28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	ee07 3a90 	vmov	s15, r3
 800a184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a188:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a18c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a190:	4b69      	ldr	r3, [pc, #420]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a198:	ee07 3a90 	vmov	s15, r3
 800a19c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1c0:	e065      	b.n	800a28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a348 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a1d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d4:	4b58      	ldr	r3, [pc, #352]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1dc:	ee07 3a90 	vmov	s15, r3
 800a1e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a200:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a204:	e043      	b.n	800a28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a210:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a218:	4b47      	ldr	r3, [pc, #284]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a220:	ee07 3a90 	vmov	s15, r3
 800a224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a228:	ed97 6a03 	vldr	s12, [r7, #12]
 800a22c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a23c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a240:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a244:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a248:	e021      	b.n	800a28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a254:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a25c:	4b36      	ldr	r3, [pc, #216]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a264:	ee07 3a90 	vmov	s15, r3
 800a268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a26c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a270:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a27c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a288:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a28c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a28e:	4b2a      	ldr	r3, [pc, #168]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a292:	0a5b      	lsrs	r3, r3, #9
 800a294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a298:	ee07 3a90 	vmov	s15, r3
 800a29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b4:	ee17 2a90 	vmov	r2, s15
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a2bc:	4b1e      	ldr	r3, [pc, #120]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c0:	0c1b      	lsrs	r3, r3, #16
 800a2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c6:	ee07 3a90 	vmov	s15, r3
 800a2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2e2:	ee17 2a90 	vmov	r2, s15
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a2ea:	4b13      	ldr	r3, [pc, #76]	; (800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ee:	0e1b      	lsrs	r3, r3, #24
 800a2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f4:	ee07 3a90 	vmov	s15, r3
 800a2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a300:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a304:	edd7 6a07 	vldr	s13, [r7, #28]
 800a308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a30c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a310:	ee17 2a90 	vmov	r2, s15
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a318:	e008      	b.n	800a32c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	609a      	str	r2, [r3, #8]
}
 800a32c:	bf00      	nop
 800a32e:	3724      	adds	r7, #36	; 0x24
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	58024400 	.word	0x58024400
 800a33c:	03d09000 	.word	0x03d09000
 800a340:	46000000 	.word	0x46000000
 800a344:	4c742400 	.word	0x4c742400
 800a348:	4a742400 	.word	0x4a742400
 800a34c:	4b189680 	.word	0x4b189680

0800a350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a35e:	4b53      	ldr	r3, [pc, #332]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	2b03      	cmp	r3, #3
 800a368:	d101      	bne.n	800a36e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e099      	b.n	800a4a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a36e:	4b4f      	ldr	r3, [pc, #316]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a4e      	ldr	r2, [pc, #312]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a374:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a37a:	f7f7 fd5f 	bl	8001e3c <HAL_GetTick>
 800a37e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a380:	e008      	b.n	800a394 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a382:	f7f7 fd5b 	bl	8001e3c <HAL_GetTick>
 800a386:	4602      	mov	r2, r0
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d901      	bls.n	800a394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e086      	b.n	800a4a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a394:	4b45      	ldr	r3, [pc, #276]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1f0      	bne.n	800a382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3a0:	4b42      	ldr	r3, [pc, #264]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	031b      	lsls	r3, r3, #12
 800a3ae:	493f      	ldr	r1, [pc, #252]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	628b      	str	r3, [r1, #40]	; 0x28
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	025b      	lsls	r3, r3, #9
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	041b      	lsls	r3, r3, #16
 800a3d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	061b      	lsls	r3, r3, #24
 800a3e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3e4:	4931      	ldr	r1, [pc, #196]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a3ea:	4b30      	ldr	r3, [pc, #192]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	492d      	ldr	r1, [pc, #180]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a3fc:	4b2b      	ldr	r3, [pc, #172]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	f023 0220 	bic.w	r2, r3, #32
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	4928      	ldr	r1, [pc, #160]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a40e:	4b27      	ldr	r3, [pc, #156]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	4a26      	ldr	r2, [pc, #152]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a414:	f023 0310 	bic.w	r3, r3, #16
 800a418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a41a:	4b24      	ldr	r3, [pc, #144]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a41c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a41e:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <RCCEx_PLL2_Config+0x160>)
 800a420:	4013      	ands	r3, r2
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	69d2      	ldr	r2, [r2, #28]
 800a426:	00d2      	lsls	r2, r2, #3
 800a428:	4920      	ldr	r1, [pc, #128]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a42e:	4b1f      	ldr	r3, [pc, #124]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	4a1e      	ldr	r2, [pc, #120]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a434:	f043 0310 	orr.w	r3, r3, #16
 800a438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d106      	bne.n	800a44e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a440:	4b1a      	ldr	r3, [pc, #104]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a444:	4a19      	ldr	r2, [pc, #100]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a44a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a44c:	e00f      	b.n	800a46e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d106      	bne.n	800a462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a454:	4b15      	ldr	r3, [pc, #84]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	4a14      	ldr	r2, [pc, #80]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a45a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a45e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a460:	e005      	b.n	800a46e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a462:	4b12      	ldr	r3, [pc, #72]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a46c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a46e:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a0e      	ldr	r2, [pc, #56]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a47a:	f7f7 fcdf 	bl	8001e3c <HAL_GetTick>
 800a47e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a480:	e008      	b.n	800a494 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a482:	f7f7 fcdb 	bl	8001e3c <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d901      	bls.n	800a494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e006      	b.n	800a4a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a494:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <RCCEx_PLL2_Config+0x15c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0f0      	beq.n	800a482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	58024400 	.word	0x58024400
 800a4b0:	ffff0007 	.word	0xffff0007

0800a4b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4c2:	4b53      	ldr	r3, [pc, #332]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d101      	bne.n	800a4d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e099      	b.n	800a606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a4d2:	4b4f      	ldr	r3, [pc, #316]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a4e      	ldr	r2, [pc, #312]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a4d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4de:	f7f7 fcad 	bl	8001e3c <HAL_GetTick>
 800a4e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4e4:	e008      	b.n	800a4f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4e6:	f7f7 fca9 	bl	8001e3c <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d901      	bls.n	800a4f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e086      	b.n	800a606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4f8:	4b45      	ldr	r3, [pc, #276]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1f0      	bne.n	800a4e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a504:	4b42      	ldr	r3, [pc, #264]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	051b      	lsls	r3, r3, #20
 800a512:	493f      	ldr	r1, [pc, #252]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a514:	4313      	orrs	r3, r2
 800a516:	628b      	str	r3, [r1, #40]	; 0x28
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	3b01      	subs	r3, #1
 800a528:	025b      	lsls	r3, r3, #9
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	431a      	orrs	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	3b01      	subs	r3, #1
 800a534:	041b      	lsls	r3, r3, #16
 800a536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a53a:	431a      	orrs	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	3b01      	subs	r3, #1
 800a542:	061b      	lsls	r3, r3, #24
 800a544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a548:	4931      	ldr	r1, [pc, #196]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a54e:	4b30      	ldr	r3, [pc, #192]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	492d      	ldr	r1, [pc, #180]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a560:	4b2b      	ldr	r3, [pc, #172]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	4928      	ldr	r1, [pc, #160]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a572:	4b27      	ldr	r3, [pc, #156]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a576:	4a26      	ldr	r2, [pc, #152]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a57c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a57e:	4b24      	ldr	r3, [pc, #144]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a582:	4b24      	ldr	r3, [pc, #144]	; (800a614 <RCCEx_PLL3_Config+0x160>)
 800a584:	4013      	ands	r3, r2
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	69d2      	ldr	r2, [r2, #28]
 800a58a:	00d2      	lsls	r2, r2, #3
 800a58c:	4920      	ldr	r1, [pc, #128]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a592:	4b1f      	ldr	r3, [pc, #124]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a596:	4a1e      	ldr	r2, [pc, #120]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a59c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d106      	bne.n	800a5b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5a4:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	4a19      	ldr	r2, [pc, #100]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a5b0:	e00f      	b.n	800a5d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d106      	bne.n	800a5c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	4a14      	ldr	r2, [pc, #80]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a5c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a5c4:	e005      	b.n	800a5d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a5c6:	4b12      	ldr	r3, [pc, #72]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ca:	4a11      	ldr	r2, [pc, #68]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a5d2:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a0e      	ldr	r2, [pc, #56]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5de:	f7f7 fc2d 	bl	8001e3c <HAL_GetTick>
 800a5e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5e4:	e008      	b.n	800a5f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a5e6:	f7f7 fc29 	bl	8001e3c <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d901      	bls.n	800a5f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e006      	b.n	800a606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5f8:	4b05      	ldr	r3, [pc, #20]	; (800a610 <RCCEx_PLL3_Config+0x15c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0f0      	beq.n	800a5e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	58024400 	.word	0x58024400
 800a614:	ffff0007 	.word	0xffff0007

0800a618 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e0f1      	b.n	800a80e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a78      	ldr	r2, [pc, #480]	; (800a818 <HAL_SPI_Init+0x200>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00f      	beq.n	800a65a <HAL_SPI_Init+0x42>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a77      	ldr	r2, [pc, #476]	; (800a81c <HAL_SPI_Init+0x204>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00a      	beq.n	800a65a <HAL_SPI_Init+0x42>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a75      	ldr	r2, [pc, #468]	; (800a820 <HAL_SPI_Init+0x208>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d005      	beq.n	800a65a <HAL_SPI_Init+0x42>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	2b0f      	cmp	r3, #15
 800a654:	d901      	bls.n	800a65a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e0d9      	b.n	800a80e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 ff66 	bl	800b52c <SPI_GetPacketSize>
 800a660:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a6c      	ldr	r2, [pc, #432]	; (800a818 <HAL_SPI_Init+0x200>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d00c      	beq.n	800a686 <HAL_SPI_Init+0x6e>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a6a      	ldr	r2, [pc, #424]	; (800a81c <HAL_SPI_Init+0x204>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d007      	beq.n	800a686 <HAL_SPI_Init+0x6e>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a69      	ldr	r2, [pc, #420]	; (800a820 <HAL_SPI_Init+0x208>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d002      	beq.n	800a686 <HAL_SPI_Init+0x6e>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b08      	cmp	r3, #8
 800a684:	d811      	bhi.n	800a6aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a68a:	4a63      	ldr	r2, [pc, #396]	; (800a818 <HAL_SPI_Init+0x200>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d009      	beq.n	800a6a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a61      	ldr	r2, [pc, #388]	; (800a81c <HAL_SPI_Init+0x204>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d004      	beq.n	800a6a4 <HAL_SPI_Init+0x8c>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a60      	ldr	r2, [pc, #384]	; (800a820 <HAL_SPI_Init+0x208>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d104      	bne.n	800a6ae <HAL_SPI_Init+0x96>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b10      	cmp	r3, #16
 800a6a8:	d901      	bls.n	800a6ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e0af      	b.n	800a80e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7f7 f8c6 	bl	8001854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f022 0201 	bic.w	r2, r2, #1
 800a6de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a6ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6f4:	d119      	bne.n	800a72a <HAL_SPI_Init+0x112>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6fe:	d103      	bne.n	800a708 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a704:	2b00      	cmp	r3, #0
 800a706:	d008      	beq.n	800a71a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10c      	bne.n	800a72a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a718:	d107      	bne.n	800a72a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a728:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69da      	ldr	r2, [r3, #28]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a732:	431a      	orrs	r2, r3
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73c:	ea42 0103 	orr.w	r1, r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75a:	431a      	orrs	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	431a      	orrs	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	431a      	orrs	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	431a      	orrs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a78a:	ea42 0103 	orr.w	r1, r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d113      	bne.n	800a7ca <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f022 0201 	bic.w	r2, r2, #1
 800a7d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	40013000 	.word	0x40013000
 800a81c:	40003800 	.word	0x40003800
 800a820:	40003c00 	.word	0x40003c00

0800a824 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08a      	sub	sp, #40	; 0x28
 800a828:	af02      	add	r7, sp, #8
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4613      	mov	r3, r2
 800a832:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3320      	adds	r3, #32
 800a83a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a846:	2b01      	cmp	r3, #1
 800a848:	d101      	bne.n	800a84e <HAL_SPI_Transmit+0x2a>
 800a84a:	2302      	movs	r3, #2
 800a84c:	e1d7      	b.n	800abfe <HAL_SPI_Transmit+0x3da>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a856:	f7f7 faf1 	bl	8001e3c <HAL_GetTick>
 800a85a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b01      	cmp	r3, #1
 800a866:	d007      	beq.n	800a878 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a868:	2302      	movs	r3, #2
 800a86a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a874:	7efb      	ldrb	r3, [r7, #27]
 800a876:	e1c2      	b.n	800abfe <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <HAL_SPI_Transmit+0x60>
 800a87e:	88fb      	ldrh	r3, [r7, #6]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d107      	bne.n	800a894 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a890:	7efb      	ldrb	r3, [r7, #27]
 800a892:	e1b4      	b.n	800abfe <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2203      	movs	r2, #3
 800a898:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	88fa      	ldrh	r2, [r7, #6]
 800a8ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	88fa      	ldrh	r2, [r7, #6]
 800a8b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a8e4:	d107      	bne.n	800a8f6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4b96      	ldr	r3, [pc, #600]	; (800ab58 <HAL_SPI_Transmit+0x334>)
 800a8fe:	4013      	ands	r3, r2
 800a900:	88f9      	ldrh	r1, [r7, #6]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	6812      	ldr	r2, [r2, #0]
 800a906:	430b      	orrs	r3, r1
 800a908:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f042 0201 	orr.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a922:	d107      	bne.n	800a934 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	2b0f      	cmp	r3, #15
 800a93a:	d947      	bls.n	800a9cc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a93c:	e03f      	b.n	800a9be <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d114      	bne.n	800a976 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6812      	ldr	r2, [r2, #0]
 800a956:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a95c:	1d1a      	adds	r2, r3, #4
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a968:	b29b      	uxth	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a974:	e023      	b.n	800a9be <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a976:	f7f7 fa61 	bl	8001e3c <HAL_GetTick>
 800a97a:	4602      	mov	r2, r0
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d803      	bhi.n	800a98e <HAL_SPI_Transmit+0x16a>
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d102      	bne.n	800a994 <HAL_SPI_Transmit+0x170>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d114      	bne.n	800a9be <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 fcfb 	bl	800b390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e11f      	b.n	800abfe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1b9      	bne.n	800a93e <HAL_SPI_Transmit+0x11a>
 800a9ca:	e0f2      	b.n	800abb2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	f240 80e7 	bls.w	800aba4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a9d6:	e05d      	b.n	800aa94 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d132      	bne.n	800aa4c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d918      	bls.n	800aa24 <HAL_SPI_Transmit+0x200>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d014      	beq.n	800aa24 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6812      	ldr	r2, [r2, #0]
 800aa04:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa0a:	1d1a      	adds	r2, r3, #4
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	3b02      	subs	r3, #2
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa22:	e037      	b.n	800aa94 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa28:	881a      	ldrh	r2, [r3, #0]
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa32:	1c9a      	adds	r2, r3, #2
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa4a:	e023      	b.n	800aa94 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa4c:	f7f7 f9f6 	bl	8001e3c <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d803      	bhi.n	800aa64 <HAL_SPI_Transmit+0x240>
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d102      	bne.n	800aa6a <HAL_SPI_Transmit+0x246>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d114      	bne.n	800aa94 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 fc90 	bl	800b390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e0b4      	b.n	800abfe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d19b      	bne.n	800a9d8 <HAL_SPI_Transmit+0x1b4>
 800aaa0:	e087      	b.n	800abb2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d155      	bne.n	800ab5c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d918      	bls.n	800aaee <HAL_SPI_Transmit+0x2ca>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac0:	2b40      	cmp	r3, #64	; 0x40
 800aac2:	d914      	bls.n	800aaee <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6812      	ldr	r2, [r2, #0]
 800aace:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad4:	1d1a      	adds	r2, r3, #4
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	3b04      	subs	r3, #4
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aaec:	e05a      	b.n	800aba4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d917      	bls.n	800ab2a <HAL_SPI_Transmit+0x306>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d013      	beq.n	800ab2a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab06:	881a      	ldrh	r2, [r3, #0]
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab10:	1c9a      	adds	r2, r3, #2
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	3b02      	subs	r3, #2
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab28:	e03c      	b.n	800aba4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3320      	adds	r3, #32
 800ab34:	7812      	ldrb	r2, [r2, #0]
 800ab36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab54:	e026      	b.n	800aba4 <HAL_SPI_Transmit+0x380>
 800ab56:	bf00      	nop
 800ab58:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab5c:	f7f7 f96e 	bl	8001e3c <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d803      	bhi.n	800ab74 <HAL_SPI_Transmit+0x350>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab72:	d102      	bne.n	800ab7a <HAL_SPI_Transmit+0x356>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d114      	bne.n	800aba4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 fc08 	bl	800b390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e02c      	b.n	800abfe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	f47f af78 	bne.w	800aaa2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2200      	movs	r2, #0
 800abba:	2108      	movs	r1, #8
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f000 fc87 	bl	800b4d0 <SPI_WaitOnFlagUntilTimeout>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d007      	beq.n	800abd8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abce:	f043 0220 	orr.w	r2, r3, #32
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 fbd9 	bl	800b390 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e000      	b.n	800abfe <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800abfc:	7efb      	ldrb	r3, [r7, #27]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3720      	adds	r7, #32
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop

0800ac08 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	4613      	mov	r3, r2
 800ac16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3330      	adds	r3, #48	; 0x30
 800ac22:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac2c:	d112      	bne.n	800ac54 <HAL_SPI_Receive+0x4c>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10e      	bne.n	800ac54 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2204      	movs	r2, #4
 800ac3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac3e:	88fa      	ldrh	r2, [r7, #6]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	4613      	mov	r3, r2
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 f978 	bl	800af40 <HAL_SPI_TransmitReceive>
 800ac50:	4603      	mov	r3, r0
 800ac52:	e16f      	b.n	800af34 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d101      	bne.n	800ac62 <HAL_SPI_Receive+0x5a>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e168      	b.n	800af34 <HAL_SPI_Receive+0x32c>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac6a:	f7f7 f8e7 	bl	8001e3c <HAL_GetTick>
 800ac6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d007      	beq.n	800ac8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ac88:	7ffb      	ldrb	r3, [r7, #31]
 800ac8a:	e153      	b.n	800af34 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <HAL_SPI_Receive+0x90>
 800ac92:	88fb      	ldrh	r3, [r7, #6]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d107      	bne.n	800aca8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aca4:	7ffb      	ldrb	r3, [r7, #31]
 800aca6:	e145      	b.n	800af34 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2204      	movs	r2, #4
 800acac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	88fa      	ldrh	r2, [r7, #6]
 800acc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	88fa      	ldrh	r2, [r7, #6]
 800acca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800acf8:	d107      	bne.n	800ad0a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad08:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	4b8a      	ldr	r3, [pc, #552]	; (800af3c <HAL_SPI_Receive+0x334>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	88f9      	ldrh	r1, [r7, #6]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	6812      	ldr	r2, [r2, #0]
 800ad1a:	430b      	orrs	r3, r1
 800ad1c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f042 0201 	orr.w	r2, r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad36:	d107      	bne.n	800ad48 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	2b0f      	cmp	r3, #15
 800ad4e:	d948      	bls.n	800ade2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ad50:	e040      	b.n	800add4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695a      	ldr	r2, [r3, #20]
 800ad58:	f248 0308 	movw	r3, #32776	; 0x8008
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d014      	beq.n	800ad8c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad6c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad72:	1d1a      	adds	r2, r3, #4
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad8a:	e023      	b.n	800add4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad8c:	f7f7 f856 	bl	8001e3c <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d803      	bhi.n	800ada4 <HAL_SPI_Receive+0x19c>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada2:	d102      	bne.n	800adaa <HAL_SPI_Receive+0x1a2>
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d114      	bne.n	800add4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 faf0 	bl	800b390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e0af      	b.n	800af34 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adda:	b29b      	uxth	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1b8      	bne.n	800ad52 <HAL_SPI_Receive+0x14a>
 800ade0:	e095      	b.n	800af0e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	2b07      	cmp	r3, #7
 800ade8:	f240 808b 	bls.w	800af02 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800adec:	e03f      	b.n	800ae6e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d114      	bne.n	800ae26 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	8812      	ldrh	r2, [r2, #0]
 800ae04:	b292      	uxth	r2, r2
 800ae06:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae0c:	1c9a      	adds	r2, r3, #2
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae24:	e023      	b.n	800ae6e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae26:	f7f7 f809 	bl	8001e3c <HAL_GetTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d803      	bhi.n	800ae3e <HAL_SPI_Receive+0x236>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3c:	d102      	bne.n	800ae44 <HAL_SPI_Receive+0x23c>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d114      	bne.n	800ae6e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 faa3 	bl	800b390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2201      	movs	r2, #1
 800ae66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	e062      	b.n	800af34 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1b9      	bne.n	800adee <HAL_SPI_Receive+0x1e6>
 800ae7a:	e048      	b.n	800af0e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d117      	bne.n	800aeba <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae96:	7812      	ldrb	r2, [r2, #0]
 800ae98:	b2d2      	uxtb	r2, r2
 800ae9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aeb8:	e023      	b.n	800af02 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeba:	f7f6 ffbf 	bl	8001e3c <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d803      	bhi.n	800aed2 <HAL_SPI_Receive+0x2ca>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d102      	bne.n	800aed8 <HAL_SPI_Receive+0x2d0>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d114      	bne.n	800af02 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 fa59 	bl	800b390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aefe:	2303      	movs	r3, #3
 800af00:	e018      	b.n	800af34 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af08:	b29b      	uxth	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1b6      	bne.n	800ae7c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 fa3e 	bl	800b390 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e000      	b.n	800af34 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800af32:	7ffb      	ldrb	r3, [r7, #31]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3720      	adds	r7, #32
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	ffff0000 	.word	0xffff0000

0800af40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08e      	sub	sp, #56	; 0x38
 800af44:	af02      	add	r7, sp, #8
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3320      	adds	r3, #32
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3330      	adds	r3, #48	; 0x30
 800af62:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d101      	bne.n	800af72 <HAL_SPI_TransmitReceive+0x32>
 800af6e:	2302      	movs	r3, #2
 800af70:	e209      	b.n	800b386 <HAL_SPI_TransmitReceive+0x446>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af7a:	f7f6 ff5f 	bl	8001e3c <HAL_GetTick>
 800af7e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800af80:	887b      	ldrh	r3, [r7, #2]
 800af82:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800af84:	887b      	ldrh	r3, [r7, #2]
 800af86:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800af8e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800af96:	7efb      	ldrb	r3, [r7, #27]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d014      	beq.n	800afc6 <HAL_SPI_TransmitReceive+0x86>
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afa2:	d106      	bne.n	800afb2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d102      	bne.n	800afb2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800afac:	7efb      	ldrb	r3, [r7, #27]
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d009      	beq.n	800afc6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800afb2:	2302      	movs	r3, #2
 800afb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800afc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afc4:	e1df      	b.n	800b386 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <HAL_SPI_TransmitReceive+0x98>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <HAL_SPI_TransmitReceive+0x98>
 800afd2:	887b      	ldrh	r3, [r7, #2]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d109      	bne.n	800afec <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800afe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afea:	e1cc      	b.n	800b386 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d003      	beq.n	800b000 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2205      	movs	r2, #5
 800affc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	887a      	ldrh	r2, [r7, #2]
 800b012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	887a      	ldrh	r2, [r7, #2]
 800b01a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	887a      	ldrh	r2, [r7, #2]
 800b028:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	887a      	ldrh	r2, [r7, #2]
 800b030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	4b82      	ldr	r3, [pc, #520]	; (800b250 <HAL_SPI_TransmitReceive+0x310>)
 800b048:	4013      	ands	r3, r2
 800b04a:	8879      	ldrh	r1, [r7, #2]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	430b      	orrs	r3, r1
 800b052:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b06c:	d107      	bne.n	800b07e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b07c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	2b0f      	cmp	r3, #15
 800b084:	d970      	bls.n	800b168 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b086:	e068      	b.n	800b15a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b02      	cmp	r3, #2
 800b094:	d11a      	bne.n	800b0cc <HAL_SPI_TransmitReceive+0x18c>
 800b096:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d017      	beq.n	800b0cc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6812      	ldr	r2, [r2, #0]
 800b0a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0ac:	1d1a      	adds	r2, r3, #4
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	695a      	ldr	r2, [r3, #20]
 800b0d2:	f248 0308 	movw	r3, #32776	; 0x8008
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d01a      	beq.n	800b112 <HAL_SPI_TransmitReceive+0x1d2>
 800b0dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d017      	beq.n	800b112 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b0ec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0f2:	1d1a      	adds	r2, r3, #4
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	3b01      	subs	r3, #1
 800b102:	b29a      	uxth	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b110:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b112:	f7f6 fe93 	bl	8001e3c <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b11e:	429a      	cmp	r2, r3
 800b120:	d803      	bhi.n	800b12a <HAL_SPI_TransmitReceive+0x1ea>
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b128:	d102      	bne.n	800b130 <HAL_SPI_TransmitReceive+0x1f0>
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d114      	bne.n	800b15a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 f92d 	bl	800b390 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b144:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e115      	b.n	800b386 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b15a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d193      	bne.n	800b088 <HAL_SPI_TransmitReceive+0x148>
 800b160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b162:	2b00      	cmp	r3, #0
 800b164:	d190      	bne.n	800b088 <HAL_SPI_TransmitReceive+0x148>
 800b166:	e0e7      	b.n	800b338 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	2b07      	cmp	r3, #7
 800b16e:	f240 80dd 	bls.w	800b32c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b172:	e066      	b.n	800b242 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d119      	bne.n	800b1b6 <HAL_SPI_TransmitReceive+0x276>
 800b182:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b184:	2b00      	cmp	r3, #0
 800b186:	d016      	beq.n	800b1b6 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b18c:	881a      	ldrh	r2, [r3, #0]
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b196:	1c9a      	adds	r2, r3, #2
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d11a      	bne.n	800b1fa <HAL_SPI_TransmitReceive+0x2ba>
 800b1c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d017      	beq.n	800b1fa <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1ce:	6a3a      	ldr	r2, [r7, #32]
 800b1d0:	8812      	ldrh	r2, [r2, #0]
 800b1d2:	b292      	uxth	r2, r2
 800b1d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1da:	1c9a      	adds	r2, r3, #2
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1fa:	f7f6 fe1f 	bl	8001e3c <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b206:	429a      	cmp	r2, r3
 800b208:	d803      	bhi.n	800b212 <HAL_SPI_TransmitReceive+0x2d2>
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d102      	bne.n	800b218 <HAL_SPI_TransmitReceive+0x2d8>
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	2b00      	cmp	r3, #0
 800b216:	d114      	bne.n	800b242 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 f8b9 	bl	800b390 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b22c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e0a1      	b.n	800b386 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b244:	2b00      	cmp	r3, #0
 800b246:	d195      	bne.n	800b174 <HAL_SPI_TransmitReceive+0x234>
 800b248:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d192      	bne.n	800b174 <HAL_SPI_TransmitReceive+0x234>
 800b24e:	e073      	b.n	800b338 <HAL_SPI_TransmitReceive+0x3f8>
 800b250:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d11b      	bne.n	800b29a <HAL_SPI_TransmitReceive+0x35a>
 800b262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b264:	2b00      	cmp	r3, #0
 800b266:	d018      	beq.n	800b29a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3320      	adds	r3, #32
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b27a:	1c5a      	adds	r2, r3, #1
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b286:	b29b      	uxth	r3, r3
 800b288:	3b01      	subs	r3, #1
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b298:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d11d      	bne.n	800b2e4 <HAL_SPI_TransmitReceive+0x3a4>
 800b2a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d01a      	beq.n	800b2e4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2ba:	7812      	ldrb	r2, [r2, #0]
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2e4:	f7f6 fdaa 	bl	8001e3c <HAL_GetTick>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d803      	bhi.n	800b2fc <HAL_SPI_TransmitReceive+0x3bc>
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fa:	d102      	bne.n	800b302 <HAL_SPI_TransmitReceive+0x3c2>
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d114      	bne.n	800b32c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f000 f844 	bl	800b390 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	e02c      	b.n	800b386 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b32c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d190      	bne.n	800b254 <HAL_SPI_TransmitReceive+0x314>
 800b332:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d18d      	bne.n	800b254 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2200      	movs	r2, #0
 800b340:	2108      	movs	r1, #8
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 f8c4 	bl	800b4d0 <SPI_WaitOnFlagUntilTimeout>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d007      	beq.n	800b35e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b354:	f043 0220 	orr.w	r2, r3, #32
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 f816 	bl	800b390 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e001      	b.n	800b386 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800b382:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b386:	4618      	mov	r0, r3
 800b388:	3730      	adds	r7, #48	; 0x30
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop

0800b390 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	695b      	ldr	r3, [r3, #20]
 800b39e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	699a      	ldr	r2, [r3, #24]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f042 0208 	orr.w	r2, r2, #8
 800b3ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	699a      	ldr	r2, [r3, #24]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f042 0210 	orr.w	r2, r2, #16
 800b3be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f022 0201 	bic.w	r2, r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6919      	ldr	r1, [r3, #16]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4b3c      	ldr	r3, [pc, #240]	; (800b4cc <SPI_CloseTransfer+0x13c>)
 800b3dc:	400b      	ands	r3, r1
 800b3de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689a      	ldr	r2, [r3, #8]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b3ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	d014      	beq.n	800b426 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f003 0320 	and.w	r3, r3, #32
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00f      	beq.n	800b426 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b40c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	699a      	ldr	r2, [r3, #24]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f042 0220 	orr.w	r2, r2, #32
 800b424:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d014      	beq.n	800b45c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00f      	beq.n	800b45c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b442:	f043 0204 	orr.w	r2, r3, #4
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699a      	ldr	r2, [r3, #24]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b45a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00f      	beq.n	800b486 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b46c:	f043 0201 	orr.w	r2, r3, #1
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	699a      	ldr	r2, [r3, #24]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b484:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00f      	beq.n	800b4b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b496:	f043 0208 	orr.w	r2, r3, #8
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b4c0:	bf00      	nop
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	fffffc90 	.word	0xfffffc90

0800b4d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	603b      	str	r3, [r7, #0]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b4e0:	e010      	b.n	800b504 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4e2:	f7f6 fcab 	bl	8001e3c <HAL_GetTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	69ba      	ldr	r2, [r7, #24]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d803      	bhi.n	800b4fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d102      	bne.n	800b500 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e00f      	b.n	800b524 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	695a      	ldr	r2, [r3, #20]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	4013      	ands	r3, r2
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	429a      	cmp	r2, r3
 800b512:	bf0c      	ite	eq
 800b514:	2301      	moveq	r3, #1
 800b516:	2300      	movne	r3, #0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	461a      	mov	r2, r3
 800b51c:	79fb      	ldrb	r3, [r7, #7]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d0df      	beq.n	800b4e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b538:	095b      	lsrs	r3, r3, #5
 800b53a:	3301      	adds	r3, #1
 800b53c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	3301      	adds	r3, #1
 800b544:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	3307      	adds	r3, #7
 800b54a:	08db      	lsrs	r3, r3, #3
 800b54c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	fb02 f303 	mul.w	r3, r2, r3
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e049      	b.n	800b608 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d106      	bne.n	800b58e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7f6 f9c9 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2202      	movs	r2, #2
 800b592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3304      	adds	r3, #4
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	f000 fa09 	bl	800b9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e049      	b.n	800b6b6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d106      	bne.n	800b63c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f841 	bl	800b6be <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f000 f9b2 	bl	800b9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
	...

0800b6d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d101      	bne.n	800b6f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e066      	b.n	800b7c0 <HAL_TIM_OC_ConfigChannel+0xec>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b14      	cmp	r3, #20
 800b6fe:	d857      	bhi.n	800b7b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b700:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b706:	bf00      	nop
 800b708:	0800b75d 	.word	0x0800b75d
 800b70c:	0800b7b1 	.word	0x0800b7b1
 800b710:	0800b7b1 	.word	0x0800b7b1
 800b714:	0800b7b1 	.word	0x0800b7b1
 800b718:	0800b76b 	.word	0x0800b76b
 800b71c:	0800b7b1 	.word	0x0800b7b1
 800b720:	0800b7b1 	.word	0x0800b7b1
 800b724:	0800b7b1 	.word	0x0800b7b1
 800b728:	0800b779 	.word	0x0800b779
 800b72c:	0800b7b1 	.word	0x0800b7b1
 800b730:	0800b7b1 	.word	0x0800b7b1
 800b734:	0800b7b1 	.word	0x0800b7b1
 800b738:	0800b787 	.word	0x0800b787
 800b73c:	0800b7b1 	.word	0x0800b7b1
 800b740:	0800b7b1 	.word	0x0800b7b1
 800b744:	0800b7b1 	.word	0x0800b7b1
 800b748:	0800b795 	.word	0x0800b795
 800b74c:	0800b7b1 	.word	0x0800b7b1
 800b750:	0800b7b1 	.word	0x0800b7b1
 800b754:	0800b7b1 	.word	0x0800b7b1
 800b758:	0800b7a3 	.word	0x0800b7a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	4618      	mov	r0, r3
 800b764:	f000 f9c2 	bl	800baec <TIM_OC1_SetConfig>
      break;
 800b768:	e025      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fa4b 	bl	800bc0c <TIM_OC2_SetConfig>
      break;
 800b776:	e01e      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68b9      	ldr	r1, [r7, #8]
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 face 	bl	800bd20 <TIM_OC3_SetConfig>
      break;
 800b784:	e017      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f000 fb4f 	bl	800be30 <TIM_OC4_SetConfig>
      break;
 800b792:	e010      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 fbb2 	bl	800bf04 <TIM_OC5_SetConfig>
      break;
 800b7a0:	e009      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68b9      	ldr	r1, [r7, #8]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 fc0f 	bl	800bfcc <TIM_OC6_SetConfig>
      break;
 800b7ae:	e002      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3718      	adds	r7, #24
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d101      	bne.n	800b7e4 <HAL_TIM_ConfigClockSource+0x1c>
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	e0dc      	b.n	800b99e <HAL_TIM_ConfigClockSource+0x1d6>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	4b6a      	ldr	r3, [pc, #424]	; (800b9a8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b800:	4013      	ands	r3, r2
 800b802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b80a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a64      	ldr	r2, [pc, #400]	; (800b9ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	f000 80a9 	beq.w	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b820:	4a62      	ldr	r2, [pc, #392]	; (800b9ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800b822:	4293      	cmp	r3, r2
 800b824:	f200 80ae 	bhi.w	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b828:	4a61      	ldr	r2, [pc, #388]	; (800b9b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	f000 80a1 	beq.w	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b830:	4a5f      	ldr	r2, [pc, #380]	; (800b9b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b832:	4293      	cmp	r3, r2
 800b834:	f200 80a6 	bhi.w	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b838:	4a5e      	ldr	r2, [pc, #376]	; (800b9b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	f000 8099 	beq.w	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b840:	4a5c      	ldr	r2, [pc, #368]	; (800b9b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b842:	4293      	cmp	r3, r2
 800b844:	f200 809e 	bhi.w	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b848:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b84c:	f000 8091 	beq.w	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b850:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b854:	f200 8096 	bhi.w	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b85c:	f000 8089 	beq.w	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b864:	f200 808e 	bhi.w	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b86c:	d03e      	beq.n	800b8ec <HAL_TIM_ConfigClockSource+0x124>
 800b86e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b872:	f200 8087 	bhi.w	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b87a:	f000 8086 	beq.w	800b98a <HAL_TIM_ConfigClockSource+0x1c2>
 800b87e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b882:	d87f      	bhi.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b884:	2b70      	cmp	r3, #112	; 0x70
 800b886:	d01a      	beq.n	800b8be <HAL_TIM_ConfigClockSource+0xf6>
 800b888:	2b70      	cmp	r3, #112	; 0x70
 800b88a:	d87b      	bhi.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b88c:	2b60      	cmp	r3, #96	; 0x60
 800b88e:	d050      	beq.n	800b932 <HAL_TIM_ConfigClockSource+0x16a>
 800b890:	2b60      	cmp	r3, #96	; 0x60
 800b892:	d877      	bhi.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b894:	2b50      	cmp	r3, #80	; 0x50
 800b896:	d03c      	beq.n	800b912 <HAL_TIM_ConfigClockSource+0x14a>
 800b898:	2b50      	cmp	r3, #80	; 0x50
 800b89a:	d873      	bhi.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b89c:	2b40      	cmp	r3, #64	; 0x40
 800b89e:	d058      	beq.n	800b952 <HAL_TIM_ConfigClockSource+0x18a>
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d86f      	bhi.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a4:	2b30      	cmp	r3, #48	; 0x30
 800b8a6:	d064      	beq.n	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8a8:	2b30      	cmp	r3, #48	; 0x30
 800b8aa:	d86b      	bhi.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8ac:	2b20      	cmp	r3, #32
 800b8ae:	d060      	beq.n	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8b0:	2b20      	cmp	r3, #32
 800b8b2:	d867      	bhi.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d05c      	beq.n	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8b8:	2b10      	cmp	r3, #16
 800b8ba:	d05a      	beq.n	800b972 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8bc:	e062      	b.n	800b984 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	6899      	ldr	r1, [r3, #8]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	f000 fc61 	bl	800c194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b8e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	609a      	str	r2, [r3, #8]
      break;
 800b8ea:	e04f      	b.n	800b98c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6818      	ldr	r0, [r3, #0]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	6899      	ldr	r1, [r3, #8]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f000 fc4a 	bl	800c194 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b90e:	609a      	str	r2, [r3, #8]
      break;
 800b910:	e03c      	b.n	800b98c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6818      	ldr	r0, [r3, #0]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	6859      	ldr	r1, [r3, #4]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	461a      	mov	r2, r3
 800b920:	f000 fbba 	bl	800c098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2150      	movs	r1, #80	; 0x50
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 fc14 	bl	800c158 <TIM_ITRx_SetConfig>
      break;
 800b930:	e02c      	b.n	800b98c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	6859      	ldr	r1, [r3, #4]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	461a      	mov	r2, r3
 800b940:	f000 fbd9 	bl	800c0f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2160      	movs	r1, #96	; 0x60
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 fc04 	bl	800c158 <TIM_ITRx_SetConfig>
      break;
 800b950:	e01c      	b.n	800b98c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	6859      	ldr	r1, [r3, #4]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	461a      	mov	r2, r3
 800b960:	f000 fb9a 	bl	800c098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2140      	movs	r1, #64	; 0x40
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fbf4 	bl	800c158 <TIM_ITRx_SetConfig>
      break;
 800b970:	e00c      	b.n	800b98c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f000 fbeb 	bl	800c158 <TIM_ITRx_SetConfig>
      break;
 800b982:	e003      	b.n	800b98c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	73fb      	strb	r3, [r7, #15]
      break;
 800b988:	e000      	b.n	800b98c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b98a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	ffceff88 	.word	0xffceff88
 800b9ac:	00100040 	.word	0x00100040
 800b9b0:	00100030 	.word	0x00100030
 800b9b4:	00100020 	.word	0x00100020

0800b9b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a40      	ldr	r2, [pc, #256]	; (800bacc <TIM_Base_SetConfig+0x114>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d013      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d6:	d00f      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a3d      	ldr	r2, [pc, #244]	; (800bad0 <TIM_Base_SetConfig+0x118>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d00b      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a3c      	ldr	r2, [pc, #240]	; (800bad4 <TIM_Base_SetConfig+0x11c>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d007      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a3b      	ldr	r2, [pc, #236]	; (800bad8 <TIM_Base_SetConfig+0x120>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a3a      	ldr	r2, [pc, #232]	; (800badc <TIM_Base_SetConfig+0x124>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d108      	bne.n	800ba0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a2f      	ldr	r2, [pc, #188]	; (800bacc <TIM_Base_SetConfig+0x114>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d01f      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba18:	d01b      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a2c      	ldr	r2, [pc, #176]	; (800bad0 <TIM_Base_SetConfig+0x118>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d017      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a2b      	ldr	r2, [pc, #172]	; (800bad4 <TIM_Base_SetConfig+0x11c>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d013      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a2a      	ldr	r2, [pc, #168]	; (800bad8 <TIM_Base_SetConfig+0x120>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d00f      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a29      	ldr	r2, [pc, #164]	; (800badc <TIM_Base_SetConfig+0x124>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d00b      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a28      	ldr	r2, [pc, #160]	; (800bae0 <TIM_Base_SetConfig+0x128>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d007      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a27      	ldr	r2, [pc, #156]	; (800bae4 <TIM_Base_SetConfig+0x12c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d003      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a26      	ldr	r2, [pc, #152]	; (800bae8 <TIM_Base_SetConfig+0x130>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d108      	bne.n	800ba64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a10      	ldr	r2, [pc, #64]	; (800bacc <TIM_Base_SetConfig+0x114>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00f      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a12      	ldr	r2, [pc, #72]	; (800badc <TIM_Base_SetConfig+0x124>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00b      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a11      	ldr	r2, [pc, #68]	; (800bae0 <TIM_Base_SetConfig+0x128>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d007      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a10      	ldr	r2, [pc, #64]	; (800bae4 <TIM_Base_SetConfig+0x12c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d003      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a0f      	ldr	r2, [pc, #60]	; (800bae8 <TIM_Base_SetConfig+0x130>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d103      	bne.n	800bab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	691a      	ldr	r2, [r3, #16]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	615a      	str	r2, [r3, #20]
}
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	40010000 	.word	0x40010000
 800bad0:	40000400 	.word	0x40000400
 800bad4:	40000800 	.word	0x40000800
 800bad8:	40000c00 	.word	0x40000c00
 800badc:	40010400 	.word	0x40010400
 800bae0:	40014000 	.word	0x40014000
 800bae4:	40014400 	.word	0x40014400
 800bae8:	40014800 	.word	0x40014800

0800baec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	f023 0201 	bic.w	r2, r3, #1
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	4b37      	ldr	r3, [pc, #220]	; (800bbf4 <TIM_OC1_SetConfig+0x108>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f023 0303 	bic.w	r3, r3, #3
 800bb22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f023 0302 	bic.w	r3, r3, #2
 800bb34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a2d      	ldr	r2, [pc, #180]	; (800bbf8 <TIM_OC1_SetConfig+0x10c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00f      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a2c      	ldr	r2, [pc, #176]	; (800bbfc <TIM_OC1_SetConfig+0x110>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d00b      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a2b      	ldr	r2, [pc, #172]	; (800bc00 <TIM_OC1_SetConfig+0x114>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d007      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a2a      	ldr	r2, [pc, #168]	; (800bc04 <TIM_OC1_SetConfig+0x118>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d003      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a29      	ldr	r2, [pc, #164]	; (800bc08 <TIM_OC1_SetConfig+0x11c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d10c      	bne.n	800bb82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	f023 0308 	bic.w	r3, r3, #8
 800bb6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f023 0304 	bic.w	r3, r3, #4
 800bb80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4a1c      	ldr	r2, [pc, #112]	; (800bbf8 <TIM_OC1_SetConfig+0x10c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d00f      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4a1b      	ldr	r2, [pc, #108]	; (800bbfc <TIM_OC1_SetConfig+0x110>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d00b      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4a1a      	ldr	r2, [pc, #104]	; (800bc00 <TIM_OC1_SetConfig+0x114>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d007      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4a19      	ldr	r2, [pc, #100]	; (800bc04 <TIM_OC1_SetConfig+0x118>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d003      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a18      	ldr	r2, [pc, #96]	; (800bc08 <TIM_OC1_SetConfig+0x11c>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d111      	bne.n	800bbce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	621a      	str	r2, [r3, #32]
}
 800bbe8:	bf00      	nop
 800bbea:	371c      	adds	r7, #28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	fffeff8f 	.word	0xfffeff8f
 800bbf8:	40010000 	.word	0x40010000
 800bbfc:	40010400 	.word	0x40010400
 800bc00:	40014000 	.word	0x40014000
 800bc04:	40014400 	.word	0x40014400
 800bc08:	40014800 	.word	0x40014800

0800bc0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	f023 0210 	bic.w	r2, r3, #16
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4b34      	ldr	r3, [pc, #208]	; (800bd08 <TIM_OC2_SetConfig+0xfc>)
 800bc38:	4013      	ands	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	f023 0320 	bic.w	r3, r3, #32
 800bc56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a29      	ldr	r2, [pc, #164]	; (800bd0c <TIM_OC2_SetConfig+0x100>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d003      	beq.n	800bc74 <TIM_OC2_SetConfig+0x68>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a28      	ldr	r2, [pc, #160]	; (800bd10 <TIM_OC2_SetConfig+0x104>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d10d      	bne.n	800bc90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	011b      	lsls	r3, r3, #4
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a1e      	ldr	r2, [pc, #120]	; (800bd0c <TIM_OC2_SetConfig+0x100>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00f      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a1d      	ldr	r2, [pc, #116]	; (800bd10 <TIM_OC2_SetConfig+0x104>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d00b      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a1c      	ldr	r2, [pc, #112]	; (800bd14 <TIM_OC2_SetConfig+0x108>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d007      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a1b      	ldr	r2, [pc, #108]	; (800bd18 <TIM_OC2_SetConfig+0x10c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d003      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a1a      	ldr	r2, [pc, #104]	; (800bd1c <TIM_OC2_SetConfig+0x110>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d113      	bne.n	800bce0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bcbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	feff8fff 	.word	0xfeff8fff
 800bd0c:	40010000 	.word	0x40010000
 800bd10:	40010400 	.word	0x40010400
 800bd14:	40014000 	.word	0x40014000
 800bd18:	40014400 	.word	0x40014400
 800bd1c:	40014800 	.word	0x40014800

0800bd20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b087      	sub	sp, #28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	4b33      	ldr	r3, [pc, #204]	; (800be18 <TIM_OC3_SetConfig+0xf8>)
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f023 0303 	bic.w	r3, r3, #3
 800bd56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	021b      	lsls	r3, r3, #8
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a28      	ldr	r2, [pc, #160]	; (800be1c <TIM_OC3_SetConfig+0xfc>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d003      	beq.n	800bd86 <TIM_OC3_SetConfig+0x66>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a27      	ldr	r2, [pc, #156]	; (800be20 <TIM_OC3_SetConfig+0x100>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d10d      	bne.n	800bda2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bda0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a1d      	ldr	r2, [pc, #116]	; (800be1c <TIM_OC3_SetConfig+0xfc>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d00f      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a1c      	ldr	r2, [pc, #112]	; (800be20 <TIM_OC3_SetConfig+0x100>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00b      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a1b      	ldr	r2, [pc, #108]	; (800be24 <TIM_OC3_SetConfig+0x104>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d007      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a1a      	ldr	r2, [pc, #104]	; (800be28 <TIM_OC3_SetConfig+0x108>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d003      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a19      	ldr	r2, [pc, #100]	; (800be2c <TIM_OC3_SetConfig+0x10c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d113      	bne.n	800bdf2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	621a      	str	r2, [r3, #32]
}
 800be0c:	bf00      	nop
 800be0e:	371c      	adds	r7, #28
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	fffeff8f 	.word	0xfffeff8f
 800be1c:	40010000 	.word	0x40010000
 800be20:	40010400 	.word	0x40010400
 800be24:	40014000 	.word	0x40014000
 800be28:	40014400 	.word	0x40014400
 800be2c:	40014800 	.word	0x40014800

0800be30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	4b24      	ldr	r3, [pc, #144]	; (800beec <TIM_OC4_SetConfig+0xbc>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	031b      	lsls	r3, r3, #12
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	4313      	orrs	r3, r2
 800be86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a19      	ldr	r2, [pc, #100]	; (800bef0 <TIM_OC4_SetConfig+0xc0>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d00f      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a18      	ldr	r2, [pc, #96]	; (800bef4 <TIM_OC4_SetConfig+0xc4>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d00b      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a17      	ldr	r2, [pc, #92]	; (800bef8 <TIM_OC4_SetConfig+0xc8>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d007      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a16      	ldr	r2, [pc, #88]	; (800befc <TIM_OC4_SetConfig+0xcc>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d003      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a15      	ldr	r2, [pc, #84]	; (800bf00 <TIM_OC4_SetConfig+0xd0>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d109      	bne.n	800bec4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800beb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	695b      	ldr	r3, [r3, #20]
 800bebc:	019b      	lsls	r3, r3, #6
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	621a      	str	r2, [r3, #32]
}
 800bede:	bf00      	nop
 800bee0:	371c      	adds	r7, #28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	feff8fff 	.word	0xfeff8fff
 800bef0:	40010000 	.word	0x40010000
 800bef4:	40010400 	.word	0x40010400
 800bef8:	40014000 	.word	0x40014000
 800befc:	40014400 	.word	0x40014400
 800bf00:	40014800 	.word	0x40014800

0800bf04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	4b21      	ldr	r3, [pc, #132]	; (800bfb4 <TIM_OC5_SetConfig+0xb0>)
 800bf30:	4013      	ands	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bf44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	041b      	lsls	r3, r3, #16
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4a18      	ldr	r2, [pc, #96]	; (800bfb8 <TIM_OC5_SetConfig+0xb4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d00f      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a17      	ldr	r2, [pc, #92]	; (800bfbc <TIM_OC5_SetConfig+0xb8>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d00b      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a16      	ldr	r2, [pc, #88]	; (800bfc0 <TIM_OC5_SetConfig+0xbc>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d007      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a15      	ldr	r2, [pc, #84]	; (800bfc4 <TIM_OC5_SetConfig+0xc0>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d003      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a14      	ldr	r2, [pc, #80]	; (800bfc8 <TIM_OC5_SetConfig+0xc4>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d109      	bne.n	800bf8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	695b      	ldr	r3, [r3, #20]
 800bf86:	021b      	lsls	r3, r3, #8
 800bf88:	697a      	ldr	r2, [r7, #20]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	621a      	str	r2, [r3, #32]
}
 800bfa8:	bf00      	nop
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	fffeff8f 	.word	0xfffeff8f
 800bfb8:	40010000 	.word	0x40010000
 800bfbc:	40010400 	.word	0x40010400
 800bfc0:	40014000 	.word	0x40014000
 800bfc4:	40014400 	.word	0x40014400
 800bfc8:	40014800 	.word	0x40014800

0800bfcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4b22      	ldr	r3, [pc, #136]	; (800c080 <TIM_OC6_SetConfig+0xb4>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	021b      	lsls	r3, r3, #8
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	4313      	orrs	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c00e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	051b      	lsls	r3, r3, #20
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	4313      	orrs	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a19      	ldr	r2, [pc, #100]	; (800c084 <TIM_OC6_SetConfig+0xb8>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d00f      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a18      	ldr	r2, [pc, #96]	; (800c088 <TIM_OC6_SetConfig+0xbc>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00b      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a17      	ldr	r2, [pc, #92]	; (800c08c <TIM_OC6_SetConfig+0xc0>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d007      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a16      	ldr	r2, [pc, #88]	; (800c090 <TIM_OC6_SetConfig+0xc4>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d003      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a15      	ldr	r2, [pc, #84]	; (800c094 <TIM_OC6_SetConfig+0xc8>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d109      	bne.n	800c058 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c04a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	029b      	lsls	r3, r3, #10
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	4313      	orrs	r3, r2
 800c056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	621a      	str	r2, [r3, #32]
}
 800c072:	bf00      	nop
 800c074:	371c      	adds	r7, #28
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	feff8fff 	.word	0xfeff8fff
 800c084:	40010000 	.word	0x40010000
 800c088:	40010400 	.word	0x40010400
 800c08c:	40014000 	.word	0x40014000
 800c090:	40014400 	.word	0x40014400
 800c094:	40014800 	.word	0x40014800

0800c098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	f023 0201 	bic.w	r2, r3, #1
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	011b      	lsls	r3, r3, #4
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f023 030a 	bic.w	r3, r3, #10
 800c0d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	621a      	str	r2, [r3, #32]
}
 800c0ea:	bf00      	nop
 800c0ec:	371c      	adds	r7, #28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b087      	sub	sp, #28
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	f023 0210 	bic.w	r2, r3, #16
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6a1b      	ldr	r3, [r3, #32]
 800c118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	031b      	lsls	r3, r3, #12
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	4313      	orrs	r3, r2
 800c12a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	621a      	str	r2, [r3, #32]
}
 800c14a:	bf00      	nop
 800c14c:	371c      	adds	r7, #28
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
	...

0800c158 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4b09      	ldr	r3, [pc, #36]	; (800c190 <TIM_ITRx_SetConfig+0x38>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4313      	orrs	r3, r2
 800c176:	f043 0307 	orr.w	r3, r3, #7
 800c17a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	609a      	str	r2, [r3, #8]
}
 800c182:	bf00      	nop
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	ffcfff8f 	.word	0xffcfff8f

0800c194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c194:	b480      	push	{r7}
 800c196:	b087      	sub	sp, #28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	021a      	lsls	r2, r3, #8
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	609a      	str	r2, [r3, #8]
}
 800c1c8:	bf00      	nop
 800c1ca:	371c      	adds	r7, #28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d101      	bne.n	800c1ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1e8:	2302      	movs	r3, #2
 800c1ea:	e06d      	b.n	800c2c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a30      	ldr	r2, [pc, #192]	; (800c2d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d004      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a2f      	ldr	r2, [pc, #188]	; (800c2d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d108      	bne.n	800c232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4313      	orrs	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	4313      	orrs	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a20      	ldr	r2, [pc, #128]	; (800c2d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d022      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c25e:	d01d      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a1d      	ldr	r2, [pc, #116]	; (800c2dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d018      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a1c      	ldr	r2, [pc, #112]	; (800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d013      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a1a      	ldr	r2, [pc, #104]	; (800c2e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d00e      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a15      	ldr	r2, [pc, #84]	; (800c2d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d009      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a16      	ldr	r2, [pc, #88]	; (800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d004      	beq.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a15      	ldr	r2, [pc, #84]	; (800c2ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d10c      	bne.n	800c2b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	40010000 	.word	0x40010000
 800c2d8:	40010400 	.word	0x40010400
 800c2dc:	40000400 	.word	0x40000400
 800c2e0:	40000800 	.word	0x40000800
 800c2e4:	40000c00 	.word	0x40000c00
 800c2e8:	40001800 	.word	0x40001800
 800c2ec:	40014000 	.word	0x40014000

0800c2f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c304:	2b01      	cmp	r3, #1
 800c306:	d101      	bne.n	800c30c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c308:	2302      	movs	r3, #2
 800c30a:	e065      	b.n	800c3d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	4313      	orrs	r3, r2
 800c320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	4313      	orrs	r3, r2
 800c358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	4313      	orrs	r3, r2
 800c366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c372:	4313      	orrs	r3, r2
 800c374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	041b      	lsls	r3, r3, #16
 800c382:	4313      	orrs	r3, r2
 800c384:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a16      	ldr	r2, [pc, #88]	; (800c3e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d004      	beq.n	800c39a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a14      	ldr	r2, [pc, #80]	; (800c3e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d115      	bne.n	800c3c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	051b      	lsls	r3, r3, #20
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	69db      	ldr	r3, [r3, #28]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	40010000 	.word	0x40010000
 800c3e8:	40010400 	.word	0x40010400

0800c3ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	f107 001c 	add.w	r0, r7, #28
 800c3fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	2b01      	cmp	r3, #1
 800c402:	d120      	bne.n	800c446 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	68da      	ldr	r2, [r3, #12]
 800c414:	4b2a      	ldr	r3, [pc, #168]	; (800c4c0 <USB_CoreInit+0xd4>)
 800c416:	4013      	ands	r3, r2
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d105      	bne.n	800c43a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f001 fc04 	bl	800dc48 <USB_CoreReset>
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]
 800c444:	e01a      	b.n	800c47c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f001 fbf8 	bl	800dc48 <USB_CoreReset>
 800c458:	4603      	mov	r3, r0
 800c45a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d106      	bne.n	800c470 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	639a      	str	r2, [r3, #56]	; 0x38
 800c46e:	e005      	b.n	800c47c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d116      	bne.n	800c4b0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c490:	4b0c      	ldr	r3, [pc, #48]	; (800c4c4 <USB_CoreInit+0xd8>)
 800c492:	4313      	orrs	r3, r2
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	f043 0206 	orr.w	r2, r3, #6
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f043 0220 	orr.w	r2, r3, #32
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4bc:	b004      	add	sp, #16
 800c4be:	4770      	bx	lr
 800c4c0:	ffbdffbf 	.word	0xffbdffbf
 800c4c4:	03ee0000 	.word	0x03ee0000

0800c4c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d165      	bne.n	800c5a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	4a41      	ldr	r2, [pc, #260]	; (800c5e4 <USB_SetTurnaroundTime+0x11c>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d906      	bls.n	800c4f2 <USB_SetTurnaroundTime+0x2a>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4a40      	ldr	r2, [pc, #256]	; (800c5e8 <USB_SetTurnaroundTime+0x120>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d202      	bcs.n	800c4f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c4ec:	230f      	movs	r3, #15
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e062      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	4a3c      	ldr	r2, [pc, #240]	; (800c5e8 <USB_SetTurnaroundTime+0x120>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d306      	bcc.n	800c508 <USB_SetTurnaroundTime+0x40>
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4a3b      	ldr	r2, [pc, #236]	; (800c5ec <USB_SetTurnaroundTime+0x124>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d202      	bcs.n	800c508 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c502:	230e      	movs	r3, #14
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e057      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4a38      	ldr	r2, [pc, #224]	; (800c5ec <USB_SetTurnaroundTime+0x124>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d306      	bcc.n	800c51e <USB_SetTurnaroundTime+0x56>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4a37      	ldr	r2, [pc, #220]	; (800c5f0 <USB_SetTurnaroundTime+0x128>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d202      	bcs.n	800c51e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c518:	230d      	movs	r3, #13
 800c51a:	617b      	str	r3, [r7, #20]
 800c51c:	e04c      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	4a33      	ldr	r2, [pc, #204]	; (800c5f0 <USB_SetTurnaroundTime+0x128>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d306      	bcc.n	800c534 <USB_SetTurnaroundTime+0x6c>
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	4a32      	ldr	r2, [pc, #200]	; (800c5f4 <USB_SetTurnaroundTime+0x12c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d802      	bhi.n	800c534 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c52e:	230c      	movs	r3, #12
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	e041      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	4a2f      	ldr	r2, [pc, #188]	; (800c5f4 <USB_SetTurnaroundTime+0x12c>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d906      	bls.n	800c54a <USB_SetTurnaroundTime+0x82>
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	4a2e      	ldr	r2, [pc, #184]	; (800c5f8 <USB_SetTurnaroundTime+0x130>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d802      	bhi.n	800c54a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c544:	230b      	movs	r3, #11
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e036      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	4a2a      	ldr	r2, [pc, #168]	; (800c5f8 <USB_SetTurnaroundTime+0x130>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d906      	bls.n	800c560 <USB_SetTurnaroundTime+0x98>
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	4a29      	ldr	r2, [pc, #164]	; (800c5fc <USB_SetTurnaroundTime+0x134>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d802      	bhi.n	800c560 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c55a:	230a      	movs	r3, #10
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	e02b      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	4a26      	ldr	r2, [pc, #152]	; (800c5fc <USB_SetTurnaroundTime+0x134>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d906      	bls.n	800c576 <USB_SetTurnaroundTime+0xae>
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	4a25      	ldr	r2, [pc, #148]	; (800c600 <USB_SetTurnaroundTime+0x138>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d202      	bcs.n	800c576 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c570:	2309      	movs	r3, #9
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e020      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	4a21      	ldr	r2, [pc, #132]	; (800c600 <USB_SetTurnaroundTime+0x138>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d306      	bcc.n	800c58c <USB_SetTurnaroundTime+0xc4>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	4a20      	ldr	r2, [pc, #128]	; (800c604 <USB_SetTurnaroundTime+0x13c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d802      	bhi.n	800c58c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c586:	2308      	movs	r3, #8
 800c588:	617b      	str	r3, [r7, #20]
 800c58a:	e015      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	4a1d      	ldr	r2, [pc, #116]	; (800c604 <USB_SetTurnaroundTime+0x13c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d906      	bls.n	800c5a2 <USB_SetTurnaroundTime+0xda>
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	4a1c      	ldr	r2, [pc, #112]	; (800c608 <USB_SetTurnaroundTime+0x140>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d202      	bcs.n	800c5a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c59c:	2307      	movs	r3, #7
 800c59e:	617b      	str	r3, [r7, #20]
 800c5a0:	e00a      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c5a2:	2306      	movs	r3, #6
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	e007      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c5a8:	79fb      	ldrb	r3, [r7, #7]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d102      	bne.n	800c5b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c5ae:	2309      	movs	r3, #9
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	e001      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c5b4:	2309      	movs	r3, #9
 800c5b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	029b      	lsls	r3, r3, #10
 800c5cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	00d8acbf 	.word	0x00d8acbf
 800c5e8:	00e4e1c0 	.word	0x00e4e1c0
 800c5ec:	00f42400 	.word	0x00f42400
 800c5f0:	01067380 	.word	0x01067380
 800c5f4:	011a499f 	.word	0x011a499f
 800c5f8:	01312cff 	.word	0x01312cff
 800c5fc:	014ca43f 	.word	0x014ca43f
 800c600:	016e3600 	.word	0x016e3600
 800c604:	01a6ab1f 	.word	0x01a6ab1f
 800c608:	01e84800 	.word	0x01e84800

0800c60c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f043 0201 	orr.w	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f023 0201 	bic.w	r2, r3, #1
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c66c:	78fb      	ldrb	r3, [r7, #3]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d115      	bne.n	800c69e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c67e:	2001      	movs	r0, #1
 800c680:	f7f5 fbe8 	bl	8001e54 <HAL_Delay>
      ms++;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3301      	adds	r3, #1
 800c688:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 fa4b 	bl	800db26 <USB_GetMode>
 800c690:	4603      	mov	r3, r0
 800c692:	2b01      	cmp	r3, #1
 800c694:	d01e      	beq.n	800c6d4 <USB_SetCurrentMode+0x84>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b31      	cmp	r3, #49	; 0x31
 800c69a:	d9f0      	bls.n	800c67e <USB_SetCurrentMode+0x2e>
 800c69c:	e01a      	b.n	800c6d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c69e:	78fb      	ldrb	r3, [r7, #3]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d115      	bne.n	800c6d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f7f5 fbcf 	bl	8001e54 <HAL_Delay>
      ms++;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f001 fa32 	bl	800db26 <USB_GetMode>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d005      	beq.n	800c6d4 <USB_SetCurrentMode+0x84>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b31      	cmp	r3, #49	; 0x31
 800c6cc:	d9f0      	bls.n	800c6b0 <USB_SetCurrentMode+0x60>
 800c6ce:	e001      	b.n	800c6d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e005      	b.n	800c6e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b32      	cmp	r3, #50	; 0x32
 800c6d8:	d101      	bne.n	800c6de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e000      	b.n	800c6e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b086      	sub	sp, #24
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c6f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c702:	2300      	movs	r3, #0
 800c704:	613b      	str	r3, [r7, #16]
 800c706:	e009      	b.n	800c71c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	3340      	adds	r3, #64	; 0x40
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	2200      	movs	r2, #0
 800c714:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	3301      	adds	r3, #1
 800c71a:	613b      	str	r3, [r7, #16]
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	2b0e      	cmp	r3, #14
 800c720:	d9f2      	bls.n	800c708 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d11c      	bne.n	800c762 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c736:	f043 0302 	orr.w	r3, r3, #2
 800c73a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c740:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	601a      	str	r2, [r3, #0]
 800c760:	e005      	b.n	800c76e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c766:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c774:	461a      	mov	r2, r3
 800c776:	2300      	movs	r3, #0
 800c778:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c780:	4619      	mov	r1, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c788:	461a      	mov	r2, r3
 800c78a:	680b      	ldr	r3, [r1, #0]
 800c78c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	2b01      	cmp	r3, #1
 800c792:	d10c      	bne.n	800c7ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d104      	bne.n	800c7a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c79a:	2100      	movs	r1, #0
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f965 	bl	800ca6c <USB_SetDevSpeed>
 800c7a2:	e008      	b.n	800c7b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f960 	bl	800ca6c <USB_SetDevSpeed>
 800c7ac:	e003      	b.n	800c7b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c7ae:	2103      	movs	r1, #3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f95b 	bl	800ca6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c7b6:	2110      	movs	r1, #16
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f8f3 	bl	800c9a4 <USB_FlushTxFifo>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f91f 	bl	800ca0c <USB_FlushRxFifo>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7de:	461a      	mov	r2, r3
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	613b      	str	r3, [r7, #16]
 800c800:	e043      	b.n	800c88a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	015a      	lsls	r2, r3, #5
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	4413      	add	r3, r2
 800c80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c818:	d118      	bne.n	800c84c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82c:	461a      	mov	r2, r3
 800c82e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c832:	6013      	str	r3, [r2, #0]
 800c834:	e013      	b.n	800c85e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c842:	461a      	mov	r2, r3
 800c844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c848:	6013      	str	r3, [r2, #0]
 800c84a:	e008      	b.n	800c85e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	015a      	lsls	r2, r3, #5
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	4413      	add	r3, r2
 800c854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c858:	461a      	mov	r2, r3
 800c85a:	2300      	movs	r3, #0
 800c85c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	4413      	add	r3, r2
 800c866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86a:	461a      	mov	r2, r3
 800c86c:	2300      	movs	r3, #0
 800c86e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	4413      	add	r3, r2
 800c878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87c:	461a      	mov	r2, r3
 800c87e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c882:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	3301      	adds	r3, #1
 800c888:	613b      	str	r3, [r7, #16]
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d3b7      	bcc.n	800c802 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c892:	2300      	movs	r3, #0
 800c894:	613b      	str	r3, [r7, #16]
 800c896:	e043      	b.n	800c920 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	015a      	lsls	r2, r3, #5
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8ae:	d118      	bne.n	800c8e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10a      	bne.n	800c8cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8c8:	6013      	str	r3, [r2, #0]
 800c8ca:	e013      	b.n	800c8f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	e008      	b.n	800c8f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c900:	461a      	mov	r2, r3
 800c902:	2300      	movs	r3, #0
 800c904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c912:	461a      	mov	r2, r3
 800c914:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c918:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	3301      	adds	r3, #1
 800c91e:	613b      	str	r3, [r7, #16]
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	429a      	cmp	r2, r3
 800c926:	d3b7      	bcc.n	800c898 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c93a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c948:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d105      	bne.n	800c95c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	f043 0210 	orr.w	r2, r3, #16
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	699a      	ldr	r2, [r3, #24]
 800c960:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <USB_DevInit+0x2b4>)
 800c962:	4313      	orrs	r3, r2
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d005      	beq.n	800c97a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	f043 0208 	orr.w	r2, r3, #8
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d105      	bne.n	800c98c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	699a      	ldr	r2, [r3, #24]
 800c984:	4b06      	ldr	r3, [pc, #24]	; (800c9a0 <USB_DevInit+0x2b8>)
 800c986:	4313      	orrs	r3, r2
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c998:	b004      	add	sp, #16
 800c99a:	4770      	bx	lr
 800c99c:	803c3800 	.word	0x803c3800
 800c9a0:	40000004 	.word	0x40000004

0800c9a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4a13      	ldr	r2, [pc, #76]	; (800ca08 <USB_FlushTxFifo+0x64>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d901      	bls.n	800c9c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e01b      	b.n	800c9fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	daf2      	bge.n	800c9b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	019b      	lsls	r3, r3, #6
 800c9d4:	f043 0220 	orr.w	r2, r3, #32
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	4a08      	ldr	r2, [pc, #32]	; (800ca08 <USB_FlushTxFifo+0x64>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d901      	bls.n	800c9ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e006      	b.n	800c9fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	f003 0320 	and.w	r3, r3, #32
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	d0f0      	beq.n	800c9dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	00030d40 	.word	0x00030d40

0800ca0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca14:	2300      	movs	r3, #0
 800ca16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	4a11      	ldr	r2, [pc, #68]	; (800ca68 <USB_FlushRxFifo+0x5c>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d901      	bls.n	800ca2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e018      	b.n	800ca5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	daf2      	bge.n	800ca18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2210      	movs	r2, #16
 800ca3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	4a08      	ldr	r2, [pc, #32]	; (800ca68 <USB_FlushRxFifo+0x5c>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d901      	bls.n	800ca4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e006      	b.n	800ca5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	f003 0310 	and.w	r3, r3, #16
 800ca56:	2b10      	cmp	r3, #16
 800ca58:	d0f0      	beq.n	800ca3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	00030d40 	.word	0x00030d40

0800ca6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	460b      	mov	r3, r1
 800ca76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	78fb      	ldrb	r3, [r7, #3]
 800ca86:	68f9      	ldr	r1, [r7, #12]
 800ca88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr

0800ca9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ca9e:	b480      	push	{r7}
 800caa0:	b087      	sub	sp, #28
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f003 0306 	and.w	r3, r3, #6
 800cab6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d102      	bne.n	800cac4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cabe:	2300      	movs	r3, #0
 800cac0:	75fb      	strb	r3, [r7, #23]
 800cac2:	e00a      	b.n	800cada <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d002      	beq.n	800cad0 <USB_GetDevSpeed+0x32>
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b06      	cmp	r3, #6
 800cace:	d102      	bne.n	800cad6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cad0:	2302      	movs	r3, #2
 800cad2:	75fb      	strb	r3, [r7, #23]
 800cad4:	e001      	b.n	800cada <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cad6:	230f      	movs	r3, #15
 800cad8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cada:	7dfb      	ldrb	r3, [r7, #23]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	371c      	adds	r7, #28
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	785b      	ldrb	r3, [r3, #1]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d139      	bne.n	800cb78 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb0a:	69da      	ldr	r2, [r3, #28]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	f003 030f 	and.w	r3, r3, #15
 800cb14:	2101      	movs	r1, #1
 800cb16:	fa01 f303 	lsl.w	r3, r1, r3
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	68f9      	ldr	r1, [r7, #12]
 800cb1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb22:	4313      	orrs	r3, r2
 800cb24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d153      	bne.n	800cbe4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	015a      	lsls	r2, r3, #5
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	791b      	ldrb	r3, [r3, #4]
 800cb56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	059b      	lsls	r3, r3, #22
 800cb5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb60:	431a      	orrs	r2, r3
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	0159      	lsls	r1, r3, #5
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	440b      	add	r3, r1
 800cb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4b20      	ldr	r3, [pc, #128]	; (800cbf4 <USB_ActivateEndpoint+0x10c>)
 800cb72:	4313      	orrs	r3, r2
 800cb74:	600b      	str	r3, [r1, #0]
 800cb76:	e035      	b.n	800cbe4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb7e:	69da      	ldr	r2, [r3, #28]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	f003 030f 	and.w	r3, r3, #15
 800cb88:	2101      	movs	r1, #1
 800cb8a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb8e:	041b      	lsls	r3, r3, #16
 800cb90:	68f9      	ldr	r1, [r7, #12]
 800cb92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb96:	4313      	orrs	r3, r2
 800cb98:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	015a      	lsls	r2, r3, #5
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d119      	bne.n	800cbe4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	791b      	ldrb	r3, [r3, #4]
 800cbca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbcc:	430b      	orrs	r3, r1
 800cbce:	431a      	orrs	r2, r3
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	0159      	lsls	r1, r3, #5
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	440b      	add	r3, r1
 800cbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4b05      	ldr	r3, [pc, #20]	; (800cbf4 <USB_ActivateEndpoint+0x10c>)
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	10008000 	.word	0x10008000

0800cbf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	785b      	ldrb	r3, [r3, #1]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d161      	bne.n	800ccd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	015a      	lsls	r2, r3, #5
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc2a:	d11f      	bne.n	800cc6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	0151      	lsls	r1, r2, #5
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	440a      	add	r2, r1
 800cc42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	0151      	lsls	r1, r2, #5
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	440a      	add	r2, r1
 800cc62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	f003 030f 	and.w	r3, r3, #15
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	43db      	mvns	r3, r3
 800cc86:	68f9      	ldr	r1, [r7, #12]
 800cc88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc96:	69da      	ldr	r2, [r3, #28]
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f003 030f 	and.w	r3, r3, #15
 800cca0:	2101      	movs	r1, #1
 800cca2:	fa01 f303 	lsl.w	r3, r1, r3
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	43db      	mvns	r3, r3
 800ccaa:	68f9      	ldr	r1, [r7, #12]
 800ccac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	0159      	lsls	r1, r3, #5
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	440b      	add	r3, r1
 800ccca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4b35      	ldr	r3, [pc, #212]	; (800cda8 <USB_DeactivateEndpoint+0x1b0>)
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	600b      	str	r3, [r1, #0]
 800ccd6:	e060      	b.n	800cd9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccee:	d11f      	bne.n	800cd30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	0151      	lsls	r1, r2, #5
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	440a      	add	r2, r1
 800cd06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	015a      	lsls	r2, r3, #5
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4413      	add	r3, r2
 800cd18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	0151      	lsls	r1, r2, #5
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	440a      	add	r2, r1
 800cd26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	f003 030f 	and.w	r3, r3, #15
 800cd40:	2101      	movs	r1, #1
 800cd42:	fa01 f303 	lsl.w	r3, r1, r3
 800cd46:	041b      	lsls	r3, r3, #16
 800cd48:	43db      	mvns	r3, r3
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd50:	4013      	ands	r3, r2
 800cd52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd5a:	69da      	ldr	r2, [r3, #28]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	f003 030f 	and.w	r3, r3, #15
 800cd64:	2101      	movs	r1, #1
 800cd66:	fa01 f303 	lsl.w	r3, r1, r3
 800cd6a:	041b      	lsls	r3, r3, #16
 800cd6c:	43db      	mvns	r3, r3
 800cd6e:	68f9      	ldr	r1, [r7, #12]
 800cd70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd74:	4013      	ands	r3, r2
 800cd76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	0159      	lsls	r1, r3, #5
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	440b      	add	r3, r1
 800cd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd92:	4619      	mov	r1, r3
 800cd94:	4b05      	ldr	r3, [pc, #20]	; (800cdac <USB_DeactivateEndpoint+0x1b4>)
 800cd96:	4013      	ands	r3, r2
 800cd98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	ec337800 	.word	0xec337800
 800cdac:	eff37800 	.word	0xeff37800

0800cdb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b08a      	sub	sp, #40	; 0x28
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	785b      	ldrb	r3, [r3, #1]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	f040 8163 	bne.w	800d098 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d132      	bne.n	800ce40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	015a      	lsls	r2, r3, #5
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	4413      	add	r3, r2
 800cde2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde6:	691a      	ldr	r2, [r3, #16]
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	0159      	lsls	r1, r3, #5
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	440b      	add	r3, r1
 800cdf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4ba5      	ldr	r3, [pc, #660]	; (800d08c <USB_EPStartXfer+0x2dc>)
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	015a      	lsls	r2, r3, #5
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	4413      	add	r3, r2
 800ce04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	0151      	lsls	r1, r2, #5
 800ce0e:	69fa      	ldr	r2, [r7, #28]
 800ce10:	440a      	add	r2, r1
 800ce12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce28:	691a      	ldr	r2, [r3, #16]
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	0159      	lsls	r1, r3, #5
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	440b      	add	r3, r1
 800ce32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce36:	4619      	mov	r1, r3
 800ce38:	4b95      	ldr	r3, [pc, #596]	; (800d090 <USB_EPStartXfer+0x2e0>)
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	610b      	str	r3, [r1, #16]
 800ce3e:	e074      	b.n	800cf2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	015a      	lsls	r2, r3, #5
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	4413      	add	r3, r2
 800ce48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4c:	691a      	ldr	r2, [r3, #16]
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	0159      	lsls	r1, r3, #5
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	440b      	add	r3, r1
 800ce56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4b8c      	ldr	r3, [pc, #560]	; (800d090 <USB_EPStartXfer+0x2e0>)
 800ce5e:	4013      	ands	r3, r2
 800ce60:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6e:	691a      	ldr	r2, [r3, #16]
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	0159      	lsls	r1, r3, #5
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	440b      	add	r3, r1
 800ce78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4b83      	ldr	r3, [pc, #524]	; (800d08c <USB_EPStartXfer+0x2dc>)
 800ce80:	4013      	ands	r3, r2
 800ce82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	015a      	lsls	r2, r3, #5
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	6999      	ldr	r1, [r3, #24]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	440b      	add	r3, r1
 800ce9c:	1e59      	subs	r1, r3, #1
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	fbb1 f3f3 	udiv	r3, r1, r3
 800cea6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cea8:	4b7a      	ldr	r3, [pc, #488]	; (800d094 <USB_EPStartXfer+0x2e4>)
 800ceaa:	400b      	ands	r3, r1
 800ceac:	69b9      	ldr	r1, [r7, #24]
 800ceae:	0148      	lsls	r0, r1, #5
 800ceb0:	69f9      	ldr	r1, [r7, #28]
 800ceb2:	4401      	add	r1, r0
 800ceb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec8:	691a      	ldr	r2, [r3, #16]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ced2:	69b9      	ldr	r1, [r7, #24]
 800ced4:	0148      	lsls	r0, r1, #5
 800ced6:	69f9      	ldr	r1, [r7, #28]
 800ced8:	4401      	add	r1, r0
 800ceda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cede:	4313      	orrs	r3, r2
 800cee0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	791b      	ldrb	r3, [r3, #4]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d11f      	bne.n	800cf2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	015a      	lsls	r2, r3, #5
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	4413      	add	r3, r2
 800cef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	69ba      	ldr	r2, [r7, #24]
 800cefa:	0151      	lsls	r1, r2, #5
 800cefc:	69fa      	ldr	r2, [r7, #28]
 800cefe:	440a      	add	r2, r1
 800cf00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	69ba      	ldr	r2, [r7, #24]
 800cf1a:	0151      	lsls	r1, r2, #5
 800cf1c:	69fa      	ldr	r2, [r7, #28]
 800cf1e:	440a      	add	r2, r1
 800cf20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d14b      	bne.n	800cfc8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d009      	beq.n	800cf4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	015a      	lsls	r2, r3, #5
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	4413      	add	r3, r2
 800cf40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf44:	461a      	mov	r2, r3
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	695b      	ldr	r3, [r3, #20]
 800cf4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	791b      	ldrb	r3, [r3, #4]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d128      	bne.n	800cfa6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d110      	bne.n	800cf86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	015a      	lsls	r2, r3, #5
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69ba      	ldr	r2, [r7, #24]
 800cf74:	0151      	lsls	r1, r2, #5
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	440a      	add	r2, r1
 800cf7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf82:	6013      	str	r3, [r2, #0]
 800cf84:	e00f      	b.n	800cfa6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	69ba      	ldr	r2, [r7, #24]
 800cf96:	0151      	lsls	r1, r2, #5
 800cf98:	69fa      	ldr	r2, [r7, #28]
 800cf9a:	440a      	add	r2, r1
 800cf9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	015a      	lsls	r2, r3, #5
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	4413      	add	r3, r2
 800cfae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	69ba      	ldr	r2, [r7, #24]
 800cfb6:	0151      	lsls	r1, r2, #5
 800cfb8:	69fa      	ldr	r2, [r7, #28]
 800cfba:	440a      	add	r2, r1
 800cfbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfc4:	6013      	str	r3, [r2, #0]
 800cfc6:	e137      	b.n	800d238 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	015a      	lsls	r2, r3, #5
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	4413      	add	r3, r2
 800cfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	69ba      	ldr	r2, [r7, #24]
 800cfd8:	0151      	lsls	r1, r2, #5
 800cfda:	69fa      	ldr	r2, [r7, #28]
 800cfdc:	440a      	add	r2, r1
 800cfde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfe6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	791b      	ldrb	r3, [r3, #4]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d015      	beq.n	800d01c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 811f 	beq.w	800d238 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	f003 030f 	and.w	r3, r3, #15
 800d00a:	2101      	movs	r1, #1
 800d00c:	fa01 f303 	lsl.w	r3, r1, r3
 800d010:	69f9      	ldr	r1, [r7, #28]
 800d012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d016:	4313      	orrs	r3, r2
 800d018:	634b      	str	r3, [r1, #52]	; 0x34
 800d01a:	e10d      	b.n	800d238 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d110      	bne.n	800d04e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	015a      	lsls	r2, r3, #5
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	4413      	add	r3, r2
 800d034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	69ba      	ldr	r2, [r7, #24]
 800d03c:	0151      	lsls	r1, r2, #5
 800d03e:	69fa      	ldr	r2, [r7, #28]
 800d040:	440a      	add	r2, r1
 800d042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	e00f      	b.n	800d06e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	015a      	lsls	r2, r3, #5
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	4413      	add	r3, r2
 800d056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	69ba      	ldr	r2, [r7, #24]
 800d05e:	0151      	lsls	r1, r2, #5
 800d060:	69fa      	ldr	r2, [r7, #28]
 800d062:	440a      	add	r2, r1
 800d064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d06c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6919      	ldr	r1, [r3, #16]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	781a      	ldrb	r2, [r3, #0]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	b298      	uxth	r0, r3
 800d07c:	79fb      	ldrb	r3, [r7, #7]
 800d07e:	9300      	str	r3, [sp, #0]
 800d080:	4603      	mov	r3, r0
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f000 faea 	bl	800d65c <USB_WritePacket>
 800d088:	e0d6      	b.n	800d238 <USB_EPStartXfer+0x488>
 800d08a:	bf00      	nop
 800d08c:	e007ffff 	.word	0xe007ffff
 800d090:	fff80000 	.word	0xfff80000
 800d094:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a4:	691a      	ldr	r2, [r3, #16]
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	0159      	lsls	r1, r3, #5
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	440b      	add	r3, r1
 800d0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4b63      	ldr	r3, [pc, #396]	; (800d244 <USB_EPStartXfer+0x494>)
 800d0b6:	4013      	ands	r3, r2
 800d0b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	015a      	lsls	r2, r3, #5
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c6:	691a      	ldr	r2, [r3, #16]
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	0159      	lsls	r1, r3, #5
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	440b      	add	r3, r1
 800d0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4b5c      	ldr	r3, [pc, #368]	; (800d248 <USB_EPStartXfer+0x498>)
 800d0d8:	4013      	ands	r3, r2
 800d0da:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d123      	bne.n	800d12c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	015a      	lsls	r2, r3, #5
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f0:	691a      	ldr	r2, [r3, #16]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0fa:	69b9      	ldr	r1, [r7, #24]
 800d0fc:	0148      	lsls	r0, r1, #5
 800d0fe:	69f9      	ldr	r1, [r7, #28]
 800d100:	4401      	add	r1, r0
 800d102:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d106:	4313      	orrs	r3, r2
 800d108:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	015a      	lsls	r2, r3, #5
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	4413      	add	r3, r2
 800d112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d116:	691b      	ldr	r3, [r3, #16]
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	0151      	lsls	r1, r2, #5
 800d11c:	69fa      	ldr	r2, [r7, #28]
 800d11e:	440a      	add	r2, r1
 800d120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d128:	6113      	str	r3, [r2, #16]
 800d12a:	e037      	b.n	800d19c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	699a      	ldr	r2, [r3, #24]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	4413      	add	r3, r2
 800d136:	1e5a      	subs	r2, r3, #1
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d140:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	8afa      	ldrh	r2, [r7, #22]
 800d148:	fb02 f203 	mul.w	r2, r2, r3
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	015a      	lsls	r2, r3, #5
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	4413      	add	r3, r2
 800d158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15c:	691a      	ldr	r2, [r3, #16]
 800d15e:	8afb      	ldrh	r3, [r7, #22]
 800d160:	04d9      	lsls	r1, r3, #19
 800d162:	4b3a      	ldr	r3, [pc, #232]	; (800d24c <USB_EPStartXfer+0x49c>)
 800d164:	400b      	ands	r3, r1
 800d166:	69b9      	ldr	r1, [r7, #24]
 800d168:	0148      	lsls	r0, r1, #5
 800d16a:	69f9      	ldr	r1, [r7, #28]
 800d16c:	4401      	add	r1, r0
 800d16e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d172:	4313      	orrs	r3, r2
 800d174:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	015a      	lsls	r2, r3, #5
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	4413      	add	r3, r2
 800d17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d182:	691a      	ldr	r2, [r3, #16]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	69db      	ldr	r3, [r3, #28]
 800d188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d18c:	69b9      	ldr	r1, [r7, #24]
 800d18e:	0148      	lsls	r0, r1, #5
 800d190:	69f9      	ldr	r1, [r7, #28]
 800d192:	4401      	add	r1, r0
 800d194:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d198:	4313      	orrs	r3, r2
 800d19a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d19c:	79fb      	ldrb	r3, [r7, #7]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d10d      	bne.n	800d1be <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d009      	beq.n	800d1be <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6919      	ldr	r1, [r3, #16]
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	015a      	lsls	r2, r3, #5
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ba:	460a      	mov	r2, r1
 800d1bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	791b      	ldrb	r3, [r3, #4]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d128      	bne.n	800d218 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d110      	bne.n	800d1f8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	015a      	lsls	r2, r3, #5
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	4413      	add	r3, r2
 800d1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	69ba      	ldr	r2, [r7, #24]
 800d1e6:	0151      	lsls	r1, r2, #5
 800d1e8:	69fa      	ldr	r2, [r7, #28]
 800d1ea:	440a      	add	r2, r1
 800d1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	e00f      	b.n	800d218 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	69ba      	ldr	r2, [r7, #24]
 800d208:	0151      	lsls	r1, r2, #5
 800d20a:	69fa      	ldr	r2, [r7, #28]
 800d20c:	440a      	add	r2, r1
 800d20e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d216:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	015a      	lsls	r2, r3, #5
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	4413      	add	r3, r2
 800d220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	69ba      	ldr	r2, [r7, #24]
 800d228:	0151      	lsls	r1, r2, #5
 800d22a:	69fa      	ldr	r2, [r7, #28]
 800d22c:	440a      	add	r2, r1
 800d22e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d232:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3720      	adds	r7, #32
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	fff80000 	.word	0xfff80000
 800d248:	e007ffff 	.word	0xe007ffff
 800d24c:	1ff80000 	.word	0x1ff80000

0800d250 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d250:	b480      	push	{r7}
 800d252:	b087      	sub	sp, #28
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	4613      	mov	r3, r2
 800d25c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	785b      	ldrb	r3, [r3, #1]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	f040 80ce 	bne.w	800d40e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	699b      	ldr	r3, [r3, #24]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d132      	bne.n	800d2e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	015a      	lsls	r2, r3, #5
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	4413      	add	r3, r2
 800d282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d286:	691a      	ldr	r2, [r3, #16]
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	0159      	lsls	r1, r3, #5
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	440b      	add	r3, r1
 800d290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d294:	4619      	mov	r1, r3
 800d296:	4b9a      	ldr	r3, [pc, #616]	; (800d500 <USB_EP0StartXfer+0x2b0>)
 800d298:	4013      	ands	r3, r2
 800d29a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	015a      	lsls	r2, r3, #5
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	0151      	lsls	r1, r2, #5
 800d2ae:	697a      	ldr	r2, [r7, #20]
 800d2b0:	440a      	add	r2, r1
 800d2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	015a      	lsls	r2, r3, #5
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c8:	691a      	ldr	r2, [r3, #16]
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	0159      	lsls	r1, r3, #5
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	440b      	add	r3, r1
 800d2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	4b8a      	ldr	r3, [pc, #552]	; (800d504 <USB_EP0StartXfer+0x2b4>)
 800d2da:	4013      	ands	r3, r2
 800d2dc:	610b      	str	r3, [r1, #16]
 800d2de:	e04e      	b.n	800d37e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	0159      	lsls	r1, r3, #5
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	440b      	add	r3, r1
 800d2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4b81      	ldr	r3, [pc, #516]	; (800d504 <USB_EP0StartXfer+0x2b4>)
 800d2fe:	4013      	ands	r3, r2
 800d300:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d30e:	691a      	ldr	r2, [r3, #16]
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	0159      	lsls	r1, r3, #5
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	440b      	add	r3, r1
 800d318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d31c:	4619      	mov	r1, r3
 800d31e:	4b78      	ldr	r3, [pc, #480]	; (800d500 <USB_EP0StartXfer+0x2b0>)
 800d320:	4013      	ands	r3, r2
 800d322:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	699a      	ldr	r2, [r3, #24]
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d903      	bls.n	800d338 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	68da      	ldr	r2, [r3, #12]
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	015a      	lsls	r2, r3, #5
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	0151      	lsls	r1, r2, #5
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	440a      	add	r2, r1
 800d34e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d356:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d364:	691a      	ldr	r2, [r3, #16]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d36e:	6939      	ldr	r1, [r7, #16]
 800d370:	0148      	lsls	r0, r1, #5
 800d372:	6979      	ldr	r1, [r7, #20]
 800d374:	4401      	add	r1, r0
 800d376:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d37a:	4313      	orrs	r3, r2
 800d37c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d37e:	79fb      	ldrb	r3, [r7, #7]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d11e      	bne.n	800d3c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	695b      	ldr	r3, [r3, #20]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d009      	beq.n	800d3a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	015a      	lsls	r2, r3, #5
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	4413      	add	r3, r2
 800d394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d398:	461a      	mov	r2, r3
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	695b      	ldr	r3, [r3, #20]
 800d39e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	015a      	lsls	r2, r3, #5
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	0151      	lsls	r1, r2, #5
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	440a      	add	r2, r1
 800d3b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	e097      	b.n	800d4f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	015a      	lsls	r2, r3, #5
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	693a      	ldr	r2, [r7, #16]
 800d3d2:	0151      	lsls	r1, r2, #5
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	440a      	add	r2, r1
 800d3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	699b      	ldr	r3, [r3, #24]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f000 8083 	beq.w	800d4f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800d402:	6979      	ldr	r1, [r7, #20]
 800d404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d408:	4313      	orrs	r3, r2
 800d40a:	634b      	str	r3, [r1, #52]	; 0x34
 800d40c:	e071      	b.n	800d4f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	015a      	lsls	r2, r3, #5
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	4413      	add	r3, r2
 800d416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d41a:	691a      	ldr	r2, [r3, #16]
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	0159      	lsls	r1, r3, #5
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	440b      	add	r3, r1
 800d424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d428:	4619      	mov	r1, r3
 800d42a:	4b36      	ldr	r3, [pc, #216]	; (800d504 <USB_EP0StartXfer+0x2b4>)
 800d42c:	4013      	ands	r3, r2
 800d42e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	015a      	lsls	r2, r3, #5
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	4413      	add	r3, r2
 800d438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43c:	691a      	ldr	r2, [r3, #16]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	0159      	lsls	r1, r3, #5
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	440b      	add	r3, r1
 800d446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d44a:	4619      	mov	r1, r3
 800d44c:	4b2c      	ldr	r3, [pc, #176]	; (800d500 <USB_EP0StartXfer+0x2b0>)
 800d44e:	4013      	ands	r3, r2
 800d450:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d003      	beq.n	800d462 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	68da      	ldr	r2, [r3, #12]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	68da      	ldr	r2, [r3, #12]
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	015a      	lsls	r2, r3, #5
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	4413      	add	r3, r2
 800d472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	0151      	lsls	r1, r2, #5
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	440a      	add	r2, r1
 800d480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	015a      	lsls	r2, r3, #5
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	4413      	add	r3, r2
 800d492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d496:	691a      	ldr	r2, [r3, #16]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	69db      	ldr	r3, [r3, #28]
 800d49c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4a0:	6939      	ldr	r1, [r7, #16]
 800d4a2:	0148      	lsls	r0, r1, #5
 800d4a4:	6979      	ldr	r1, [r7, #20]
 800d4a6:	4401      	add	r1, r0
 800d4a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d10d      	bne.n	800d4d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d009      	beq.n	800d4d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6919      	ldr	r1, [r3, #16]
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	015a      	lsls	r2, r3, #5
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ce:	460a      	mov	r2, r1
 800d4d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	015a      	lsls	r2, r3, #5
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	4413      	add	r3, r2
 800d4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	693a      	ldr	r2, [r7, #16]
 800d4e2:	0151      	lsls	r1, r2, #5
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	440a      	add	r2, r1
 800d4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	371c      	adds	r7, #28
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	e007ffff 	.word	0xe007ffff
 800d504:	fff80000 	.word	0xfff80000

0800d508 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	785b      	ldrb	r3, [r3, #1]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d14a      	bne.n	800d5bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	015a      	lsls	r2, r3, #5
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	4413      	add	r3, r2
 800d530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d53a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d53e:	f040 8086 	bne.w	800d64e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	015a      	lsls	r2, r3, #5
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	4413      	add	r3, r2
 800d54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	683a      	ldr	r2, [r7, #0]
 800d554:	7812      	ldrb	r2, [r2, #0]
 800d556:	0151      	lsls	r1, r2, #5
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	440a      	add	r2, r1
 800d55c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d560:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d564:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	015a      	lsls	r2, r3, #5
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	4413      	add	r3, r2
 800d570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	7812      	ldrb	r2, [r2, #0]
 800d57a:	0151      	lsls	r1, r2, #5
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	440a      	add	r2, r1
 800d580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d588:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	3301      	adds	r3, #1
 800d58e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f242 7210 	movw	r2, #10000	; 0x2710
 800d596:	4293      	cmp	r3, r2
 800d598:	d902      	bls.n	800d5a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	75fb      	strb	r3, [r7, #23]
          break;
 800d59e:	e056      	b.n	800d64e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	015a      	lsls	r2, r3, #5
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5b8:	d0e7      	beq.n	800d58a <USB_EPStopXfer+0x82>
 800d5ba:	e048      	b.n	800d64e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5d4:	d13b      	bne.n	800d64e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	015a      	lsls	r2, r3, #5
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	4413      	add	r3, r2
 800d5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	7812      	ldrb	r2, [r2, #0]
 800d5ea:	0151      	lsls	r1, r2, #5
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	440a      	add	r2, r1
 800d5f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	015a      	lsls	r2, r3, #5
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	4413      	add	r3, r2
 800d604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	7812      	ldrb	r2, [r2, #0]
 800d60e:	0151      	lsls	r1, r2, #5
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	440a      	add	r2, r1
 800d614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d61c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3301      	adds	r3, #1
 800d622:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f242 7210 	movw	r2, #10000	; 0x2710
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d902      	bls.n	800d634 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	75fb      	strb	r3, [r7, #23]
          break;
 800d632:	e00c      	b.n	800d64e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	015a      	lsls	r2, r3, #5
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	4413      	add	r3, r2
 800d63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d64c:	d0e7      	beq.n	800d61e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d650:	4618      	mov	r0, r3
 800d652:	371c      	adds	r7, #28
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b089      	sub	sp, #36	; 0x24
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	4611      	mov	r1, r2
 800d668:	461a      	mov	r2, r3
 800d66a:	460b      	mov	r3, r1
 800d66c:	71fb      	strb	r3, [r7, #7]
 800d66e:	4613      	mov	r3, r2
 800d670:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d67a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d123      	bne.n	800d6ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d682:	88bb      	ldrh	r3, [r7, #4]
 800d684:	3303      	adds	r3, #3
 800d686:	089b      	lsrs	r3, r3, #2
 800d688:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d68a:	2300      	movs	r3, #0
 800d68c:	61bb      	str	r3, [r7, #24]
 800d68e:	e018      	b.n	800d6c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	031a      	lsls	r2, r3, #12
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	4413      	add	r3, r2
 800d698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d69c:	461a      	mov	r2, r3
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	61bb      	str	r3, [r7, #24]
 800d6c2:	69ba      	ldr	r2, [r7, #24]
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d3e2      	bcc.n	800d690 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d6ca:	2300      	movs	r3, #0
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3724      	adds	r7, #36	; 0x24
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b08b      	sub	sp, #44	; 0x2c
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d6ee:	88fb      	ldrh	r3, [r7, #6]
 800d6f0:	089b      	lsrs	r3, r3, #2
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d6f6:	88fb      	ldrh	r3, [r7, #6]
 800d6f8:	f003 0303 	and.w	r3, r3, #3
 800d6fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d6fe:	2300      	movs	r3, #0
 800d700:	623b      	str	r3, [r7, #32]
 800d702:	e014      	b.n	800d72e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	3301      	adds	r3, #1
 800d714:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	3301      	adds	r3, #1
 800d71a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	3301      	adds	r3, #1
 800d720:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	3301      	adds	r3, #1
 800d726:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	3301      	adds	r3, #1
 800d72c:	623b      	str	r3, [r7, #32]
 800d72e:	6a3a      	ldr	r2, [r7, #32]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	429a      	cmp	r2, r3
 800d734:	d3e6      	bcc.n	800d704 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d736:	8bfb      	ldrh	r3, [r7, #30]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d01e      	beq.n	800d77a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d73c:	2300      	movs	r3, #0
 800d73e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d746:	461a      	mov	r2, r3
 800d748:	f107 0310 	add.w	r3, r7, #16
 800d74c:	6812      	ldr	r2, [r2, #0]
 800d74e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	b2db      	uxtb	r3, r3
 800d756:	00db      	lsls	r3, r3, #3
 800d758:	fa22 f303 	lsr.w	r3, r2, r3
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	701a      	strb	r2, [r3, #0]
      i++;
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	3301      	adds	r3, #1
 800d766:	623b      	str	r3, [r7, #32]
      pDest++;
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	3301      	adds	r3, #1
 800d76c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d76e:	8bfb      	ldrh	r3, [r7, #30]
 800d770:	3b01      	subs	r3, #1
 800d772:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d774:	8bfb      	ldrh	r3, [r7, #30]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1ea      	bne.n	800d750 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	372c      	adds	r7, #44	; 0x2c
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	785b      	ldrb	r3, [r3, #1]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d12c      	bne.n	800d7fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	015a      	lsls	r2, r3, #5
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	db12      	blt.n	800d7dc <USB_EPSetStall+0x54>
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00f      	beq.n	800d7dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	015a      	lsls	r2, r3, #5
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	0151      	lsls	r1, r2, #5
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	440a      	add	r2, r1
 800d7d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	015a      	lsls	r2, r3, #5
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	0151      	lsls	r1, r2, #5
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	440a      	add	r2, r1
 800d7f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7fa:	6013      	str	r3, [r2, #0]
 800d7fc:	e02b      	b.n	800d856 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	015a      	lsls	r2, r3, #5
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	4413      	add	r3, r2
 800d806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	db12      	blt.n	800d836 <USB_EPSetStall+0xae>
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00f      	beq.n	800d836 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	015a      	lsls	r2, r3, #5
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	4413      	add	r3, r2
 800d81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	0151      	lsls	r1, r2, #5
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	440a      	add	r2, r1
 800d82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d834:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	015a      	lsls	r2, r3, #5
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	4413      	add	r3, r2
 800d83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	0151      	lsls	r1, r2, #5
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	440a      	add	r2, r1
 800d84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d854:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3714      	adds	r7, #20
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	785b      	ldrb	r3, [r3, #1]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d128      	bne.n	800d8d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	015a      	lsls	r2, r3, #5
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4413      	add	r3, r2
 800d888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	0151      	lsls	r1, r2, #5
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	440a      	add	r2, r1
 800d896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d89a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d89e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	791b      	ldrb	r3, [r3, #4]
 800d8a4:	2b03      	cmp	r3, #3
 800d8a6:	d003      	beq.n	800d8b0 <USB_EPClearStall+0x4c>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	791b      	ldrb	r3, [r3, #4]
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	d138      	bne.n	800d922 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	015a      	lsls	r2, r3, #5
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	0151      	lsls	r1, r2, #5
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	440a      	add	r2, r1
 800d8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8ce:	6013      	str	r3, [r2, #0]
 800d8d0:	e027      	b.n	800d922 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	015a      	lsls	r2, r3, #5
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	4413      	add	r3, r2
 800d8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	0151      	lsls	r1, r2, #5
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	440a      	add	r2, r1
 800d8e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	791b      	ldrb	r3, [r3, #4]
 800d8f6:	2b03      	cmp	r3, #3
 800d8f8:	d003      	beq.n	800d902 <USB_EPClearStall+0x9e>
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	791b      	ldrb	r3, [r3, #4]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d10f      	bne.n	800d922 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	015a      	lsls	r2, r3, #5
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	4413      	add	r3, r2
 800d90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	0151      	lsls	r1, r2, #5
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	440a      	add	r2, r1
 800d918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d91c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d920:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	460b      	mov	r3, r1
 800d93a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d94e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d952:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	011b      	lsls	r3, r3, #4
 800d960:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d964:	68f9      	ldr	r1, [r7, #12]
 800d966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d96a:	4313      	orrs	r3, r2
 800d96c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d96e:	2300      	movs	r3, #0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d996:	f023 0303 	bic.w	r3, r3, #3
 800d99a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9aa:	f023 0302 	bic.w	r3, r3, #2
 800d9ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b085      	sub	sp, #20
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9d8:	f023 0303 	bic.w	r3, r3, #3
 800d9dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9ec:	f043 0302 	orr.w	r3, r3, #2
 800d9f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3714      	adds	r7, #20
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800da00:	b480      	push	{r7}
 800da02:	b085      	sub	sp, #20
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	4013      	ands	r3, r2
 800da16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800da18:	68fb      	ldr	r3, [r7, #12]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da26:	b480      	push	{r7}
 800da28:	b085      	sub	sp, #20
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	4013      	ands	r3, r2
 800da48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	0c1b      	lsrs	r3, r3, #16
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3714      	adds	r7, #20
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da5a:	b480      	push	{r7}
 800da5c:	b085      	sub	sp, #20
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da76:	69db      	ldr	r3, [r3, #28]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	4013      	ands	r3, r2
 800da7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	b29b      	uxth	r3, r3
}
 800da82:	4618      	mov	r0, r3
 800da84:	3714      	adds	r7, #20
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da8e:	b480      	push	{r7}
 800da90:	b085      	sub	sp, #20
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	460b      	mov	r3, r1
 800da98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da9e:	78fb      	ldrb	r3, [r7, #3]
 800daa0:	015a      	lsls	r2, r3, #5
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	4413      	add	r3, r2
 800daa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dab4:	695b      	ldr	r3, [r3, #20]
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	4013      	ands	r3, r2
 800daba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dabc:	68bb      	ldr	r3, [r7, #8]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3714      	adds	r7, #20
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800daca:	b480      	push	{r7}
 800dacc:	b087      	sub	sp, #28
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	460b      	mov	r3, r1
 800dad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800daee:	78fb      	ldrb	r3, [r7, #3]
 800daf0:	f003 030f 	and.w	r3, r3, #15
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	fa22 f303 	lsr.w	r3, r2, r3
 800dafa:	01db      	lsls	r3, r3, #7
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	4313      	orrs	r3, r2
 800db02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800db04:	78fb      	ldrb	r3, [r7, #3]
 800db06:	015a      	lsls	r2, r3, #5
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	4413      	add	r3, r2
 800db0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	4013      	ands	r3, r2
 800db16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800db18:	68bb      	ldr	r3, [r7, #8]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	371c      	adds	r7, #28
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800db26:	b480      	push	{r7}
 800db28:	b083      	sub	sp, #12
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	695b      	ldr	r3, [r3, #20]
 800db32:	f003 0301 	and.w	r3, r3, #1
}
 800db36:	4618      	mov	r0, r3
 800db38:	370c      	adds	r7, #12
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
	...

0800db44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db5e:	4619      	mov	r1, r3
 800db60:	4b09      	ldr	r3, [pc, #36]	; (800db88 <USB_ActivateSetup+0x44>)
 800db62:	4013      	ands	r3, r2
 800db64:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db7a:	2300      	movs	r3, #0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3714      	adds	r7, #20
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr
 800db88:	fffff800 	.word	0xfffff800

0800db8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	460b      	mov	r3, r1
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	333c      	adds	r3, #60	; 0x3c
 800dba2:	3304      	adds	r3, #4
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	4a26      	ldr	r2, [pc, #152]	; (800dc44 <USB_EP0_OutStart+0xb8>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d90a      	bls.n	800dbc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbc0:	d101      	bne.n	800dbc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e037      	b.n	800dc36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbcc:	461a      	mov	r2, r3
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	697a      	ldr	r2, [r7, #20]
 800dbdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbf4:	f043 0318 	orr.w	r3, r3, #24
 800dbf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dc0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d10f      	bne.n	800dc34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dc32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	4f54300a 	.word	0x4f54300a

0800dc48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc50:	2300      	movs	r3, #0
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3301      	adds	r3, #1
 800dc58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	4a13      	ldr	r2, [pc, #76]	; (800dcac <USB_CoreReset+0x64>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d901      	bls.n	800dc66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dc62:	2303      	movs	r3, #3
 800dc64:	e01b      	b.n	800dc9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	daf2      	bge.n	800dc54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	f043 0201 	orr.w	r2, r3, #1
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3301      	adds	r3, #1
 800dc82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4a09      	ldr	r2, [pc, #36]	; (800dcac <USB_CoreReset+0x64>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d901      	bls.n	800dc90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e006      	b.n	800dc9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d0f0      	beq.n	800dc7e <USB_CoreReset+0x36>

  return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	00030d40 	.word	0x00030d40

0800dcb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dcbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dcc0:	f002 fc5a 	bl	8010578 <USBD_static_malloc>
 800dcc4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d109      	bne.n	800dce0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	32b0      	adds	r2, #176	; 0xb0
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dcdc:	2302      	movs	r3, #2
 800dcde:	e0d4      	b.n	800de8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dce0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dce4:	2100      	movs	r1, #0
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f002 fcc2 	bl	8010670 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	32b0      	adds	r2, #176	; 0xb0
 800dcf6:	68f9      	ldr	r1, [r7, #12]
 800dcf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	32b0      	adds	r2, #176	; 0xb0
 800dd06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	7c1b      	ldrb	r3, [r3, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d138      	bne.n	800dd8a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dd18:	4b5e      	ldr	r3, [pc, #376]	; (800de94 <USBD_CDC_Init+0x1e4>)
 800dd1a:	7819      	ldrb	r1, [r3, #0]
 800dd1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd20:	2202      	movs	r2, #2
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f002 fb05 	bl	8010332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dd28:	4b5a      	ldr	r3, [pc, #360]	; (800de94 <USBD_CDC_Init+0x1e4>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	f003 020f 	and.w	r2, r3, #15
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	4613      	mov	r3, r2
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	4413      	add	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	440b      	add	r3, r1
 800dd3c:	3324      	adds	r3, #36	; 0x24
 800dd3e:	2201      	movs	r2, #1
 800dd40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dd42:	4b55      	ldr	r3, [pc, #340]	; (800de98 <USBD_CDC_Init+0x1e8>)
 800dd44:	7819      	ldrb	r1, [r3, #0]
 800dd46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd4a:	2202      	movs	r2, #2
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f002 faf0 	bl	8010332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dd52:	4b51      	ldr	r3, [pc, #324]	; (800de98 <USBD_CDC_Init+0x1e8>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	f003 020f 	and.w	r2, r3, #15
 800dd5a:	6879      	ldr	r1, [r7, #4]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4413      	add	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	440b      	add	r3, r1
 800dd66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dd6e:	4b4b      	ldr	r3, [pc, #300]	; (800de9c <USBD_CDC_Init+0x1ec>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	f003 020f 	and.w	r2, r3, #15
 800dd76:	6879      	ldr	r1, [r7, #4]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	440b      	add	r3, r1
 800dd82:	3326      	adds	r3, #38	; 0x26
 800dd84:	2210      	movs	r2, #16
 800dd86:	801a      	strh	r2, [r3, #0]
 800dd88:	e035      	b.n	800ddf6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dd8a:	4b42      	ldr	r3, [pc, #264]	; (800de94 <USBD_CDC_Init+0x1e4>)
 800dd8c:	7819      	ldrb	r1, [r3, #0]
 800dd8e:	2340      	movs	r3, #64	; 0x40
 800dd90:	2202      	movs	r2, #2
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f002 facd 	bl	8010332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dd98:	4b3e      	ldr	r3, [pc, #248]	; (800de94 <USBD_CDC_Init+0x1e4>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	f003 020f 	and.w	r2, r3, #15
 800dda0:	6879      	ldr	r1, [r7, #4]
 800dda2:	4613      	mov	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	440b      	add	r3, r1
 800ddac:	3324      	adds	r3, #36	; 0x24
 800ddae:	2201      	movs	r2, #1
 800ddb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ddb2:	4b39      	ldr	r3, [pc, #228]	; (800de98 <USBD_CDC_Init+0x1e8>)
 800ddb4:	7819      	ldrb	r1, [r3, #0]
 800ddb6:	2340      	movs	r3, #64	; 0x40
 800ddb8:	2202      	movs	r2, #2
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f002 fab9 	bl	8010332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ddc0:	4b35      	ldr	r3, [pc, #212]	; (800de98 <USBD_CDC_Init+0x1e8>)
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	f003 020f 	and.w	r2, r3, #15
 800ddc8:	6879      	ldr	r1, [r7, #4]
 800ddca:	4613      	mov	r3, r2
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	4413      	add	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	440b      	add	r3, r1
 800ddd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddd8:	2201      	movs	r2, #1
 800ddda:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dddc:	4b2f      	ldr	r3, [pc, #188]	; (800de9c <USBD_CDC_Init+0x1ec>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	f003 020f 	and.w	r2, r3, #15
 800dde4:	6879      	ldr	r1, [r7, #4]
 800dde6:	4613      	mov	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	440b      	add	r3, r1
 800ddf0:	3326      	adds	r3, #38	; 0x26
 800ddf2:	2210      	movs	r2, #16
 800ddf4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ddf6:	4b29      	ldr	r3, [pc, #164]	; (800de9c <USBD_CDC_Init+0x1ec>)
 800ddf8:	7819      	ldrb	r1, [r3, #0]
 800ddfa:	2308      	movs	r3, #8
 800ddfc:	2203      	movs	r2, #3
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f002 fa97 	bl	8010332 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800de04:	4b25      	ldr	r3, [pc, #148]	; (800de9c <USBD_CDC_Init+0x1ec>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	f003 020f 	and.w	r2, r3, #15
 800de0c:	6879      	ldr	r1, [r7, #4]
 800de0e:	4613      	mov	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	440b      	add	r3, r1
 800de18:	3324      	adds	r3, #36	; 0x24
 800de1a:	2201      	movs	r2, #1
 800de1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2200      	movs	r2, #0
 800de22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	33b0      	adds	r3, #176	; 0xb0
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800de54:	2302      	movs	r3, #2
 800de56:	e018      	b.n	800de8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	7c1b      	ldrb	r3, [r3, #16]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10a      	bne.n	800de76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de60:	4b0d      	ldr	r3, [pc, #52]	; (800de98 <USBD_CDC_Init+0x1e8>)
 800de62:	7819      	ldrb	r1, [r3, #0]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f002 fb4e 	bl	8010510 <USBD_LL_PrepareReceive>
 800de74:	e008      	b.n	800de88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de76:	4b08      	ldr	r3, [pc, #32]	; (800de98 <USBD_CDC_Init+0x1e8>)
 800de78:	7819      	ldrb	r1, [r3, #0]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de80:	2340      	movs	r3, #64	; 0x40
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f002 fb44 	bl	8010510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	2400009b 	.word	0x2400009b
 800de98:	2400009c 	.word	0x2400009c
 800de9c:	2400009d 	.word	0x2400009d

0800dea0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800deac:	4b3a      	ldr	r3, [pc, #232]	; (800df98 <USBD_CDC_DeInit+0xf8>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f002 fa63 	bl	801037e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800deb8:	4b37      	ldr	r3, [pc, #220]	; (800df98 <USBD_CDC_DeInit+0xf8>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	f003 020f 	and.w	r2, r3, #15
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	440b      	add	r3, r1
 800decc:	3324      	adds	r3, #36	; 0x24
 800dece:	2200      	movs	r2, #0
 800ded0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ded2:	4b32      	ldr	r3, [pc, #200]	; (800df9c <USBD_CDC_DeInit+0xfc>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	4619      	mov	r1, r3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f002 fa50 	bl	801037e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dede:	4b2f      	ldr	r3, [pc, #188]	; (800df9c <USBD_CDC_DeInit+0xfc>)
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 020f 	and.w	r2, r3, #15
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	4613      	mov	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	440b      	add	r3, r1
 800def2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800def6:	2200      	movs	r2, #0
 800def8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800defa:	4b29      	ldr	r3, [pc, #164]	; (800dfa0 <USBD_CDC_DeInit+0x100>)
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	4619      	mov	r1, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f002 fa3c 	bl	801037e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800df06:	4b26      	ldr	r3, [pc, #152]	; (800dfa0 <USBD_CDC_DeInit+0x100>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	f003 020f 	and.w	r2, r3, #15
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	4613      	mov	r3, r2
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4413      	add	r3, r2
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	440b      	add	r3, r1
 800df1a:	3324      	adds	r3, #36	; 0x24
 800df1c:	2200      	movs	r2, #0
 800df1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800df20:	4b1f      	ldr	r3, [pc, #124]	; (800dfa0 <USBD_CDC_DeInit+0x100>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	f003 020f 	and.w	r2, r3, #15
 800df28:	6879      	ldr	r1, [r7, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	440b      	add	r3, r1
 800df34:	3326      	adds	r3, #38	; 0x26
 800df36:	2200      	movs	r2, #0
 800df38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	32b0      	adds	r2, #176	; 0xb0
 800df44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01f      	beq.n	800df8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	33b0      	adds	r3, #176	; 0xb0
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	4413      	add	r3, r2
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	32b0      	adds	r2, #176	; 0xb0
 800df6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df6e:	4618      	mov	r0, r3
 800df70:	f002 fb10 	bl	8010594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	32b0      	adds	r2, #176	; 0xb0
 800df7e:	2100      	movs	r1, #0
 800df80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	2400009b 	.word	0x2400009b
 800df9c:	2400009c 	.word	0x2400009c
 800dfa0:	2400009d 	.word	0x2400009d

0800dfa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	32b0      	adds	r2, #176	; 0xb0
 800dfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d101      	bne.n	800dfd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	e0bf      	b.n	800e154 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d050      	beq.n	800e082 <USBD_CDC_Setup+0xde>
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	f040 80af 	bne.w	800e144 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	88db      	ldrh	r3, [r3, #6]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d03a      	beq.n	800e064 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	b25b      	sxtb	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	da1b      	bge.n	800e030 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	33b0      	adds	r3, #176	; 0xb0
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e00e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	88d2      	ldrh	r2, [r2, #6]
 800e014:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	88db      	ldrh	r3, [r3, #6]
 800e01a:	2b07      	cmp	r3, #7
 800e01c:	bf28      	it	cs
 800e01e:	2307      	movcs	r3, #7
 800e020:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	89fa      	ldrh	r2, [r7, #14]
 800e026:	4619      	mov	r1, r3
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f001 fd43 	bl	800fab4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e02e:	e090      	b.n	800e152 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	785a      	ldrb	r2, [r3, #1]
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	88db      	ldrh	r3, [r3, #6]
 800e03e:	2b3f      	cmp	r3, #63	; 0x3f
 800e040:	d803      	bhi.n	800e04a <USBD_CDC_Setup+0xa6>
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	88db      	ldrh	r3, [r3, #6]
 800e046:	b2da      	uxtb	r2, r3
 800e048:	e000      	b.n	800e04c <USBD_CDC_Setup+0xa8>
 800e04a:	2240      	movs	r2, #64	; 0x40
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e052:	6939      	ldr	r1, [r7, #16]
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e05a:	461a      	mov	r2, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f001 fd55 	bl	800fb0c <USBD_CtlPrepareRx>
      break;
 800e062:	e076      	b.n	800e152 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	33b0      	adds	r3, #176	; 0xb0
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	4413      	add	r3, r2
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	7850      	ldrb	r0, [r2, #1]
 800e07a:	2200      	movs	r2, #0
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	4798      	blx	r3
      break;
 800e080:	e067      	b.n	800e152 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	785b      	ldrb	r3, [r3, #1]
 800e086:	2b0b      	cmp	r3, #11
 800e088:	d851      	bhi.n	800e12e <USBD_CDC_Setup+0x18a>
 800e08a:	a201      	add	r2, pc, #4	; (adr r2, 800e090 <USBD_CDC_Setup+0xec>)
 800e08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e090:	0800e0c1 	.word	0x0800e0c1
 800e094:	0800e13d 	.word	0x0800e13d
 800e098:	0800e12f 	.word	0x0800e12f
 800e09c:	0800e12f 	.word	0x0800e12f
 800e0a0:	0800e12f 	.word	0x0800e12f
 800e0a4:	0800e12f 	.word	0x0800e12f
 800e0a8:	0800e12f 	.word	0x0800e12f
 800e0ac:	0800e12f 	.word	0x0800e12f
 800e0b0:	0800e12f 	.word	0x0800e12f
 800e0b4:	0800e12f 	.word	0x0800e12f
 800e0b8:	0800e0eb 	.word	0x0800e0eb
 800e0bc:	0800e115 	.word	0x0800e115
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d107      	bne.n	800e0dc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e0cc:	f107 030a 	add.w	r3, r7, #10
 800e0d0:	2202      	movs	r2, #2
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f001 fced 	bl	800fab4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e0da:	e032      	b.n	800e142 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e0dc:	6839      	ldr	r1, [r7, #0]
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f001 fc77 	bl	800f9d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	75fb      	strb	r3, [r7, #23]
          break;
 800e0e8:	e02b      	b.n	800e142 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d107      	bne.n	800e106 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e0f6:	f107 030d 	add.w	r3, r7, #13
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f001 fcd8 	bl	800fab4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e104:	e01d      	b.n	800e142 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e106:	6839      	ldr	r1, [r7, #0]
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f001 fc62 	bl	800f9d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e10e:	2303      	movs	r3, #3
 800e110:	75fb      	strb	r3, [r7, #23]
          break;
 800e112:	e016      	b.n	800e142 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b03      	cmp	r3, #3
 800e11e:	d00f      	beq.n	800e140 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e120:	6839      	ldr	r1, [r7, #0]
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f001 fc55 	bl	800f9d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e128:	2303      	movs	r3, #3
 800e12a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e12c:	e008      	b.n	800e140 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e12e:	6839      	ldr	r1, [r7, #0]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f001 fc4e 	bl	800f9d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800e136:	2303      	movs	r3, #3
 800e138:	75fb      	strb	r3, [r7, #23]
          break;
 800e13a:	e002      	b.n	800e142 <USBD_CDC_Setup+0x19e>
          break;
 800e13c:	bf00      	nop
 800e13e:	e008      	b.n	800e152 <USBD_CDC_Setup+0x1ae>
          break;
 800e140:	bf00      	nop
      }
      break;
 800e142:	e006      	b.n	800e152 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f001 fc43 	bl	800f9d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800e14c:	2303      	movs	r3, #3
 800e14e:	75fb      	strb	r3, [r7, #23]
      break;
 800e150:	bf00      	nop
  }

  return (uint8_t)ret;
 800e152:	7dfb      	ldrb	r3, [r7, #23]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e16e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	32b0      	adds	r2, #176	; 0xb0
 800e17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d101      	bne.n	800e186 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e182:	2303      	movs	r3, #3
 800e184:	e065      	b.n	800e252 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	32b0      	adds	r2, #176	; 0xb0
 800e190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e194:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e196:	78fb      	ldrb	r3, [r7, #3]
 800e198:	f003 020f 	and.w	r2, r3, #15
 800e19c:	6879      	ldr	r1, [r7, #4]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	440b      	add	r3, r1
 800e1a8:	3318      	adds	r3, #24
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d02f      	beq.n	800e210 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	f003 020f 	and.w	r2, r3, #15
 800e1b6:	6879      	ldr	r1, [r7, #4]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	440b      	add	r3, r1
 800e1c2:	3318      	adds	r3, #24
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	78fb      	ldrb	r3, [r7, #3]
 800e1c8:	f003 010f 	and.w	r1, r3, #15
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	00db      	lsls	r3, r3, #3
 800e1d2:	440b      	add	r3, r1
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4403      	add	r3, r0
 800e1d8:	3348      	adds	r3, #72	; 0x48
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e1e0:	fb03 f301 	mul.w	r3, r3, r1
 800e1e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d112      	bne.n	800e210 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e1ea:	78fb      	ldrb	r3, [r7, #3]
 800e1ec:	f003 020f 	and.w	r2, r3, #15
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	4413      	add	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	440b      	add	r3, r1
 800e1fc:	3318      	adds	r3, #24
 800e1fe:	2200      	movs	r2, #0
 800e200:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e202:	78f9      	ldrb	r1, [r7, #3]
 800e204:	2300      	movs	r3, #0
 800e206:	2200      	movs	r2, #0
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f002 f960 	bl	80104ce <USBD_LL_Transmit>
 800e20e:	e01f      	b.n	800e250 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	2200      	movs	r2, #0
 800e214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	33b0      	adds	r3, #176	; 0xb0
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4413      	add	r3, r2
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d010      	beq.n	800e250 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	33b0      	adds	r3, #176	; 0xb0
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e24c:	78fa      	ldrb	r2, [r7, #3]
 800e24e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	460b      	mov	r3, r1
 800e264:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	32b0      	adds	r2, #176	; 0xb0
 800e270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e274:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	32b0      	adds	r2, #176	; 0xb0
 800e280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d101      	bne.n	800e28c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e288:	2303      	movs	r3, #3
 800e28a:	e01a      	b.n	800e2c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e28c:	78fb      	ldrb	r3, [r7, #3]
 800e28e:	4619      	mov	r1, r3
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f002 f95e 	bl	8010552 <USBD_LL_GetRxDataSize>
 800e296:	4602      	mov	r2, r0
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	33b0      	adds	r3, #176	; 0xb0
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e2bc:	4611      	mov	r1, r2
 800e2be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e2c0:	2300      	movs	r3, #0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	32b0      	adds	r2, #176	; 0xb0
 800e2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d101      	bne.n	800e2ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	e025      	b.n	800e338 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	33b0      	adds	r3, #176	; 0xb0
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d01a      	beq.n	800e336 <USBD_CDC_EP0_RxReady+0x6c>
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e306:	2bff      	cmp	r3, #255	; 0xff
 800e308:	d015      	beq.n	800e336 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	33b0      	adds	r3, #176	; 0xb0
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	689b      	ldr	r3, [r3, #8]
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e322:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e32a:	b292      	uxth	r2, r2
 800e32c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	22ff      	movs	r2, #255	; 0xff
 800e332:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e348:	2182      	movs	r1, #130	; 0x82
 800e34a:	4818      	ldr	r0, [pc, #96]	; (800e3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e34c:	f000 fd09 	bl	800ed62 <USBD_GetEpDesc>
 800e350:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e352:	2101      	movs	r1, #1
 800e354:	4815      	ldr	r0, [pc, #84]	; (800e3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e356:	f000 fd04 	bl	800ed62 <USBD_GetEpDesc>
 800e35a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e35c:	2181      	movs	r1, #129	; 0x81
 800e35e:	4813      	ldr	r0, [pc, #76]	; (800e3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e360:	f000 fcff 	bl	800ed62 <USBD_GetEpDesc>
 800e364:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d002      	beq.n	800e372 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2210      	movs	r2, #16
 800e370:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d006      	beq.n	800e386 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e380:	711a      	strb	r2, [r3, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d006      	beq.n	800e39a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e394:	711a      	strb	r2, [r3, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2243      	movs	r2, #67	; 0x43
 800e39e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e3a0:	4b02      	ldr	r3, [pc, #8]	; (800e3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	24000058 	.word	0x24000058

0800e3b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e3b8:	2182      	movs	r1, #130	; 0x82
 800e3ba:	4818      	ldr	r0, [pc, #96]	; (800e41c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3bc:	f000 fcd1 	bl	800ed62 <USBD_GetEpDesc>
 800e3c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e3c2:	2101      	movs	r1, #1
 800e3c4:	4815      	ldr	r0, [pc, #84]	; (800e41c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3c6:	f000 fccc 	bl	800ed62 <USBD_GetEpDesc>
 800e3ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e3cc:	2181      	movs	r1, #129	; 0x81
 800e3ce:	4813      	ldr	r0, [pc, #76]	; (800e41c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3d0:	f000 fcc7 	bl	800ed62 <USBD_GetEpDesc>
 800e3d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	2210      	movs	r2, #16
 800e3e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d006      	beq.n	800e3f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	711a      	strb	r2, [r3, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f042 0202 	orr.w	r2, r2, #2
 800e3f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d006      	beq.n	800e40a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	711a      	strb	r2, [r3, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	f042 0202 	orr.w	r2, r2, #2
 800e408:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2243      	movs	r2, #67	; 0x43
 800e40e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e410:	4b02      	ldr	r3, [pc, #8]	; (800e41c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e412:	4618      	mov	r0, r3
 800e414:	3718      	adds	r7, #24
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	24000058 	.word	0x24000058

0800e420 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e428:	2182      	movs	r1, #130	; 0x82
 800e42a:	4818      	ldr	r0, [pc, #96]	; (800e48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e42c:	f000 fc99 	bl	800ed62 <USBD_GetEpDesc>
 800e430:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e432:	2101      	movs	r1, #1
 800e434:	4815      	ldr	r0, [pc, #84]	; (800e48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e436:	f000 fc94 	bl	800ed62 <USBD_GetEpDesc>
 800e43a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e43c:	2181      	movs	r1, #129	; 0x81
 800e43e:	4813      	ldr	r0, [pc, #76]	; (800e48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e440:	f000 fc8f 	bl	800ed62 <USBD_GetEpDesc>
 800e444:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d002      	beq.n	800e452 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	2210      	movs	r2, #16
 800e450:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d006      	beq.n	800e466 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e460:	711a      	strb	r2, [r3, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d006      	beq.n	800e47a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2200      	movs	r2, #0
 800e470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e474:	711a      	strb	r2, [r3, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2243      	movs	r2, #67	; 0x43
 800e47e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e480:	4b02      	ldr	r3, [pc, #8]	; (800e48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e482:	4618      	mov	r0, r3
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	24000058 	.word	0x24000058

0800e490 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	220a      	movs	r2, #10
 800e49c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e49e:	4b03      	ldr	r3, [pc, #12]	; (800e4ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	24000014 	.word	0x24000014

0800e4b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d101      	bne.n	800e4c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	e009      	b.n	800e4d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	33b0      	adds	r3, #176	; 0xb0
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	683a      	ldr	r2, [r7, #0]
 800e4d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b087      	sub	sp, #28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	32b0      	adds	r2, #176	; 0xb0
 800e4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e506:	2303      	movs	r3, #3
 800e508:	e008      	b.n	800e51c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	371c      	adds	r7, #28
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	32b0      	adds	r2, #176	; 0xb0
 800e53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e540:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d101      	bne.n	800e54c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e548:	2303      	movs	r3, #3
 800e54a:	e004      	b.n	800e556 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	683a      	ldr	r2, [r7, #0]
 800e550:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
	...

0800e564 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	32b0      	adds	r2, #176	; 0xb0
 800e576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	32b0      	adds	r2, #176	; 0xb0
 800e586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d101      	bne.n	800e592 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e58e:	2303      	movs	r3, #3
 800e590:	e018      	b.n	800e5c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	7c1b      	ldrb	r3, [r3, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d10a      	bne.n	800e5b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e59a:	4b0c      	ldr	r3, [pc, #48]	; (800e5cc <USBD_CDC_ReceivePacket+0x68>)
 800e59c:	7819      	ldrb	r1, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f001 ffb1 	bl	8010510 <USBD_LL_PrepareReceive>
 800e5ae:	e008      	b.n	800e5c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5b0:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <USBD_CDC_ReceivePacket+0x68>)
 800e5b2:	7819      	ldrb	r1, [r3, #0]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5ba:	2340      	movs	r3, #64	; 0x40
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f001 ffa7 	bl	8010510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	2400009c 	.word	0x2400009c

0800e5d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	e01f      	b.n	800e628 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d003      	beq.n	800e60e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	79fa      	ldrb	r2, [r7, #7]
 800e61a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f001 fe1d 	bl	801025c <USBD_LL_Init>
 800e622:	4603      	mov	r3, r0
 800e624:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e626:	7dfb      	ldrb	r3, [r7, #23]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3718      	adds	r7, #24
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d101      	bne.n	800e648 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e644:	2303      	movs	r3, #3
 800e646:	e025      	b.n	800e694 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	32ae      	adds	r2, #174	; 0xae
 800e65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00f      	beq.n	800e684 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	32ae      	adds	r2, #174	; 0xae
 800e66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e674:	f107 020e 	add.w	r2, r7, #14
 800e678:	4610      	mov	r0, r2
 800e67a:	4798      	blx	r3
 800e67c:	4602      	mov	r2, r0
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f001 fe29 	bl	80102fc <USBD_LL_Start>
 800e6aa:	4603      	mov	r3, r0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b084      	sub	sp, #16
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d009      	beq.n	800e6f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	78fa      	ldrb	r2, [r7, #3]
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	4798      	blx	r3
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	460b      	mov	r3, r1
 800e70c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	78fa      	ldrb	r2, [r7, #3]
 800e71c:	4611      	mov	r1, r2
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	4798      	blx	r3
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d001      	beq.n	800e72c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e728:	2303      	movs	r3, #3
 800e72a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b084      	sub	sp, #16
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e746:	6839      	ldr	r1, [r7, #0]
 800e748:	4618      	mov	r0, r3
 800e74a:	f001 f908 	bl	800f95e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e75c:	461a      	mov	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e76a:	f003 031f 	and.w	r3, r3, #31
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d01a      	beq.n	800e7a8 <USBD_LL_SetupStage+0x72>
 800e772:	2b02      	cmp	r3, #2
 800e774:	d822      	bhi.n	800e7bc <USBD_LL_SetupStage+0x86>
 800e776:	2b00      	cmp	r3, #0
 800e778:	d002      	beq.n	800e780 <USBD_LL_SetupStage+0x4a>
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d00a      	beq.n	800e794 <USBD_LL_SetupStage+0x5e>
 800e77e:	e01d      	b.n	800e7bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fb5f 	bl	800ee4c <USBD_StdDevReq>
 800e78e:	4603      	mov	r3, r0
 800e790:	73fb      	strb	r3, [r7, #15]
      break;
 800e792:	e020      	b.n	800e7d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fbc7 	bl	800ef30 <USBD_StdItfReq>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a6:	e016      	b.n	800e7d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fc29 	bl	800f008 <USBD_StdEPReq>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800e7ba:	e00c      	b.n	800e7d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f001 fdf6 	bl	80103bc <USBD_LL_StallEP>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7d4:	bf00      	nop
  }

  return ret;
 800e7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e7f2:	7afb      	ldrb	r3, [r7, #11]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d16e      	bne.n	800e8d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e7fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e806:	2b03      	cmp	r3, #3
 800e808:	f040 8098 	bne.w	800e93c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	429a      	cmp	r2, r3
 800e816:	d913      	bls.n	800e840 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	689a      	ldr	r2, [r3, #8]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	1ad2      	subs	r2, r2, r3
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	68da      	ldr	r2, [r3, #12]
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	4293      	cmp	r3, r2
 800e830:	bf28      	it	cs
 800e832:	4613      	movcs	r3, r2
 800e834:	461a      	mov	r2, r3
 800e836:	6879      	ldr	r1, [r7, #4]
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f001 f984 	bl	800fb46 <USBD_CtlContinueRx>
 800e83e:	e07d      	b.n	800e93c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e846:	f003 031f 	and.w	r3, r3, #31
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d014      	beq.n	800e878 <USBD_LL_DataOutStage+0x98>
 800e84e:	2b02      	cmp	r3, #2
 800e850:	d81d      	bhi.n	800e88e <USBD_LL_DataOutStage+0xae>
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <USBD_LL_DataOutStage+0x7c>
 800e856:	2b01      	cmp	r3, #1
 800e858:	d003      	beq.n	800e862 <USBD_LL_DataOutStage+0x82>
 800e85a:	e018      	b.n	800e88e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e85c:	2300      	movs	r3, #0
 800e85e:	75bb      	strb	r3, [r7, #22]
            break;
 800e860:	e018      	b.n	800e894 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	4619      	mov	r1, r3
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f000 fa5e 	bl	800ed2e <USBD_CoreFindIF>
 800e872:	4603      	mov	r3, r0
 800e874:	75bb      	strb	r3, [r7, #22]
            break;
 800e876:	e00d      	b.n	800e894 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	4619      	mov	r1, r3
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f000 fa60 	bl	800ed48 <USBD_CoreFindEP>
 800e888:	4603      	mov	r3, r0
 800e88a:	75bb      	strb	r3, [r7, #22]
            break;
 800e88c:	e002      	b.n	800e894 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e88e:	2300      	movs	r3, #0
 800e890:	75bb      	strb	r3, [r7, #22]
            break;
 800e892:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e894:	7dbb      	ldrb	r3, [r7, #22]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d119      	bne.n	800e8ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b03      	cmp	r3, #3
 800e8a4:	d113      	bne.n	800e8ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e8a6:	7dba      	ldrb	r2, [r7, #22]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	32ae      	adds	r2, #174	; 0xae
 800e8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d00b      	beq.n	800e8ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e8b6:	7dba      	ldrb	r2, [r7, #22]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e8be:	7dba      	ldrb	r2, [r7, #22]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	32ae      	adds	r2, #174	; 0xae
 800e8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	68f8      	ldr	r0, [r7, #12]
 800e8cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f001 f94a 	bl	800fb68 <USBD_CtlSendStatus>
 800e8d4:	e032      	b.n	800e93c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e8d6:	7afb      	ldrb	r3, [r7, #11]
 800e8d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	4619      	mov	r1, r3
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f000 fa31 	bl	800ed48 <USBD_CoreFindEP>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8ea:	7dbb      	ldrb	r3, [r7, #22]
 800e8ec:	2bff      	cmp	r3, #255	; 0xff
 800e8ee:	d025      	beq.n	800e93c <USBD_LL_DataOutStage+0x15c>
 800e8f0:	7dbb      	ldrb	r3, [r7, #22]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d122      	bne.n	800e93c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	2b03      	cmp	r3, #3
 800e900:	d117      	bne.n	800e932 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e902:	7dba      	ldrb	r2, [r7, #22]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	32ae      	adds	r2, #174	; 0xae
 800e908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e90c:	699b      	ldr	r3, [r3, #24]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00f      	beq.n	800e932 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e912:	7dba      	ldrb	r2, [r7, #22]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e91a:	7dba      	ldrb	r2, [r7, #22]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	32ae      	adds	r2, #174	; 0xae
 800e920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e924:	699b      	ldr	r3, [r3, #24]
 800e926:	7afa      	ldrb	r2, [r7, #11]
 800e928:	4611      	mov	r1, r2
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	4798      	blx	r3
 800e92e:	4603      	mov	r3, r0
 800e930:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e932:	7dfb      	ldrb	r3, [r7, #23]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e938:	7dfb      	ldrb	r3, [r7, #23]
 800e93a:	e000      	b.n	800e93e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b086      	sub	sp, #24
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	60f8      	str	r0, [r7, #12]
 800e94e:	460b      	mov	r3, r1
 800e950:	607a      	str	r2, [r7, #4]
 800e952:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e954:	7afb      	ldrb	r3, [r7, #11]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d16f      	bne.n	800ea3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	3314      	adds	r3, #20
 800e95e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e966:	2b02      	cmp	r3, #2
 800e968:	d15a      	bne.n	800ea20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	689a      	ldr	r2, [r3, #8]
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	429a      	cmp	r2, r3
 800e974:	d914      	bls.n	800e9a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	689a      	ldr	r2, [r3, #8]
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	1ad2      	subs	r2, r2, r3
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	461a      	mov	r2, r3
 800e98a:	6879      	ldr	r1, [r7, #4]
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f001 f8ac 	bl	800faea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e992:	2300      	movs	r3, #0
 800e994:	2200      	movs	r2, #0
 800e996:	2100      	movs	r1, #0
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f001 fdb9 	bl	8010510 <USBD_LL_PrepareReceive>
 800e99e:	e03f      	b.n	800ea20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	68da      	ldr	r2, [r3, #12]
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d11c      	bne.n	800e9e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d316      	bcc.n	800e9e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	685a      	ldr	r2, [r3, #4]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d20f      	bcs.n	800e9e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f001 f88d 	bl	800faea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9d8:	2300      	movs	r3, #0
 800e9da:	2200      	movs	r2, #0
 800e9dc:	2100      	movs	r1, #0
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f001 fd96 	bl	8010510 <USBD_LL_PrepareReceive>
 800e9e4:	e01c      	b.n	800ea20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b03      	cmp	r3, #3
 800e9f0:	d10f      	bne.n	800ea12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2200      	movs	r2, #0
 800ea02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea12:	2180      	movs	r1, #128	; 0x80
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f001 fcd1 	bl	80103bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f001 f8b7 	bl	800fb8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d03a      	beq.n	800eaa0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f7ff fe42 	bl	800e6b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea38:	e032      	b.n	800eaa0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ea3a:	7afb      	ldrb	r3, [r7, #11]
 800ea3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	4619      	mov	r1, r3
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f000 f97f 	bl	800ed48 <USBD_CoreFindEP>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea4e:	7dfb      	ldrb	r3, [r7, #23]
 800ea50:	2bff      	cmp	r3, #255	; 0xff
 800ea52:	d025      	beq.n	800eaa0 <USBD_LL_DataInStage+0x15a>
 800ea54:	7dfb      	ldrb	r3, [r7, #23]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d122      	bne.n	800eaa0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d11c      	bne.n	800eaa0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ea66:	7dfa      	ldrb	r2, [r7, #23]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	32ae      	adds	r2, #174	; 0xae
 800ea6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea70:	695b      	ldr	r3, [r3, #20]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d014      	beq.n	800eaa0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ea76:	7dfa      	ldrb	r2, [r7, #23]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ea7e:	7dfa      	ldrb	r2, [r7, #23]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	32ae      	adds	r2, #174	; 0xae
 800ea84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea88:	695b      	ldr	r3, [r3, #20]
 800ea8a:	7afa      	ldrb	r2, [r7, #11]
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	68f8      	ldr	r0, [r7, #12]
 800ea90:	4798      	blx	r3
 800ea92:	4603      	mov	r3, r0
 800ea94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ea96:	7dbb      	ldrb	r3, [r7, #22]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ea9c:	7dbb      	ldrb	r3, [r7, #22]
 800ea9e:	e000      	b.n	800eaa2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3718      	adds	r7, #24
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eab2:	2300      	movs	r3, #0
 800eab4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2201      	movs	r2, #1
 800eaba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d014      	beq.n	800eb10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00e      	beq.n	800eb10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	6852      	ldr	r2, [r2, #4]
 800eafe:	b2d2      	uxtb	r2, r2
 800eb00:	4611      	mov	r1, r2
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	4798      	blx	r3
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d001      	beq.n	800eb10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eb0c:	2303      	movs	r3, #3
 800eb0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb10:	2340      	movs	r3, #64	; 0x40
 800eb12:	2200      	movs	r2, #0
 800eb14:	2100      	movs	r1, #0
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f001 fc0b 	bl	8010332 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2240      	movs	r2, #64	; 0x40
 800eb28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb2c:	2340      	movs	r3, #64	; 0x40
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2180      	movs	r1, #128	; 0x80
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f001 fbfd 	bl	8010332 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2240      	movs	r2, #64	; 0x40
 800eb42:	621a      	str	r2, [r3, #32]

  return ret;
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb4e:	b480      	push	{r7}
 800eb50:	b083      	sub	sp, #12
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	460b      	mov	r3, r1
 800eb58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	78fa      	ldrb	r2, [r7, #3]
 800eb5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2204      	movs	r2, #4
 800eb88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr

0800eb9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb9a:	b480      	push	{r7}
 800eb9c:	b083      	sub	sp, #12
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b04      	cmp	r3, #4
 800ebac:	d106      	bne.n	800ebbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ebb4:	b2da      	uxtb	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b082      	sub	sp, #8
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b03      	cmp	r3, #3
 800ebdc:	d110      	bne.n	800ec00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00b      	beq.n	800ec00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebee:	69db      	ldr	r3, [r3, #28]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d005      	beq.n	800ec00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebfa:	69db      	ldr	r3, [r3, #28]
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	460b      	mov	r3, r1
 800ec14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	32ae      	adds	r2, #174	; 0xae
 800ec20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	e01c      	b.n	800ec66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b03      	cmp	r3, #3
 800ec36:	d115      	bne.n	800ec64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	32ae      	adds	r2, #174	; 0xae
 800ec42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec46:	6a1b      	ldr	r3, [r3, #32]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00b      	beq.n	800ec64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	32ae      	adds	r2, #174	; 0xae
 800ec56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5a:	6a1b      	ldr	r3, [r3, #32]
 800ec5c:	78fa      	ldrb	r2, [r7, #3]
 800ec5e:	4611      	mov	r1, r2
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b082      	sub	sp, #8
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	460b      	mov	r3, r1
 800ec78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	32ae      	adds	r2, #174	; 0xae
 800ec84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	e01c      	b.n	800ecca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	2b03      	cmp	r3, #3
 800ec9a:	d115      	bne.n	800ecc8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	32ae      	adds	r2, #174	; 0xae
 800eca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00b      	beq.n	800ecc8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	32ae      	adds	r2, #174	; 0xae
 800ecba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc0:	78fa      	ldrb	r2, [r7, #3]
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	b083      	sub	sp, #12
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00e      	beq.n	800ed24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	6852      	ldr	r2, [r2, #4]
 800ed12:	b2d2      	uxtb	r2, r2
 800ed14:	4611      	mov	r1, r2
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	4798      	blx	r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ed20:	2303      	movs	r3, #3
 800ed22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed2e:	b480      	push	{r7}
 800ed30:	b083      	sub	sp, #12
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	460b      	mov	r3, r1
 800ed38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	370c      	adds	r7, #12
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr

0800ed62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b086      	sub	sp, #24
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ed76:	2300      	movs	r3, #0
 800ed78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	885b      	ldrh	r3, [r3, #2]
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d920      	bls.n	800edcc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ed92:	e013      	b.n	800edbc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ed94:	f107 030a 	add.w	r3, r7, #10
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6978      	ldr	r0, [r7, #20]
 800ed9c:	f000 f81b 	bl	800edd6 <USBD_GetNextDesc>
 800eda0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	785b      	ldrb	r3, [r3, #1]
 800eda6:	2b05      	cmp	r3, #5
 800eda8:	d108      	bne.n	800edbc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	789b      	ldrb	r3, [r3, #2]
 800edb2:	78fa      	ldrb	r2, [r7, #3]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d008      	beq.n	800edca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800edb8:	2300      	movs	r3, #0
 800edba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	885b      	ldrh	r3, [r3, #2]
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	897b      	ldrh	r3, [r7, #10]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d8e5      	bhi.n	800ed94 <USBD_GetEpDesc+0x32>
 800edc8:	e000      	b.n	800edcc <USBD_GetEpDesc+0x6a>
          break;
 800edca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800edcc:	693b      	ldr	r3, [r7, #16]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800edd6:	b480      	push	{r7}
 800edd8:	b085      	sub	sp, #20
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	881a      	ldrh	r2, [r3, #0]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	b29b      	uxth	r3, r3
 800edee:	4413      	add	r3, r2
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	461a      	mov	r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4413      	add	r3, r2
 800ee00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ee02:	68fb      	ldr	r3, [r7, #12]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b087      	sub	sp, #28
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	3301      	adds	r3, #1
 800ee26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee2e:	8a3b      	ldrh	r3, [r7, #16]
 800ee30:	021b      	lsls	r3, r3, #8
 800ee32:	b21a      	sxth	r2, r3
 800ee34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	b21b      	sxth	r3, r3
 800ee3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee3e:	89fb      	ldrh	r3, [r7, #14]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	371c      	adds	r7, #28
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee62:	2b40      	cmp	r3, #64	; 0x40
 800ee64:	d005      	beq.n	800ee72 <USBD_StdDevReq+0x26>
 800ee66:	2b40      	cmp	r3, #64	; 0x40
 800ee68:	d857      	bhi.n	800ef1a <USBD_StdDevReq+0xce>
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00f      	beq.n	800ee8e <USBD_StdDevReq+0x42>
 800ee6e:	2b20      	cmp	r3, #32
 800ee70:	d153      	bne.n	800ef1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	32ae      	adds	r2, #174	; 0xae
 800ee7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	6839      	ldr	r1, [r7, #0]
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	4798      	blx	r3
 800ee88:	4603      	mov	r3, r0
 800ee8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee8c:	e04a      	b.n	800ef24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	785b      	ldrb	r3, [r3, #1]
 800ee92:	2b09      	cmp	r3, #9
 800ee94:	d83b      	bhi.n	800ef0e <USBD_StdDevReq+0xc2>
 800ee96:	a201      	add	r2, pc, #4	; (adr r2, 800ee9c <USBD_StdDevReq+0x50>)
 800ee98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee9c:	0800eef1 	.word	0x0800eef1
 800eea0:	0800ef05 	.word	0x0800ef05
 800eea4:	0800ef0f 	.word	0x0800ef0f
 800eea8:	0800eefb 	.word	0x0800eefb
 800eeac:	0800ef0f 	.word	0x0800ef0f
 800eeb0:	0800eecf 	.word	0x0800eecf
 800eeb4:	0800eec5 	.word	0x0800eec5
 800eeb8:	0800ef0f 	.word	0x0800ef0f
 800eebc:	0800eee7 	.word	0x0800eee7
 800eec0:	0800eed9 	.word	0x0800eed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fa3c 	bl	800f344 <USBD_GetDescriptor>
          break;
 800eecc:	e024      	b.n	800ef18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 fba1 	bl	800f618 <USBD_SetAddress>
          break;
 800eed6:	e01f      	b.n	800ef18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eed8:	6839      	ldr	r1, [r7, #0]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fbe0 	bl	800f6a0 <USBD_SetConfig>
 800eee0:	4603      	mov	r3, r0
 800eee2:	73fb      	strb	r3, [r7, #15]
          break;
 800eee4:	e018      	b.n	800ef18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fc83 	bl	800f7f4 <USBD_GetConfig>
          break;
 800eeee:	e013      	b.n	800ef18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 fcb4 	bl	800f860 <USBD_GetStatus>
          break;
 800eef8:	e00e      	b.n	800ef18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eefa:	6839      	ldr	r1, [r7, #0]
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 fce3 	bl	800f8c8 <USBD_SetFeature>
          break;
 800ef02:	e009      	b.n	800ef18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fd07 	bl	800f91a <USBD_ClrFeature>
          break;
 800ef0c:	e004      	b.n	800ef18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fd5e 	bl	800f9d2 <USBD_CtlError>
          break;
 800ef16:	bf00      	nop
      }
      break;
 800ef18:	e004      	b.n	800ef24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fd58 	bl	800f9d2 <USBD_CtlError>
      break;
 800ef22:	bf00      	nop
  }

  return ret;
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop

0800ef30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef46:	2b40      	cmp	r3, #64	; 0x40
 800ef48:	d005      	beq.n	800ef56 <USBD_StdItfReq+0x26>
 800ef4a:	2b40      	cmp	r3, #64	; 0x40
 800ef4c:	d852      	bhi.n	800eff4 <USBD_StdItfReq+0xc4>
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d001      	beq.n	800ef56 <USBD_StdItfReq+0x26>
 800ef52:	2b20      	cmp	r3, #32
 800ef54:	d14e      	bne.n	800eff4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d840      	bhi.n	800efe6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	889b      	ldrh	r3, [r3, #4]
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d836      	bhi.n	800efdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	889b      	ldrh	r3, [r3, #4]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	4619      	mov	r1, r3
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f7ff fed9 	bl	800ed2e <USBD_CoreFindIF>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef80:	7bbb      	ldrb	r3, [r7, #14]
 800ef82:	2bff      	cmp	r3, #255	; 0xff
 800ef84:	d01d      	beq.n	800efc2 <USBD_StdItfReq+0x92>
 800ef86:	7bbb      	ldrb	r3, [r7, #14]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d11a      	bne.n	800efc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ef8c:	7bba      	ldrb	r2, [r7, #14]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	32ae      	adds	r2, #174	; 0xae
 800ef92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00f      	beq.n	800efbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ef9c:	7bba      	ldrb	r2, [r7, #14]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800efa4:	7bba      	ldrb	r2, [r7, #14]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	32ae      	adds	r2, #174	; 0xae
 800efaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efae:	689b      	ldr	r3, [r3, #8]
 800efb0:	6839      	ldr	r1, [r7, #0]
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	4798      	blx	r3
 800efb6:	4603      	mov	r3, r0
 800efb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efba:	e004      	b.n	800efc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800efbc:	2303      	movs	r3, #3
 800efbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efc0:	e001      	b.n	800efc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800efc2:	2303      	movs	r3, #3
 800efc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	88db      	ldrh	r3, [r3, #6]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d110      	bne.n	800eff0 <USBD_StdItfReq+0xc0>
 800efce:	7bfb      	ldrb	r3, [r7, #15]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10d      	bne.n	800eff0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 fdc7 	bl	800fb68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800efda:	e009      	b.n	800eff0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800efdc:	6839      	ldr	r1, [r7, #0]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 fcf7 	bl	800f9d2 <USBD_CtlError>
          break;
 800efe4:	e004      	b.n	800eff0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800efe6:	6839      	ldr	r1, [r7, #0]
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fcf2 	bl	800f9d2 <USBD_CtlError>
          break;
 800efee:	e000      	b.n	800eff2 <USBD_StdItfReq+0xc2>
          break;
 800eff0:	bf00      	nop
      }
      break;
 800eff2:	e004      	b.n	800effe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800eff4:	6839      	ldr	r1, [r7, #0]
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 fceb 	bl	800f9d2 <USBD_CtlError>
      break;
 800effc:	bf00      	nop
  }

  return ret;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	889b      	ldrh	r3, [r3, #4]
 800f01a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f024:	2b40      	cmp	r3, #64	; 0x40
 800f026:	d007      	beq.n	800f038 <USBD_StdEPReq+0x30>
 800f028:	2b40      	cmp	r3, #64	; 0x40
 800f02a:	f200 817f 	bhi.w	800f32c <USBD_StdEPReq+0x324>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d02a      	beq.n	800f088 <USBD_StdEPReq+0x80>
 800f032:	2b20      	cmp	r3, #32
 800f034:	f040 817a 	bne.w	800f32c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f038:	7bbb      	ldrb	r3, [r7, #14]
 800f03a:	4619      	mov	r1, r3
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7ff fe83 	bl	800ed48 <USBD_CoreFindEP>
 800f042:	4603      	mov	r3, r0
 800f044:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f046:	7b7b      	ldrb	r3, [r7, #13]
 800f048:	2bff      	cmp	r3, #255	; 0xff
 800f04a:	f000 8174 	beq.w	800f336 <USBD_StdEPReq+0x32e>
 800f04e:	7b7b      	ldrb	r3, [r7, #13]
 800f050:	2b00      	cmp	r3, #0
 800f052:	f040 8170 	bne.w	800f336 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f056:	7b7a      	ldrb	r2, [r7, #13]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f05e:	7b7a      	ldrb	r2, [r7, #13]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	32ae      	adds	r2, #174	; 0xae
 800f064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f000 8163 	beq.w	800f336 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f070:	7b7a      	ldrb	r2, [r7, #13]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	32ae      	adds	r2, #174	; 0xae
 800f076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	4798      	blx	r3
 800f082:	4603      	mov	r3, r0
 800f084:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f086:	e156      	b.n	800f336 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	785b      	ldrb	r3, [r3, #1]
 800f08c:	2b03      	cmp	r3, #3
 800f08e:	d008      	beq.n	800f0a2 <USBD_StdEPReq+0x9a>
 800f090:	2b03      	cmp	r3, #3
 800f092:	f300 8145 	bgt.w	800f320 <USBD_StdEPReq+0x318>
 800f096:	2b00      	cmp	r3, #0
 800f098:	f000 809b 	beq.w	800f1d2 <USBD_StdEPReq+0x1ca>
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d03c      	beq.n	800f11a <USBD_StdEPReq+0x112>
 800f0a0:	e13e      	b.n	800f320 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d002      	beq.n	800f0b4 <USBD_StdEPReq+0xac>
 800f0ae:	2b03      	cmp	r3, #3
 800f0b0:	d016      	beq.n	800f0e0 <USBD_StdEPReq+0xd8>
 800f0b2:	e02c      	b.n	800f10e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0b4:	7bbb      	ldrb	r3, [r7, #14]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00d      	beq.n	800f0d6 <USBD_StdEPReq+0xce>
 800f0ba:	7bbb      	ldrb	r3, [r7, #14]
 800f0bc:	2b80      	cmp	r3, #128	; 0x80
 800f0be:	d00a      	beq.n	800f0d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f001 f979 	bl	80103bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0ca:	2180      	movs	r1, #128	; 0x80
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f001 f975 	bl	80103bc <USBD_LL_StallEP>
 800f0d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0d4:	e020      	b.n	800f118 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 fc7a 	bl	800f9d2 <USBD_CtlError>
              break;
 800f0de:	e01b      	b.n	800f118 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	885b      	ldrh	r3, [r3, #2]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10e      	bne.n	800f106 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f0e8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00b      	beq.n	800f106 <USBD_StdEPReq+0xfe>
 800f0ee:	7bbb      	ldrb	r3, [r7, #14]
 800f0f0:	2b80      	cmp	r3, #128	; 0x80
 800f0f2:	d008      	beq.n	800f106 <USBD_StdEPReq+0xfe>
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	88db      	ldrh	r3, [r3, #6]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d104      	bne.n	800f106 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
 800f0fe:	4619      	mov	r1, r3
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f001 f95b 	bl	80103bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fd2e 	bl	800fb68 <USBD_CtlSendStatus>

              break;
 800f10c:	e004      	b.n	800f118 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fc5e 	bl	800f9d2 <USBD_CtlError>
              break;
 800f116:	bf00      	nop
          }
          break;
 800f118:	e107      	b.n	800f32a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b02      	cmp	r3, #2
 800f124:	d002      	beq.n	800f12c <USBD_StdEPReq+0x124>
 800f126:	2b03      	cmp	r3, #3
 800f128:	d016      	beq.n	800f158 <USBD_StdEPReq+0x150>
 800f12a:	e04b      	b.n	800f1c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f12c:	7bbb      	ldrb	r3, [r7, #14]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00d      	beq.n	800f14e <USBD_StdEPReq+0x146>
 800f132:	7bbb      	ldrb	r3, [r7, #14]
 800f134:	2b80      	cmp	r3, #128	; 0x80
 800f136:	d00a      	beq.n	800f14e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f138:	7bbb      	ldrb	r3, [r7, #14]
 800f13a:	4619      	mov	r1, r3
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f001 f93d 	bl	80103bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f142:	2180      	movs	r1, #128	; 0x80
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f001 f939 	bl	80103bc <USBD_LL_StallEP>
 800f14a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f14c:	e040      	b.n	800f1d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fc3e 	bl	800f9d2 <USBD_CtlError>
              break;
 800f156:	e03b      	b.n	800f1d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	885b      	ldrh	r3, [r3, #2]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d136      	bne.n	800f1ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f160:	7bbb      	ldrb	r3, [r7, #14]
 800f162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f166:	2b00      	cmp	r3, #0
 800f168:	d004      	beq.n	800f174 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f16a:	7bbb      	ldrb	r3, [r7, #14]
 800f16c:	4619      	mov	r1, r3
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f001 f943 	bl	80103fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fcf7 	bl	800fb68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f17a:	7bbb      	ldrb	r3, [r7, #14]
 800f17c:	4619      	mov	r1, r3
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7ff fde2 	bl	800ed48 <USBD_CoreFindEP>
 800f184:	4603      	mov	r3, r0
 800f186:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f188:	7b7b      	ldrb	r3, [r7, #13]
 800f18a:	2bff      	cmp	r3, #255	; 0xff
 800f18c:	d01f      	beq.n	800f1ce <USBD_StdEPReq+0x1c6>
 800f18e:	7b7b      	ldrb	r3, [r7, #13]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d11c      	bne.n	800f1ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f194:	7b7a      	ldrb	r2, [r7, #13]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f19c:	7b7a      	ldrb	r2, [r7, #13]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	32ae      	adds	r2, #174	; 0xae
 800f1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d010      	beq.n	800f1ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1ac:	7b7a      	ldrb	r2, [r7, #13]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	32ae      	adds	r2, #174	; 0xae
 800f1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	6839      	ldr	r1, [r7, #0]
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	4798      	blx	r3
 800f1be:	4603      	mov	r3, r0
 800f1c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f1c2:	e004      	b.n	800f1ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 fc03 	bl	800f9d2 <USBD_CtlError>
              break;
 800f1cc:	e000      	b.n	800f1d0 <USBD_StdEPReq+0x1c8>
              break;
 800f1ce:	bf00      	nop
          }
          break;
 800f1d0:	e0ab      	b.n	800f32a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d002      	beq.n	800f1e4 <USBD_StdEPReq+0x1dc>
 800f1de:	2b03      	cmp	r3, #3
 800f1e0:	d032      	beq.n	800f248 <USBD_StdEPReq+0x240>
 800f1e2:	e097      	b.n	800f314 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1e4:	7bbb      	ldrb	r3, [r7, #14]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d007      	beq.n	800f1fa <USBD_StdEPReq+0x1f2>
 800f1ea:	7bbb      	ldrb	r3, [r7, #14]
 800f1ec:	2b80      	cmp	r3, #128	; 0x80
 800f1ee:	d004      	beq.n	800f1fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fbed 	bl	800f9d2 <USBD_CtlError>
                break;
 800f1f8:	e091      	b.n	800f31e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	da0b      	bge.n	800f21a <USBD_StdEPReq+0x212>
 800f202:	7bbb      	ldrb	r3, [r7, #14]
 800f204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f208:	4613      	mov	r3, r2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	4413      	add	r3, r2
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	3310      	adds	r3, #16
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	4413      	add	r3, r2
 800f216:	3304      	adds	r3, #4
 800f218:	e00b      	b.n	800f232 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f21a:	7bbb      	ldrb	r3, [r7, #14]
 800f21c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f220:	4613      	mov	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4413      	add	r3, r2
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	4413      	add	r3, r2
 800f230:	3304      	adds	r3, #4
 800f232:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	2200      	movs	r2, #0
 800f238:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	2202      	movs	r2, #2
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fc37 	bl	800fab4 <USBD_CtlSendData>
              break;
 800f246:	e06a      	b.n	800f31e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	da11      	bge.n	800f274 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f250:	7bbb      	ldrb	r3, [r7, #14]
 800f252:	f003 020f 	and.w	r2, r3, #15
 800f256:	6879      	ldr	r1, [r7, #4]
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	440b      	add	r3, r1
 800f262:	3324      	adds	r3, #36	; 0x24
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d117      	bne.n	800f29a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fbb0 	bl	800f9d2 <USBD_CtlError>
                  break;
 800f272:	e054      	b.n	800f31e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f274:	7bbb      	ldrb	r3, [r7, #14]
 800f276:	f003 020f 	and.w	r2, r3, #15
 800f27a:	6879      	ldr	r1, [r7, #4]
 800f27c:	4613      	mov	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	4413      	add	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	440b      	add	r3, r1
 800f286:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f28a:	881b      	ldrh	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d104      	bne.n	800f29a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fb9d 	bl	800f9d2 <USBD_CtlError>
                  break;
 800f298:	e041      	b.n	800f31e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f29a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	da0b      	bge.n	800f2ba <USBD_StdEPReq+0x2b2>
 800f2a2:	7bbb      	ldrb	r3, [r7, #14]
 800f2a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4413      	add	r3, r2
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	3310      	adds	r3, #16
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	3304      	adds	r3, #4
 800f2b8:	e00b      	b.n	800f2d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2ba:	7bbb      	ldrb	r3, [r7, #14]
 800f2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	4413      	add	r3, r2
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f2d4:	7bbb      	ldrb	r3, [r7, #14]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d002      	beq.n	800f2e0 <USBD_StdEPReq+0x2d8>
 800f2da:	7bbb      	ldrb	r3, [r7, #14]
 800f2dc:	2b80      	cmp	r3, #128	; 0x80
 800f2de:	d103      	bne.n	800f2e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	601a      	str	r2, [r3, #0]
 800f2e6:	e00e      	b.n	800f306 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f001 f8a3 	bl	8010438 <USBD_LL_IsStallEP>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d003      	beq.n	800f300 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	e002      	b.n	800f306 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	2200      	movs	r2, #0
 800f304:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2202      	movs	r2, #2
 800f30a:	4619      	mov	r1, r3
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 fbd1 	bl	800fab4 <USBD_CtlSendData>
              break;
 800f312:	e004      	b.n	800f31e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f314:	6839      	ldr	r1, [r7, #0]
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 fb5b 	bl	800f9d2 <USBD_CtlError>
              break;
 800f31c:	bf00      	nop
          }
          break;
 800f31e:	e004      	b.n	800f32a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 fb55 	bl	800f9d2 <USBD_CtlError>
          break;
 800f328:	bf00      	nop
      }
      break;
 800f32a:	e005      	b.n	800f338 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f32c:	6839      	ldr	r1, [r7, #0]
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 fb4f 	bl	800f9d2 <USBD_CtlError>
      break;
 800f334:	e000      	b.n	800f338 <USBD_StdEPReq+0x330>
      break;
 800f336:	bf00      	nop
  }

  return ret;
 800f338:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
	...

0800f344 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f34e:	2300      	movs	r3, #0
 800f350:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f352:	2300      	movs	r3, #0
 800f354:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f356:	2300      	movs	r3, #0
 800f358:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	885b      	ldrh	r3, [r3, #2]
 800f35e:	0a1b      	lsrs	r3, r3, #8
 800f360:	b29b      	uxth	r3, r3
 800f362:	3b01      	subs	r3, #1
 800f364:	2b06      	cmp	r3, #6
 800f366:	f200 8128 	bhi.w	800f5ba <USBD_GetDescriptor+0x276>
 800f36a:	a201      	add	r2, pc, #4	; (adr r2, 800f370 <USBD_GetDescriptor+0x2c>)
 800f36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f370:	0800f38d 	.word	0x0800f38d
 800f374:	0800f3a5 	.word	0x0800f3a5
 800f378:	0800f3e5 	.word	0x0800f3e5
 800f37c:	0800f5bb 	.word	0x0800f5bb
 800f380:	0800f5bb 	.word	0x0800f5bb
 800f384:	0800f55b 	.word	0x0800f55b
 800f388:	0800f587 	.word	0x0800f587
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	7c12      	ldrb	r2, [r2, #16]
 800f398:	f107 0108 	add.w	r1, r7, #8
 800f39c:	4610      	mov	r0, r2
 800f39e:	4798      	blx	r3
 800f3a0:	60f8      	str	r0, [r7, #12]
      break;
 800f3a2:	e112      	b.n	800f5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	7c1b      	ldrb	r3, [r3, #16]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10d      	bne.n	800f3c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3b4:	f107 0208 	add.w	r2, r7, #8
 800f3b8:	4610      	mov	r0, r2
 800f3ba:	4798      	blx	r3
 800f3bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f3c6:	e100      	b.n	800f5ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d0:	f107 0208 	add.w	r2, r7, #8
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	4798      	blx	r3
 800f3d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	2202      	movs	r2, #2
 800f3e0:	701a      	strb	r2, [r3, #0]
      break;
 800f3e2:	e0f2      	b.n	800f5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	885b      	ldrh	r3, [r3, #2]
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b05      	cmp	r3, #5
 800f3ec:	f200 80ac 	bhi.w	800f548 <USBD_GetDescriptor+0x204>
 800f3f0:	a201      	add	r2, pc, #4	; (adr r2, 800f3f8 <USBD_GetDescriptor+0xb4>)
 800f3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f6:	bf00      	nop
 800f3f8:	0800f411 	.word	0x0800f411
 800f3fc:	0800f445 	.word	0x0800f445
 800f400:	0800f479 	.word	0x0800f479
 800f404:	0800f4ad 	.word	0x0800f4ad
 800f408:	0800f4e1 	.word	0x0800f4e1
 800f40c:	0800f515 	.word	0x0800f515
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00b      	beq.n	800f434 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	7c12      	ldrb	r2, [r2, #16]
 800f428:	f107 0108 	add.w	r1, r7, #8
 800f42c:	4610      	mov	r0, r2
 800f42e:	4798      	blx	r3
 800f430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f432:	e091      	b.n	800f558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 facb 	bl	800f9d2 <USBD_CtlError>
            err++;
 800f43c:	7afb      	ldrb	r3, [r7, #11]
 800f43e:	3301      	adds	r3, #1
 800f440:	72fb      	strb	r3, [r7, #11]
          break;
 800f442:	e089      	b.n	800f558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d00b      	beq.n	800f468 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	7c12      	ldrb	r2, [r2, #16]
 800f45c:	f107 0108 	add.w	r1, r7, #8
 800f460:	4610      	mov	r0, r2
 800f462:	4798      	blx	r3
 800f464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f466:	e077      	b.n	800f558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f468:	6839      	ldr	r1, [r7, #0]
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 fab1 	bl	800f9d2 <USBD_CtlError>
            err++;
 800f470:	7afb      	ldrb	r3, [r7, #11]
 800f472:	3301      	adds	r3, #1
 800f474:	72fb      	strb	r3, [r7, #11]
          break;
 800f476:	e06f      	b.n	800f558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00b      	beq.n	800f49c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	7c12      	ldrb	r2, [r2, #16]
 800f490:	f107 0108 	add.w	r1, r7, #8
 800f494:	4610      	mov	r0, r2
 800f496:	4798      	blx	r3
 800f498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f49a:	e05d      	b.n	800f558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f49c:	6839      	ldr	r1, [r7, #0]
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fa97 	bl	800f9d2 <USBD_CtlError>
            err++;
 800f4a4:	7afb      	ldrb	r3, [r7, #11]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f4aa:	e055      	b.n	800f558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d00b      	beq.n	800f4d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	7c12      	ldrb	r2, [r2, #16]
 800f4c4:	f107 0108 	add.w	r1, r7, #8
 800f4c8:	4610      	mov	r0, r2
 800f4ca:	4798      	blx	r3
 800f4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4ce:	e043      	b.n	800f558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4d0:	6839      	ldr	r1, [r7, #0]
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fa7d 	bl	800f9d2 <USBD_CtlError>
            err++;
 800f4d8:	7afb      	ldrb	r3, [r7, #11]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f4de:	e03b      	b.n	800f558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4e6:	695b      	ldr	r3, [r3, #20]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00b      	beq.n	800f504 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4f2:	695b      	ldr	r3, [r3, #20]
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	7c12      	ldrb	r2, [r2, #16]
 800f4f8:	f107 0108 	add.w	r1, r7, #8
 800f4fc:	4610      	mov	r0, r2
 800f4fe:	4798      	blx	r3
 800f500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f502:	e029      	b.n	800f558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fa63 	bl	800f9d2 <USBD_CtlError>
            err++;
 800f50c:	7afb      	ldrb	r3, [r7, #11]
 800f50e:	3301      	adds	r3, #1
 800f510:	72fb      	strb	r3, [r7, #11]
          break;
 800f512:	e021      	b.n	800f558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00b      	beq.n	800f538 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	7c12      	ldrb	r2, [r2, #16]
 800f52c:	f107 0108 	add.w	r1, r7, #8
 800f530:	4610      	mov	r0, r2
 800f532:	4798      	blx	r3
 800f534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f536:	e00f      	b.n	800f558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 fa49 	bl	800f9d2 <USBD_CtlError>
            err++;
 800f540:	7afb      	ldrb	r3, [r7, #11]
 800f542:	3301      	adds	r3, #1
 800f544:	72fb      	strb	r3, [r7, #11]
          break;
 800f546:	e007      	b.n	800f558 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f548:	6839      	ldr	r1, [r7, #0]
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 fa41 	bl	800f9d2 <USBD_CtlError>
          err++;
 800f550:	7afb      	ldrb	r3, [r7, #11]
 800f552:	3301      	adds	r3, #1
 800f554:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f556:	bf00      	nop
      }
      break;
 800f558:	e037      	b.n	800f5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	7c1b      	ldrb	r3, [r3, #16]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f56a:	f107 0208 	add.w	r2, r7, #8
 800f56e:	4610      	mov	r0, r2
 800f570:	4798      	blx	r3
 800f572:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f574:	e029      	b.n	800f5ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f576:	6839      	ldr	r1, [r7, #0]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 fa2a 	bl	800f9d2 <USBD_CtlError>
        err++;
 800f57e:	7afb      	ldrb	r3, [r7, #11]
 800f580:	3301      	adds	r3, #1
 800f582:	72fb      	strb	r3, [r7, #11]
      break;
 800f584:	e021      	b.n	800f5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	7c1b      	ldrb	r3, [r3, #16]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10d      	bne.n	800f5aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f596:	f107 0208 	add.w	r2, r7, #8
 800f59a:	4610      	mov	r0, r2
 800f59c:	4798      	blx	r3
 800f59e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	2207      	movs	r2, #7
 800f5a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5a8:	e00f      	b.n	800f5ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f5aa:	6839      	ldr	r1, [r7, #0]
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fa10 	bl	800f9d2 <USBD_CtlError>
        err++;
 800f5b2:	7afb      	ldrb	r3, [r7, #11]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800f5b8:	e007      	b.n	800f5ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f5ba:	6839      	ldr	r1, [r7, #0]
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 fa08 	bl	800f9d2 <USBD_CtlError>
      err++;
 800f5c2:	7afb      	ldrb	r3, [r7, #11]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	72fb      	strb	r3, [r7, #11]
      break;
 800f5c8:	bf00      	nop
  }

  if (err != 0U)
 800f5ca:	7afb      	ldrb	r3, [r7, #11]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d11e      	bne.n	800f60e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	88db      	ldrh	r3, [r3, #6]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d016      	beq.n	800f606 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f5d8:	893b      	ldrh	r3, [r7, #8]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00e      	beq.n	800f5fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	88da      	ldrh	r2, [r3, #6]
 800f5e2:	893b      	ldrh	r3, [r7, #8]
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	bf28      	it	cs
 800f5e8:	4613      	movcs	r3, r2
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f5ee:	893b      	ldrh	r3, [r7, #8]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	68f9      	ldr	r1, [r7, #12]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fa5d 	bl	800fab4 <USBD_CtlSendData>
 800f5fa:	e009      	b.n	800f610 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f5fc:	6839      	ldr	r1, [r7, #0]
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 f9e7 	bl	800f9d2 <USBD_CtlError>
 800f604:	e004      	b.n	800f610 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 faae 	bl	800fb68 <USBD_CtlSendStatus>
 800f60c:	e000      	b.n	800f610 <USBD_GetDescriptor+0x2cc>
    return;
 800f60e:	bf00      	nop
  }
}
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop

0800f618 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	889b      	ldrh	r3, [r3, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d131      	bne.n	800f68e <USBD_SetAddress+0x76>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	88db      	ldrh	r3, [r3, #6]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d12d      	bne.n	800f68e <USBD_SetAddress+0x76>
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	885b      	ldrh	r3, [r3, #2]
 800f636:	2b7f      	cmp	r3, #127	; 0x7f
 800f638:	d829      	bhi.n	800f68e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	885b      	ldrh	r3, [r3, #2]
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f644:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	2b03      	cmp	r3, #3
 800f650:	d104      	bne.n	800f65c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f652:	6839      	ldr	r1, [r7, #0]
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f000 f9bc 	bl	800f9d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f65a:	e01d      	b.n	800f698 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	7bfa      	ldrb	r2, [r7, #15]
 800f660:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f664:	7bfb      	ldrb	r3, [r7, #15]
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 ff11 	bl	8010490 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fa7a 	bl	800fb68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f674:	7bfb      	ldrb	r3, [r7, #15]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d004      	beq.n	800f684 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2202      	movs	r2, #2
 800f67e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f682:	e009      	b.n	800f698 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2201      	movs	r2, #1
 800f688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f68c:	e004      	b.n	800f698 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f68e:	6839      	ldr	r1, [r7, #0]
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f99e 	bl	800f9d2 <USBD_CtlError>
  }
}
 800f696:	bf00      	nop
 800f698:	bf00      	nop
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	885b      	ldrh	r3, [r3, #2]
 800f6b2:	b2da      	uxtb	r2, r3
 800f6b4:	4b4e      	ldr	r3, [pc, #312]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f6b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f6b8:	4b4d      	ldr	r3, [pc, #308]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d905      	bls.n	800f6cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f985 	bl	800f9d2 <USBD_CtlError>
    return USBD_FAIL;
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	e08c      	b.n	800f7e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d002      	beq.n	800f6de <USBD_SetConfig+0x3e>
 800f6d8:	2b03      	cmp	r3, #3
 800f6da:	d029      	beq.n	800f730 <USBD_SetConfig+0x90>
 800f6dc:	e075      	b.n	800f7ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f6de:	4b44      	ldr	r3, [pc, #272]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d020      	beq.n	800f728 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f6e6:	4b42      	ldr	r3, [pc, #264]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f6f0:	4b3f      	ldr	r3, [pc, #252]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7fe ffe7 	bl	800e6ca <USBD_SetClassConfig>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f700:	7bfb      	ldrb	r3, [r7, #15]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d008      	beq.n	800f718 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f706:	6839      	ldr	r1, [r7, #0]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f962 	bl	800f9d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2202      	movs	r2, #2
 800f712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f716:	e065      	b.n	800f7e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 fa25 	bl	800fb68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2203      	movs	r2, #3
 800f722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f726:	e05d      	b.n	800f7e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 fa1d 	bl	800fb68 <USBD_CtlSendStatus>
      break;
 800f72e:	e059      	b.n	800f7e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f730:	4b2f      	ldr	r3, [pc, #188]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d112      	bne.n	800f75e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2202      	movs	r2, #2
 800f73c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f740:	4b2b      	ldr	r3, [pc, #172]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	461a      	mov	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f74a:	4b29      	ldr	r3, [pc, #164]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7fe ffd6 	bl	800e702 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fa06 	bl	800fb68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f75c:	e042      	b.n	800f7e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f75e:	4b24      	ldr	r3, [pc, #144]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d02a      	beq.n	800f7c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	b2db      	uxtb	r3, r3
 800f772:	4619      	mov	r1, r3
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f7fe ffc4 	bl	800e702 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f77a:	4b1d      	ldr	r3, [pc, #116]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	461a      	mov	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f784:	4b1a      	ldr	r3, [pc, #104]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	4619      	mov	r1, r3
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7fe ff9d 	bl	800e6ca <USBD_SetClassConfig>
 800f790:	4603      	mov	r3, r0
 800f792:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f794:	7bfb      	ldrb	r3, [r7, #15]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00f      	beq.n	800f7ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f79a:	6839      	ldr	r1, [r7, #0]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f918 	bl	800f9d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7fe ffa9 	bl	800e702 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2202      	movs	r2, #2
 800f7b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f7b8:	e014      	b.n	800f7e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f9d4 	bl	800fb68 <USBD_CtlSendStatus>
      break;
 800f7c0:	e010      	b.n	800f7e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 f9d0 	bl	800fb68 <USBD_CtlSendStatus>
      break;
 800f7c8:	e00c      	b.n	800f7e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f7ca:	6839      	ldr	r1, [r7, #0]
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 f900 	bl	800f9d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7d2:	4b07      	ldr	r3, [pc, #28]	; (800f7f0 <USBD_SetConfig+0x150>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7fe ff92 	bl	800e702 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f7de:	2303      	movs	r3, #3
 800f7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800f7e2:	bf00      	nop
  }

  return ret;
 800f7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	24000190 	.word	0x24000190

0800f7f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	88db      	ldrh	r3, [r3, #6]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d004      	beq.n	800f810 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f806:	6839      	ldr	r1, [r7, #0]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 f8e2 	bl	800f9d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f80e:	e023      	b.n	800f858 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b02      	cmp	r3, #2
 800f81a:	dc02      	bgt.n	800f822 <USBD_GetConfig+0x2e>
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	dc03      	bgt.n	800f828 <USBD_GetConfig+0x34>
 800f820:	e015      	b.n	800f84e <USBD_GetConfig+0x5a>
 800f822:	2b03      	cmp	r3, #3
 800f824:	d00b      	beq.n	800f83e <USBD_GetConfig+0x4a>
 800f826:	e012      	b.n	800f84e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	3308      	adds	r3, #8
 800f832:	2201      	movs	r2, #1
 800f834:	4619      	mov	r1, r3
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 f93c 	bl	800fab4 <USBD_CtlSendData>
        break;
 800f83c:	e00c      	b.n	800f858 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	3304      	adds	r3, #4
 800f842:	2201      	movs	r2, #1
 800f844:	4619      	mov	r1, r3
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f934 	bl	800fab4 <USBD_CtlSendData>
        break;
 800f84c:	e004      	b.n	800f858 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f84e:	6839      	ldr	r1, [r7, #0]
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 f8be 	bl	800f9d2 <USBD_CtlError>
        break;
 800f856:	bf00      	nop
}
 800f858:	bf00      	nop
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f870:	b2db      	uxtb	r3, r3
 800f872:	3b01      	subs	r3, #1
 800f874:	2b02      	cmp	r3, #2
 800f876:	d81e      	bhi.n	800f8b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	88db      	ldrh	r3, [r3, #6]
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d004      	beq.n	800f88a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 f8a5 	bl	800f9d2 <USBD_CtlError>
        break;
 800f888:	e01a      	b.n	800f8c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2201      	movs	r2, #1
 800f88e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f896:	2b00      	cmp	r3, #0
 800f898:	d005      	beq.n	800f8a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	f043 0202 	orr.w	r2, r3, #2
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	330c      	adds	r3, #12
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f900 	bl	800fab4 <USBD_CtlSendData>
      break;
 800f8b4:	e004      	b.n	800f8c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f8b6:	6839      	ldr	r1, [r7, #0]
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 f88a 	bl	800f9d2 <USBD_CtlError>
      break;
 800f8be:	bf00      	nop
  }
}
 800f8c0:	bf00      	nop
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	885b      	ldrh	r3, [r3, #2]
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d107      	bne.n	800f8ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2201      	movs	r2, #1
 800f8de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 f940 	bl	800fb68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f8e8:	e013      	b.n	800f912 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	885b      	ldrh	r3, [r3, #2]
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d10b      	bne.n	800f90a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	889b      	ldrh	r3, [r3, #4]
 800f8f6:	0a1b      	lsrs	r3, r3, #8
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f930 	bl	800fb68 <USBD_CtlSendStatus>
}
 800f908:	e003      	b.n	800f912 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f90a:	6839      	ldr	r1, [r7, #0]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 f860 	bl	800f9d2 <USBD_CtlError>
}
 800f912:	bf00      	nop
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b082      	sub	sp, #8
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
 800f922:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	3b01      	subs	r3, #1
 800f92e:	2b02      	cmp	r3, #2
 800f930:	d80b      	bhi.n	800f94a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	885b      	ldrh	r3, [r3, #2]
 800f936:	2b01      	cmp	r3, #1
 800f938:	d10c      	bne.n	800f954 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 f910 	bl	800fb68 <USBD_CtlSendStatus>
      }
      break;
 800f948:	e004      	b.n	800f954 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f94a:	6839      	ldr	r1, [r7, #0]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f840 	bl	800f9d2 <USBD_CtlError>
      break;
 800f952:	e000      	b.n	800f956 <USBD_ClrFeature+0x3c>
      break;
 800f954:	bf00      	nop
  }
}
 800f956:	bf00      	nop
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	781a      	ldrb	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	3301      	adds	r3, #1
 800f978:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	781a      	ldrb	r2, [r3, #0]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	3301      	adds	r3, #1
 800f986:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f7ff fa41 	bl	800ee10 <SWAPBYTE>
 800f98e:	4603      	mov	r3, r0
 800f990:	461a      	mov	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	3301      	adds	r3, #1
 800f99a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7ff fa34 	bl	800ee10 <SWAPBYTE>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7ff fa27 	bl	800ee10 <SWAPBYTE>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	80da      	strh	r2, [r3, #6]
}
 800f9ca:	bf00      	nop
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b082      	sub	sp, #8
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9dc:	2180      	movs	r1, #128	; 0x80
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 fcec 	bl	80103bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fce8 	bl	80103bc <USBD_LL_StallEP>
}
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa00:	2300      	movs	r3, #0
 800fa02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d036      	beq.n	800fa78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa0e:	6938      	ldr	r0, [r7, #16]
 800fa10:	f000 f836 	bl	800fa80 <USBD_GetLen>
 800fa14:	4603      	mov	r3, r0
 800fa16:	3301      	adds	r3, #1
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa22:	7dfb      	ldrb	r3, [r7, #23]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	4413      	add	r3, r2
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	7812      	ldrb	r2, [r2, #0]
 800fa2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa2e:	7dfb      	ldrb	r3, [r7, #23]
 800fa30:	3301      	adds	r3, #1
 800fa32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa34:	7dfb      	ldrb	r3, [r7, #23]
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	4413      	add	r3, r2
 800fa3a:	2203      	movs	r2, #3
 800fa3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
 800fa40:	3301      	adds	r3, #1
 800fa42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa44:	e013      	b.n	800fa6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa46:	7dfb      	ldrb	r3, [r7, #23]
 800fa48:	68ba      	ldr	r2, [r7, #8]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	693a      	ldr	r2, [r7, #16]
 800fa4e:	7812      	ldrb	r2, [r2, #0]
 800fa50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	3301      	adds	r3, #1
 800fa56:	613b      	str	r3, [r7, #16]
    idx++;
 800fa58:	7dfb      	ldrb	r3, [r7, #23]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	68ba      	ldr	r2, [r7, #8]
 800fa62:	4413      	add	r3, r2
 800fa64:	2200      	movs	r2, #0
 800fa66:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d1e7      	bne.n	800fa46 <USBD_GetString+0x52>
 800fa76:	e000      	b.n	800fa7a <USBD_GetString+0x86>
    return;
 800fa78:	bf00      	nop
  }
}
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa90:	e005      	b.n	800fa9e <USBD_GetLen+0x1e>
  {
    len++;
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
 800fa94:	3301      	adds	r3, #1
 800fa96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d1f5      	bne.n	800fa92 <USBD_GetLen+0x12>
  }

  return len;
 800faa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2202      	movs	r2, #2
 800fac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	2100      	movs	r1, #0
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f000 fcf7 	bl	80104ce <USBD_LL_Transmit>

  return USBD_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b084      	sub	sp, #16
 800faee:	af00      	add	r7, sp, #0
 800faf0:	60f8      	str	r0, [r7, #12]
 800faf2:	60b9      	str	r1, [r7, #8]
 800faf4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	68ba      	ldr	r2, [r7, #8]
 800fafa:	2100      	movs	r1, #0
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f000 fce6 	bl	80104ce <USBD_LL_Transmit>

  return USBD_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2203      	movs	r2, #3
 800fb1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	68ba      	ldr	r2, [r7, #8]
 800fb34:	2100      	movs	r1, #0
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f000 fcea 	bl	8010510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb3c:	2300      	movs	r3, #0
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	60f8      	str	r0, [r7, #12]
 800fb4e:	60b9      	str	r1, [r7, #8]
 800fb50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68ba      	ldr	r2, [r7, #8]
 800fb56:	2100      	movs	r1, #0
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 fcd9 	bl	8010510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2204      	movs	r2, #4
 800fb74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fb78:	2300      	movs	r3, #0
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 fca5 	bl	80104ce <USBD_LL_Transmit>

  return USBD_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b082      	sub	sp, #8
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2205      	movs	r2, #5
 800fb9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb9e:	2300      	movs	r3, #0
 800fba0:	2200      	movs	r2, #0
 800fba2:	2100      	movs	r1, #0
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f000 fcb3 	bl	8010510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbaa:	2300      	movs	r3, #0
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	4913      	ldr	r1, [pc, #76]	; (800fc08 <MX_USB_DEVICE_Init+0x54>)
 800fbbc:	4813      	ldr	r0, [pc, #76]	; (800fc0c <MX_USB_DEVICE_Init+0x58>)
 800fbbe:	f7fe fd07 	bl	800e5d0 <USBD_Init>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d001      	beq.n	800fbcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fbc8:	f7f1 fbb8 	bl	800133c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fbcc:	4910      	ldr	r1, [pc, #64]	; (800fc10 <MX_USB_DEVICE_Init+0x5c>)
 800fbce:	480f      	ldr	r0, [pc, #60]	; (800fc0c <MX_USB_DEVICE_Init+0x58>)
 800fbd0:	f7fe fd2e 	bl	800e630 <USBD_RegisterClass>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fbda:	f7f1 fbaf 	bl	800133c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fbde:	490d      	ldr	r1, [pc, #52]	; (800fc14 <MX_USB_DEVICE_Init+0x60>)
 800fbe0:	480a      	ldr	r0, [pc, #40]	; (800fc0c <MX_USB_DEVICE_Init+0x58>)
 800fbe2:	f7fe fc65 	bl	800e4b0 <USBD_CDC_RegisterInterface>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d001      	beq.n	800fbf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fbec:	f7f1 fba6 	bl	800133c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fbf0:	4806      	ldr	r0, [pc, #24]	; (800fc0c <MX_USB_DEVICE_Init+0x58>)
 800fbf2:	f7fe fd53 	bl	800e69c <USBD_Start>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d001      	beq.n	800fc00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fbfc:	f7f1 fb9e 	bl	800133c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fc00:	f7f7 fbe8 	bl	80073d4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fc04:	bf00      	nop
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	240000b4 	.word	0x240000b4
 800fc0c:	24000828 	.word	0x24000828
 800fc10:	24000020 	.word	0x24000020
 800fc14:	240000a0 	.word	0x240000a0

0800fc18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	4905      	ldr	r1, [pc, #20]	; (800fc34 <CDC_Init_FS+0x1c>)
 800fc20:	4805      	ldr	r0, [pc, #20]	; (800fc38 <CDC_Init_FS+0x20>)
 800fc22:	f7fe fc5f 	bl	800e4e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fc26:	4905      	ldr	r1, [pc, #20]	; (800fc3c <CDC_Init_FS+0x24>)
 800fc28:	4803      	ldr	r0, [pc, #12]	; (800fc38 <CDC_Init_FS+0x20>)
 800fc2a:	f7fe fc7d 	bl	800e528 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	24001304 	.word	0x24001304
 800fc38:	24000828 	.word	0x24000828
 800fc3c:	24000b04 	.word	0x24000b04

0800fc40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc40:	b480      	push	{r7}
 800fc42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	4603      	mov	r3, r0
 800fc58:	6039      	str	r1, [r7, #0]
 800fc5a:	71fb      	strb	r3, [r7, #7]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fc60:	79fb      	ldrb	r3, [r7, #7]
 800fc62:	2b23      	cmp	r3, #35	; 0x23
 800fc64:	d84a      	bhi.n	800fcfc <CDC_Control_FS+0xac>
 800fc66:	a201      	add	r2, pc, #4	; (adr r2, 800fc6c <CDC_Control_FS+0x1c>)
 800fc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6c:	0800fcfd 	.word	0x0800fcfd
 800fc70:	0800fcfd 	.word	0x0800fcfd
 800fc74:	0800fcfd 	.word	0x0800fcfd
 800fc78:	0800fcfd 	.word	0x0800fcfd
 800fc7c:	0800fcfd 	.word	0x0800fcfd
 800fc80:	0800fcfd 	.word	0x0800fcfd
 800fc84:	0800fcfd 	.word	0x0800fcfd
 800fc88:	0800fcfd 	.word	0x0800fcfd
 800fc8c:	0800fcfd 	.word	0x0800fcfd
 800fc90:	0800fcfd 	.word	0x0800fcfd
 800fc94:	0800fcfd 	.word	0x0800fcfd
 800fc98:	0800fcfd 	.word	0x0800fcfd
 800fc9c:	0800fcfd 	.word	0x0800fcfd
 800fca0:	0800fcfd 	.word	0x0800fcfd
 800fca4:	0800fcfd 	.word	0x0800fcfd
 800fca8:	0800fcfd 	.word	0x0800fcfd
 800fcac:	0800fcfd 	.word	0x0800fcfd
 800fcb0:	0800fcfd 	.word	0x0800fcfd
 800fcb4:	0800fcfd 	.word	0x0800fcfd
 800fcb8:	0800fcfd 	.word	0x0800fcfd
 800fcbc:	0800fcfd 	.word	0x0800fcfd
 800fcc0:	0800fcfd 	.word	0x0800fcfd
 800fcc4:	0800fcfd 	.word	0x0800fcfd
 800fcc8:	0800fcfd 	.word	0x0800fcfd
 800fccc:	0800fcfd 	.word	0x0800fcfd
 800fcd0:	0800fcfd 	.word	0x0800fcfd
 800fcd4:	0800fcfd 	.word	0x0800fcfd
 800fcd8:	0800fcfd 	.word	0x0800fcfd
 800fcdc:	0800fcfd 	.word	0x0800fcfd
 800fce0:	0800fcfd 	.word	0x0800fcfd
 800fce4:	0800fcfd 	.word	0x0800fcfd
 800fce8:	0800fcfd 	.word	0x0800fcfd
 800fcec:	0800fcfd 	.word	0x0800fcfd
 800fcf0:	0800fcfd 	.word	0x0800fcfd
 800fcf4:	0800fcfd 	.word	0x0800fcfd
 800fcf8:	0800fcfd 	.word	0x0800fcfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fcfc:	bf00      	nop
  }

  return (USBD_OK);
 800fcfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd16:	6879      	ldr	r1, [r7, #4]
 800fd18:	4805      	ldr	r0, [pc, #20]	; (800fd30 <CDC_Receive_FS+0x24>)
 800fd1a:	f7fe fc05 	bl	800e528 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd1e:	4804      	ldr	r0, [pc, #16]	; (800fd30 <CDC_Receive_FS+0x24>)
 800fd20:	f7fe fc20 	bl	800e564 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fd24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	24000828 	.word	0x24000828

0800fd34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b087      	sub	sp, #28
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fd46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	371c      	adds	r7, #28
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
	...

0800fd58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	4603      	mov	r3, r0
 800fd60:	6039      	str	r1, [r7, #0]
 800fd62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	2212      	movs	r2, #18
 800fd68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fd6a:	4b03      	ldr	r3, [pc, #12]	; (800fd78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr
 800fd78:	240000d0 	.word	0x240000d0

0800fd7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fd8e:	4b03      	ldr	r3, [pc, #12]	; (800fd9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	240000e4 	.word	0x240000e4

0800fda0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	4603      	mov	r3, r0
 800fda8:	6039      	str	r1, [r7, #0]
 800fdaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fdac:	79fb      	ldrb	r3, [r7, #7]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d105      	bne.n	800fdbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdb2:	683a      	ldr	r2, [r7, #0]
 800fdb4:	4907      	ldr	r1, [pc, #28]	; (800fdd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdb6:	4808      	ldr	r0, [pc, #32]	; (800fdd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800fdb8:	f7ff fe1c 	bl	800f9f4 <USBD_GetString>
 800fdbc:	e004      	b.n	800fdc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	4904      	ldr	r1, [pc, #16]	; (800fdd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdc2:	4805      	ldr	r0, [pc, #20]	; (800fdd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800fdc4:	f7ff fe16 	bl	800f9f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdc8:	4b02      	ldr	r3, [pc, #8]	; (800fdd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	24001b04 	.word	0x24001b04
 800fdd8:	08011678 	.word	0x08011678

0800fddc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	4603      	mov	r3, r0
 800fde4:	6039      	str	r1, [r7, #0]
 800fde6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fde8:	683a      	ldr	r2, [r7, #0]
 800fdea:	4904      	ldr	r1, [pc, #16]	; (800fdfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fdec:	4804      	ldr	r0, [pc, #16]	; (800fe00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fdee:	f7ff fe01 	bl	800f9f4 <USBD_GetString>
  return USBD_StrDesc;
 800fdf2:	4b02      	ldr	r3, [pc, #8]	; (800fdfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	24001b04 	.word	0x24001b04
 800fe00:	08011690 	.word	0x08011690

0800fe04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	6039      	str	r1, [r7, #0]
 800fe0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	221a      	movs	r2, #26
 800fe14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fe16:	f000 f843 	bl	800fea0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fe1a:	4b02      	ldr	r3, [pc, #8]	; (800fe24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	240000e8 	.word	0x240000e8

0800fe28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	4603      	mov	r3, r0
 800fe30:	6039      	str	r1, [r7, #0]
 800fe32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fe34:	79fb      	ldrb	r3, [r7, #7]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d105      	bne.n	800fe46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe3a:	683a      	ldr	r2, [r7, #0]
 800fe3c:	4907      	ldr	r1, [pc, #28]	; (800fe5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe3e:	4808      	ldr	r0, [pc, #32]	; (800fe60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe40:	f7ff fdd8 	bl	800f9f4 <USBD_GetString>
 800fe44:	e004      	b.n	800fe50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe46:	683a      	ldr	r2, [r7, #0]
 800fe48:	4904      	ldr	r1, [pc, #16]	; (800fe5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe4a:	4805      	ldr	r0, [pc, #20]	; (800fe60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe4c:	f7ff fdd2 	bl	800f9f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe50:	4b02      	ldr	r3, [pc, #8]	; (800fe5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	24001b04 	.word	0x24001b04
 800fe60:	080116a4 	.word	0x080116a4

0800fe64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	6039      	str	r1, [r7, #0]
 800fe6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe70:	79fb      	ldrb	r3, [r7, #7]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d105      	bne.n	800fe82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	4907      	ldr	r1, [pc, #28]	; (800fe98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe7a:	4808      	ldr	r0, [pc, #32]	; (800fe9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe7c:	f7ff fdba 	bl	800f9f4 <USBD_GetString>
 800fe80:	e004      	b.n	800fe8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe82:	683a      	ldr	r2, [r7, #0]
 800fe84:	4904      	ldr	r1, [pc, #16]	; (800fe98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe86:	4805      	ldr	r0, [pc, #20]	; (800fe9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe88:	f7ff fdb4 	bl	800f9f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe8c:	4b02      	ldr	r3, [pc, #8]	; (800fe98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	24001b04 	.word	0x24001b04
 800fe9c:	080116b0 	.word	0x080116b0

0800fea0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fea6:	4b0f      	ldr	r3, [pc, #60]	; (800fee4 <Get_SerialNum+0x44>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800feac:	4b0e      	ldr	r3, [pc, #56]	; (800fee8 <Get_SerialNum+0x48>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800feb2:	4b0e      	ldr	r3, [pc, #56]	; (800feec <Get_SerialNum+0x4c>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4413      	add	r3, r2
 800febe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d009      	beq.n	800feda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fec6:	2208      	movs	r2, #8
 800fec8:	4909      	ldr	r1, [pc, #36]	; (800fef0 <Get_SerialNum+0x50>)
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f000 f814 	bl	800fef8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fed0:	2204      	movs	r2, #4
 800fed2:	4908      	ldr	r1, [pc, #32]	; (800fef4 <Get_SerialNum+0x54>)
 800fed4:	68b8      	ldr	r0, [r7, #8]
 800fed6:	f000 f80f 	bl	800fef8 <IntToUnicode>
  }
}
 800feda:	bf00      	nop
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	1ff1e800 	.word	0x1ff1e800
 800fee8:	1ff1e804 	.word	0x1ff1e804
 800feec:	1ff1e808 	.word	0x1ff1e808
 800fef0:	240000ea 	.word	0x240000ea
 800fef4:	240000fa 	.word	0x240000fa

0800fef8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b087      	sub	sp, #28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	4613      	mov	r3, r2
 800ff04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff06:	2300      	movs	r3, #0
 800ff08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	75fb      	strb	r3, [r7, #23]
 800ff0e:	e027      	b.n	800ff60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	0f1b      	lsrs	r3, r3, #28
 800ff14:	2b09      	cmp	r3, #9
 800ff16:	d80b      	bhi.n	800ff30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	0f1b      	lsrs	r3, r3, #28
 800ff1c:	b2da      	uxtb	r2, r3
 800ff1e:	7dfb      	ldrb	r3, [r7, #23]
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	4619      	mov	r1, r3
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	440b      	add	r3, r1
 800ff28:	3230      	adds	r2, #48	; 0x30
 800ff2a:	b2d2      	uxtb	r2, r2
 800ff2c:	701a      	strb	r2, [r3, #0]
 800ff2e:	e00a      	b.n	800ff46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	0f1b      	lsrs	r3, r3, #28
 800ff34:	b2da      	uxtb	r2, r3
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
 800ff38:	005b      	lsls	r3, r3, #1
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	440b      	add	r3, r1
 800ff40:	3237      	adds	r2, #55	; 0x37
 800ff42:	b2d2      	uxtb	r2, r2
 800ff44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	011b      	lsls	r3, r3, #4
 800ff4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
 800ff4e:	005b      	lsls	r3, r3, #1
 800ff50:	3301      	adds	r3, #1
 800ff52:	68ba      	ldr	r2, [r7, #8]
 800ff54:	4413      	add	r3, r2
 800ff56:	2200      	movs	r2, #0
 800ff58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff5a:	7dfb      	ldrb	r3, [r7, #23]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	75fb      	strb	r3, [r7, #23]
 800ff60:	7dfa      	ldrb	r2, [r7, #23]
 800ff62:	79fb      	ldrb	r3, [r7, #7]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d3d3      	bcc.n	800ff10 <IntToUnicode+0x18>
  }
}
 800ff68:	bf00      	nop
 800ff6a:	bf00      	nop
 800ff6c:	371c      	adds	r7, #28
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
	...

0800ff78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b0b8      	sub	sp, #224	; 0xe0
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ff84:	2200      	movs	r2, #0
 800ff86:	601a      	str	r2, [r3, #0]
 800ff88:	605a      	str	r2, [r3, #4]
 800ff8a:	609a      	str	r2, [r3, #8]
 800ff8c:	60da      	str	r2, [r3, #12]
 800ff8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ff90:	f107 0310 	add.w	r3, r7, #16
 800ff94:	22bc      	movs	r2, #188	; 0xbc
 800ff96:	2100      	movs	r1, #0
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f000 fb69 	bl	8010670 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4a32      	ldr	r2, [pc, #200]	; (801006c <HAL_PCD_MspInit+0xf4>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d15d      	bne.n	8010064 <HAL_PCD_MspInit+0xec>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ffa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ffac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 15;
 800ffb2:	230f      	movs	r3, #15
 800ffb4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800ffb6:	2302      	movs	r3, #2
 800ffb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800ffba:	2303      	movs	r3, #3
 800ffbc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 15;
 800ffbe:	230f      	movs	r3, #15
 800ffc0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800ffc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ffc6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800ffcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ffd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ffd4:	f107 0310 	add.w	r3, r7, #16
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7f8 f997 	bl	800830c <HAL_RCCEx_PeriphCLKConfig>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d001      	beq.n	800ffe8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800ffe4:	f7f1 f9aa 	bl	800133c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ffe8:	f7f7 f9f4 	bl	80073d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ffec:	4b20      	ldr	r3, [pc, #128]	; (8010070 <HAL_PCD_MspInit+0xf8>)
 800ffee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fff2:	4a1f      	ldr	r2, [pc, #124]	; (8010070 <HAL_PCD_MspInit+0xf8>)
 800fff4:	f043 0301 	orr.w	r3, r3, #1
 800fff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fffc:	4b1c      	ldr	r3, [pc, #112]	; (8010070 <HAL_PCD_MspInit+0xf8>)
 800fffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010002:	f003 0301 	and.w	r3, r3, #1
 8010006:	60fb      	str	r3, [r7, #12]
 8010008:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801000a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801000e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010012:	2302      	movs	r3, #2
 8010014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010018:	2300      	movs	r3, #0
 801001a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801001e:	2300      	movs	r3, #0
 8010020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010024:	230a      	movs	r3, #10
 8010026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801002a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801002e:	4619      	mov	r1, r3
 8010030:	4810      	ldr	r0, [pc, #64]	; (8010074 <HAL_PCD_MspInit+0xfc>)
 8010032:	f7f5 fbcf 	bl	80057d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010036:	4b0e      	ldr	r3, [pc, #56]	; (8010070 <HAL_PCD_MspInit+0xf8>)
 8010038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801003c:	4a0c      	ldr	r2, [pc, #48]	; (8010070 <HAL_PCD_MspInit+0xf8>)
 801003e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010042:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010046:	4b0a      	ldr	r3, [pc, #40]	; (8010070 <HAL_PCD_MspInit+0xf8>)
 8010048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801004c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010050:	60bb      	str	r3, [r7, #8]
 8010052:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010054:	2200      	movs	r2, #0
 8010056:	2100      	movs	r1, #0
 8010058:	2065      	movs	r0, #101	; 0x65
 801005a:	f7f3 fb5c 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801005e:	2065      	movs	r0, #101	; 0x65
 8010060:	f7f3 fb73 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010064:	bf00      	nop
 8010066:	37e0      	adds	r7, #224	; 0xe0
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	40080000 	.word	0x40080000
 8010070:	58024400 	.word	0x58024400
 8010074:	58020000 	.word	0x58020000

08010078 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801008c:	4619      	mov	r1, r3
 801008e:	4610      	mov	r0, r2
 8010090:	f7fe fb51 	bl	800e736 <USBD_LL_SetupStage>
}
 8010094:	bf00      	nop
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	460b      	mov	r3, r1
 80100a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80100ae:	78fa      	ldrb	r2, [r7, #3]
 80100b0:	6879      	ldr	r1, [r7, #4]
 80100b2:	4613      	mov	r3, r2
 80100b4:	00db      	lsls	r3, r3, #3
 80100b6:	4413      	add	r3, r2
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	440b      	add	r3, r1
 80100bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	78fb      	ldrb	r3, [r7, #3]
 80100c4:	4619      	mov	r1, r3
 80100c6:	f7fe fb8b 	bl	800e7e0 <USBD_LL_DataOutStage>
}
 80100ca:	bf00      	nop
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
 80100da:	460b      	mov	r3, r1
 80100dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80100e4:	78fa      	ldrb	r2, [r7, #3]
 80100e6:	6879      	ldr	r1, [r7, #4]
 80100e8:	4613      	mov	r3, r2
 80100ea:	00db      	lsls	r3, r3, #3
 80100ec:	4413      	add	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	440b      	add	r3, r1
 80100f2:	334c      	adds	r3, #76	; 0x4c
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	78fb      	ldrb	r3, [r7, #3]
 80100f8:	4619      	mov	r1, r3
 80100fa:	f7fe fc24 	bl	800e946 <USBD_LL_DataInStage>
}
 80100fe:	bf00      	nop
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b082      	sub	sp, #8
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010114:	4618      	mov	r0, r3
 8010116:	f7fe fd58 	bl	800ebca <USBD_LL_SOF>
}
 801011a:	bf00      	nop
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b084      	sub	sp, #16
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801012a:	2301      	movs	r3, #1
 801012c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d102      	bne.n	801013c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010136:	2300      	movs	r3, #0
 8010138:	73fb      	strb	r3, [r7, #15]
 801013a:	e008      	b.n	801014e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	2b02      	cmp	r3, #2
 8010142:	d102      	bne.n	801014a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010144:	2301      	movs	r3, #1
 8010146:	73fb      	strb	r3, [r7, #15]
 8010148:	e001      	b.n	801014e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801014a:	f7f1 f8f7 	bl	800133c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010154:	7bfa      	ldrb	r2, [r7, #15]
 8010156:	4611      	mov	r1, r2
 8010158:	4618      	mov	r0, r3
 801015a:	f7fe fcf8 	bl	800eb4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010164:	4618      	mov	r0, r3
 8010166:	f7fe fca0 	bl	800eaaa <USBD_LL_Reset>
}
 801016a:	bf00      	nop
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
	...

08010174 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010182:	4618      	mov	r0, r3
 8010184:	f7fe fcf3 	bl	800eb6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	6812      	ldr	r2, [r2, #0]
 8010196:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801019a:	f043 0301 	orr.w	r3, r3, #1
 801019e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6a1b      	ldr	r3, [r3, #32]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d005      	beq.n	80101b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <HAL_PCD_SuspendCallback+0x48>)
 80101aa:	691b      	ldr	r3, [r3, #16]
 80101ac:	4a03      	ldr	r2, [pc, #12]	; (80101bc <HAL_PCD_SuspendCallback+0x48>)
 80101ae:	f043 0306 	orr.w	r3, r3, #6
 80101b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80101b4:	bf00      	nop
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	e000ed00 	.word	0xe000ed00

080101c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fe fce3 	bl	800eb9a <USBD_LL_Resume>
}
 80101d4:	bf00      	nop
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	460b      	mov	r3, r1
 80101e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101ee:	78fa      	ldrb	r2, [r7, #3]
 80101f0:	4611      	mov	r1, r2
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fe fd3b 	bl	800ec6e <USBD_LL_IsoOUTIncomplete>
}
 80101f8:	bf00      	nop
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	460b      	mov	r3, r1
 801020a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010212:	78fa      	ldrb	r2, [r7, #3]
 8010214:	4611      	mov	r1, r2
 8010216:	4618      	mov	r0, r3
 8010218:	f7fe fcf7 	bl	800ec0a <USBD_LL_IsoINIncomplete>
}
 801021c:	bf00      	nop
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe fd4d 	bl	800ecd2 <USBD_LL_DevConnected>
}
 8010238:	bf00      	nop
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801024e:	4618      	mov	r0, r3
 8010250:	f7fe fd4a 	bl	800ece8 <USBD_LL_DevDisconnected>
}
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d13e      	bne.n	80102ea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801026c:	4a21      	ldr	r2, [pc, #132]	; (80102f4 <USBD_LL_Init+0x98>)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4a1f      	ldr	r2, [pc, #124]	; (80102f4 <USBD_LL_Init+0x98>)
 8010278:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801027c:	4b1d      	ldr	r3, [pc, #116]	; (80102f4 <USBD_LL_Init+0x98>)
 801027e:	4a1e      	ldr	r2, [pc, #120]	; (80102f8 <USBD_LL_Init+0x9c>)
 8010280:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010282:	4b1c      	ldr	r3, [pc, #112]	; (80102f4 <USBD_LL_Init+0x98>)
 8010284:	2209      	movs	r2, #9
 8010286:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010288:	4b1a      	ldr	r3, [pc, #104]	; (80102f4 <USBD_LL_Init+0x98>)
 801028a:	2202      	movs	r2, #2
 801028c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801028e:	4b19      	ldr	r3, [pc, #100]	; (80102f4 <USBD_LL_Init+0x98>)
 8010290:	2200      	movs	r2, #0
 8010292:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010294:	4b17      	ldr	r3, [pc, #92]	; (80102f4 <USBD_LL_Init+0x98>)
 8010296:	2202      	movs	r2, #2
 8010298:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801029a:	4b16      	ldr	r3, [pc, #88]	; (80102f4 <USBD_LL_Init+0x98>)
 801029c:	2200      	movs	r2, #0
 801029e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80102a0:	4b14      	ldr	r3, [pc, #80]	; (80102f4 <USBD_LL_Init+0x98>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80102a6:	4b13      	ldr	r3, [pc, #76]	; (80102f4 <USBD_LL_Init+0x98>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80102ac:	4b11      	ldr	r3, [pc, #68]	; (80102f4 <USBD_LL_Init+0x98>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80102b2:	4b10      	ldr	r3, [pc, #64]	; (80102f4 <USBD_LL_Init+0x98>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80102b8:	4b0e      	ldr	r3, [pc, #56]	; (80102f4 <USBD_LL_Init+0x98>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80102be:	480d      	ldr	r0, [pc, #52]	; (80102f4 <USBD_LL_Init+0x98>)
 80102c0:	f7f5 fd79 	bl	8005db6 <HAL_PCD_Init>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d001      	beq.n	80102ce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80102ca:	f7f1 f837 	bl	800133c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80102ce:	2180      	movs	r1, #128	; 0x80
 80102d0:	4808      	ldr	r0, [pc, #32]	; (80102f4 <USBD_LL_Init+0x98>)
 80102d2:	f7f7 f804 	bl	80072de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80102d6:	2240      	movs	r2, #64	; 0x40
 80102d8:	2100      	movs	r1, #0
 80102da:	4806      	ldr	r0, [pc, #24]	; (80102f4 <USBD_LL_Init+0x98>)
 80102dc:	f7f6 ffb8 	bl	8007250 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80102e0:	2280      	movs	r2, #128	; 0x80
 80102e2:	2101      	movs	r1, #1
 80102e4:	4803      	ldr	r0, [pc, #12]	; (80102f4 <USBD_LL_Init+0x98>)
 80102e6:	f7f6 ffb3 	bl	8007250 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80102ea:	2300      	movs	r3, #0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	24001d04 	.word	0x24001d04
 80102f8:	40080000 	.word	0x40080000

080102fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010312:	4618      	mov	r0, r3
 8010314:	f7f5 fe73 	bl	8005ffe <HAL_PCD_Start>
 8010318:	4603      	mov	r3, r0
 801031a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801031c:	7bfb      	ldrb	r3, [r7, #15]
 801031e:	4618      	mov	r0, r3
 8010320:	f000 f942 	bl	80105a8 <USBD_Get_USB_Status>
 8010324:	4603      	mov	r3, r0
 8010326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010328:	7bbb      	ldrb	r3, [r7, #14]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b084      	sub	sp, #16
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	4608      	mov	r0, r1
 801033c:	4611      	mov	r1, r2
 801033e:	461a      	mov	r2, r3
 8010340:	4603      	mov	r3, r0
 8010342:	70fb      	strb	r3, [r7, #3]
 8010344:	460b      	mov	r3, r1
 8010346:	70bb      	strb	r3, [r7, #2]
 8010348:	4613      	mov	r3, r2
 801034a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010350:	2300      	movs	r3, #0
 8010352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801035a:	78bb      	ldrb	r3, [r7, #2]
 801035c:	883a      	ldrh	r2, [r7, #0]
 801035e:	78f9      	ldrb	r1, [r7, #3]
 8010360:	f7f6 fb71 	bl	8006a46 <HAL_PCD_EP_Open>
 8010364:	4603      	mov	r3, r0
 8010366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010368:	7bfb      	ldrb	r3, [r7, #15]
 801036a:	4618      	mov	r0, r3
 801036c:	f000 f91c 	bl	80105a8 <USBD_Get_USB_Status>
 8010370:	4603      	mov	r3, r0
 8010372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010374:	7bbb      	ldrb	r3, [r7, #14]
}
 8010376:	4618      	mov	r0, r3
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801037e:	b580      	push	{r7, lr}
 8010380:	b084      	sub	sp, #16
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
 8010386:	460b      	mov	r3, r1
 8010388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801038a:	2300      	movs	r3, #0
 801038c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801038e:	2300      	movs	r3, #0
 8010390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010398:	78fa      	ldrb	r2, [r7, #3]
 801039a:	4611      	mov	r1, r2
 801039c:	4618      	mov	r0, r3
 801039e:	f7f6 fbba 	bl	8006b16 <HAL_PCD_EP_Close>
 80103a2:	4603      	mov	r3, r0
 80103a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103a6:	7bfb      	ldrb	r3, [r7, #15]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f000 f8fd 	bl	80105a8 <USBD_Get_USB_Status>
 80103ae:	4603      	mov	r3, r0
 80103b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	460b      	mov	r3, r1
 80103c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103cc:	2300      	movs	r3, #0
 80103ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103d6:	78fa      	ldrb	r2, [r7, #3]
 80103d8:	4611      	mov	r1, r2
 80103da:	4618      	mov	r0, r3
 80103dc:	f7f6 fc92 	bl	8006d04 <HAL_PCD_EP_SetStall>
 80103e0:	4603      	mov	r3, r0
 80103e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103e4:	7bfb      	ldrb	r3, [r7, #15]
 80103e6:	4618      	mov	r0, r3
 80103e8:	f000 f8de 	bl	80105a8 <USBD_Get_USB_Status>
 80103ec:	4603      	mov	r3, r0
 80103ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b084      	sub	sp, #16
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	460b      	mov	r3, r1
 8010404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010406:	2300      	movs	r3, #0
 8010408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801040a:	2300      	movs	r3, #0
 801040c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010414:	78fa      	ldrb	r2, [r7, #3]
 8010416:	4611      	mov	r1, r2
 8010418:	4618      	mov	r0, r3
 801041a:	f7f6 fcd7 	bl	8006dcc <HAL_PCD_EP_ClrStall>
 801041e:	4603      	mov	r3, r0
 8010420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010422:	7bfb      	ldrb	r3, [r7, #15]
 8010424:	4618      	mov	r0, r3
 8010426:	f000 f8bf 	bl	80105a8 <USBD_Get_USB_Status>
 801042a:	4603      	mov	r3, r0
 801042c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801042e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	460b      	mov	r3, r1
 8010442:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801044a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801044c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010450:	2b00      	cmp	r3, #0
 8010452:	da0b      	bge.n	801046c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010454:	78fb      	ldrb	r3, [r7, #3]
 8010456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801045a:	68f9      	ldr	r1, [r7, #12]
 801045c:	4613      	mov	r3, r2
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	4413      	add	r3, r2
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	440b      	add	r3, r1
 8010466:	333e      	adds	r3, #62	; 0x3e
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	e00b      	b.n	8010484 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801046c:	78fb      	ldrb	r3, [r7, #3]
 801046e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010472:	68f9      	ldr	r1, [r7, #12]
 8010474:	4613      	mov	r3, r2
 8010476:	00db      	lsls	r3, r3, #3
 8010478:	4413      	add	r3, r2
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	440b      	add	r3, r1
 801047e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010482:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010484:	4618      	mov	r0, r3
 8010486:	3714      	adds	r7, #20
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	460b      	mov	r3, r1
 801049a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104aa:	78fa      	ldrb	r2, [r7, #3]
 80104ac:	4611      	mov	r1, r2
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7f6 faa4 	bl	80069fc <HAL_PCD_SetAddress>
 80104b4:	4603      	mov	r3, r0
 80104b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b8:	7bfb      	ldrb	r3, [r7, #15]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f000 f874 	bl	80105a8 <USBD_Get_USB_Status>
 80104c0:	4603      	mov	r3, r0
 80104c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b086      	sub	sp, #24
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	60f8      	str	r0, [r7, #12]
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	603b      	str	r3, [r7, #0]
 80104da:	460b      	mov	r3, r1
 80104dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e2:	2300      	movs	r3, #0
 80104e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80104ec:	7af9      	ldrb	r1, [r7, #11]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	f7f6 fbbd 	bl	8006c70 <HAL_PCD_EP_Transmit>
 80104f6:	4603      	mov	r3, r0
 80104f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104fa:	7dfb      	ldrb	r3, [r7, #23]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 f853 	bl	80105a8 <USBD_Get_USB_Status>
 8010502:	4603      	mov	r3, r0
 8010504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010506:	7dbb      	ldrb	r3, [r7, #22]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	607a      	str	r2, [r7, #4]
 801051a:	603b      	str	r3, [r7, #0]
 801051c:	460b      	mov	r3, r1
 801051e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010520:	2300      	movs	r3, #0
 8010522:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010524:	2300      	movs	r3, #0
 8010526:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801052e:	7af9      	ldrb	r1, [r7, #11]
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	f7f6 fb39 	bl	8006baa <HAL_PCD_EP_Receive>
 8010538:	4603      	mov	r3, r0
 801053a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801053c:	7dfb      	ldrb	r3, [r7, #23]
 801053e:	4618      	mov	r0, r3
 8010540:	f000 f832 	bl	80105a8 <USBD_Get_USB_Status>
 8010544:	4603      	mov	r3, r0
 8010546:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010548:	7dbb      	ldrb	r3, [r7, #22]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3718      	adds	r7, #24
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b082      	sub	sp, #8
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	460b      	mov	r3, r1
 801055c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010564:	78fa      	ldrb	r2, [r7, #3]
 8010566:	4611      	mov	r1, r2
 8010568:	4618      	mov	r0, r3
 801056a:	f7f6 fb69 	bl	8006c40 <HAL_PCD_EP_GetRxCount>
 801056e:	4603      	mov	r3, r0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010580:	4b03      	ldr	r3, [pc, #12]	; (8010590 <USBD_static_malloc+0x18>)
}
 8010582:	4618      	mov	r0, r3
 8010584:	370c      	adds	r7, #12
 8010586:	46bd      	mov	sp, r7
 8010588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058c:	4770      	bx	lr
 801058e:	bf00      	nop
 8010590:	24000194 	.word	0x24000194

08010594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]

}
 801059c:	bf00      	nop
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105b2:	2300      	movs	r3, #0
 80105b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80105b6:	79fb      	ldrb	r3, [r7, #7]
 80105b8:	2b03      	cmp	r3, #3
 80105ba:	d817      	bhi.n	80105ec <USBD_Get_USB_Status+0x44>
 80105bc:	a201      	add	r2, pc, #4	; (adr r2, 80105c4 <USBD_Get_USB_Status+0x1c>)
 80105be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105c2:	bf00      	nop
 80105c4:	080105d5 	.word	0x080105d5
 80105c8:	080105db 	.word	0x080105db
 80105cc:	080105e1 	.word	0x080105e1
 80105d0:	080105e7 	.word	0x080105e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]
    break;
 80105d8:	e00b      	b.n	80105f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80105da:	2303      	movs	r3, #3
 80105dc:	73fb      	strb	r3, [r7, #15]
    break;
 80105de:	e008      	b.n	80105f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105e0:	2301      	movs	r3, #1
 80105e2:	73fb      	strb	r3, [r7, #15]
    break;
 80105e4:	e005      	b.n	80105f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105e6:	2303      	movs	r3, #3
 80105e8:	73fb      	strb	r3, [r7, #15]
    break;
 80105ea:	e002      	b.n	80105f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80105ec:	2303      	movs	r3, #3
 80105ee:	73fb      	strb	r3, [r7, #15]
    break;
 80105f0:	bf00      	nop
  }
  return usb_status;
 80105f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3714      	adds	r7, #20
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <__errno>:
 8010600:	4b01      	ldr	r3, [pc, #4]	; (8010608 <__errno+0x8>)
 8010602:	6818      	ldr	r0, [r3, #0]
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	24000104 	.word	0x24000104

0801060c <__libc_init_array>:
 801060c:	b570      	push	{r4, r5, r6, lr}
 801060e:	4d0d      	ldr	r5, [pc, #52]	; (8010644 <__libc_init_array+0x38>)
 8010610:	4c0d      	ldr	r4, [pc, #52]	; (8010648 <__libc_init_array+0x3c>)
 8010612:	1b64      	subs	r4, r4, r5
 8010614:	10a4      	asrs	r4, r4, #2
 8010616:	2600      	movs	r6, #0
 8010618:	42a6      	cmp	r6, r4
 801061a:	d109      	bne.n	8010630 <__libc_init_array+0x24>
 801061c:	4d0b      	ldr	r5, [pc, #44]	; (801064c <__libc_init_array+0x40>)
 801061e:	4c0c      	ldr	r4, [pc, #48]	; (8010650 <__libc_init_array+0x44>)
 8010620:	f000 ff84 	bl	801152c <_init>
 8010624:	1b64      	subs	r4, r4, r5
 8010626:	10a4      	asrs	r4, r4, #2
 8010628:	2600      	movs	r6, #0
 801062a:	42a6      	cmp	r6, r4
 801062c:	d105      	bne.n	801063a <__libc_init_array+0x2e>
 801062e:	bd70      	pop	{r4, r5, r6, pc}
 8010630:	f855 3b04 	ldr.w	r3, [r5], #4
 8010634:	4798      	blx	r3
 8010636:	3601      	adds	r6, #1
 8010638:	e7ee      	b.n	8010618 <__libc_init_array+0xc>
 801063a:	f855 3b04 	ldr.w	r3, [r5], #4
 801063e:	4798      	blx	r3
 8010640:	3601      	adds	r6, #1
 8010642:	e7f2      	b.n	801062a <__libc_init_array+0x1e>
 8010644:	08011770 	.word	0x08011770
 8010648:	08011770 	.word	0x08011770
 801064c:	08011770 	.word	0x08011770
 8010650:	08011774 	.word	0x08011774

08010654 <memcpy>:
 8010654:	440a      	add	r2, r1
 8010656:	4291      	cmp	r1, r2
 8010658:	f100 33ff 	add.w	r3, r0, #4294967295
 801065c:	d100      	bne.n	8010660 <memcpy+0xc>
 801065e:	4770      	bx	lr
 8010660:	b510      	push	{r4, lr}
 8010662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010666:	f803 4f01 	strb.w	r4, [r3, #1]!
 801066a:	4291      	cmp	r1, r2
 801066c:	d1f9      	bne.n	8010662 <memcpy+0xe>
 801066e:	bd10      	pop	{r4, pc}

08010670 <memset>:
 8010670:	4402      	add	r2, r0
 8010672:	4603      	mov	r3, r0
 8010674:	4293      	cmp	r3, r2
 8010676:	d100      	bne.n	801067a <memset+0xa>
 8010678:	4770      	bx	lr
 801067a:	f803 1b01 	strb.w	r1, [r3], #1
 801067e:	e7f9      	b.n	8010674 <memset+0x4>

08010680 <iprintf>:
 8010680:	b40f      	push	{r0, r1, r2, r3}
 8010682:	4b0a      	ldr	r3, [pc, #40]	; (80106ac <iprintf+0x2c>)
 8010684:	b513      	push	{r0, r1, r4, lr}
 8010686:	681c      	ldr	r4, [r3, #0]
 8010688:	b124      	cbz	r4, 8010694 <iprintf+0x14>
 801068a:	69a3      	ldr	r3, [r4, #24]
 801068c:	b913      	cbnz	r3, 8010694 <iprintf+0x14>
 801068e:	4620      	mov	r0, r4
 8010690:	f000 f866 	bl	8010760 <__sinit>
 8010694:	ab05      	add	r3, sp, #20
 8010696:	9a04      	ldr	r2, [sp, #16]
 8010698:	68a1      	ldr	r1, [r4, #8]
 801069a:	9301      	str	r3, [sp, #4]
 801069c:	4620      	mov	r0, r4
 801069e:	f000 f983 	bl	80109a8 <_vfiprintf_r>
 80106a2:	b002      	add	sp, #8
 80106a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106a8:	b004      	add	sp, #16
 80106aa:	4770      	bx	lr
 80106ac:	24000104 	.word	0x24000104

080106b0 <std>:
 80106b0:	2300      	movs	r3, #0
 80106b2:	b510      	push	{r4, lr}
 80106b4:	4604      	mov	r4, r0
 80106b6:	e9c0 3300 	strd	r3, r3, [r0]
 80106ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106be:	6083      	str	r3, [r0, #8]
 80106c0:	8181      	strh	r1, [r0, #12]
 80106c2:	6643      	str	r3, [r0, #100]	; 0x64
 80106c4:	81c2      	strh	r2, [r0, #14]
 80106c6:	6183      	str	r3, [r0, #24]
 80106c8:	4619      	mov	r1, r3
 80106ca:	2208      	movs	r2, #8
 80106cc:	305c      	adds	r0, #92	; 0x5c
 80106ce:	f7ff ffcf 	bl	8010670 <memset>
 80106d2:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <std+0x38>)
 80106d4:	6263      	str	r3, [r4, #36]	; 0x24
 80106d6:	4b05      	ldr	r3, [pc, #20]	; (80106ec <std+0x3c>)
 80106d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80106da:	4b05      	ldr	r3, [pc, #20]	; (80106f0 <std+0x40>)
 80106dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80106de:	4b05      	ldr	r3, [pc, #20]	; (80106f4 <std+0x44>)
 80106e0:	6224      	str	r4, [r4, #32]
 80106e2:	6323      	str	r3, [r4, #48]	; 0x30
 80106e4:	bd10      	pop	{r4, pc}
 80106e6:	bf00      	nop
 80106e8:	08010f51 	.word	0x08010f51
 80106ec:	08010f73 	.word	0x08010f73
 80106f0:	08010fab 	.word	0x08010fab
 80106f4:	08010fcf 	.word	0x08010fcf

080106f8 <_cleanup_r>:
 80106f8:	4901      	ldr	r1, [pc, #4]	; (8010700 <_cleanup_r+0x8>)
 80106fa:	f000 b8af 	b.w	801085c <_fwalk_reent>
 80106fe:	bf00      	nop
 8010700:	080112a9 	.word	0x080112a9

08010704 <__sfmoreglue>:
 8010704:	b570      	push	{r4, r5, r6, lr}
 8010706:	1e4a      	subs	r2, r1, #1
 8010708:	2568      	movs	r5, #104	; 0x68
 801070a:	4355      	muls	r5, r2
 801070c:	460e      	mov	r6, r1
 801070e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010712:	f000 f8c5 	bl	80108a0 <_malloc_r>
 8010716:	4604      	mov	r4, r0
 8010718:	b140      	cbz	r0, 801072c <__sfmoreglue+0x28>
 801071a:	2100      	movs	r1, #0
 801071c:	e9c0 1600 	strd	r1, r6, [r0]
 8010720:	300c      	adds	r0, #12
 8010722:	60a0      	str	r0, [r4, #8]
 8010724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010728:	f7ff ffa2 	bl	8010670 <memset>
 801072c:	4620      	mov	r0, r4
 801072e:	bd70      	pop	{r4, r5, r6, pc}

08010730 <__sfp_lock_acquire>:
 8010730:	4801      	ldr	r0, [pc, #4]	; (8010738 <__sfp_lock_acquire+0x8>)
 8010732:	f000 b8b3 	b.w	801089c <__retarget_lock_acquire_recursive>
 8010736:	bf00      	nop
 8010738:	24002218 	.word	0x24002218

0801073c <__sfp_lock_release>:
 801073c:	4801      	ldr	r0, [pc, #4]	; (8010744 <__sfp_lock_release+0x8>)
 801073e:	f000 b8ae 	b.w	801089e <__retarget_lock_release_recursive>
 8010742:	bf00      	nop
 8010744:	24002218 	.word	0x24002218

08010748 <__sinit_lock_acquire>:
 8010748:	4801      	ldr	r0, [pc, #4]	; (8010750 <__sinit_lock_acquire+0x8>)
 801074a:	f000 b8a7 	b.w	801089c <__retarget_lock_acquire_recursive>
 801074e:	bf00      	nop
 8010750:	24002213 	.word	0x24002213

08010754 <__sinit_lock_release>:
 8010754:	4801      	ldr	r0, [pc, #4]	; (801075c <__sinit_lock_release+0x8>)
 8010756:	f000 b8a2 	b.w	801089e <__retarget_lock_release_recursive>
 801075a:	bf00      	nop
 801075c:	24002213 	.word	0x24002213

08010760 <__sinit>:
 8010760:	b510      	push	{r4, lr}
 8010762:	4604      	mov	r4, r0
 8010764:	f7ff fff0 	bl	8010748 <__sinit_lock_acquire>
 8010768:	69a3      	ldr	r3, [r4, #24]
 801076a:	b11b      	cbz	r3, 8010774 <__sinit+0x14>
 801076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010770:	f7ff bff0 	b.w	8010754 <__sinit_lock_release>
 8010774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010778:	6523      	str	r3, [r4, #80]	; 0x50
 801077a:	4b13      	ldr	r3, [pc, #76]	; (80107c8 <__sinit+0x68>)
 801077c:	4a13      	ldr	r2, [pc, #76]	; (80107cc <__sinit+0x6c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	62a2      	str	r2, [r4, #40]	; 0x28
 8010782:	42a3      	cmp	r3, r4
 8010784:	bf04      	itt	eq
 8010786:	2301      	moveq	r3, #1
 8010788:	61a3      	streq	r3, [r4, #24]
 801078a:	4620      	mov	r0, r4
 801078c:	f000 f820 	bl	80107d0 <__sfp>
 8010790:	6060      	str	r0, [r4, #4]
 8010792:	4620      	mov	r0, r4
 8010794:	f000 f81c 	bl	80107d0 <__sfp>
 8010798:	60a0      	str	r0, [r4, #8]
 801079a:	4620      	mov	r0, r4
 801079c:	f000 f818 	bl	80107d0 <__sfp>
 80107a0:	2200      	movs	r2, #0
 80107a2:	60e0      	str	r0, [r4, #12]
 80107a4:	2104      	movs	r1, #4
 80107a6:	6860      	ldr	r0, [r4, #4]
 80107a8:	f7ff ff82 	bl	80106b0 <std>
 80107ac:	68a0      	ldr	r0, [r4, #8]
 80107ae:	2201      	movs	r2, #1
 80107b0:	2109      	movs	r1, #9
 80107b2:	f7ff ff7d 	bl	80106b0 <std>
 80107b6:	68e0      	ldr	r0, [r4, #12]
 80107b8:	2202      	movs	r2, #2
 80107ba:	2112      	movs	r1, #18
 80107bc:	f7ff ff78 	bl	80106b0 <std>
 80107c0:	2301      	movs	r3, #1
 80107c2:	61a3      	str	r3, [r4, #24]
 80107c4:	e7d2      	b.n	801076c <__sinit+0xc>
 80107c6:	bf00      	nop
 80107c8:	080116d8 	.word	0x080116d8
 80107cc:	080106f9 	.word	0x080106f9

080107d0 <__sfp>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	4607      	mov	r7, r0
 80107d4:	f7ff ffac 	bl	8010730 <__sfp_lock_acquire>
 80107d8:	4b1e      	ldr	r3, [pc, #120]	; (8010854 <__sfp+0x84>)
 80107da:	681e      	ldr	r6, [r3, #0]
 80107dc:	69b3      	ldr	r3, [r6, #24]
 80107de:	b913      	cbnz	r3, 80107e6 <__sfp+0x16>
 80107e0:	4630      	mov	r0, r6
 80107e2:	f7ff ffbd 	bl	8010760 <__sinit>
 80107e6:	3648      	adds	r6, #72	; 0x48
 80107e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	d503      	bpl.n	80107f8 <__sfp+0x28>
 80107f0:	6833      	ldr	r3, [r6, #0]
 80107f2:	b30b      	cbz	r3, 8010838 <__sfp+0x68>
 80107f4:	6836      	ldr	r6, [r6, #0]
 80107f6:	e7f7      	b.n	80107e8 <__sfp+0x18>
 80107f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80107fc:	b9d5      	cbnz	r5, 8010834 <__sfp+0x64>
 80107fe:	4b16      	ldr	r3, [pc, #88]	; (8010858 <__sfp+0x88>)
 8010800:	60e3      	str	r3, [r4, #12]
 8010802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010806:	6665      	str	r5, [r4, #100]	; 0x64
 8010808:	f000 f847 	bl	801089a <__retarget_lock_init_recursive>
 801080c:	f7ff ff96 	bl	801073c <__sfp_lock_release>
 8010810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010818:	6025      	str	r5, [r4, #0]
 801081a:	61a5      	str	r5, [r4, #24]
 801081c:	2208      	movs	r2, #8
 801081e:	4629      	mov	r1, r5
 8010820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010824:	f7ff ff24 	bl	8010670 <memset>
 8010828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801082c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010830:	4620      	mov	r0, r4
 8010832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010834:	3468      	adds	r4, #104	; 0x68
 8010836:	e7d9      	b.n	80107ec <__sfp+0x1c>
 8010838:	2104      	movs	r1, #4
 801083a:	4638      	mov	r0, r7
 801083c:	f7ff ff62 	bl	8010704 <__sfmoreglue>
 8010840:	4604      	mov	r4, r0
 8010842:	6030      	str	r0, [r6, #0]
 8010844:	2800      	cmp	r0, #0
 8010846:	d1d5      	bne.n	80107f4 <__sfp+0x24>
 8010848:	f7ff ff78 	bl	801073c <__sfp_lock_release>
 801084c:	230c      	movs	r3, #12
 801084e:	603b      	str	r3, [r7, #0]
 8010850:	e7ee      	b.n	8010830 <__sfp+0x60>
 8010852:	bf00      	nop
 8010854:	080116d8 	.word	0x080116d8
 8010858:	ffff0001 	.word	0xffff0001

0801085c <_fwalk_reent>:
 801085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010860:	4606      	mov	r6, r0
 8010862:	4688      	mov	r8, r1
 8010864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010868:	2700      	movs	r7, #0
 801086a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801086e:	f1b9 0901 	subs.w	r9, r9, #1
 8010872:	d505      	bpl.n	8010880 <_fwalk_reent+0x24>
 8010874:	6824      	ldr	r4, [r4, #0]
 8010876:	2c00      	cmp	r4, #0
 8010878:	d1f7      	bne.n	801086a <_fwalk_reent+0xe>
 801087a:	4638      	mov	r0, r7
 801087c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010880:	89ab      	ldrh	r3, [r5, #12]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d907      	bls.n	8010896 <_fwalk_reent+0x3a>
 8010886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801088a:	3301      	adds	r3, #1
 801088c:	d003      	beq.n	8010896 <_fwalk_reent+0x3a>
 801088e:	4629      	mov	r1, r5
 8010890:	4630      	mov	r0, r6
 8010892:	47c0      	blx	r8
 8010894:	4307      	orrs	r7, r0
 8010896:	3568      	adds	r5, #104	; 0x68
 8010898:	e7e9      	b.n	801086e <_fwalk_reent+0x12>

0801089a <__retarget_lock_init_recursive>:
 801089a:	4770      	bx	lr

0801089c <__retarget_lock_acquire_recursive>:
 801089c:	4770      	bx	lr

0801089e <__retarget_lock_release_recursive>:
 801089e:	4770      	bx	lr

080108a0 <_malloc_r>:
 80108a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108a2:	1ccd      	adds	r5, r1, #3
 80108a4:	f025 0503 	bic.w	r5, r5, #3
 80108a8:	3508      	adds	r5, #8
 80108aa:	2d0c      	cmp	r5, #12
 80108ac:	bf38      	it	cc
 80108ae:	250c      	movcc	r5, #12
 80108b0:	2d00      	cmp	r5, #0
 80108b2:	4606      	mov	r6, r0
 80108b4:	db01      	blt.n	80108ba <_malloc_r+0x1a>
 80108b6:	42a9      	cmp	r1, r5
 80108b8:	d903      	bls.n	80108c2 <_malloc_r+0x22>
 80108ba:	230c      	movs	r3, #12
 80108bc:	6033      	str	r3, [r6, #0]
 80108be:	2000      	movs	r0, #0
 80108c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108c2:	f000 fda3 	bl	801140c <__malloc_lock>
 80108c6:	4921      	ldr	r1, [pc, #132]	; (801094c <_malloc_r+0xac>)
 80108c8:	680a      	ldr	r2, [r1, #0]
 80108ca:	4614      	mov	r4, r2
 80108cc:	b99c      	cbnz	r4, 80108f6 <_malloc_r+0x56>
 80108ce:	4f20      	ldr	r7, [pc, #128]	; (8010950 <_malloc_r+0xb0>)
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	b923      	cbnz	r3, 80108de <_malloc_r+0x3e>
 80108d4:	4621      	mov	r1, r4
 80108d6:	4630      	mov	r0, r6
 80108d8:	f000 fb2a 	bl	8010f30 <_sbrk_r>
 80108dc:	6038      	str	r0, [r7, #0]
 80108de:	4629      	mov	r1, r5
 80108e0:	4630      	mov	r0, r6
 80108e2:	f000 fb25 	bl	8010f30 <_sbrk_r>
 80108e6:	1c43      	adds	r3, r0, #1
 80108e8:	d123      	bne.n	8010932 <_malloc_r+0x92>
 80108ea:	230c      	movs	r3, #12
 80108ec:	6033      	str	r3, [r6, #0]
 80108ee:	4630      	mov	r0, r6
 80108f0:	f000 fd92 	bl	8011418 <__malloc_unlock>
 80108f4:	e7e3      	b.n	80108be <_malloc_r+0x1e>
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	1b5b      	subs	r3, r3, r5
 80108fa:	d417      	bmi.n	801092c <_malloc_r+0x8c>
 80108fc:	2b0b      	cmp	r3, #11
 80108fe:	d903      	bls.n	8010908 <_malloc_r+0x68>
 8010900:	6023      	str	r3, [r4, #0]
 8010902:	441c      	add	r4, r3
 8010904:	6025      	str	r5, [r4, #0]
 8010906:	e004      	b.n	8010912 <_malloc_r+0x72>
 8010908:	6863      	ldr	r3, [r4, #4]
 801090a:	42a2      	cmp	r2, r4
 801090c:	bf0c      	ite	eq
 801090e:	600b      	streq	r3, [r1, #0]
 8010910:	6053      	strne	r3, [r2, #4]
 8010912:	4630      	mov	r0, r6
 8010914:	f000 fd80 	bl	8011418 <__malloc_unlock>
 8010918:	f104 000b 	add.w	r0, r4, #11
 801091c:	1d23      	adds	r3, r4, #4
 801091e:	f020 0007 	bic.w	r0, r0, #7
 8010922:	1ac2      	subs	r2, r0, r3
 8010924:	d0cc      	beq.n	80108c0 <_malloc_r+0x20>
 8010926:	1a1b      	subs	r3, r3, r0
 8010928:	50a3      	str	r3, [r4, r2]
 801092a:	e7c9      	b.n	80108c0 <_malloc_r+0x20>
 801092c:	4622      	mov	r2, r4
 801092e:	6864      	ldr	r4, [r4, #4]
 8010930:	e7cc      	b.n	80108cc <_malloc_r+0x2c>
 8010932:	1cc4      	adds	r4, r0, #3
 8010934:	f024 0403 	bic.w	r4, r4, #3
 8010938:	42a0      	cmp	r0, r4
 801093a:	d0e3      	beq.n	8010904 <_malloc_r+0x64>
 801093c:	1a21      	subs	r1, r4, r0
 801093e:	4630      	mov	r0, r6
 8010940:	f000 faf6 	bl	8010f30 <_sbrk_r>
 8010944:	3001      	adds	r0, #1
 8010946:	d1dd      	bne.n	8010904 <_malloc_r+0x64>
 8010948:	e7cf      	b.n	80108ea <_malloc_r+0x4a>
 801094a:	bf00      	nop
 801094c:	240003b4 	.word	0x240003b4
 8010950:	240003b8 	.word	0x240003b8

08010954 <__sfputc_r>:
 8010954:	6893      	ldr	r3, [r2, #8]
 8010956:	3b01      	subs	r3, #1
 8010958:	2b00      	cmp	r3, #0
 801095a:	b410      	push	{r4}
 801095c:	6093      	str	r3, [r2, #8]
 801095e:	da08      	bge.n	8010972 <__sfputc_r+0x1e>
 8010960:	6994      	ldr	r4, [r2, #24]
 8010962:	42a3      	cmp	r3, r4
 8010964:	db01      	blt.n	801096a <__sfputc_r+0x16>
 8010966:	290a      	cmp	r1, #10
 8010968:	d103      	bne.n	8010972 <__sfputc_r+0x1e>
 801096a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801096e:	f000 bb33 	b.w	8010fd8 <__swbuf_r>
 8010972:	6813      	ldr	r3, [r2, #0]
 8010974:	1c58      	adds	r0, r3, #1
 8010976:	6010      	str	r0, [r2, #0]
 8010978:	7019      	strb	r1, [r3, #0]
 801097a:	4608      	mov	r0, r1
 801097c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010980:	4770      	bx	lr

08010982 <__sfputs_r>:
 8010982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010984:	4606      	mov	r6, r0
 8010986:	460f      	mov	r7, r1
 8010988:	4614      	mov	r4, r2
 801098a:	18d5      	adds	r5, r2, r3
 801098c:	42ac      	cmp	r4, r5
 801098e:	d101      	bne.n	8010994 <__sfputs_r+0x12>
 8010990:	2000      	movs	r0, #0
 8010992:	e007      	b.n	80109a4 <__sfputs_r+0x22>
 8010994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010998:	463a      	mov	r2, r7
 801099a:	4630      	mov	r0, r6
 801099c:	f7ff ffda 	bl	8010954 <__sfputc_r>
 80109a0:	1c43      	adds	r3, r0, #1
 80109a2:	d1f3      	bne.n	801098c <__sfputs_r+0xa>
 80109a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109a8 <_vfiprintf_r>:
 80109a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ac:	460d      	mov	r5, r1
 80109ae:	b09d      	sub	sp, #116	; 0x74
 80109b0:	4614      	mov	r4, r2
 80109b2:	4698      	mov	r8, r3
 80109b4:	4606      	mov	r6, r0
 80109b6:	b118      	cbz	r0, 80109c0 <_vfiprintf_r+0x18>
 80109b8:	6983      	ldr	r3, [r0, #24]
 80109ba:	b90b      	cbnz	r3, 80109c0 <_vfiprintf_r+0x18>
 80109bc:	f7ff fed0 	bl	8010760 <__sinit>
 80109c0:	4b89      	ldr	r3, [pc, #548]	; (8010be8 <_vfiprintf_r+0x240>)
 80109c2:	429d      	cmp	r5, r3
 80109c4:	d11b      	bne.n	80109fe <_vfiprintf_r+0x56>
 80109c6:	6875      	ldr	r5, [r6, #4]
 80109c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109ca:	07d9      	lsls	r1, r3, #31
 80109cc:	d405      	bmi.n	80109da <_vfiprintf_r+0x32>
 80109ce:	89ab      	ldrh	r3, [r5, #12]
 80109d0:	059a      	lsls	r2, r3, #22
 80109d2:	d402      	bmi.n	80109da <_vfiprintf_r+0x32>
 80109d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109d6:	f7ff ff61 	bl	801089c <__retarget_lock_acquire_recursive>
 80109da:	89ab      	ldrh	r3, [r5, #12]
 80109dc:	071b      	lsls	r3, r3, #28
 80109de:	d501      	bpl.n	80109e4 <_vfiprintf_r+0x3c>
 80109e0:	692b      	ldr	r3, [r5, #16]
 80109e2:	b9eb      	cbnz	r3, 8010a20 <_vfiprintf_r+0x78>
 80109e4:	4629      	mov	r1, r5
 80109e6:	4630      	mov	r0, r6
 80109e8:	f000 fb5a 	bl	80110a0 <__swsetup_r>
 80109ec:	b1c0      	cbz	r0, 8010a20 <_vfiprintf_r+0x78>
 80109ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109f0:	07dc      	lsls	r4, r3, #31
 80109f2:	d50e      	bpl.n	8010a12 <_vfiprintf_r+0x6a>
 80109f4:	f04f 30ff 	mov.w	r0, #4294967295
 80109f8:	b01d      	add	sp, #116	; 0x74
 80109fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fe:	4b7b      	ldr	r3, [pc, #492]	; (8010bec <_vfiprintf_r+0x244>)
 8010a00:	429d      	cmp	r5, r3
 8010a02:	d101      	bne.n	8010a08 <_vfiprintf_r+0x60>
 8010a04:	68b5      	ldr	r5, [r6, #8]
 8010a06:	e7df      	b.n	80109c8 <_vfiprintf_r+0x20>
 8010a08:	4b79      	ldr	r3, [pc, #484]	; (8010bf0 <_vfiprintf_r+0x248>)
 8010a0a:	429d      	cmp	r5, r3
 8010a0c:	bf08      	it	eq
 8010a0e:	68f5      	ldreq	r5, [r6, #12]
 8010a10:	e7da      	b.n	80109c8 <_vfiprintf_r+0x20>
 8010a12:	89ab      	ldrh	r3, [r5, #12]
 8010a14:	0598      	lsls	r0, r3, #22
 8010a16:	d4ed      	bmi.n	80109f4 <_vfiprintf_r+0x4c>
 8010a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a1a:	f7ff ff40 	bl	801089e <__retarget_lock_release_recursive>
 8010a1e:	e7e9      	b.n	80109f4 <_vfiprintf_r+0x4c>
 8010a20:	2300      	movs	r3, #0
 8010a22:	9309      	str	r3, [sp, #36]	; 0x24
 8010a24:	2320      	movs	r3, #32
 8010a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a2e:	2330      	movs	r3, #48	; 0x30
 8010a30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010bf4 <_vfiprintf_r+0x24c>
 8010a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a38:	f04f 0901 	mov.w	r9, #1
 8010a3c:	4623      	mov	r3, r4
 8010a3e:	469a      	mov	sl, r3
 8010a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a44:	b10a      	cbz	r2, 8010a4a <_vfiprintf_r+0xa2>
 8010a46:	2a25      	cmp	r2, #37	; 0x25
 8010a48:	d1f9      	bne.n	8010a3e <_vfiprintf_r+0x96>
 8010a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a4e:	d00b      	beq.n	8010a68 <_vfiprintf_r+0xc0>
 8010a50:	465b      	mov	r3, fp
 8010a52:	4622      	mov	r2, r4
 8010a54:	4629      	mov	r1, r5
 8010a56:	4630      	mov	r0, r6
 8010a58:	f7ff ff93 	bl	8010982 <__sfputs_r>
 8010a5c:	3001      	adds	r0, #1
 8010a5e:	f000 80aa 	beq.w	8010bb6 <_vfiprintf_r+0x20e>
 8010a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a64:	445a      	add	r2, fp
 8010a66:	9209      	str	r2, [sp, #36]	; 0x24
 8010a68:	f89a 3000 	ldrb.w	r3, [sl]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 80a2 	beq.w	8010bb6 <_vfiprintf_r+0x20e>
 8010a72:	2300      	movs	r3, #0
 8010a74:	f04f 32ff 	mov.w	r2, #4294967295
 8010a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a7c:	f10a 0a01 	add.w	sl, sl, #1
 8010a80:	9304      	str	r3, [sp, #16]
 8010a82:	9307      	str	r3, [sp, #28]
 8010a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a88:	931a      	str	r3, [sp, #104]	; 0x68
 8010a8a:	4654      	mov	r4, sl
 8010a8c:	2205      	movs	r2, #5
 8010a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a92:	4858      	ldr	r0, [pc, #352]	; (8010bf4 <_vfiprintf_r+0x24c>)
 8010a94:	f7ef fc24 	bl	80002e0 <memchr>
 8010a98:	9a04      	ldr	r2, [sp, #16]
 8010a9a:	b9d8      	cbnz	r0, 8010ad4 <_vfiprintf_r+0x12c>
 8010a9c:	06d1      	lsls	r1, r2, #27
 8010a9e:	bf44      	itt	mi
 8010aa0:	2320      	movmi	r3, #32
 8010aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010aa6:	0713      	lsls	r3, r2, #28
 8010aa8:	bf44      	itt	mi
 8010aaa:	232b      	movmi	r3, #43	; 0x2b
 8010aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ab6:	d015      	beq.n	8010ae4 <_vfiprintf_r+0x13c>
 8010ab8:	9a07      	ldr	r2, [sp, #28]
 8010aba:	4654      	mov	r4, sl
 8010abc:	2000      	movs	r0, #0
 8010abe:	f04f 0c0a 	mov.w	ip, #10
 8010ac2:	4621      	mov	r1, r4
 8010ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ac8:	3b30      	subs	r3, #48	; 0x30
 8010aca:	2b09      	cmp	r3, #9
 8010acc:	d94e      	bls.n	8010b6c <_vfiprintf_r+0x1c4>
 8010ace:	b1b0      	cbz	r0, 8010afe <_vfiprintf_r+0x156>
 8010ad0:	9207      	str	r2, [sp, #28]
 8010ad2:	e014      	b.n	8010afe <_vfiprintf_r+0x156>
 8010ad4:	eba0 0308 	sub.w	r3, r0, r8
 8010ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8010adc:	4313      	orrs	r3, r2
 8010ade:	9304      	str	r3, [sp, #16]
 8010ae0:	46a2      	mov	sl, r4
 8010ae2:	e7d2      	b.n	8010a8a <_vfiprintf_r+0xe2>
 8010ae4:	9b03      	ldr	r3, [sp, #12]
 8010ae6:	1d19      	adds	r1, r3, #4
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	9103      	str	r1, [sp, #12]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	bfbb      	ittet	lt
 8010af0:	425b      	neglt	r3, r3
 8010af2:	f042 0202 	orrlt.w	r2, r2, #2
 8010af6:	9307      	strge	r3, [sp, #28]
 8010af8:	9307      	strlt	r3, [sp, #28]
 8010afa:	bfb8      	it	lt
 8010afc:	9204      	strlt	r2, [sp, #16]
 8010afe:	7823      	ldrb	r3, [r4, #0]
 8010b00:	2b2e      	cmp	r3, #46	; 0x2e
 8010b02:	d10c      	bne.n	8010b1e <_vfiprintf_r+0x176>
 8010b04:	7863      	ldrb	r3, [r4, #1]
 8010b06:	2b2a      	cmp	r3, #42	; 0x2a
 8010b08:	d135      	bne.n	8010b76 <_vfiprintf_r+0x1ce>
 8010b0a:	9b03      	ldr	r3, [sp, #12]
 8010b0c:	1d1a      	adds	r2, r3, #4
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	9203      	str	r2, [sp, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	bfb8      	it	lt
 8010b16:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b1a:	3402      	adds	r4, #2
 8010b1c:	9305      	str	r3, [sp, #20]
 8010b1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010c04 <_vfiprintf_r+0x25c>
 8010b22:	7821      	ldrb	r1, [r4, #0]
 8010b24:	2203      	movs	r2, #3
 8010b26:	4650      	mov	r0, sl
 8010b28:	f7ef fbda 	bl	80002e0 <memchr>
 8010b2c:	b140      	cbz	r0, 8010b40 <_vfiprintf_r+0x198>
 8010b2e:	2340      	movs	r3, #64	; 0x40
 8010b30:	eba0 000a 	sub.w	r0, r0, sl
 8010b34:	fa03 f000 	lsl.w	r0, r3, r0
 8010b38:	9b04      	ldr	r3, [sp, #16]
 8010b3a:	4303      	orrs	r3, r0
 8010b3c:	3401      	adds	r4, #1
 8010b3e:	9304      	str	r3, [sp, #16]
 8010b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b44:	482c      	ldr	r0, [pc, #176]	; (8010bf8 <_vfiprintf_r+0x250>)
 8010b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b4a:	2206      	movs	r2, #6
 8010b4c:	f7ef fbc8 	bl	80002e0 <memchr>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d03f      	beq.n	8010bd4 <_vfiprintf_r+0x22c>
 8010b54:	4b29      	ldr	r3, [pc, #164]	; (8010bfc <_vfiprintf_r+0x254>)
 8010b56:	bb1b      	cbnz	r3, 8010ba0 <_vfiprintf_r+0x1f8>
 8010b58:	9b03      	ldr	r3, [sp, #12]
 8010b5a:	3307      	adds	r3, #7
 8010b5c:	f023 0307 	bic.w	r3, r3, #7
 8010b60:	3308      	adds	r3, #8
 8010b62:	9303      	str	r3, [sp, #12]
 8010b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b66:	443b      	add	r3, r7
 8010b68:	9309      	str	r3, [sp, #36]	; 0x24
 8010b6a:	e767      	b.n	8010a3c <_vfiprintf_r+0x94>
 8010b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b70:	460c      	mov	r4, r1
 8010b72:	2001      	movs	r0, #1
 8010b74:	e7a5      	b.n	8010ac2 <_vfiprintf_r+0x11a>
 8010b76:	2300      	movs	r3, #0
 8010b78:	3401      	adds	r4, #1
 8010b7a:	9305      	str	r3, [sp, #20]
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	f04f 0c0a 	mov.w	ip, #10
 8010b82:	4620      	mov	r0, r4
 8010b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b88:	3a30      	subs	r2, #48	; 0x30
 8010b8a:	2a09      	cmp	r2, #9
 8010b8c:	d903      	bls.n	8010b96 <_vfiprintf_r+0x1ee>
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d0c5      	beq.n	8010b1e <_vfiprintf_r+0x176>
 8010b92:	9105      	str	r1, [sp, #20]
 8010b94:	e7c3      	b.n	8010b1e <_vfiprintf_r+0x176>
 8010b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e7f0      	b.n	8010b82 <_vfiprintf_r+0x1da>
 8010ba0:	ab03      	add	r3, sp, #12
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	462a      	mov	r2, r5
 8010ba6:	4b16      	ldr	r3, [pc, #88]	; (8010c00 <_vfiprintf_r+0x258>)
 8010ba8:	a904      	add	r1, sp, #16
 8010baa:	4630      	mov	r0, r6
 8010bac:	f3af 8000 	nop.w
 8010bb0:	4607      	mov	r7, r0
 8010bb2:	1c78      	adds	r0, r7, #1
 8010bb4:	d1d6      	bne.n	8010b64 <_vfiprintf_r+0x1bc>
 8010bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bb8:	07d9      	lsls	r1, r3, #31
 8010bba:	d405      	bmi.n	8010bc8 <_vfiprintf_r+0x220>
 8010bbc:	89ab      	ldrh	r3, [r5, #12]
 8010bbe:	059a      	lsls	r2, r3, #22
 8010bc0:	d402      	bmi.n	8010bc8 <_vfiprintf_r+0x220>
 8010bc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bc4:	f7ff fe6b 	bl	801089e <__retarget_lock_release_recursive>
 8010bc8:	89ab      	ldrh	r3, [r5, #12]
 8010bca:	065b      	lsls	r3, r3, #25
 8010bcc:	f53f af12 	bmi.w	80109f4 <_vfiprintf_r+0x4c>
 8010bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bd2:	e711      	b.n	80109f8 <_vfiprintf_r+0x50>
 8010bd4:	ab03      	add	r3, sp, #12
 8010bd6:	9300      	str	r3, [sp, #0]
 8010bd8:	462a      	mov	r2, r5
 8010bda:	4b09      	ldr	r3, [pc, #36]	; (8010c00 <_vfiprintf_r+0x258>)
 8010bdc:	a904      	add	r1, sp, #16
 8010bde:	4630      	mov	r0, r6
 8010be0:	f000 f880 	bl	8010ce4 <_printf_i>
 8010be4:	e7e4      	b.n	8010bb0 <_vfiprintf_r+0x208>
 8010be6:	bf00      	nop
 8010be8:	080116fc 	.word	0x080116fc
 8010bec:	0801171c 	.word	0x0801171c
 8010bf0:	080116dc 	.word	0x080116dc
 8010bf4:	0801173c 	.word	0x0801173c
 8010bf8:	08011746 	.word	0x08011746
 8010bfc:	00000000 	.word	0x00000000
 8010c00:	08010983 	.word	0x08010983
 8010c04:	08011742 	.word	0x08011742

08010c08 <_printf_common>:
 8010c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c0c:	4616      	mov	r6, r2
 8010c0e:	4699      	mov	r9, r3
 8010c10:	688a      	ldr	r2, [r1, #8]
 8010c12:	690b      	ldr	r3, [r1, #16]
 8010c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	bfb8      	it	lt
 8010c1c:	4613      	movlt	r3, r2
 8010c1e:	6033      	str	r3, [r6, #0]
 8010c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c24:	4607      	mov	r7, r0
 8010c26:	460c      	mov	r4, r1
 8010c28:	b10a      	cbz	r2, 8010c2e <_printf_common+0x26>
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	6033      	str	r3, [r6, #0]
 8010c2e:	6823      	ldr	r3, [r4, #0]
 8010c30:	0699      	lsls	r1, r3, #26
 8010c32:	bf42      	ittt	mi
 8010c34:	6833      	ldrmi	r3, [r6, #0]
 8010c36:	3302      	addmi	r3, #2
 8010c38:	6033      	strmi	r3, [r6, #0]
 8010c3a:	6825      	ldr	r5, [r4, #0]
 8010c3c:	f015 0506 	ands.w	r5, r5, #6
 8010c40:	d106      	bne.n	8010c50 <_printf_common+0x48>
 8010c42:	f104 0a19 	add.w	sl, r4, #25
 8010c46:	68e3      	ldr	r3, [r4, #12]
 8010c48:	6832      	ldr	r2, [r6, #0]
 8010c4a:	1a9b      	subs	r3, r3, r2
 8010c4c:	42ab      	cmp	r3, r5
 8010c4e:	dc26      	bgt.n	8010c9e <_printf_common+0x96>
 8010c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c54:	1e13      	subs	r3, r2, #0
 8010c56:	6822      	ldr	r2, [r4, #0]
 8010c58:	bf18      	it	ne
 8010c5a:	2301      	movne	r3, #1
 8010c5c:	0692      	lsls	r2, r2, #26
 8010c5e:	d42b      	bmi.n	8010cb8 <_printf_common+0xb0>
 8010c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c64:	4649      	mov	r1, r9
 8010c66:	4638      	mov	r0, r7
 8010c68:	47c0      	blx	r8
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	d01e      	beq.n	8010cac <_printf_common+0xa4>
 8010c6e:	6823      	ldr	r3, [r4, #0]
 8010c70:	68e5      	ldr	r5, [r4, #12]
 8010c72:	6832      	ldr	r2, [r6, #0]
 8010c74:	f003 0306 	and.w	r3, r3, #6
 8010c78:	2b04      	cmp	r3, #4
 8010c7a:	bf08      	it	eq
 8010c7c:	1aad      	subeq	r5, r5, r2
 8010c7e:	68a3      	ldr	r3, [r4, #8]
 8010c80:	6922      	ldr	r2, [r4, #16]
 8010c82:	bf0c      	ite	eq
 8010c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c88:	2500      	movne	r5, #0
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	bfc4      	itt	gt
 8010c8e:	1a9b      	subgt	r3, r3, r2
 8010c90:	18ed      	addgt	r5, r5, r3
 8010c92:	2600      	movs	r6, #0
 8010c94:	341a      	adds	r4, #26
 8010c96:	42b5      	cmp	r5, r6
 8010c98:	d11a      	bne.n	8010cd0 <_printf_common+0xc8>
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	e008      	b.n	8010cb0 <_printf_common+0xa8>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	4652      	mov	r2, sl
 8010ca2:	4649      	mov	r1, r9
 8010ca4:	4638      	mov	r0, r7
 8010ca6:	47c0      	blx	r8
 8010ca8:	3001      	adds	r0, #1
 8010caa:	d103      	bne.n	8010cb4 <_printf_common+0xac>
 8010cac:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cb4:	3501      	adds	r5, #1
 8010cb6:	e7c6      	b.n	8010c46 <_printf_common+0x3e>
 8010cb8:	18e1      	adds	r1, r4, r3
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	2030      	movs	r0, #48	; 0x30
 8010cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cc2:	4422      	add	r2, r4
 8010cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ccc:	3302      	adds	r3, #2
 8010cce:	e7c7      	b.n	8010c60 <_printf_common+0x58>
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	4622      	mov	r2, r4
 8010cd4:	4649      	mov	r1, r9
 8010cd6:	4638      	mov	r0, r7
 8010cd8:	47c0      	blx	r8
 8010cda:	3001      	adds	r0, #1
 8010cdc:	d0e6      	beq.n	8010cac <_printf_common+0xa4>
 8010cde:	3601      	adds	r6, #1
 8010ce0:	e7d9      	b.n	8010c96 <_printf_common+0x8e>
	...

08010ce4 <_printf_i>:
 8010ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ce8:	460c      	mov	r4, r1
 8010cea:	4691      	mov	r9, r2
 8010cec:	7e27      	ldrb	r7, [r4, #24]
 8010cee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010cf0:	2f78      	cmp	r7, #120	; 0x78
 8010cf2:	4680      	mov	r8, r0
 8010cf4:	469a      	mov	sl, r3
 8010cf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cfa:	d807      	bhi.n	8010d0c <_printf_i+0x28>
 8010cfc:	2f62      	cmp	r7, #98	; 0x62
 8010cfe:	d80a      	bhi.n	8010d16 <_printf_i+0x32>
 8010d00:	2f00      	cmp	r7, #0
 8010d02:	f000 80d8 	beq.w	8010eb6 <_printf_i+0x1d2>
 8010d06:	2f58      	cmp	r7, #88	; 0x58
 8010d08:	f000 80a3 	beq.w	8010e52 <_printf_i+0x16e>
 8010d0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d14:	e03a      	b.n	8010d8c <_printf_i+0xa8>
 8010d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d1a:	2b15      	cmp	r3, #21
 8010d1c:	d8f6      	bhi.n	8010d0c <_printf_i+0x28>
 8010d1e:	a001      	add	r0, pc, #4	; (adr r0, 8010d24 <_printf_i+0x40>)
 8010d20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d24:	08010d7d 	.word	0x08010d7d
 8010d28:	08010d91 	.word	0x08010d91
 8010d2c:	08010d0d 	.word	0x08010d0d
 8010d30:	08010d0d 	.word	0x08010d0d
 8010d34:	08010d0d 	.word	0x08010d0d
 8010d38:	08010d0d 	.word	0x08010d0d
 8010d3c:	08010d91 	.word	0x08010d91
 8010d40:	08010d0d 	.word	0x08010d0d
 8010d44:	08010d0d 	.word	0x08010d0d
 8010d48:	08010d0d 	.word	0x08010d0d
 8010d4c:	08010d0d 	.word	0x08010d0d
 8010d50:	08010e9d 	.word	0x08010e9d
 8010d54:	08010dc1 	.word	0x08010dc1
 8010d58:	08010e7f 	.word	0x08010e7f
 8010d5c:	08010d0d 	.word	0x08010d0d
 8010d60:	08010d0d 	.word	0x08010d0d
 8010d64:	08010ebf 	.word	0x08010ebf
 8010d68:	08010d0d 	.word	0x08010d0d
 8010d6c:	08010dc1 	.word	0x08010dc1
 8010d70:	08010d0d 	.word	0x08010d0d
 8010d74:	08010d0d 	.word	0x08010d0d
 8010d78:	08010e87 	.word	0x08010e87
 8010d7c:	680b      	ldr	r3, [r1, #0]
 8010d7e:	1d1a      	adds	r2, r3, #4
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	600a      	str	r2, [r1, #0]
 8010d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e0a3      	b.n	8010ed8 <_printf_i+0x1f4>
 8010d90:	6825      	ldr	r5, [r4, #0]
 8010d92:	6808      	ldr	r0, [r1, #0]
 8010d94:	062e      	lsls	r6, r5, #24
 8010d96:	f100 0304 	add.w	r3, r0, #4
 8010d9a:	d50a      	bpl.n	8010db2 <_printf_i+0xce>
 8010d9c:	6805      	ldr	r5, [r0, #0]
 8010d9e:	600b      	str	r3, [r1, #0]
 8010da0:	2d00      	cmp	r5, #0
 8010da2:	da03      	bge.n	8010dac <_printf_i+0xc8>
 8010da4:	232d      	movs	r3, #45	; 0x2d
 8010da6:	426d      	negs	r5, r5
 8010da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010dac:	485e      	ldr	r0, [pc, #376]	; (8010f28 <_printf_i+0x244>)
 8010dae:	230a      	movs	r3, #10
 8010db0:	e019      	b.n	8010de6 <_printf_i+0x102>
 8010db2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010db6:	6805      	ldr	r5, [r0, #0]
 8010db8:	600b      	str	r3, [r1, #0]
 8010dba:	bf18      	it	ne
 8010dbc:	b22d      	sxthne	r5, r5
 8010dbe:	e7ef      	b.n	8010da0 <_printf_i+0xbc>
 8010dc0:	680b      	ldr	r3, [r1, #0]
 8010dc2:	6825      	ldr	r5, [r4, #0]
 8010dc4:	1d18      	adds	r0, r3, #4
 8010dc6:	6008      	str	r0, [r1, #0]
 8010dc8:	0628      	lsls	r0, r5, #24
 8010dca:	d501      	bpl.n	8010dd0 <_printf_i+0xec>
 8010dcc:	681d      	ldr	r5, [r3, #0]
 8010dce:	e002      	b.n	8010dd6 <_printf_i+0xf2>
 8010dd0:	0669      	lsls	r1, r5, #25
 8010dd2:	d5fb      	bpl.n	8010dcc <_printf_i+0xe8>
 8010dd4:	881d      	ldrh	r5, [r3, #0]
 8010dd6:	4854      	ldr	r0, [pc, #336]	; (8010f28 <_printf_i+0x244>)
 8010dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8010dda:	bf0c      	ite	eq
 8010ddc:	2308      	moveq	r3, #8
 8010dde:	230a      	movne	r3, #10
 8010de0:	2100      	movs	r1, #0
 8010de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010de6:	6866      	ldr	r6, [r4, #4]
 8010de8:	60a6      	str	r6, [r4, #8]
 8010dea:	2e00      	cmp	r6, #0
 8010dec:	bfa2      	ittt	ge
 8010dee:	6821      	ldrge	r1, [r4, #0]
 8010df0:	f021 0104 	bicge.w	r1, r1, #4
 8010df4:	6021      	strge	r1, [r4, #0]
 8010df6:	b90d      	cbnz	r5, 8010dfc <_printf_i+0x118>
 8010df8:	2e00      	cmp	r6, #0
 8010dfa:	d04d      	beq.n	8010e98 <_printf_i+0x1b4>
 8010dfc:	4616      	mov	r6, r2
 8010dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e02:	fb03 5711 	mls	r7, r3, r1, r5
 8010e06:	5dc7      	ldrb	r7, [r0, r7]
 8010e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e0c:	462f      	mov	r7, r5
 8010e0e:	42bb      	cmp	r3, r7
 8010e10:	460d      	mov	r5, r1
 8010e12:	d9f4      	bls.n	8010dfe <_printf_i+0x11a>
 8010e14:	2b08      	cmp	r3, #8
 8010e16:	d10b      	bne.n	8010e30 <_printf_i+0x14c>
 8010e18:	6823      	ldr	r3, [r4, #0]
 8010e1a:	07df      	lsls	r7, r3, #31
 8010e1c:	d508      	bpl.n	8010e30 <_printf_i+0x14c>
 8010e1e:	6923      	ldr	r3, [r4, #16]
 8010e20:	6861      	ldr	r1, [r4, #4]
 8010e22:	4299      	cmp	r1, r3
 8010e24:	bfde      	ittt	le
 8010e26:	2330      	movle	r3, #48	; 0x30
 8010e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e30:	1b92      	subs	r2, r2, r6
 8010e32:	6122      	str	r2, [r4, #16]
 8010e34:	f8cd a000 	str.w	sl, [sp]
 8010e38:	464b      	mov	r3, r9
 8010e3a:	aa03      	add	r2, sp, #12
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	4640      	mov	r0, r8
 8010e40:	f7ff fee2 	bl	8010c08 <_printf_common>
 8010e44:	3001      	adds	r0, #1
 8010e46:	d14c      	bne.n	8010ee2 <_printf_i+0x1fe>
 8010e48:	f04f 30ff 	mov.w	r0, #4294967295
 8010e4c:	b004      	add	sp, #16
 8010e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e52:	4835      	ldr	r0, [pc, #212]	; (8010f28 <_printf_i+0x244>)
 8010e54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010e58:	6823      	ldr	r3, [r4, #0]
 8010e5a:	680e      	ldr	r6, [r1, #0]
 8010e5c:	061f      	lsls	r7, r3, #24
 8010e5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010e62:	600e      	str	r6, [r1, #0]
 8010e64:	d514      	bpl.n	8010e90 <_printf_i+0x1ac>
 8010e66:	07d9      	lsls	r1, r3, #31
 8010e68:	bf44      	itt	mi
 8010e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8010e6e:	6023      	strmi	r3, [r4, #0]
 8010e70:	b91d      	cbnz	r5, 8010e7a <_printf_i+0x196>
 8010e72:	6823      	ldr	r3, [r4, #0]
 8010e74:	f023 0320 	bic.w	r3, r3, #32
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	2310      	movs	r3, #16
 8010e7c:	e7b0      	b.n	8010de0 <_printf_i+0xfc>
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	f043 0320 	orr.w	r3, r3, #32
 8010e84:	6023      	str	r3, [r4, #0]
 8010e86:	2378      	movs	r3, #120	; 0x78
 8010e88:	4828      	ldr	r0, [pc, #160]	; (8010f2c <_printf_i+0x248>)
 8010e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e8e:	e7e3      	b.n	8010e58 <_printf_i+0x174>
 8010e90:	065e      	lsls	r6, r3, #25
 8010e92:	bf48      	it	mi
 8010e94:	b2ad      	uxthmi	r5, r5
 8010e96:	e7e6      	b.n	8010e66 <_printf_i+0x182>
 8010e98:	4616      	mov	r6, r2
 8010e9a:	e7bb      	b.n	8010e14 <_printf_i+0x130>
 8010e9c:	680b      	ldr	r3, [r1, #0]
 8010e9e:	6826      	ldr	r6, [r4, #0]
 8010ea0:	6960      	ldr	r0, [r4, #20]
 8010ea2:	1d1d      	adds	r5, r3, #4
 8010ea4:	600d      	str	r5, [r1, #0]
 8010ea6:	0635      	lsls	r5, r6, #24
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	d501      	bpl.n	8010eb0 <_printf_i+0x1cc>
 8010eac:	6018      	str	r0, [r3, #0]
 8010eae:	e002      	b.n	8010eb6 <_printf_i+0x1d2>
 8010eb0:	0671      	lsls	r1, r6, #25
 8010eb2:	d5fb      	bpl.n	8010eac <_printf_i+0x1c8>
 8010eb4:	8018      	strh	r0, [r3, #0]
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	6123      	str	r3, [r4, #16]
 8010eba:	4616      	mov	r6, r2
 8010ebc:	e7ba      	b.n	8010e34 <_printf_i+0x150>
 8010ebe:	680b      	ldr	r3, [r1, #0]
 8010ec0:	1d1a      	adds	r2, r3, #4
 8010ec2:	600a      	str	r2, [r1, #0]
 8010ec4:	681e      	ldr	r6, [r3, #0]
 8010ec6:	6862      	ldr	r2, [r4, #4]
 8010ec8:	2100      	movs	r1, #0
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7ef fa08 	bl	80002e0 <memchr>
 8010ed0:	b108      	cbz	r0, 8010ed6 <_printf_i+0x1f2>
 8010ed2:	1b80      	subs	r0, r0, r6
 8010ed4:	6060      	str	r0, [r4, #4]
 8010ed6:	6863      	ldr	r3, [r4, #4]
 8010ed8:	6123      	str	r3, [r4, #16]
 8010eda:	2300      	movs	r3, #0
 8010edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ee0:	e7a8      	b.n	8010e34 <_printf_i+0x150>
 8010ee2:	6923      	ldr	r3, [r4, #16]
 8010ee4:	4632      	mov	r2, r6
 8010ee6:	4649      	mov	r1, r9
 8010ee8:	4640      	mov	r0, r8
 8010eea:	47d0      	blx	sl
 8010eec:	3001      	adds	r0, #1
 8010eee:	d0ab      	beq.n	8010e48 <_printf_i+0x164>
 8010ef0:	6823      	ldr	r3, [r4, #0]
 8010ef2:	079b      	lsls	r3, r3, #30
 8010ef4:	d413      	bmi.n	8010f1e <_printf_i+0x23a>
 8010ef6:	68e0      	ldr	r0, [r4, #12]
 8010ef8:	9b03      	ldr	r3, [sp, #12]
 8010efa:	4298      	cmp	r0, r3
 8010efc:	bfb8      	it	lt
 8010efe:	4618      	movlt	r0, r3
 8010f00:	e7a4      	b.n	8010e4c <_printf_i+0x168>
 8010f02:	2301      	movs	r3, #1
 8010f04:	4632      	mov	r2, r6
 8010f06:	4649      	mov	r1, r9
 8010f08:	4640      	mov	r0, r8
 8010f0a:	47d0      	blx	sl
 8010f0c:	3001      	adds	r0, #1
 8010f0e:	d09b      	beq.n	8010e48 <_printf_i+0x164>
 8010f10:	3501      	adds	r5, #1
 8010f12:	68e3      	ldr	r3, [r4, #12]
 8010f14:	9903      	ldr	r1, [sp, #12]
 8010f16:	1a5b      	subs	r3, r3, r1
 8010f18:	42ab      	cmp	r3, r5
 8010f1a:	dcf2      	bgt.n	8010f02 <_printf_i+0x21e>
 8010f1c:	e7eb      	b.n	8010ef6 <_printf_i+0x212>
 8010f1e:	2500      	movs	r5, #0
 8010f20:	f104 0619 	add.w	r6, r4, #25
 8010f24:	e7f5      	b.n	8010f12 <_printf_i+0x22e>
 8010f26:	bf00      	nop
 8010f28:	0801174d 	.word	0x0801174d
 8010f2c:	0801175e 	.word	0x0801175e

08010f30 <_sbrk_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	4d06      	ldr	r5, [pc, #24]	; (8010f4c <_sbrk_r+0x1c>)
 8010f34:	2300      	movs	r3, #0
 8010f36:	4604      	mov	r4, r0
 8010f38:	4608      	mov	r0, r1
 8010f3a:	602b      	str	r3, [r5, #0]
 8010f3c:	f7f0 fe10 	bl	8001b60 <_sbrk>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	d102      	bne.n	8010f4a <_sbrk_r+0x1a>
 8010f44:	682b      	ldr	r3, [r5, #0]
 8010f46:	b103      	cbz	r3, 8010f4a <_sbrk_r+0x1a>
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	2400221c 	.word	0x2400221c

08010f50 <__sread>:
 8010f50:	b510      	push	{r4, lr}
 8010f52:	460c      	mov	r4, r1
 8010f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f58:	f000 fab4 	bl	80114c4 <_read_r>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	bfab      	itete	ge
 8010f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f62:	89a3      	ldrhlt	r3, [r4, #12]
 8010f64:	181b      	addge	r3, r3, r0
 8010f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f6a:	bfac      	ite	ge
 8010f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f6e:	81a3      	strhlt	r3, [r4, #12]
 8010f70:	bd10      	pop	{r4, pc}

08010f72 <__swrite>:
 8010f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f76:	461f      	mov	r7, r3
 8010f78:	898b      	ldrh	r3, [r1, #12]
 8010f7a:	05db      	lsls	r3, r3, #23
 8010f7c:	4605      	mov	r5, r0
 8010f7e:	460c      	mov	r4, r1
 8010f80:	4616      	mov	r6, r2
 8010f82:	d505      	bpl.n	8010f90 <__swrite+0x1e>
 8010f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f88:	2302      	movs	r3, #2
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f000 f9c8 	bl	8011320 <_lseek_r>
 8010f90:	89a3      	ldrh	r3, [r4, #12]
 8010f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f9a:	81a3      	strh	r3, [r4, #12]
 8010f9c:	4632      	mov	r2, r6
 8010f9e:	463b      	mov	r3, r7
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa6:	f000 b869 	b.w	801107c <_write_r>

08010faa <__sseek>:
 8010faa:	b510      	push	{r4, lr}
 8010fac:	460c      	mov	r4, r1
 8010fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fb2:	f000 f9b5 	bl	8011320 <_lseek_r>
 8010fb6:	1c43      	adds	r3, r0, #1
 8010fb8:	89a3      	ldrh	r3, [r4, #12]
 8010fba:	bf15      	itete	ne
 8010fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010fc6:	81a3      	strheq	r3, [r4, #12]
 8010fc8:	bf18      	it	ne
 8010fca:	81a3      	strhne	r3, [r4, #12]
 8010fcc:	bd10      	pop	{r4, pc}

08010fce <__sclose>:
 8010fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fd2:	f000 b8d3 	b.w	801117c <_close_r>
	...

08010fd8 <__swbuf_r>:
 8010fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fda:	460e      	mov	r6, r1
 8010fdc:	4614      	mov	r4, r2
 8010fde:	4605      	mov	r5, r0
 8010fe0:	b118      	cbz	r0, 8010fea <__swbuf_r+0x12>
 8010fe2:	6983      	ldr	r3, [r0, #24]
 8010fe4:	b90b      	cbnz	r3, 8010fea <__swbuf_r+0x12>
 8010fe6:	f7ff fbbb 	bl	8010760 <__sinit>
 8010fea:	4b21      	ldr	r3, [pc, #132]	; (8011070 <__swbuf_r+0x98>)
 8010fec:	429c      	cmp	r4, r3
 8010fee:	d12b      	bne.n	8011048 <__swbuf_r+0x70>
 8010ff0:	686c      	ldr	r4, [r5, #4]
 8010ff2:	69a3      	ldr	r3, [r4, #24]
 8010ff4:	60a3      	str	r3, [r4, #8]
 8010ff6:	89a3      	ldrh	r3, [r4, #12]
 8010ff8:	071a      	lsls	r2, r3, #28
 8010ffa:	d52f      	bpl.n	801105c <__swbuf_r+0x84>
 8010ffc:	6923      	ldr	r3, [r4, #16]
 8010ffe:	b36b      	cbz	r3, 801105c <__swbuf_r+0x84>
 8011000:	6923      	ldr	r3, [r4, #16]
 8011002:	6820      	ldr	r0, [r4, #0]
 8011004:	1ac0      	subs	r0, r0, r3
 8011006:	6963      	ldr	r3, [r4, #20]
 8011008:	b2f6      	uxtb	r6, r6
 801100a:	4283      	cmp	r3, r0
 801100c:	4637      	mov	r7, r6
 801100e:	dc04      	bgt.n	801101a <__swbuf_r+0x42>
 8011010:	4621      	mov	r1, r4
 8011012:	4628      	mov	r0, r5
 8011014:	f000 f948 	bl	80112a8 <_fflush_r>
 8011018:	bb30      	cbnz	r0, 8011068 <__swbuf_r+0x90>
 801101a:	68a3      	ldr	r3, [r4, #8]
 801101c:	3b01      	subs	r3, #1
 801101e:	60a3      	str	r3, [r4, #8]
 8011020:	6823      	ldr	r3, [r4, #0]
 8011022:	1c5a      	adds	r2, r3, #1
 8011024:	6022      	str	r2, [r4, #0]
 8011026:	701e      	strb	r6, [r3, #0]
 8011028:	6963      	ldr	r3, [r4, #20]
 801102a:	3001      	adds	r0, #1
 801102c:	4283      	cmp	r3, r0
 801102e:	d004      	beq.n	801103a <__swbuf_r+0x62>
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	07db      	lsls	r3, r3, #31
 8011034:	d506      	bpl.n	8011044 <__swbuf_r+0x6c>
 8011036:	2e0a      	cmp	r6, #10
 8011038:	d104      	bne.n	8011044 <__swbuf_r+0x6c>
 801103a:	4621      	mov	r1, r4
 801103c:	4628      	mov	r0, r5
 801103e:	f000 f933 	bl	80112a8 <_fflush_r>
 8011042:	b988      	cbnz	r0, 8011068 <__swbuf_r+0x90>
 8011044:	4638      	mov	r0, r7
 8011046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011048:	4b0a      	ldr	r3, [pc, #40]	; (8011074 <__swbuf_r+0x9c>)
 801104a:	429c      	cmp	r4, r3
 801104c:	d101      	bne.n	8011052 <__swbuf_r+0x7a>
 801104e:	68ac      	ldr	r4, [r5, #8]
 8011050:	e7cf      	b.n	8010ff2 <__swbuf_r+0x1a>
 8011052:	4b09      	ldr	r3, [pc, #36]	; (8011078 <__swbuf_r+0xa0>)
 8011054:	429c      	cmp	r4, r3
 8011056:	bf08      	it	eq
 8011058:	68ec      	ldreq	r4, [r5, #12]
 801105a:	e7ca      	b.n	8010ff2 <__swbuf_r+0x1a>
 801105c:	4621      	mov	r1, r4
 801105e:	4628      	mov	r0, r5
 8011060:	f000 f81e 	bl	80110a0 <__swsetup_r>
 8011064:	2800      	cmp	r0, #0
 8011066:	d0cb      	beq.n	8011000 <__swbuf_r+0x28>
 8011068:	f04f 37ff 	mov.w	r7, #4294967295
 801106c:	e7ea      	b.n	8011044 <__swbuf_r+0x6c>
 801106e:	bf00      	nop
 8011070:	080116fc 	.word	0x080116fc
 8011074:	0801171c 	.word	0x0801171c
 8011078:	080116dc 	.word	0x080116dc

0801107c <_write_r>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	4d07      	ldr	r5, [pc, #28]	; (801109c <_write_r+0x20>)
 8011080:	4604      	mov	r4, r0
 8011082:	4608      	mov	r0, r1
 8011084:	4611      	mov	r1, r2
 8011086:	2200      	movs	r2, #0
 8011088:	602a      	str	r2, [r5, #0]
 801108a:	461a      	mov	r2, r3
 801108c:	f7f0 fd17 	bl	8001abe <_write>
 8011090:	1c43      	adds	r3, r0, #1
 8011092:	d102      	bne.n	801109a <_write_r+0x1e>
 8011094:	682b      	ldr	r3, [r5, #0]
 8011096:	b103      	cbz	r3, 801109a <_write_r+0x1e>
 8011098:	6023      	str	r3, [r4, #0]
 801109a:	bd38      	pop	{r3, r4, r5, pc}
 801109c:	2400221c 	.word	0x2400221c

080110a0 <__swsetup_r>:
 80110a0:	4b32      	ldr	r3, [pc, #200]	; (801116c <__swsetup_r+0xcc>)
 80110a2:	b570      	push	{r4, r5, r6, lr}
 80110a4:	681d      	ldr	r5, [r3, #0]
 80110a6:	4606      	mov	r6, r0
 80110a8:	460c      	mov	r4, r1
 80110aa:	b125      	cbz	r5, 80110b6 <__swsetup_r+0x16>
 80110ac:	69ab      	ldr	r3, [r5, #24]
 80110ae:	b913      	cbnz	r3, 80110b6 <__swsetup_r+0x16>
 80110b0:	4628      	mov	r0, r5
 80110b2:	f7ff fb55 	bl	8010760 <__sinit>
 80110b6:	4b2e      	ldr	r3, [pc, #184]	; (8011170 <__swsetup_r+0xd0>)
 80110b8:	429c      	cmp	r4, r3
 80110ba:	d10f      	bne.n	80110dc <__swsetup_r+0x3c>
 80110bc:	686c      	ldr	r4, [r5, #4]
 80110be:	89a3      	ldrh	r3, [r4, #12]
 80110c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110c4:	0719      	lsls	r1, r3, #28
 80110c6:	d42c      	bmi.n	8011122 <__swsetup_r+0x82>
 80110c8:	06dd      	lsls	r5, r3, #27
 80110ca:	d411      	bmi.n	80110f0 <__swsetup_r+0x50>
 80110cc:	2309      	movs	r3, #9
 80110ce:	6033      	str	r3, [r6, #0]
 80110d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110d4:	81a3      	strh	r3, [r4, #12]
 80110d6:	f04f 30ff 	mov.w	r0, #4294967295
 80110da:	e03e      	b.n	801115a <__swsetup_r+0xba>
 80110dc:	4b25      	ldr	r3, [pc, #148]	; (8011174 <__swsetup_r+0xd4>)
 80110de:	429c      	cmp	r4, r3
 80110e0:	d101      	bne.n	80110e6 <__swsetup_r+0x46>
 80110e2:	68ac      	ldr	r4, [r5, #8]
 80110e4:	e7eb      	b.n	80110be <__swsetup_r+0x1e>
 80110e6:	4b24      	ldr	r3, [pc, #144]	; (8011178 <__swsetup_r+0xd8>)
 80110e8:	429c      	cmp	r4, r3
 80110ea:	bf08      	it	eq
 80110ec:	68ec      	ldreq	r4, [r5, #12]
 80110ee:	e7e6      	b.n	80110be <__swsetup_r+0x1e>
 80110f0:	0758      	lsls	r0, r3, #29
 80110f2:	d512      	bpl.n	801111a <__swsetup_r+0x7a>
 80110f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110f6:	b141      	cbz	r1, 801110a <__swsetup_r+0x6a>
 80110f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110fc:	4299      	cmp	r1, r3
 80110fe:	d002      	beq.n	8011106 <__swsetup_r+0x66>
 8011100:	4630      	mov	r0, r6
 8011102:	f000 f98f 	bl	8011424 <_free_r>
 8011106:	2300      	movs	r3, #0
 8011108:	6363      	str	r3, [r4, #52]	; 0x34
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011110:	81a3      	strh	r3, [r4, #12]
 8011112:	2300      	movs	r3, #0
 8011114:	6063      	str	r3, [r4, #4]
 8011116:	6923      	ldr	r3, [r4, #16]
 8011118:	6023      	str	r3, [r4, #0]
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f043 0308 	orr.w	r3, r3, #8
 8011120:	81a3      	strh	r3, [r4, #12]
 8011122:	6923      	ldr	r3, [r4, #16]
 8011124:	b94b      	cbnz	r3, 801113a <__swsetup_r+0x9a>
 8011126:	89a3      	ldrh	r3, [r4, #12]
 8011128:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801112c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011130:	d003      	beq.n	801113a <__swsetup_r+0x9a>
 8011132:	4621      	mov	r1, r4
 8011134:	4630      	mov	r0, r6
 8011136:	f000 f929 	bl	801138c <__smakebuf_r>
 801113a:	89a0      	ldrh	r0, [r4, #12]
 801113c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011140:	f010 0301 	ands.w	r3, r0, #1
 8011144:	d00a      	beq.n	801115c <__swsetup_r+0xbc>
 8011146:	2300      	movs	r3, #0
 8011148:	60a3      	str	r3, [r4, #8]
 801114a:	6963      	ldr	r3, [r4, #20]
 801114c:	425b      	negs	r3, r3
 801114e:	61a3      	str	r3, [r4, #24]
 8011150:	6923      	ldr	r3, [r4, #16]
 8011152:	b943      	cbnz	r3, 8011166 <__swsetup_r+0xc6>
 8011154:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011158:	d1ba      	bne.n	80110d0 <__swsetup_r+0x30>
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	0781      	lsls	r1, r0, #30
 801115e:	bf58      	it	pl
 8011160:	6963      	ldrpl	r3, [r4, #20]
 8011162:	60a3      	str	r3, [r4, #8]
 8011164:	e7f4      	b.n	8011150 <__swsetup_r+0xb0>
 8011166:	2000      	movs	r0, #0
 8011168:	e7f7      	b.n	801115a <__swsetup_r+0xba>
 801116a:	bf00      	nop
 801116c:	24000104 	.word	0x24000104
 8011170:	080116fc 	.word	0x080116fc
 8011174:	0801171c 	.word	0x0801171c
 8011178:	080116dc 	.word	0x080116dc

0801117c <_close_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	4d06      	ldr	r5, [pc, #24]	; (8011198 <_close_r+0x1c>)
 8011180:	2300      	movs	r3, #0
 8011182:	4604      	mov	r4, r0
 8011184:	4608      	mov	r0, r1
 8011186:	602b      	str	r3, [r5, #0]
 8011188:	f7f0 fcb5 	bl	8001af6 <_close>
 801118c:	1c43      	adds	r3, r0, #1
 801118e:	d102      	bne.n	8011196 <_close_r+0x1a>
 8011190:	682b      	ldr	r3, [r5, #0]
 8011192:	b103      	cbz	r3, 8011196 <_close_r+0x1a>
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	bd38      	pop	{r3, r4, r5, pc}
 8011198:	2400221c 	.word	0x2400221c

0801119c <__sflush_r>:
 801119c:	898a      	ldrh	r2, [r1, #12]
 801119e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a2:	4605      	mov	r5, r0
 80111a4:	0710      	lsls	r0, r2, #28
 80111a6:	460c      	mov	r4, r1
 80111a8:	d458      	bmi.n	801125c <__sflush_r+0xc0>
 80111aa:	684b      	ldr	r3, [r1, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	dc05      	bgt.n	80111bc <__sflush_r+0x20>
 80111b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	dc02      	bgt.n	80111bc <__sflush_r+0x20>
 80111b6:	2000      	movs	r0, #0
 80111b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111be:	2e00      	cmp	r6, #0
 80111c0:	d0f9      	beq.n	80111b6 <__sflush_r+0x1a>
 80111c2:	2300      	movs	r3, #0
 80111c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111c8:	682f      	ldr	r7, [r5, #0]
 80111ca:	602b      	str	r3, [r5, #0]
 80111cc:	d032      	beq.n	8011234 <__sflush_r+0x98>
 80111ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111d0:	89a3      	ldrh	r3, [r4, #12]
 80111d2:	075a      	lsls	r2, r3, #29
 80111d4:	d505      	bpl.n	80111e2 <__sflush_r+0x46>
 80111d6:	6863      	ldr	r3, [r4, #4]
 80111d8:	1ac0      	subs	r0, r0, r3
 80111da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111dc:	b10b      	cbz	r3, 80111e2 <__sflush_r+0x46>
 80111de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111e0:	1ac0      	subs	r0, r0, r3
 80111e2:	2300      	movs	r3, #0
 80111e4:	4602      	mov	r2, r0
 80111e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111e8:	6a21      	ldr	r1, [r4, #32]
 80111ea:	4628      	mov	r0, r5
 80111ec:	47b0      	blx	r6
 80111ee:	1c43      	adds	r3, r0, #1
 80111f0:	89a3      	ldrh	r3, [r4, #12]
 80111f2:	d106      	bne.n	8011202 <__sflush_r+0x66>
 80111f4:	6829      	ldr	r1, [r5, #0]
 80111f6:	291d      	cmp	r1, #29
 80111f8:	d82c      	bhi.n	8011254 <__sflush_r+0xb8>
 80111fa:	4a2a      	ldr	r2, [pc, #168]	; (80112a4 <__sflush_r+0x108>)
 80111fc:	40ca      	lsrs	r2, r1
 80111fe:	07d6      	lsls	r6, r2, #31
 8011200:	d528      	bpl.n	8011254 <__sflush_r+0xb8>
 8011202:	2200      	movs	r2, #0
 8011204:	6062      	str	r2, [r4, #4]
 8011206:	04d9      	lsls	r1, r3, #19
 8011208:	6922      	ldr	r2, [r4, #16]
 801120a:	6022      	str	r2, [r4, #0]
 801120c:	d504      	bpl.n	8011218 <__sflush_r+0x7c>
 801120e:	1c42      	adds	r2, r0, #1
 8011210:	d101      	bne.n	8011216 <__sflush_r+0x7a>
 8011212:	682b      	ldr	r3, [r5, #0]
 8011214:	b903      	cbnz	r3, 8011218 <__sflush_r+0x7c>
 8011216:	6560      	str	r0, [r4, #84]	; 0x54
 8011218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801121a:	602f      	str	r7, [r5, #0]
 801121c:	2900      	cmp	r1, #0
 801121e:	d0ca      	beq.n	80111b6 <__sflush_r+0x1a>
 8011220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011224:	4299      	cmp	r1, r3
 8011226:	d002      	beq.n	801122e <__sflush_r+0x92>
 8011228:	4628      	mov	r0, r5
 801122a:	f000 f8fb 	bl	8011424 <_free_r>
 801122e:	2000      	movs	r0, #0
 8011230:	6360      	str	r0, [r4, #52]	; 0x34
 8011232:	e7c1      	b.n	80111b8 <__sflush_r+0x1c>
 8011234:	6a21      	ldr	r1, [r4, #32]
 8011236:	2301      	movs	r3, #1
 8011238:	4628      	mov	r0, r5
 801123a:	47b0      	blx	r6
 801123c:	1c41      	adds	r1, r0, #1
 801123e:	d1c7      	bne.n	80111d0 <__sflush_r+0x34>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0c4      	beq.n	80111d0 <__sflush_r+0x34>
 8011246:	2b1d      	cmp	r3, #29
 8011248:	d001      	beq.n	801124e <__sflush_r+0xb2>
 801124a:	2b16      	cmp	r3, #22
 801124c:	d101      	bne.n	8011252 <__sflush_r+0xb6>
 801124e:	602f      	str	r7, [r5, #0]
 8011250:	e7b1      	b.n	80111b6 <__sflush_r+0x1a>
 8011252:	89a3      	ldrh	r3, [r4, #12]
 8011254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011258:	81a3      	strh	r3, [r4, #12]
 801125a:	e7ad      	b.n	80111b8 <__sflush_r+0x1c>
 801125c:	690f      	ldr	r7, [r1, #16]
 801125e:	2f00      	cmp	r7, #0
 8011260:	d0a9      	beq.n	80111b6 <__sflush_r+0x1a>
 8011262:	0793      	lsls	r3, r2, #30
 8011264:	680e      	ldr	r6, [r1, #0]
 8011266:	bf08      	it	eq
 8011268:	694b      	ldreq	r3, [r1, #20]
 801126a:	600f      	str	r7, [r1, #0]
 801126c:	bf18      	it	ne
 801126e:	2300      	movne	r3, #0
 8011270:	eba6 0807 	sub.w	r8, r6, r7
 8011274:	608b      	str	r3, [r1, #8]
 8011276:	f1b8 0f00 	cmp.w	r8, #0
 801127a:	dd9c      	ble.n	80111b6 <__sflush_r+0x1a>
 801127c:	6a21      	ldr	r1, [r4, #32]
 801127e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011280:	4643      	mov	r3, r8
 8011282:	463a      	mov	r2, r7
 8011284:	4628      	mov	r0, r5
 8011286:	47b0      	blx	r6
 8011288:	2800      	cmp	r0, #0
 801128a:	dc06      	bgt.n	801129a <__sflush_r+0xfe>
 801128c:	89a3      	ldrh	r3, [r4, #12]
 801128e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011292:	81a3      	strh	r3, [r4, #12]
 8011294:	f04f 30ff 	mov.w	r0, #4294967295
 8011298:	e78e      	b.n	80111b8 <__sflush_r+0x1c>
 801129a:	4407      	add	r7, r0
 801129c:	eba8 0800 	sub.w	r8, r8, r0
 80112a0:	e7e9      	b.n	8011276 <__sflush_r+0xda>
 80112a2:	bf00      	nop
 80112a4:	20400001 	.word	0x20400001

080112a8 <_fflush_r>:
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	690b      	ldr	r3, [r1, #16]
 80112ac:	4605      	mov	r5, r0
 80112ae:	460c      	mov	r4, r1
 80112b0:	b913      	cbnz	r3, 80112b8 <_fflush_r+0x10>
 80112b2:	2500      	movs	r5, #0
 80112b4:	4628      	mov	r0, r5
 80112b6:	bd38      	pop	{r3, r4, r5, pc}
 80112b8:	b118      	cbz	r0, 80112c2 <_fflush_r+0x1a>
 80112ba:	6983      	ldr	r3, [r0, #24]
 80112bc:	b90b      	cbnz	r3, 80112c2 <_fflush_r+0x1a>
 80112be:	f7ff fa4f 	bl	8010760 <__sinit>
 80112c2:	4b14      	ldr	r3, [pc, #80]	; (8011314 <_fflush_r+0x6c>)
 80112c4:	429c      	cmp	r4, r3
 80112c6:	d11b      	bne.n	8011300 <_fflush_r+0x58>
 80112c8:	686c      	ldr	r4, [r5, #4]
 80112ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d0ef      	beq.n	80112b2 <_fflush_r+0xa>
 80112d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112d4:	07d0      	lsls	r0, r2, #31
 80112d6:	d404      	bmi.n	80112e2 <_fflush_r+0x3a>
 80112d8:	0599      	lsls	r1, r3, #22
 80112da:	d402      	bmi.n	80112e2 <_fflush_r+0x3a>
 80112dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112de:	f7ff fadd 	bl	801089c <__retarget_lock_acquire_recursive>
 80112e2:	4628      	mov	r0, r5
 80112e4:	4621      	mov	r1, r4
 80112e6:	f7ff ff59 	bl	801119c <__sflush_r>
 80112ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112ec:	07da      	lsls	r2, r3, #31
 80112ee:	4605      	mov	r5, r0
 80112f0:	d4e0      	bmi.n	80112b4 <_fflush_r+0xc>
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	059b      	lsls	r3, r3, #22
 80112f6:	d4dd      	bmi.n	80112b4 <_fflush_r+0xc>
 80112f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112fa:	f7ff fad0 	bl	801089e <__retarget_lock_release_recursive>
 80112fe:	e7d9      	b.n	80112b4 <_fflush_r+0xc>
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <_fflush_r+0x70>)
 8011302:	429c      	cmp	r4, r3
 8011304:	d101      	bne.n	801130a <_fflush_r+0x62>
 8011306:	68ac      	ldr	r4, [r5, #8]
 8011308:	e7df      	b.n	80112ca <_fflush_r+0x22>
 801130a:	4b04      	ldr	r3, [pc, #16]	; (801131c <_fflush_r+0x74>)
 801130c:	429c      	cmp	r4, r3
 801130e:	bf08      	it	eq
 8011310:	68ec      	ldreq	r4, [r5, #12]
 8011312:	e7da      	b.n	80112ca <_fflush_r+0x22>
 8011314:	080116fc 	.word	0x080116fc
 8011318:	0801171c 	.word	0x0801171c
 801131c:	080116dc 	.word	0x080116dc

08011320 <_lseek_r>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4d07      	ldr	r5, [pc, #28]	; (8011340 <_lseek_r+0x20>)
 8011324:	4604      	mov	r4, r0
 8011326:	4608      	mov	r0, r1
 8011328:	4611      	mov	r1, r2
 801132a:	2200      	movs	r2, #0
 801132c:	602a      	str	r2, [r5, #0]
 801132e:	461a      	mov	r2, r3
 8011330:	f7f0 fc08 	bl	8001b44 <_lseek>
 8011334:	1c43      	adds	r3, r0, #1
 8011336:	d102      	bne.n	801133e <_lseek_r+0x1e>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	b103      	cbz	r3, 801133e <_lseek_r+0x1e>
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	2400221c 	.word	0x2400221c

08011344 <__swhatbuf_r>:
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	460e      	mov	r6, r1
 8011348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801134c:	2900      	cmp	r1, #0
 801134e:	b096      	sub	sp, #88	; 0x58
 8011350:	4614      	mov	r4, r2
 8011352:	461d      	mov	r5, r3
 8011354:	da07      	bge.n	8011366 <__swhatbuf_r+0x22>
 8011356:	2300      	movs	r3, #0
 8011358:	602b      	str	r3, [r5, #0]
 801135a:	89b3      	ldrh	r3, [r6, #12]
 801135c:	061a      	lsls	r2, r3, #24
 801135e:	d410      	bmi.n	8011382 <__swhatbuf_r+0x3e>
 8011360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011364:	e00e      	b.n	8011384 <__swhatbuf_r+0x40>
 8011366:	466a      	mov	r2, sp
 8011368:	f000 f8be 	bl	80114e8 <_fstat_r>
 801136c:	2800      	cmp	r0, #0
 801136e:	dbf2      	blt.n	8011356 <__swhatbuf_r+0x12>
 8011370:	9a01      	ldr	r2, [sp, #4]
 8011372:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011376:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801137a:	425a      	negs	r2, r3
 801137c:	415a      	adcs	r2, r3
 801137e:	602a      	str	r2, [r5, #0]
 8011380:	e7ee      	b.n	8011360 <__swhatbuf_r+0x1c>
 8011382:	2340      	movs	r3, #64	; 0x40
 8011384:	2000      	movs	r0, #0
 8011386:	6023      	str	r3, [r4, #0]
 8011388:	b016      	add	sp, #88	; 0x58
 801138a:	bd70      	pop	{r4, r5, r6, pc}

0801138c <__smakebuf_r>:
 801138c:	898b      	ldrh	r3, [r1, #12]
 801138e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011390:	079d      	lsls	r5, r3, #30
 8011392:	4606      	mov	r6, r0
 8011394:	460c      	mov	r4, r1
 8011396:	d507      	bpl.n	80113a8 <__smakebuf_r+0x1c>
 8011398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801139c:	6023      	str	r3, [r4, #0]
 801139e:	6123      	str	r3, [r4, #16]
 80113a0:	2301      	movs	r3, #1
 80113a2:	6163      	str	r3, [r4, #20]
 80113a4:	b002      	add	sp, #8
 80113a6:	bd70      	pop	{r4, r5, r6, pc}
 80113a8:	ab01      	add	r3, sp, #4
 80113aa:	466a      	mov	r2, sp
 80113ac:	f7ff ffca 	bl	8011344 <__swhatbuf_r>
 80113b0:	9900      	ldr	r1, [sp, #0]
 80113b2:	4605      	mov	r5, r0
 80113b4:	4630      	mov	r0, r6
 80113b6:	f7ff fa73 	bl	80108a0 <_malloc_r>
 80113ba:	b948      	cbnz	r0, 80113d0 <__smakebuf_r+0x44>
 80113bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113c0:	059a      	lsls	r2, r3, #22
 80113c2:	d4ef      	bmi.n	80113a4 <__smakebuf_r+0x18>
 80113c4:	f023 0303 	bic.w	r3, r3, #3
 80113c8:	f043 0302 	orr.w	r3, r3, #2
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	e7e3      	b.n	8011398 <__smakebuf_r+0xc>
 80113d0:	4b0d      	ldr	r3, [pc, #52]	; (8011408 <__smakebuf_r+0x7c>)
 80113d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80113d4:	89a3      	ldrh	r3, [r4, #12]
 80113d6:	6020      	str	r0, [r4, #0]
 80113d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113dc:	81a3      	strh	r3, [r4, #12]
 80113de:	9b00      	ldr	r3, [sp, #0]
 80113e0:	6163      	str	r3, [r4, #20]
 80113e2:	9b01      	ldr	r3, [sp, #4]
 80113e4:	6120      	str	r0, [r4, #16]
 80113e6:	b15b      	cbz	r3, 8011400 <__smakebuf_r+0x74>
 80113e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113ec:	4630      	mov	r0, r6
 80113ee:	f000 f88d 	bl	801150c <_isatty_r>
 80113f2:	b128      	cbz	r0, 8011400 <__smakebuf_r+0x74>
 80113f4:	89a3      	ldrh	r3, [r4, #12]
 80113f6:	f023 0303 	bic.w	r3, r3, #3
 80113fa:	f043 0301 	orr.w	r3, r3, #1
 80113fe:	81a3      	strh	r3, [r4, #12]
 8011400:	89a0      	ldrh	r0, [r4, #12]
 8011402:	4305      	orrs	r5, r0
 8011404:	81a5      	strh	r5, [r4, #12]
 8011406:	e7cd      	b.n	80113a4 <__smakebuf_r+0x18>
 8011408:	080106f9 	.word	0x080106f9

0801140c <__malloc_lock>:
 801140c:	4801      	ldr	r0, [pc, #4]	; (8011414 <__malloc_lock+0x8>)
 801140e:	f7ff ba45 	b.w	801089c <__retarget_lock_acquire_recursive>
 8011412:	bf00      	nop
 8011414:	24002214 	.word	0x24002214

08011418 <__malloc_unlock>:
 8011418:	4801      	ldr	r0, [pc, #4]	; (8011420 <__malloc_unlock+0x8>)
 801141a:	f7ff ba40 	b.w	801089e <__retarget_lock_release_recursive>
 801141e:	bf00      	nop
 8011420:	24002214 	.word	0x24002214

08011424 <_free_r>:
 8011424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011426:	2900      	cmp	r1, #0
 8011428:	d048      	beq.n	80114bc <_free_r+0x98>
 801142a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801142e:	9001      	str	r0, [sp, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	f1a1 0404 	sub.w	r4, r1, #4
 8011436:	bfb8      	it	lt
 8011438:	18e4      	addlt	r4, r4, r3
 801143a:	f7ff ffe7 	bl	801140c <__malloc_lock>
 801143e:	4a20      	ldr	r2, [pc, #128]	; (80114c0 <_free_r+0x9c>)
 8011440:	9801      	ldr	r0, [sp, #4]
 8011442:	6813      	ldr	r3, [r2, #0]
 8011444:	4615      	mov	r5, r2
 8011446:	b933      	cbnz	r3, 8011456 <_free_r+0x32>
 8011448:	6063      	str	r3, [r4, #4]
 801144a:	6014      	str	r4, [r2, #0]
 801144c:	b003      	add	sp, #12
 801144e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011452:	f7ff bfe1 	b.w	8011418 <__malloc_unlock>
 8011456:	42a3      	cmp	r3, r4
 8011458:	d90b      	bls.n	8011472 <_free_r+0x4e>
 801145a:	6821      	ldr	r1, [r4, #0]
 801145c:	1862      	adds	r2, r4, r1
 801145e:	4293      	cmp	r3, r2
 8011460:	bf04      	itt	eq
 8011462:	681a      	ldreq	r2, [r3, #0]
 8011464:	685b      	ldreq	r3, [r3, #4]
 8011466:	6063      	str	r3, [r4, #4]
 8011468:	bf04      	itt	eq
 801146a:	1852      	addeq	r2, r2, r1
 801146c:	6022      	streq	r2, [r4, #0]
 801146e:	602c      	str	r4, [r5, #0]
 8011470:	e7ec      	b.n	801144c <_free_r+0x28>
 8011472:	461a      	mov	r2, r3
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	b10b      	cbz	r3, 801147c <_free_r+0x58>
 8011478:	42a3      	cmp	r3, r4
 801147a:	d9fa      	bls.n	8011472 <_free_r+0x4e>
 801147c:	6811      	ldr	r1, [r2, #0]
 801147e:	1855      	adds	r5, r2, r1
 8011480:	42a5      	cmp	r5, r4
 8011482:	d10b      	bne.n	801149c <_free_r+0x78>
 8011484:	6824      	ldr	r4, [r4, #0]
 8011486:	4421      	add	r1, r4
 8011488:	1854      	adds	r4, r2, r1
 801148a:	42a3      	cmp	r3, r4
 801148c:	6011      	str	r1, [r2, #0]
 801148e:	d1dd      	bne.n	801144c <_free_r+0x28>
 8011490:	681c      	ldr	r4, [r3, #0]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	6053      	str	r3, [r2, #4]
 8011496:	4421      	add	r1, r4
 8011498:	6011      	str	r1, [r2, #0]
 801149a:	e7d7      	b.n	801144c <_free_r+0x28>
 801149c:	d902      	bls.n	80114a4 <_free_r+0x80>
 801149e:	230c      	movs	r3, #12
 80114a0:	6003      	str	r3, [r0, #0]
 80114a2:	e7d3      	b.n	801144c <_free_r+0x28>
 80114a4:	6825      	ldr	r5, [r4, #0]
 80114a6:	1961      	adds	r1, r4, r5
 80114a8:	428b      	cmp	r3, r1
 80114aa:	bf04      	itt	eq
 80114ac:	6819      	ldreq	r1, [r3, #0]
 80114ae:	685b      	ldreq	r3, [r3, #4]
 80114b0:	6063      	str	r3, [r4, #4]
 80114b2:	bf04      	itt	eq
 80114b4:	1949      	addeq	r1, r1, r5
 80114b6:	6021      	streq	r1, [r4, #0]
 80114b8:	6054      	str	r4, [r2, #4]
 80114ba:	e7c7      	b.n	801144c <_free_r+0x28>
 80114bc:	b003      	add	sp, #12
 80114be:	bd30      	pop	{r4, r5, pc}
 80114c0:	240003b4 	.word	0x240003b4

080114c4 <_read_r>:
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	4d07      	ldr	r5, [pc, #28]	; (80114e4 <_read_r+0x20>)
 80114c8:	4604      	mov	r4, r0
 80114ca:	4608      	mov	r0, r1
 80114cc:	4611      	mov	r1, r2
 80114ce:	2200      	movs	r2, #0
 80114d0:	602a      	str	r2, [r5, #0]
 80114d2:	461a      	mov	r2, r3
 80114d4:	f7f0 fad6 	bl	8001a84 <_read>
 80114d8:	1c43      	adds	r3, r0, #1
 80114da:	d102      	bne.n	80114e2 <_read_r+0x1e>
 80114dc:	682b      	ldr	r3, [r5, #0]
 80114de:	b103      	cbz	r3, 80114e2 <_read_r+0x1e>
 80114e0:	6023      	str	r3, [r4, #0]
 80114e2:	bd38      	pop	{r3, r4, r5, pc}
 80114e4:	2400221c 	.word	0x2400221c

080114e8 <_fstat_r>:
 80114e8:	b538      	push	{r3, r4, r5, lr}
 80114ea:	4d07      	ldr	r5, [pc, #28]	; (8011508 <_fstat_r+0x20>)
 80114ec:	2300      	movs	r3, #0
 80114ee:	4604      	mov	r4, r0
 80114f0:	4608      	mov	r0, r1
 80114f2:	4611      	mov	r1, r2
 80114f4:	602b      	str	r3, [r5, #0]
 80114f6:	f7f0 fb0a 	bl	8001b0e <_fstat>
 80114fa:	1c43      	adds	r3, r0, #1
 80114fc:	d102      	bne.n	8011504 <_fstat_r+0x1c>
 80114fe:	682b      	ldr	r3, [r5, #0]
 8011500:	b103      	cbz	r3, 8011504 <_fstat_r+0x1c>
 8011502:	6023      	str	r3, [r4, #0]
 8011504:	bd38      	pop	{r3, r4, r5, pc}
 8011506:	bf00      	nop
 8011508:	2400221c 	.word	0x2400221c

0801150c <_isatty_r>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	4d06      	ldr	r5, [pc, #24]	; (8011528 <_isatty_r+0x1c>)
 8011510:	2300      	movs	r3, #0
 8011512:	4604      	mov	r4, r0
 8011514:	4608      	mov	r0, r1
 8011516:	602b      	str	r3, [r5, #0]
 8011518:	f7f0 fb09 	bl	8001b2e <_isatty>
 801151c:	1c43      	adds	r3, r0, #1
 801151e:	d102      	bne.n	8011526 <_isatty_r+0x1a>
 8011520:	682b      	ldr	r3, [r5, #0]
 8011522:	b103      	cbz	r3, 8011526 <_isatty_r+0x1a>
 8011524:	6023      	str	r3, [r4, #0]
 8011526:	bd38      	pop	{r3, r4, r5, pc}
 8011528:	2400221c 	.word	0x2400221c

0801152c <_init>:
 801152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152e:	bf00      	nop
 8011530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011532:	bc08      	pop	{r3}
 8011534:	469e      	mov	lr, r3
 8011536:	4770      	bx	lr

08011538 <_fini>:
 8011538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801153a:	bf00      	nop
 801153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801153e:	bc08      	pop	{r3}
 8011540:	469e      	mov	lr, r3
 8011542:	4770      	bx	lr
