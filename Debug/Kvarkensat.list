
Kvarkensat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006ffc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800705c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  240000d0  080070bc  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000820  080070bc  00020820  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d145  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab0  00000000  00000000  0003d243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00040f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000373e4  00000000  00000000  00042140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015db1  00000000  00000000  00079524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00168b84  00000000  00000000  0008f2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f7e59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f8  00000000  00000000  001f7eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006f40 	.word	0x08006f40

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006f40 	.word	0x08006f40

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fdf9 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f831 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9dd 	bl	80009a8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ee:	f000 f8ad 	bl	800074c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f95b 	bl	80008ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f9a5 	bl	8000944 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 f8f3 	bl	80007e4 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* If no flags were set by interrupts, go back to sleep */
		if (!eventflags.dont_sleep)
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0x68>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d019      	beq.n	8000640 <main+0x64>
			continue;
		eventflags.dont_sleep = 0;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <main+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]

		/* Go through all flags to check which of them are up. Flags could indicate for example the need
		 * for data processing or */
		if (eventflags.tick) {
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <main+0x68>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f2      	beq.n	8000602 <main+0x26>
			eventflags.tick = 0;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <main+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	705a      	strb	r2, [r3, #1]
			GPIOW(LED_TOP, 1 & (a >> 8));	// Blink LED while system is running.
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	121b      	asrs	r3, r3, #8
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	2120      	movs	r1, #32
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <main+0x6c>)
 8000634:	f002 fc02 	bl	8002e3c <HAL_GPIO_WritePin>
			++a;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	e7e0      	b.n	8000602 <main+0x26>
			continue;
 8000640:	bf00      	nop
		if (!eventflags.dont_sleep)
 8000642:	e7de      	b.n	8000602 <main+0x26>
 8000644:	24000810 	.word	0x24000810
 8000648:	58020400 	.word	0x58020400

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09c      	sub	sp, #112	; 0x70
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	224c      	movs	r2, #76	; 0x4c
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fc68 	bl	8006f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 fc62 	bl	8006f30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800066c:	2002      	movs	r0, #2
 800066e:	f002 fd47 	bl	8003100 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <SystemClock_Config+0xf8>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	4a32      	ldr	r2, [pc, #200]	; (8000744 <SystemClock_Config+0xf8>)
 800067c:	f023 0301 	bic.w	r3, r3, #1
 8000680:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000682:	4b30      	ldr	r3, [pc, #192]	; (8000744 <SystemClock_Config+0xf8>)
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <SystemClock_Config+0xfc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a2c      	ldr	r2, [pc, #176]	; (8000748 <SystemClock_Config+0xfc>)
 8000696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <SystemClock_Config+0xfc>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a8:	bf00      	nop
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <SystemClock_Config+0xfc>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b6:	d1f8      	bne.n	80006aa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006b8:	2303      	movs	r3, #3
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2340      	movs	r3, #64	; 0x40
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006d6:	2318      	movs	r3, #24
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006e6:	230c      	movs	r3, #12
 80006e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fd4c 	bl	8003194 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000702:	f000 fa2d 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	233f      	movs	r3, #63	; 0x3f
 8000708:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2101      	movs	r1, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f003 f960 	bl	80039f0 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000736:	f000 fa13 	bl	8000b60 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3770      	adds	r7, #112	; 0x70
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	58000400 	.word	0x58000400
 8000748:	58024800 	.word	0x58024800

0800074c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_ETH_Init+0x80>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <MX_ETH_Init+0x84>)
 8000754:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ETH_Init+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ETH_Init+0x88>)
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_ETH_Init+0x88>)
 8000764:	22e1      	movs	r2, #225	; 0xe1
 8000766:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ETH_Init+0x88>)
 800076a:	2200      	movs	r2, #0
 800076c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ETH_Init+0x88>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ETH_Init+0x88>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ETH_Init+0x80>)
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_ETH_Init+0x88>)
 800077e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ETH_Init+0x80>)
 8000782:	2201      	movs	r2, #1
 8000784:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ETH_Init+0x80>)
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_ETH_Init+0x8c>)
 800078a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ETH_Init+0x80>)
 800078e:	4a13      	ldr	r2, [pc, #76]	; (80007dc <MX_ETH_Init+0x90>)
 8000790:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_ETH_Init+0x80>)
 8000794:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000798:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_ETH_Init+0x80>)
 800079c:	f000 ff02 	bl	80015a4 <HAL_ETH_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 f9db 	bl	8000b60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007aa:	2238      	movs	r2, #56	; 0x38
 80007ac:	2100      	movs	r1, #0
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_ETH_Init+0x94>)
 80007b0:	f006 fbbe 	bl	8006f30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_ETH_Init+0x94>)
 80007b6:	2221      	movs	r2, #33	; 0x21
 80007b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_ETH_Init+0x94>)
 80007bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_ETH_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	24000124 	.word	0x24000124
 80007d0:	40028000 	.word	0x40028000
 80007d4:	24000814 	.word	0x24000814
 80007d8:	24000070 	.word	0x24000070
 80007dc:	24000010 	.word	0x24000010
 80007e0:	240000ec 	.word	0x240000ec

080007e4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <MX_FDCAN1_Init+0xc4>)
 80007ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800080e:	2201      	movs	r2, #1
 8000810:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000814:	2201      	movs	r2, #1
 8000816:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800081a:	2202      	movs	r2, #2
 800081c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000820:	2202      	movs	r2, #2
 8000822:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000826:	2201      	movs	r2, #1
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800082c:	2201      	movs	r2, #1
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000832:	2201      	movs	r2, #1
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000856:	2204      	movs	r2, #4
 8000858:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000862:	2204      	movs	r2, #4
 8000864:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 800088c:	2204      	movs	r2, #4
 800088e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_FDCAN1_Init+0xc0>)
 8000892:	f001 faab 	bl	8001dec <HAL_FDCAN_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800089c:	f000 f960 	bl	8000b60 <Error_Handler>
    Error_Handler();
  }*/

  /* USER CODE END FDCAN1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	240001d4 	.word	0x240001d4
 80008a8:	4000a000 	.word	0x4000a000

080008ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_USART3_UART_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f6:	f004 ff6f 	bl	80057d8 <HAL_UART_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f92e 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_USART3_UART_Init+0x90>)
 8000908:	f005 ff0c 	bl	8006724 <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f925 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x90>)
 800091a:	f005 ff41 	bl	80067a0 <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f91c 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART3_UART_Init+0x90>)
 800092a:	f005 fec2 	bl	80066b2 <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f914 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	24000274 	.word	0x24000274
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800094c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000950:	2209      	movs	r2, #9
 8000952:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000956:	2202      	movs	r2, #2
 8000958:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000962:	2202      	movs	r2, #2
 8000964:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097a:	2201      	movs	r2, #1
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000980:	2201      	movs	r2, #1
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098c:	f002 fa6f 	bl	8002e6e <HAL_PCD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000996:	f000 f8e3 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	24000304 	.word	0x24000304
 80009a4:	40080000 	.word	0x40080000

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a60      	ldr	r2, [pc, #384]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009dc:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a51      	ldr	r2, [pc, #324]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a42      	ldr	r2, [pc, #264]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a54:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a3b      	ldr	r2, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a33      	ldr	r2, [pc, #204]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LED_TOP_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f244 0121 	movw	r1, #16417	; 0x4021
 8000a96:	482d      	ldr	r0, [pc, #180]	; (8000b4c <MX_GPIO_Init+0x1a4>)
 8000a98:	f002 f9d0 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <MX_GPIO_Init+0x1a8>)
 8000aa4:	f002 f9ca 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4829      	ldr	r0, [pc, #164]	; (8000b54 <MX_GPIO_Init+0x1ac>)
 8000aae:	f002 f9c5 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4824      	ldr	r0, [pc, #144]	; (8000b58 <MX_GPIO_Init+0x1b0>)
 8000ac8:	f002 f808 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LED_TOP_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LED_TOP_Pin;
 8000acc:	f244 0321 	movw	r3, #16417	; 0x4021
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4819      	ldr	r0, [pc, #100]	; (8000b4c <MX_GPIO_Init+0x1a4>)
 8000ae6:	f001 fff9 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_GPIO_Init+0x1a8>)
 8000b04:	f001 ffea 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480f      	ldr	r0, [pc, #60]	; (8000b5c <MX_GPIO_Init+0x1b4>)
 8000b1e:	f001 ffdd 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_GPIO_Init+0x1ac>)
 8000b3a:	f001 ffcf 	bl	8002adc <HAL_GPIO_Init>

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020400 	.word	0x58020400
 8000b50:	58020c00 	.word	0x58020c00
 8000b54:	58021000 	.word	0x58021000
 8000b58:	58020800 	.word	0x58020800
 8000b5c:	58021800 	.word	0x58021800

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_MspInit+0x30>)
 8000b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x30>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x30>)
 8000b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	58024400 	.word	0x58024400

08000ba0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a59      	ldr	r2, [pc, #356]	; (8000d24 <HAL_ETH_MspInit+0x184>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	f040 80ab 	bne.w	8000d1a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bc4:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bca:	4a57      	ldr	r2, [pc, #348]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd4:	4b54      	ldr	r3, [pc, #336]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000be2:	4b51      	ldr	r3, [pc, #324]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be8:	4a4f      	ldr	r2, [pc, #316]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c00:	4b49      	ldr	r3, [pc, #292]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c06:	4a48      	ldr	r2, [pc, #288]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c10:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	4a40      	ldr	r2, [pc, #256]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a39      	ldr	r2, [pc, #228]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	4a31      	ldr	r2, [pc, #196]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a2a      	ldr	r2, [pc, #168]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c96:	2332      	movs	r3, #50	; 0x32
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <HAL_ETH_MspInit+0x18c>)
 8000cb2:	f001 ff13 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cb6:	2386      	movs	r3, #134	; 0x86
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc6:	230b      	movs	r3, #11
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4817      	ldr	r0, [pc, #92]	; (8000d30 <HAL_ETH_MspInit+0x190>)
 8000cd2:	f001 ff03 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4810      	ldr	r0, [pc, #64]	; (8000d34 <HAL_ETH_MspInit+0x194>)
 8000cf4:	f001 fef2 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cf8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0a:	230b      	movs	r3, #11
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <HAL_ETH_MspInit+0x198>)
 8000d16:	f001 fee1 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	; 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40028000 	.word	0x40028000
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	58020800 	.word	0x58020800
 8000d30:	58020000 	.word	0x58020000
 8000d34:	58020400 	.word	0x58020400
 8000d38:	58021800 	.word	0x58021800

08000d3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0b8      	sub	sp, #224	; 0xe0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	22bc      	movs	r2, #188	; 0xbc
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f006 f8e7 	bl	8006f30 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <HAL_FDCAN_MspInit+0xe0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d152      	bne.n	8000e12 <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d76:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 f9c3 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d88:	f7ff feea 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_FDCAN_MspInit+0xe4>)
 8000d8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <HAL_FDCAN_MspInit+0xe4>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_FDCAN_MspInit+0xe4>)
 8000d9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_FDCAN_MspInit+0xe4>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <HAL_FDCAN_MspInit+0xe4>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_FDCAN_MspInit+0xe4>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000de0:	2309      	movs	r3, #9
 8000de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dea:	4619      	mov	r1, r3
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <HAL_FDCAN_MspInit+0xe8>)
 8000dee:	f001 fe75 	bl	8002adc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2013      	movs	r0, #19
 8000df8:	f000 fb9f 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000dfc:	2013      	movs	r0, #19
 8000dfe:	f000 fbb6 	bl	800156e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2015      	movs	r0, #21
 8000e08:	f000 fb97 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e0c:	2015      	movs	r0, #21
 8000e0e:	f000 fbae 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	37e0      	adds	r7, #224	; 0xe0
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	4000a000 	.word	0x4000a000
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020c00 	.word	0x58020c00

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b8      	sub	sp, #224	; 0xe0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	22bc      	movs	r2, #188	; 0xbc
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 f871 	bl	8006f30 <memset>
  if(huart->Instance==USART3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <HAL_UART_MspInit+0xc0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d142      	bne.n	8000ede <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 f94e 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e72:	f7ff fe75 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_UART_MspInit+0xc4>)
 8000e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_UART_MspInit+0xc4>)
 8000e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_UART_MspInit+0xc4>)
 8000e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0xc4>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_UART_MspInit+0xc4>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0xc4>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_UART_MspInit+0xc8>)
 8000eda:	f001 fdff 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	37e0      	adds	r7, #224	; 0xe0
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004800 	.word	0x40004800
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58020c00 	.word	0x58020c00

08000ef4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0b8      	sub	sp, #224	; 0xe0
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	22bc      	movs	r2, #188	; 0xbc
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 f80b 	bl	8006f30 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <HAL_PCD_MspInit+0xe8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d156      	bne.n	8000fd2 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f8e6 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000f42:	f7ff fe0d 	bl	8000b60 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f46:	f002 f915 	bl	8003174 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <HAL_PCD_MspInit+0xec>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_PCD_MspInit+0xec>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_PCD_MspInit+0xec>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f68:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f82:	230a      	movs	r3, #10
 8000f84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <HAL_PCD_MspInit+0xf0>)
 8000f90:	f001 fda4 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fac:	4619      	mov	r1, r3
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <HAL_PCD_MspInit+0xf0>)
 8000fb0:	f001 fd94 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_PCD_MspInit+0xec>)
 8000fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_PCD_MspInit+0xec>)
 8000fbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_PCD_MspInit+0xec>)
 8000fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	37e0      	adds	r7, #224	; 0xe0
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40080000 	.word	0x40080000
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58020000 	.word	0x58020000

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f942 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SET_EVENT(tick);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <SysTick_Handler+0x18>)
 800103a:	2201      	movs	r2, #1
 800103c:	705a      	strb	r2, [r3, #1]
 800103e:	4b02      	ldr	r3, [pc, #8]	; (8001048 <SysTick_Handler+0x18>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000810 	.word	0x24000810

0800104c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <FDCAN1_IT0_IRQHandler+0x10>)
 8001052:	f001 f8a9 	bl	80021a8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	240001d4 	.word	0x240001d4

08001060 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <FDCAN1_IT1_IRQHandler+0x10>)
 8001066:	f001 f89f 	bl	80021a8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	240001d4 	.word	0x240001d4

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <SystemInit+0xe4>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a36      	ldr	r2, [pc, #216]	; (8001158 <SystemInit+0xe4>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001088:	4b34      	ldr	r3, [pc, #208]	; (800115c <SystemInit+0xe8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	2b06      	cmp	r3, #6
 8001092:	d807      	bhi.n	80010a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <SystemInit+0xe8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 030f 	bic.w	r3, r3, #15
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <SystemInit+0xe8>)
 800109e:	f043 0307 	orr.w	r3, r3, #7
 80010a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <SystemInit+0xec>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <SystemInit+0xec>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <SystemInit+0xec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <SystemInit+0xec>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4929      	ldr	r1, [pc, #164]	; (8001160 <SystemInit+0xec>)
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemInit+0xf0>)
 80010be:	4013      	ands	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <SystemInit+0xe8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <SystemInit+0xe8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <SystemInit+0xe8>)
 80010d8:	f043 0307 	orr.w	r3, r3, #7
 80010dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <SystemInit+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <SystemInit+0xec>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <SystemInit+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <SystemInit+0xec>)
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <SystemInit+0xf4>)
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <SystemInit+0xec>)
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <SystemInit+0xf8>)
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <SystemInit+0xec>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <SystemInit+0xfc>)
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <SystemInit+0xec>)
 8001104:	2200      	movs	r2, #0
 8001106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <SystemInit+0xec>)
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <SystemInit+0xfc>)
 800110c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <SystemInit+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <SystemInit+0xec>)
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <SystemInit+0xfc>)
 8001118:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <SystemInit+0xec>)
 800111c:	2200      	movs	r2, #0
 800111e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <SystemInit+0xec>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <SystemInit+0xec>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <SystemInit+0xec>)
 800112e:	2200      	movs	r2, #0
 8001130:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <SystemInit+0x100>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <SystemInit+0x104>)
 8001138:	4013      	ands	r3, r2
 800113a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800113e:	d202      	bcs.n	8001146 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <SystemInit+0x108>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <SystemInit+0x10c>)
 8001148:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800114c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	52002000 	.word	0x52002000
 8001160:	58024400 	.word	0x58024400
 8001164:	eaf6ed7f 	.word	0xeaf6ed7f
 8001168:	02020200 	.word	0x02020200
 800116c:	01ff0000 	.word	0x01ff0000
 8001170:	01010280 	.word	0x01010280
 8001174:	5c001000 	.word	0x5c001000
 8001178:	ffff0000 	.word	0xffff0000
 800117c:	51008108 	.word	0x51008108
 8001180:	52004000 	.word	0x52004000

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001188:	f7ff ff74 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f005 fe8b 	bl	8006ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff fa11 	bl	80005dc <main>
  bx  lr
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011c4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80011c8:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 80011cc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80011d0:	24000820 	.word	0x24000820

080011d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC3_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 f9a0 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011e4:	f002 fdba 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 80011e8:	4602      	mov	r2, r0
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_Init+0x68>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <HAL_Init+0x6c>)
 80011f6:	5ccb      	ldrb	r3, [r1, r3]
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001200:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_Init+0x68>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_Init+0x6c>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <HAL_Init+0x70>)
 800121a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_Init+0x74>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f814 	bl	8001250 <HAL_InitTick>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e002      	b.n	8001238 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001232:	f7ff fc9b 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58024400 	.word	0x58024400
 8001244:	08006fa4 	.word	0x08006fa4
 8001248:	24000004 	.word	0x24000004
 800124c:	24000000 	.word	0x24000000

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_InitTick+0x60>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e021      	b.n	80012a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_InitTick+0x64>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_InitTick+0x60>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f985 	bl	800158a <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001298:	f000 f94f 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_InitTick+0x68>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2400000c 	.word	0x2400000c
 80012b4:	24000000 	.word	0x24000000
 80012b8:	24000008 	.word	0x24000008

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2400000c 	.word	0x2400000c
 80012e0:	2400081c 	.word	0x2400081c

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2400081c 	.word	0x2400081c

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2400000c 	.word	0x2400000c

08001344 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetREVID+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0c1b      	lsrs	r3, r3, #16
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	5c001000 	.word	0x5c001000

0800135c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800136c:	4904      	ldr	r1, [pc, #16]	; (8001380 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58000400 	.word	0x58000400

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	05fa0000 	.word	0x05fa0000

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff40 	bl	80013cc <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff33 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa4 	bl	80014e0 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0cf      	b.n	8001756 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2223      	movs	r2, #35	; 0x23
 80015c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fae9 	bl	8000ba0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_ETH_Init+0x1bc>)
 80015d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015d4:	4a62      	ldr	r2, [pc, #392]	; (8001760 <HAL_ETH_Init+0x1bc>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_ETH_Init+0x1bc>)
 80015e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7a1b      	ldrb	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff feb1 	bl	800135c <HAL_SYSCFG_ETHInterfaceSelect>
 80015fa:	e003      	b.n	8001604 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001600:	f7ff feac 	bl	800135c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001604:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_ETH_Init+0x1c0>)
 8001606:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001620:	f7ff fe60 	bl	80012e4 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001626:	e011      	b.n	800164c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001628:	f7ff fe5c 	bl	80012e4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001636:	d909      	bls.n	800164c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	22e0      	movs	r2, #224	; 0xe0
 8001644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e084      	b.n	8001756 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1e4      	bne.n	8001628 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f886 	bl	8001770 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001664:	f002 fcf4 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8001668:	4603      	mov	r3, r0
 800166a:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <HAL_ETH_Init+0x1c4>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	0c9a      	lsrs	r2, r3, #18
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3a01      	subs	r2, #1
 8001678:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fa71 	bl	8001b64 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800168e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800169a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800169e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	22e0      	movs	r2, #224	; 0xe0
 80016ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e049      	b.n	8001756 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_ETH_Init+0x1c8>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6952      	ldr	r2, [r2, #20]
 80016d6:	0051      	lsls	r1, r2, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fad9 	bl	8001c9e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fb1f 	bl	8001d30 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	3305      	adds	r3, #5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021a      	lsls	r2, r3, #8
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	3304      	adds	r3, #4
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	3302      	adds	r3, #2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	3301      	adds	r3, #1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001730:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800173e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001740:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2210      	movs	r2, #16
 8001750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	58024400 	.word	0x58024400
 8001764:	58000400 	.word	0x58000400
 8001768:	431bde83 	.word	0x431bde83
 800176c:	ffff8001 	.word	0xffff8001

08001770 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001780:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001788:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800178a:	f002 fc61 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800178e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d908      	bls.n	80017aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d804      	bhi.n	80017aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e027      	b.n	80017fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d908      	bls.n	80017c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4a17      	ldr	r2, [pc, #92]	; (8001814 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d204      	bcs.n	80017c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e01a      	b.n	80017fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d303      	bcc.n	80017d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d911      	bls.n	80017f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d908      	bls.n	80017ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_ETH_SetMDIOClockRange+0xac>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d804      	bhi.n	80017ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e005      	b.n	80017fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e000      	b.n	80017fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80017f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	01312cff 	.word	0x01312cff
 8001810:	02160ebf 	.word	0x02160ebf
 8001814:	03938700 	.word	0x03938700
 8001818:	05f5e0ff 	.word	0x05f5e0ff
 800181c:	08f0d17f 	.word	0x08f0d17f

08001820 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	791b      	ldrb	r3, [r3, #4]
 8001838:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800183a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	7b1b      	ldrb	r3, [r3, #12]
 8001840:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001842:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	7b5b      	ldrb	r3, [r3, #13]
 8001848:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800184a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7b9b      	ldrb	r3, [r3, #14]
 8001850:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7bdb      	ldrb	r3, [r3, #15]
 8001858:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800185a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	7c12      	ldrb	r2, [r2, #16]
 8001860:	2a00      	cmp	r2, #0
 8001862:	d102      	bne.n	800186a <ETH_SetMACConfig+0x4a>
 8001864:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001868:	e000      	b.n	800186c <ETH_SetMACConfig+0x4c>
 800186a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800186c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	7c52      	ldrb	r2, [r2, #17]
 8001872:	2a00      	cmp	r2, #0
 8001874:	d102      	bne.n	800187c <ETH_SetMACConfig+0x5c>
 8001876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800187a:	e000      	b.n	800187e <ETH_SetMACConfig+0x5e>
 800187c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800187e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7c9b      	ldrb	r3, [r3, #18]
 8001884:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001886:	431a      	orrs	r2, r3
               macconf->Speed |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800188c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001892:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	7f1b      	ldrb	r3, [r3, #28]
 8001898:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800189a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	7f5b      	ldrb	r3, [r3, #29]
 80018a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	7f92      	ldrb	r2, [r2, #30]
 80018a8:	2a00      	cmp	r2, #0
 80018aa:	d102      	bne.n	80018b2 <ETH_SetMACConfig+0x92>
 80018ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b0:	e000      	b.n	80018b4 <ETH_SetMACConfig+0x94>
 80018b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	7fdb      	ldrb	r3, [r3, #31]
 80018ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	d102      	bne.n	80018ce <ETH_SetMACConfig+0xae>
 80018c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018cc:	e000      	b.n	80018d0 <ETH_SetMACConfig+0xb0>
 80018ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <ETH_SetMACConfig+0x22c>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	430b      	orrs	r3, r1
 80018fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001902:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800190a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800190c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001914:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800191e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001920:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001928:	2a00      	cmp	r2, #0
 800192a:	d102      	bne.n	8001932 <ETH_SetMACConfig+0x112>
 800192c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001930:	e000      	b.n	8001934 <ETH_SetMACConfig+0x114>
 8001932:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001934:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <ETH_SetMACConfig+0x230>)
 8001946:	4013      	ands	r3, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	430b      	orrs	r3, r1
 8001950:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001958:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <ETH_SetMACConfig+0x234>)
 800196a:	4013      	ands	r3, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	430b      	orrs	r3, r1
 8001974:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800197c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001982:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800198a:	2a00      	cmp	r2, #0
 800198c:	d101      	bne.n	8001992 <ETH_SetMACConfig+0x172>
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	e000      	b.n	8001994 <ETH_SetMACConfig+0x174>
 8001992:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001994:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019aa:	4013      	ands	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	430b      	orrs	r3, r1
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	f023 0103 	bic.w	r1, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	430a      	orrs	r2, r1
 80019de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	d101      	bne.n	8001a0e <ETH_SetMACConfig+0x1ee>
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	e000      	b.n	8001a10 <ETH_SetMACConfig+0x1f0>
 8001a0e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a18:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a22:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a30:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	00048083 	.word	0x00048083
 8001a50:	c0f88000 	.word	0xc0f88000
 8001a54:	fffffef0 	.word	0xfffffef0

08001a58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <ETH_SetDMAConfig+0xf8>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6811      	ldr	r1, [r2, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a7e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a8a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <ETH_SetDMAConfig+0xfc>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	7b5b      	ldrb	r3, [r3, #13]
 8001ab6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <ETH_SetDMAConfig+0x100>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001adc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	7d1b      	ldrb	r3, [r3, #20]
 8001ae8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7f5b      	ldrb	r3, [r3, #29]
 8001af0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <ETH_SetDMAConfig+0x104>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b12:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7f1b      	ldrb	r3, [r3, #28]
 8001b1a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <ETH_SetDMAConfig+0x108>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b40:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	ffff87fd 	.word	0xffff87fd
 8001b54:	ffff2ffe 	.word	0xffff2ffe
 8001b58:	fffec000 	.word	0xfffec000
 8001b5c:	ffc0efef 	.word	0xffc0efef
 8001b60:	7fc0ffff 	.word	0x7fc0ffff

08001b64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0a4      	sub	sp, #144	; 0x90
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b72:	2300      	movs	r3, #0
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bbc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bc0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bde:	2300      	movs	r3, #0
 8001be0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001be6:	2300      	movs	r3, #0
 8001be8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c18:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fde6 	bl	8001820 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c84:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fee1 	bl	8001a58 <ETH_SetDMAConfig>
}
 8001c96:	bf00      	nop
 8001c98:	3790      	adds	r7, #144	; 0x90
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e01d      	b.n	8001ce8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68d9      	ldr	r1, [r3, #12]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	3206      	adds	r2, #6
 8001cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d9de      	bls.n	8001cac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2303      	movs	r3, #3
 8001d00:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e023      	b.n	8001d86 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6919      	ldr	r1, [r3, #16]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	3212      	adds	r2, #18
 8001d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d9d8      	bls.n	8001d3e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db2:	461a      	mov	r2, r3
 8001db4:	2303      	movs	r3, #3
 8001db6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dda:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b098      	sub	sp, #96	; 0x60
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001df4:	4a84      	ldr	r2, [pc, #528]	; (8002008 <HAL_FDCAN_Init+0x21c>)
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	224c      	movs	r2, #76	; 0x4c
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 f888 	bl	8006f14 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e1c6      	b.n	800219c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7e      	ldr	r2, [pc, #504]	; (800200c <HAL_FDCAN_Init+0x220>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d106      	bne.n	8001e26 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe ff7e 	bl	8000d3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0210 	bic.w	r2, r2, #16
 8001e4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e50:	f7ff fa48 	bl	80012e4 <HAL_GetTick>
 8001e54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e56:	e014      	b.n	8001e82 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e58:	f7ff fa44 	bl	80012e4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b0a      	cmp	r3, #10
 8001e64:	d90d      	bls.n	8001e82 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e18c      	b.n	800219c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d0e3      	beq.n	8001e58 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff fa20 	bl	80012e4 <HAL_GetTick>
 8001ea4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ea6:	e014      	b.n	8001ed2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ea8:	f7ff fa1c 	bl	80012e4 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	d90d      	bls.n	8001ed2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e164      	b.n	800219c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0e3      	beq.n	8001ea8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0202 	orr.w	r2, r2, #2
 8001eee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7c1b      	ldrb	r3, [r3, #16]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f06:	619a      	str	r2, [r3, #24]
 8001f08:	e007      	b.n	8001f1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7c5b      	ldrb	r3, [r3, #17]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d108      	bne.n	8001f34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f30:	619a      	str	r2, [r3, #24]
 8001f32:	e007      	b.n	8001f44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7c9b      	ldrb	r3, [r3, #18]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f5a:	619a      	str	r2, [r3, #24]
 8001f5c:	e007      	b.n	8001f6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001f92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0210 	bic.w	r2, r2, #16
 8001fa2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d108      	bne.n	8001fbe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0204 	orr.w	r2, r2, #4
 8001fba:	619a      	str	r2, [r3, #24]
 8001fbc:	e030      	b.n	8002020 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d02c      	beq.n	8002020 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d020      	beq.n	8002010 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fdc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0210 	orr.w	r2, r2, #16
 8001fec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d114      	bne.n	8002020 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	619a      	str	r2, [r3, #24]
 8002006:	e00b      	b.n	8002020 <HAL_FDCAN_Init+0x234>
 8002008:	08006f58 	.word	0x08006f58
 800200c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	3b01      	subs	r3, #1
 8002026:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	3b01      	subs	r3, #1
 800202e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002030:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002038:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	3b01      	subs	r3, #1
 8002042:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002048:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800204a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002054:	d115      	bne.n	8002082 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	3b01      	subs	r3, #1
 8002062:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002064:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	3b01      	subs	r3, #1
 800206c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800206e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	3b01      	subs	r3, #1
 8002078:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800207e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002080:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a8:	4413      	add	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d011      	beq.n	80020d2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80020b6:	f023 0107 	bic.w	r1, r3, #7
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3360      	adds	r3, #96	; 0x60
 80020c2:	443b      	add	r3, r7
 80020c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d011      	beq.n	80020fe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80020e2:	f023 0107 	bic.w	r1, r3, #7
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	3360      	adds	r3, #96	; 0x60
 80020ee:	443b      	add	r3, r7
 80020f0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800210e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	443b      	add	r3, r7
 800211c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002120:	011a      	lsls	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002130:	2b00      	cmp	r3, #0
 8002132:	d012      	beq.n	800215a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800213c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	3360      	adds	r3, #96	; 0x60
 8002148:	443b      	add	r3, r7
 800214a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800214e:	021a      	lsls	r2, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <HAL_FDCAN_Init+0x3b8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d107      	bne.n	8002174 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f022 0203 	bic.w	r2, r2, #3
 8002172:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fb1f 	bl	80027d0 <FDCAN_CalcultateRamBlockAddresses>
 8002192:	4603      	mov	r3, r0
 8002194:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002198:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800219c:	4618      	mov	r0, r3
 800219e:	3760      	adds	r7, #96	; 0x60
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	4000a000 	.word	0x4000a000

080021a8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b096      	sub	sp, #88	; 0x58
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80021b0:	4b9a      	ldr	r3, [pc, #616]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	079b      	lsls	r3, r3, #30
 80021b6:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80021b8:	4b98      	ldr	r3, [pc, #608]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	079b      	lsls	r3, r3, #30
 80021be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021c0:	4013      	ands	r3, r2
 80021c2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80021ce:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80021d8:	4013      	ands	r3, r2
 80021da:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021f0:	4013      	ands	r3, r2
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002208:	4013      	ands	r3, r2
 800220a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002212:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002220:	4013      	ands	r3, r2
 8002222:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002238:	4013      	ands	r3, r2
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800224c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226c:	651a      	str	r2, [r3, #80]	; 0x50
 800226e:	4b6b      	ldr	r3, [pc, #428]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fa5f 	bl	8002738 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227c:	0a9b      	lsrs	r3, r3, #10
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01d      	beq.n	80022c2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	0a9b      	lsrs	r3, r3, #10
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d017      	beq.n	80022c2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80022a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a6:	4013      	ands	r3, r2
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80022ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fa12 	bl	80026e6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80022c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_FDCAN_IRQHandler+0x278>)
 80022d0:	400b      	ands	r3, r1
 80022d2:	6513      	str	r3, [r2, #80]	; 0x50
 80022d4:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 80022d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d8:	0f9b      	lsrs	r3, r3, #30
 80022da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80022dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f9c0 	bl	8002664 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80022e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_FDCAN_IRQHandler+0x278>)
 80022f2:	400b      	ands	r3, r1
 80022f4:	6513      	str	r3, [r2, #80]	; 0x50
 80022f6:	4a49      	ldr	r2, [pc, #292]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 80022f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fa:	0f9b      	lsrs	r3, r3, #30
 80022fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80022fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f9ba 	bl	800267a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_FDCAN_IRQHandler+0x278>)
 8002314:	400b      	ands	r3, r1
 8002316:	6513      	str	r3, [r2, #80]	; 0x50
 8002318:	4a40      	ldr	r2, [pc, #256]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 800231a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231c:	0f9b      	lsrs	r3, r3, #30
 800231e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002320:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9b4 	bl	8002690 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_FDCAN_IRQHandler+0x278>)
 8002336:	400b      	ands	r3, r1
 8002338:	6513      	str	r3, [r2, #80]	; 0x50
 800233a:	4a38      	ldr	r2, [pc, #224]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 800233c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233e:	0f9b      	lsrs	r3, r3, #30
 8002340:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002342:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f9ae 	bl	80026a6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800234a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234c:	0adb      	lsrs	r3, r3, #11
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	0adb      	lsrs	r3, r3, #11
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236a:	651a      	str	r2, [r3, #80]	; 0x50
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9a2 	bl	80026bc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237a:	0a5b      	lsrs	r3, r3, #9
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01d      	beq.n	80023c0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002386:	0a5b      	lsrs	r3, r3, #9
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a4:	4013      	ands	r3, r2
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b0:	651a      	str	r2, [r3, #80]	; 0x50
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80023b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f988 	bl	80026d0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	0cdb      	lsrs	r3, r3, #19
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d010      	beq.n	80023ee <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	0cdb      	lsrs	r3, r3, #19
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023e0:	651a      	str	r2, [r3, #80]	; 0x50
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f987 	bl	80026fc <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80023ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800240e:	651a      	str	r2, [r3, #80]	; 0x50
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <HAL_FDCAN_IRQHandler+0x274>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	e004      	b.n	8002424 <HAL_FDCAN_IRQHandler+0x27c>
 800241a:	bf00      	nop
 800241c:	4000a800 	.word	0x4000a800
 8002420:	3fcfffff 	.word	0x3fcfffff
 8002424:	f000 f974 	bl	8002710 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	0c9b      	lsrs	r3, r3, #18
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002448:	651a      	str	r2, [r3, #80]	; 0x50
 800244a:	4b83      	ldr	r3, [pc, #524]	; (8002658 <HAL_FDCAN_IRQHandler+0x4b0>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f967 	bl	8002724 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002458:	0c5b      	lsrs	r3, r3, #17
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	0c5b      	lsrs	r3, r3, #17
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00f      	beq.n	800248e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002476:	651a      	str	r2, [r3, #80]	; 0x50
 8002478:	4b77      	ldr	r3, [pc, #476]	; (8002658 <HAL_FDCAN_IRQHandler+0x4b0>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002484:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800249a:	4b70      	ldr	r3, [pc, #448]	; (800265c <HAL_FDCAN_IRQHandler+0x4b4>)
 800249c:	400b      	ands	r3, r1
 800249e:	6513      	str	r3, [r2, #80]	; 0x50
 80024a0:	4a6d      	ldr	r2, [pc, #436]	; (8002658 <HAL_FDCAN_IRQHandler+0x4b0>)
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	0f9b      	lsrs	r3, r3, #30
 80024a6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80024a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f958 	bl	8002760 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d011      	beq.n	80024da <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024bc:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_FDCAN_IRQHandler+0x4b4>)
 80024be:	400b      	ands	r3, r1
 80024c0:	6513      	str	r3, [r2, #80]	; 0x50
 80024c2:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_FDCAN_IRQHandler+0x4b0>)
 80024c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c6:	0f9b      	lsrs	r3, r3, #30
 80024c8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a60      	ldr	r2, [pc, #384]	; (8002660 <HAL_FDCAN_IRQHandler+0x4b8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	f040 80ac 	bne.w	800263e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a4 	beq.w	800263e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250a:	4013      	ands	r3, r2
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002522:	4013      	ands	r3, r2
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	4013      	ands	r3, r2
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002548:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	4013      	ands	r3, r2
 8002554:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002560:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	4013      	ands	r3, r2
 800256c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800258c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8f1 	bl	8002776 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80025a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f8f1 	bl	800278c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01a      	beq.n	80025ec <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d014      	beq.n	80025ec <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6939      	ldr	r1, [r7, #16]
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f8db 	bl	80027a2 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80025fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f8dc 	bl	80027ba <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f87f 	bl	800274c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800264e:	bf00      	nop
 8002650:	3758      	adds	r7, #88	; 0x58
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	4000a800 	.word	0x4000a800
 800265c:	3fcfffff 	.word	0x3fcfffff
 8002660:	4000a000 	.word	0x4000a000

08002664 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80027e6:	4ba7      	ldr	r3, [pc, #668]	; (8002a84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	0091      	lsls	r1, r2, #2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	430b      	orrs	r3, r1
 80027f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002800:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	4413      	add	r3, r2
 800281c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002826:	4b97      	ldr	r3, [pc, #604]	; (8002a84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002828:	4013      	ands	r3, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	0091      	lsls	r1, r2, #2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	430b      	orrs	r3, r1
 8002834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4413      	add	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002868:	4b86      	ldr	r3, [pc, #536]	; (8002a84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800286a:	4013      	ands	r3, r2
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	0091      	lsls	r1, r2, #2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	430b      	orrs	r3, r1
 8002876:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002882:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	041a      	lsls	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	4413      	add	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028b0:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	0091      	lsls	r1, r2, #2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028ca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	041a      	lsls	r2, r3, #16
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4413      	add	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	0091      	lsls	r1, r2, #2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	430b      	orrs	r3, r1
 8002906:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4413      	add	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002924:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002926:	4013      	ands	r3, r2
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	0091      	lsls	r1, r2, #2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800293e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	041a      	lsls	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	4413      	add	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	0091      	lsls	r1, r2, #2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	430b      	orrs	r3, r1
 8002974:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002980:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800299c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80029b6:	4413      	add	r3, r2
 80029b8:	009a      	lsls	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	441a      	add	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	441a      	add	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	441a      	add	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	441a      	add	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d915      	bls.n	8002aac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002a80:	e006      	b.n	8002a90 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002a82:	bf00      	nop
 8002a84:	ffff0003 	.word	0xffff0003
 8002a88:	10002b00 	.word	0x10002b00
 8002a8c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e010      	b.n	8002ace <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e005      	b.n	8002ac0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3304      	adds	r3, #4
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3f3      	bcc.n	8002ab4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_GPIO_Init+0x234>)
 8002aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aee:	e194      	b.n	8002e1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8186 	beq.w	8002e14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d005      	beq.n	8002b20 <HAL_GPIO_Init+0x44>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d130      	bne.n	8002b82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b56:	2201      	movs	r2, #1
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 0201 	and.w	r2, r3, #1
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d017      	beq.n	8002bbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d123      	bne.n	8002c12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	69b9      	ldr	r1, [r7, #24]
 8002c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80e0 	beq.w	8002e14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c54:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <HAL_GPIO_Init+0x238>)
 8002c56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <HAL_GPIO_Init+0x238>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_GPIO_Init+0x238>)
 8002c66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <HAL_GPIO_Init+0x23c>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <HAL_GPIO_Init+0x240>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d052      	beq.n	8002d44 <HAL_GPIO_Init+0x268>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <HAL_GPIO_Init+0x244>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d031      	beq.n	8002d0a <HAL_GPIO_Init+0x22e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_GPIO_Init+0x248>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02b      	beq.n	8002d06 <HAL_GPIO_Init+0x22a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_GPIO_Init+0x24c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_GPIO_Init+0x250>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x222>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_GPIO_Init+0x254>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x21e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <HAL_GPIO_Init+0x258>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_GPIO_Init+0x25c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x216>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_GPIO_Init+0x260>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x212>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_GPIO_Init+0x264>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x20e>
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	e02d      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cea:	230a      	movs	r3, #10
 8002cec:	e02b      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cee:	2308      	movs	r3, #8
 8002cf0:	e029      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e027      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	e025      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e023      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	e021      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e01f      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e01d      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01b      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d0e:	bf00      	nop
 8002d10:	58000080 	.word	0x58000080
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58000400 	.word	0x58000400
 8002d1c:	58020000 	.word	0x58020000
 8002d20:	58020400 	.word	0x58020400
 8002d24:	58020800 	.word	0x58020800
 8002d28:	58020c00 	.word	0x58020c00
 8002d2c:	58021000 	.word	0x58021000
 8002d30:	58021400 	.word	0x58021400
 8002d34:	58021800 	.word	0x58021800
 8002d38:	58021c00 	.word	0x58021c00
 8002d3c:	58022000 	.word	0x58022000
 8002d40:	58022400 	.word	0x58022400
 8002d44:	2300      	movs	r3, #0
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	f002 0203 	and.w	r2, r2, #3
 8002d4c:	0092      	lsls	r2, r2, #2
 8002d4e:	4093      	lsls	r3, r2
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d56:	4938      	ldr	r1, [pc, #224]	; (8002e38 <HAL_GPIO_Init+0x35c>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3301      	adds	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f ae63 	bne.w	8002af0 <HAL_GPIO_Init+0x14>
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	3724      	adds	r7, #36	; 0x24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	58000400 	.word	0x58000400

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e70:	b08f      	sub	sp, #60	; 0x3c
 8002e72:	af0a      	add	r7, sp, #40	; 0x28
 8002e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e116      	b.n	80030ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f82a 	bl	8000ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fd68 	bl	8006994 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	687e      	ldr	r6, [r7, #4]
 8002ecc:	466d      	mov	r5, sp
 8002ece:	f106 0410 	add.w	r4, r6, #16
 8002ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ede:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ee2:	1d33      	adds	r3, r6, #4
 8002ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee6:	6838      	ldr	r0, [r7, #0]
 8002ee8:	f003 fce6 	bl	80068b8 <USB_CoreInit>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0d7      	b.n	80030ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fd56 	bl	80069b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e04a      	b.n	8002fa6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	333d      	adds	r3, #61	; 0x3d
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	333c      	adds	r3, #60	; 0x3c
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	b298      	uxth	r0, r3
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3344      	adds	r3, #68	; 0x44
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3340      	adds	r3, #64	; 0x40
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3348      	adds	r3, #72	; 0x48
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334c      	adds	r3, #76	; 0x4c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3354      	adds	r3, #84	; 0x54
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d3af      	bcc.n	8002f10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e044      	b.n	8003040 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	3301      	adds	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	d3b5      	bcc.n	8002fb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	687e      	ldr	r6, [r7, #4]
 8003052:	466d      	mov	r5, sp
 8003054:	f106 0410 	add.w	r4, r6, #16
 8003058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800305a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800305e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003064:	e885 0003 	stmia.w	r5, {r0, r1}
 8003068:	1d33      	adds	r3, r6, #4
 800306a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800306c:	6838      	ldr	r0, [r7, #0]
 800306e:	f003 fcef 	bl	8006a50 <USB_DevInit>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e014      	b.n	80030ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b01      	cmp	r3, #1
 800309a:	d102      	bne.n	80030a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f80b 	bl	80030b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 fead 	bl	8006e06 <USB_DevDisconnect>

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_PCDEx_ActivateLPM+0x44>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	10000003 	.word	0x10000003

08003100 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d00a      	beq.n	800312a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	d001      	beq.n	8003126 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e01f      	b.n	8003166 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e01d      	b.n	8003166 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 0207 	bic.w	r2, r3, #7
 8003132:	490f      	ldr	r1, [pc, #60]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4313      	orrs	r3, r2
 8003138:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800313a:	f7fe f8d3 	bl	80012e4 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003140:	e009      	b.n	8003156 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003142:	f7fe f8cf 	bl	80012e4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003150:	d901      	bls.n	8003156 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e007      	b.n	8003166 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_PWREx_ConfigSupply+0x70>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003162:	d1ee      	bne.n	8003142 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024800 	.word	0x58024800

08003174 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	58024800 	.word	0x58024800

08003194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	; 0x30
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f000 bc1d 	b.w	80039e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8087 	beq.w	80032c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	4b99      	ldr	r3, [pc, #612]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031c0:	4b96      	ldr	r3, [pc, #600]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d007      	beq.n	80031dc <HAL_RCC_OscConfig+0x48>
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	d110      	bne.n	80031f4 <HAL_RCC_OscConfig+0x60>
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d10b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	4b8f      	ldr	r3, [pc, #572]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d06c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x12e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d168      	bne.n	80032c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e3f6      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d106      	bne.n	800320c <HAL_RCC_OscConfig+0x78>
 80031fe:	4b87      	ldr	r3, [pc, #540]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a86      	ldr	r2, [pc, #536]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e02e      	b.n	800326a <HAL_RCC_OscConfig+0xd6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10c      	bne.n	800322e <HAL_RCC_OscConfig+0x9a>
 8003214:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a80      	ldr	r2, [pc, #512]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a7d      	ldr	r2, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e01d      	b.n	800326a <HAL_RCC_OscConfig+0xd6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0xbe>
 8003238:	4b78      	ldr	r3, [pc, #480]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a77      	ldr	r2, [pc, #476]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800323e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b75      	ldr	r3, [pc, #468]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a74      	ldr	r2, [pc, #464]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0xd6>
 8003252:	4b72      	ldr	r3, [pc, #456]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a71      	ldr	r2, [pc, #452]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe f837 	bl	80012e4 <HAL_GetTick>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327a:	f7fe f833 	bl	80012e4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e3aa      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800328c:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0xe6>
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe f823 	bl	80012e4 <HAL_GetTick>
 800329e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a2:	f7fe f81f 	bl	80012e4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e396      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x10e>
 80032c0:	e000      	b.n	80032c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80cb 	beq.w	8003468 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d2:	4b52      	ldr	r3, [pc, #328]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d007      	beq.n	80032f8 <HAL_RCC_OscConfig+0x164>
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2b18      	cmp	r3, #24
 80032ec:	d156      	bne.n	800339c <HAL_RCC_OscConfig+0x208>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d151      	bne.n	800339c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	4b48      	ldr	r3, [pc, #288]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x17c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e368      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003310:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 0219 	bic.w	r2, r3, #25
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	493f      	ldr	r1, [pc, #252]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003322:	f7fd ffdf 	bl	80012e4 <HAL_GetTick>
 8003326:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332a:	f7fd ffdb 	bl	80012e4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e352      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800333c:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	f7fd fffc 	bl	8001344 <HAL_GetREVID>
 800334c:	4603      	mov	r3, r0
 800334e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003352:	4293      	cmp	r3, r2
 8003354:	d817      	bhi.n	8003386 <HAL_RCC_OscConfig+0x1f2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d108      	bne.n	8003370 <HAL_RCC_OscConfig+0x1dc>
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336e:	e07b      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	031b      	lsls	r3, r3, #12
 800337e:	4927      	ldr	r1, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003384:	e070      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	4921      	ldr	r1, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339a:	e065      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d048      	beq.n	8003436 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 0219 	bic.w	r2, r3, #25
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	491a      	ldr	r1, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fd ff95 	bl	80012e4 <HAL_GetTick>
 80033ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033be:	f7fd ff91 	bl	80012e4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e308      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	f7fd ffb2 	bl	8001344 <HAL_GetREVID>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d81a      	bhi.n	8003420 <HAL_RCC_OscConfig+0x28c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d108      	bne.n	8003404 <HAL_RCC_OscConfig+0x270>
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	6053      	str	r3, [r2, #4]
 8003402:	e031      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	031b      	lsls	r3, r3, #12
 8003412:	4902      	ldr	r1, [pc, #8]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
 8003418:	e026      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
 8003420:	4b9a      	ldr	r3, [pc, #616]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	4997      	ldr	r1, [pc, #604]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e018      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b95      	ldr	r3, [pc, #596]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a94      	ldr	r2, [pc, #592]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fd ff4f 	bl	80012e4 <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344a:	f7fd ff4b 	bl	80012e4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e2c2      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800345c:	4b8b      	ldr	r3, [pc, #556]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a9 	beq.w	80035c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4b85      	ldr	r3, [pc, #532]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800347e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003480:	4b82      	ldr	r3, [pc, #520]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d007      	beq.n	800349c <HAL_RCC_OscConfig+0x308>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b18      	cmp	r3, #24
 8003490:	d13a      	bne.n	8003508 <HAL_RCC_OscConfig+0x374>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d135      	bne.n	8003508 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800349c:	4b7b      	ldr	r3, [pc, #492]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x320>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e296      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034b4:	f7fd ff46 	bl	8001344 <HAL_GetREVID>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80034be:	4293      	cmp	r3, r2
 80034c0:	d817      	bhi.n	80034f2 <HAL_RCC_OscConfig+0x35e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d108      	bne.n	80034dc <HAL_RCC_OscConfig+0x348>
 80034ca:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034d2:	4a6e      	ldr	r2, [pc, #440]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034da:	e075      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034dc:	4b6b      	ldr	r3, [pc, #428]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	069b      	lsls	r3, r3, #26
 80034ea:	4968      	ldr	r1, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034f0:	e06a      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	4962      	ldr	r1, [pc, #392]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003506:	e05f      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d042      	beq.n	8003596 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003510:	4b5e      	ldr	r3, [pc, #376]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5d      	ldr	r2, [pc, #372]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fee2 	bl	80012e4 <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003524:	f7fd fede 	bl	80012e4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e255      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003536:	4b55      	ldr	r3, [pc, #340]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003542:	f7fd feff 	bl	8001344 <HAL_GetREVID>
 8003546:	4603      	mov	r3, r0
 8003548:	f241 0203 	movw	r2, #4099	; 0x1003
 800354c:	4293      	cmp	r3, r2
 800354e:	d817      	bhi.n	8003580 <HAL_RCC_OscConfig+0x3ec>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	2b20      	cmp	r3, #32
 8003556:	d108      	bne.n	800356a <HAL_RCC_OscConfig+0x3d6>
 8003558:	4b4c      	ldr	r3, [pc, #304]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003560:	4a4a      	ldr	r2, [pc, #296]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003566:	6053      	str	r3, [r2, #4]
 8003568:	e02e      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
 800356a:	4b48      	ldr	r3, [pc, #288]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	069b      	lsls	r3, r3, #26
 8003578:	4944      	ldr	r1, [pc, #272]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
 800357e:	e023      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
 8003580:	4b42      	ldr	r3, [pc, #264]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	493f      	ldr	r1, [pc, #252]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003590:	4313      	orrs	r3, r2
 8003592:	60cb      	str	r3, [r1, #12]
 8003594:	e018      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3c      	ldr	r2, [pc, #240]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd fe9f 	bl	80012e4 <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035aa:	f7fd fe9b 	bl	80012e4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e212      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d036      	beq.n	8003642 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d019      	beq.n	8003610 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	4a2a      	ldr	r2, [pc, #168]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fd fe7c 	bl	80012e4 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fd fe78 	bl	80012e4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1ef      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x45c>
 800360e:	e018      	b.n	8003642 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003610:	4b1e      	ldr	r3, [pc, #120]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd fe62 	bl	80012e4 <HAL_GetTick>
 8003620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003624:	f7fd fe5e 	bl	80012e4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1d5      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d039      	beq.n	80036c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01c      	beq.n	8003690 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a0c      	ldr	r2, [pc, #48]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800365c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003660:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003662:	f7fd fe3f 	bl	80012e4 <HAL_GetTick>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800366a:	f7fd fe3b 	bl	80012e4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1b2      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x4d6>
 8003688:	e01b      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
 800368a:	bf00      	nop
 800368c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003690:	4b9b      	ldr	r3, [pc, #620]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a9a      	ldr	r2, [pc, #616]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800369a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800369c:	f7fd fe22 	bl	80012e4 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036a4:	f7fd fe1e 	bl	80012e4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e195      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036b6:	4b92      	ldr	r3, [pc, #584]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8081 	beq.w	80037d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036d0:	4b8c      	ldr	r3, [pc, #560]	; (8003904 <HAL_RCC_OscConfig+0x770>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a8b      	ldr	r2, [pc, #556]	; (8003904 <HAL_RCC_OscConfig+0x770>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036dc:	f7fd fe02 	bl	80012e4 <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fdfe 	bl	80012e4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e175      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f6:	4b83      	ldr	r3, [pc, #524]	; (8003904 <HAL_RCC_OscConfig+0x770>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x584>
 800370a:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a7c      	ldr	r2, [pc, #496]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e02d      	b.n	8003774 <HAL_RCC_OscConfig+0x5e0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x5a6>
 8003720:	4b77      	ldr	r3, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a76      	ldr	r2, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	4b74      	ldr	r3, [pc, #464]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a73      	ldr	r2, [pc, #460]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003732:	f023 0304 	bic.w	r3, r3, #4
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e01c      	b.n	8003774 <HAL_RCC_OscConfig+0x5e0>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x5c8>
 8003742:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x5e0>
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a67      	ldr	r2, [pc, #412]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	4a64      	ldr	r2, [pc, #400]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd fdb2 	bl	80012e4 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fd fdae 	bl	80012e4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e123      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800379a:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ee      	beq.n	8003784 <HAL_RCC_OscConfig+0x5f0>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd fd9c 	bl	80012e4 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fd fd98 	bl	80012e4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e10d      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037c6:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ee      	bne.n	80037b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8102 	beq.w	80039e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037dc:	4b48      	ldr	r3, [pc, #288]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e4:	2b18      	cmp	r3, #24
 80037e6:	f000 80bd 	beq.w	8003964 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	f040 809e 	bne.w	8003930 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd fd70 	bl	80012e4 <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7fd fd6c 	bl	80012e4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0e3      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <HAL_RCC_OscConfig+0x774>)
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	430a      	orrs	r2, r1
 800383a:	4931      	ldr	r1, [pc, #196]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	628b      	str	r3, [r1, #40]	; 0x28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	3b01      	subs	r3, #1
 8003846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	3b01      	subs	r3, #1
 8003850:	025b      	lsls	r3, r3, #9
 8003852:	b29b      	uxth	r3, r3
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	3b01      	subs	r3, #1
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	3b01      	subs	r3, #1
 800386a:	061b      	lsls	r3, r3, #24
 800386c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003870:	4923      	ldr	r1, [pc, #140]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_RCC_OscConfig+0x778>)
 8003888:	4013      	ands	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800388e:	00d2      	lsls	r2, r2, #3
 8003890:	491b      	ldr	r1, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f023 020c 	bic.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4917      	ldr	r1, [pc, #92]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f023 0202 	bic.w	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	4912      	ldr	r1, [pc, #72]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd fcf5 	bl	80012e4 <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038fc:	e011      	b.n	8003922 <HAL_RCC_OscConfig+0x78e>
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400
 8003904:	58024800 	.word	0x58024800
 8003908:	fffffc0c 	.word	0xfffffc0c
 800390c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fce8 	bl	80012e4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e05f      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003922:	4b32      	ldr	r3, [pc, #200]	; (80039ec <HAL_RCC_OscConfig+0x858>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x77c>
 800392e:	e057      	b.n	80039e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <HAL_RCC_OscConfig+0x858>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <HAL_RCC_OscConfig+0x858>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fcd2 	bl	80012e4 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd fcce 	bl	80012e4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e045      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCC_OscConfig+0x858>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x7b0>
 8003962:	e03d      	b.n	80039e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <HAL_RCC_OscConfig+0x858>)
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_OscConfig+0x858>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2b01      	cmp	r3, #1
 8003976:	d031      	beq.n	80039dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0203 	and.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d12a      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d122      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d11a      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0a5b      	lsrs	r3, r3, #9
 80039aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d111      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	0c1b      	lsrs	r3, r3, #16
 80039bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d108      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3730      	adds	r7, #48	; 0x30
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	58024400 	.word	0x58024400

080039f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e19c      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b8a      	ldr	r3, [pc, #552]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b87      	ldr	r3, [pc, #540]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	4985      	ldr	r1, [pc, #532]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b83      	ldr	r3, [pc, #524]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e184      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d908      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a50:	4b78      	ldr	r3, [pc, #480]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4975      	ldr	r1, [pc, #468]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	4b70      	ldr	r3, [pc, #448]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d908      	bls.n	8003a90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	496a      	ldr	r1, [pc, #424]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d908      	bls.n	8003abe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	495e      	ldr	r1, [pc, #376]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	4b59      	ldr	r3, [pc, #356]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d908      	bls.n	8003aec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ada:	4b56      	ldr	r3, [pc, #344]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4953      	ldr	r1, [pc, #332]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d908      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f023 020f 	bic.w	r2, r3, #15
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4947      	ldr	r1, [pc, #284]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d055      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b26:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	4940      	ldr	r1, [pc, #256]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b40:	4b3c      	ldr	r3, [pc, #240]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d121      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0f6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b58:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d115      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0ea      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0de      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b80:	4b2c      	ldr	r3, [pc, #176]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0d6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f023 0207 	bic.w	r2, r3, #7
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4925      	ldr	r1, [pc, #148]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fb9f 	bl	80012e4 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003baa:	f7fd fb9b 	bl	80012e4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0be      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d1eb      	bne.n	8003baa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d010      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d208      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f023 020f 	bic.w	r2, r3, #15
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	490e      	ldr	r1, [pc, #56]	; (8003c34 <HAL_RCC_ClockConfig+0x244>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d214      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 020f 	bic.w	r2, r3, #15
 8003c16:	4906      	ldr	r1, [pc, #24]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <HAL_RCC_ClockConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e086      	b.n	8003d3e <HAL_RCC_ClockConfig+0x34e>
 8003c30:	52002000 	.word	0x52002000
 8003c34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d010      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d208      	bcs.n	8003c66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c54:	4b3c      	ldr	r3, [pc, #240]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4939      	ldr	r1, [pc, #228]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d010      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d208      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	492e      	ldr	r1, [pc, #184]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d208      	bcs.n	8003cc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	4922      	ldr	r1, [pc, #136]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d208      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cde:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4917      	ldr	r1, [pc, #92]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cf0:	f000 f834 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	4912      	ldr	r1, [pc, #72]	; (8003d4c <HAL_RCC_ClockConfig+0x35c>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_RCC_ClockConfig+0x358>)
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <HAL_RCC_ClockConfig+0x35c>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <HAL_RCC_ClockConfig+0x360>)
 8003d26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d28:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <HAL_RCC_ClockConfig+0x364>)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x368>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd fa8c 	bl	8001250 <HAL_InitTick>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	08006fa4 	.word	0x08006fa4
 8003d50:	24000004 	.word	0x24000004
 8003d54:	24000000 	.word	0x24000000
 8003d58:	24000008 	.word	0x24000008

08003d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d62:	4bb3      	ldr	r3, [pc, #716]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d6a:	2b18      	cmp	r3, #24
 8003d6c:	f200 8155 	bhi.w	800401a <HAL_RCC_GetSysClockFreq+0x2be>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003ddd 	.word	0x08003ddd
 8003d7c:	0800401b 	.word	0x0800401b
 8003d80:	0800401b 	.word	0x0800401b
 8003d84:	0800401b 	.word	0x0800401b
 8003d88:	0800401b 	.word	0x0800401b
 8003d8c:	0800401b 	.word	0x0800401b
 8003d90:	0800401b 	.word	0x0800401b
 8003d94:	0800401b 	.word	0x0800401b
 8003d98:	08003e03 	.word	0x08003e03
 8003d9c:	0800401b 	.word	0x0800401b
 8003da0:	0800401b 	.word	0x0800401b
 8003da4:	0800401b 	.word	0x0800401b
 8003da8:	0800401b 	.word	0x0800401b
 8003dac:	0800401b 	.word	0x0800401b
 8003db0:	0800401b 	.word	0x0800401b
 8003db4:	0800401b 	.word	0x0800401b
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	0800401b 	.word	0x0800401b
 8003dc0:	0800401b 	.word	0x0800401b
 8003dc4:	0800401b 	.word	0x0800401b
 8003dc8:	0800401b 	.word	0x0800401b
 8003dcc:	0800401b 	.word	0x0800401b
 8003dd0:	0800401b 	.word	0x0800401b
 8003dd4:	0800401b 	.word	0x0800401b
 8003dd8:	08003e0f 	.word	0x08003e0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ddc:	4b94      	ldr	r3, [pc, #592]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003de8:	4b91      	ldr	r3, [pc, #580]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	4a90      	ldr	r2, [pc, #576]	; (8004034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003dfa:	e111      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dfc:	4b8d      	ldr	r3, [pc, #564]	; (8004034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dfe:	61bb      	str	r3, [r7, #24]
    break;
 8003e00:	e10e      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e02:	4b8d      	ldr	r3, [pc, #564]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e04:	61bb      	str	r3, [r7, #24]
    break;
 8003e06:	e10b      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e08:	4b8c      	ldr	r3, [pc, #560]	; (800403c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e0a:	61bb      	str	r3, [r7, #24]
    break;
 8003e0c:	e108      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e0e:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e18:	4b85      	ldr	r3, [pc, #532]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e24:	4b82      	ldr	r3, [pc, #520]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e2e:	4b80      	ldr	r3, [pc, #512]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80e1 	beq.w	8004014 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f000 8083 	beq.w	8003f60 <HAL_RCC_GetSysClockFreq+0x204>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f200 80a1 	bhi.w	8003fa4 <HAL_RCC_GetSysClockFreq+0x248>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x114>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d056      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e6e:	e099      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e70:	4b6f      	ldr	r3, [pc, #444]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02d      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e7c:	4b6c      	ldr	r3, [pc, #432]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	08db      	lsrs	r3, r3, #3
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	4a6b      	ldr	r2, [pc, #428]	; (8004034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea6:	4b62      	ldr	r3, [pc, #392]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ed6:	e087      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004044 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eea:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003efe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f1a:	e065      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2e:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f5e:	e043      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800404c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f72:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fa2:	e021      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fe6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	0a5b      	lsrs	r3, r3, #9
 8003fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004000:	edd7 6a07 	vldr	s13, [r7, #28]
 8004004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800400c:	ee17 3a90 	vmov	r3, s15
 8004010:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004012:	e005      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
    break;
 8004018:	e002      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800401c:	61bb      	str	r3, [r7, #24]
    break;
 800401e:	bf00      	nop
  }

  return sysclockfreq;
 8004020:	69bb      	ldr	r3, [r7, #24]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
 8004034:	03d09000 	.word	0x03d09000
 8004038:	003d0900 	.word	0x003d0900
 800403c:	007a1200 	.word	0x007a1200
 8004040:	46000000 	.word	0x46000000
 8004044:	4c742400 	.word	0x4c742400
 8004048:	4a742400 	.word	0x4a742400
 800404c:	4af42400 	.word	0x4af42400

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004056:	f7ff fe81 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 800405a:	4602      	mov	r2, r0
 800405c:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	490f      	ldr	r1, [pc, #60]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004068:	5ccb      	ldrb	r3, [r1, r3]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800408c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800408e:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	58024400 	.word	0x58024400
 80040a4:	08006fa4 	.word	0x08006fa4
 80040a8:	24000004 	.word	0x24000004
 80040ac:	24000000 	.word	0x24000000

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80040b4:	f7ff ffcc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4904      	ldr	r1, [pc, #16]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	58024400 	.word	0x58024400
 80040d8:	08006fa4 	.word	0x08006fa4

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040e0:	f7ff ffb6 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	58024400 	.word	0x58024400
 8004104:	08006fa4 	.word	0x08006fa4

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004110:	2300      	movs	r3, #0
 8004112:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004114:	2300      	movs	r3, #0
 8004116:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004128:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800412c:	d02a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800412e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004132:	d824      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004138:	d018      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800413a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800413e:	d81e      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004148:	d007      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800414a:	e018      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4ba3      	ldr	r3, [pc, #652]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4aa2      	ldr	r2, [pc, #648]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004158:	e015      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f001 f9d5 	bl	8005510 <RCCEx_PLL2_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800416a:	e00c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fa7e 	bl	8005674 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
      break;
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800418c:	4b93      	ldr	r3, [pc, #588]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800418e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004198:	4990      	ldr	r1, [pc, #576]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	650b      	str	r3, [r1, #80]	; 0x50
 800419e:	e001      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d03d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d826      	bhi.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041d5 	.word	0x080041d5
 80041c4:	080041e3 	.word	0x080041e3
 80041c8:	080041f5 	.word	0x080041f5
 80041cc:	0800420d 	.word	0x0800420d
 80041d0:	0800420d 	.word	0x0800420d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d4:	4b81      	ldr	r3, [pc, #516]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4a80      	ldr	r2, [pc, #512]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041e0:	e015      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 f991 	bl	8005510 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041f2:	e00c      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3324      	adds	r3, #36	; 0x24
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 fa3a 	bl	8005674 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
      break;
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800420c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004214:	4b71      	ldr	r3, [pc, #452]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	f023 0207 	bic.w	r2, r3, #7
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	496e      	ldr	r1, [pc, #440]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	650b      	str	r3, [r1, #80]	; 0x50
 8004226:	e001      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004234:	2b00      	cmp	r3, #0
 8004236:	d042      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004240:	d02b      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d825      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004248:	2bc0      	cmp	r3, #192	; 0xc0
 800424a:	d028      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800424c:	2bc0      	cmp	r3, #192	; 0xc0
 800424e:	d821      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d016      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004254:	2b80      	cmp	r3, #128	; 0x80
 8004256:	d81d      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d007      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004260:	e018      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004262:	4b5e      	ldr	r3, [pc, #376]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800426e:	e017      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f94a 	bl	8005510 <RCCEx_PLL2_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004280:	e00e      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3324      	adds	r3, #36	; 0x24
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f001 f9f3 	bl	8005674 <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004292:	e005      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	75fb      	strb	r3, [r7, #23]
      break;
 8004298:	e002      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80042a6:	4b4d      	ldr	r3, [pc, #308]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	494a      	ldr	r1, [pc, #296]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	650b      	str	r3, [r1, #80]	; 0x50
 80042b8:	e001      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d049      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d4:	d030      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80042d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042da:	d82a      	bhi.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042e0:	d02c      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80042e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042e6:	d824      	bhi.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ec:	d018      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f2:	d81e      	bhi.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80042f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042fc:	d007      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80042fe:	e018      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a35      	ldr	r2, [pc, #212]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800430c:	e017      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f001 f8fb 	bl	8005510 <RCCEx_PLL2_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800431e:	e00e      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3324      	adds	r3, #36	; 0x24
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f001 f9a4 	bl	8005674 <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004330:	e005      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
      break;
 8004336:	e002      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800433c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004352:	4922      	ldr	r1, [pc, #136]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	658b      	str	r3, [r1, #88]	; 0x58
 8004358:	e001      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004366:	2b00      	cmp	r3, #0
 8004368:	d04b      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004374:	d030      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800437a:	d82a      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800437c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004380:	d02e      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004382:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004386:	d824      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800438c:	d018      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800438e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004392:	d81e      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800439c:	d007      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800439e:	e018      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043ac:	e019      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f8ab 	bl	8005510 <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80043be:	e010      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3324      	adds	r3, #36	; 0x24
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 f954 	bl	8005674 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043d0:	e007      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
      break;
 80043d6:	e004      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80043dc:	58024400 	.word	0x58024400
      break;
 80043e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043e8:	4b99      	ldr	r3, [pc, #612]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043f6:	4996      	ldr	r1, [pc, #600]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	658b      	str	r3, [r1, #88]	; 0x58
 80043fc:	e001      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d032      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004412:	2b30      	cmp	r3, #48	; 0x30
 8004414:	d01c      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004416:	2b30      	cmp	r3, #48	; 0x30
 8004418:	d817      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800441a:	2b20      	cmp	r3, #32
 800441c:	d00c      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800441e:	2b20      	cmp	r3, #32
 8004420:	d813      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004426:	2b10      	cmp	r3, #16
 8004428:	d10f      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442a:	4b89      	ldr	r3, [pc, #548]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	4a88      	ldr	r2, [pc, #544]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004436:	e00e      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	2102      	movs	r1, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f001 f866 	bl	8005510 <RCCEx_PLL2_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004448:	e005      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800445c:	4b7c      	ldr	r3, [pc, #496]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800445e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	4979      	ldr	r1, [pc, #484]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800446a:	4313      	orrs	r3, r2
 800446c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800446e:	e001      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d047      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004488:	d030      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800448a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800448e:	d82a      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004490:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004494:	d02c      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800449a:	d824      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800449c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a0:	d018      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80044a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a6:	d81e      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80044ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b0:	d007      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80044b2:	e018      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4b66      	ldr	r3, [pc, #408]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a65      	ldr	r2, [pc, #404]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044c0:	e017      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 f821 	bl	8005510 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044d2:	e00e      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 f8ca 	bl	8005674 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044e4:	e005      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80044f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044f8:	4b55      	ldr	r3, [pc, #340]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	4952      	ldr	r1, [pc, #328]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004506:	4313      	orrs	r3, r2
 8004508:	650b      	str	r3, [r1, #80]	; 0x50
 800450a:	e001      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d049      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004524:	d02e      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452a:	d828      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800452c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004530:	d02a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004536:	d822      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004538:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800453c:	d026      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800453e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004542:	d81c      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004548:	d010      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800454a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800454e:	d816      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01d      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d111      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	2101      	movs	r1, #1
 8004560:	4618      	mov	r0, r3
 8004562:	f000 ffd5 	bl	8005510 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800456a:	e012      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3324      	adds	r3, #36	; 0x24
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f001 f87e 	bl	8005674 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800457c:	e009      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
      break;
 8004582:	e006      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004584:	bf00      	nop
 8004586:	e004      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004588:	bf00      	nop
 800458a:	e002      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800458c:	bf00      	nop
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004598:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800459a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a4:	492a      	ldr	r1, [pc, #168]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	650b      	str	r3, [r1, #80]	; 0x50
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d04d      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c6:	d02e      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80045c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045cc:	d828      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d02a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d822      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80045da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045de:	d026      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80045e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045e4:	d81c      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80045e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ea:	d010      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80045ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f0:	d816      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01d      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80045f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045fa:	d111      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	2101      	movs	r1, #1
 8004602:	4618      	mov	r0, r3
 8004604:	f000 ff84 	bl	8005510 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800460c:	e012      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3324      	adds	r3, #36	; 0x24
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f82d 	bl	8005674 <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800461e:	e009      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	75fb      	strb	r3, [r7, #23]
      break;
 8004624:	e006      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004648:	4901      	ldr	r1, [pc, #4]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800464a:	4313      	orrs	r3, r2
 800464c:	658b      	str	r3, [r1, #88]	; 0x58
 800464e:	e003      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02f      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466c:	d00e      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800466e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004672:	d814      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800467c:	d10f      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467e:	4baf      	ldr	r3, [pc, #700]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4aae      	ldr	r2, [pc, #696]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800468a:	e00c      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff3c 	bl	8005510 <RCCEx_PLL2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
      break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80046a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046ac:	4ba3      	ldr	r3, [pc, #652]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b8:	49a0      	ldr	r1, [pc, #640]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	650b      	str	r3, [r1, #80]	; 0x50
 80046be:	e001      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d032      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d81b      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004717 	.word	0x08004717
 80046e4:	080046f1 	.word	0x080046f1
 80046e8:	080046ff 	.word	0x080046ff
 80046ec:	08004717 	.word	0x08004717
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f0:	4b92      	ldr	r3, [pc, #584]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4a91      	ldr	r2, [pc, #580]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046fc:	e00c      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 ff03 	bl	8005510 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800470e:	e003      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	75fb      	strb	r3, [r7, #23]
      break;
 8004714:	e000      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800471e:	4b87      	ldr	r3, [pc, #540]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	f023 0203 	bic.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	4984      	ldr	r1, [pc, #528]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800472c:	4313      	orrs	r3, r2
 800472e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004730:	e001      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8086 	beq.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004744:	4b7e      	ldr	r3, [pc, #504]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a7d      	ldr	r2, [pc, #500]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800474a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004750:	f7fc fdc8 	bl	80012e4 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004756:	e009      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004758:	f7fc fdc4 	bl	80012e4 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d902      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	75fb      	strb	r3, [r7, #23]
        break;
 800476a:	e005      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800476c:	4b74      	ldr	r3, [pc, #464]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d166      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800477e:	4b6f      	ldr	r3, [pc, #444]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004780:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004788:	4053      	eors	r3, r2
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004792:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800479c:	4b67      	ldr	r3, [pc, #412]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a66      	ldr	r2, [pc, #408]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047a8:	4b64      	ldr	r3, [pc, #400]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	4a63      	ldr	r2, [pc, #396]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047b4:	4a61      	ldr	r2, [pc, #388]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c4:	d115      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fc fd8d 	bl	80012e4 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047cc:	e00b      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fc fd89 	bl	80012e4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047dc:	4293      	cmp	r3, r2
 80047de:	d902      	bls.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	75fb      	strb	r3, [r7, #23]
            break;
 80047e4:	e005      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e6:	4b55      	ldr	r3, [pc, #340]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ed      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d126      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004806:	d10d      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004808:	4b4c      	ldr	r3, [pc, #304]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004816:	0919      	lsrs	r1, r3, #4
 8004818:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800481a:	400b      	ands	r3, r1
 800481c:	4947      	ldr	r1, [pc, #284]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800481e:	4313      	orrs	r3, r2
 8004820:	610b      	str	r3, [r1, #16]
 8004822:	e005      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4a44      	ldr	r2, [pc, #272]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800482a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800482e:	6113      	str	r3, [r2, #16]
 8004830:	4b42      	ldr	r3, [pc, #264]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	493f      	ldr	r1, [pc, #252]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004840:	4313      	orrs	r3, r2
 8004842:	670b      	str	r3, [r1, #112]	; 0x70
 8004844:	e004      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
 8004848:	75bb      	strb	r3, [r7, #22]
 800484a:	e001      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8085 	beq.w	8004968 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004862:	2b28      	cmp	r3, #40	; 0x28
 8004864:	d866      	bhi.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004949 	.word	0x08004949
 8004870:	08004935 	.word	0x08004935
 8004874:	08004935 	.word	0x08004935
 8004878:	08004935 	.word	0x08004935
 800487c:	08004935 	.word	0x08004935
 8004880:	08004935 	.word	0x08004935
 8004884:	08004935 	.word	0x08004935
 8004888:	08004935 	.word	0x08004935
 800488c:	08004911 	.word	0x08004911
 8004890:	08004935 	.word	0x08004935
 8004894:	08004935 	.word	0x08004935
 8004898:	08004935 	.word	0x08004935
 800489c:	08004935 	.word	0x08004935
 80048a0:	08004935 	.word	0x08004935
 80048a4:	08004935 	.word	0x08004935
 80048a8:	08004935 	.word	0x08004935
 80048ac:	08004923 	.word	0x08004923
 80048b0:	08004935 	.word	0x08004935
 80048b4:	08004935 	.word	0x08004935
 80048b8:	08004935 	.word	0x08004935
 80048bc:	08004935 	.word	0x08004935
 80048c0:	08004935 	.word	0x08004935
 80048c4:	08004935 	.word	0x08004935
 80048c8:	08004935 	.word	0x08004935
 80048cc:	08004949 	.word	0x08004949
 80048d0:	08004935 	.word	0x08004935
 80048d4:	08004935 	.word	0x08004935
 80048d8:	08004935 	.word	0x08004935
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004935 	.word	0x08004935
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	08004949 	.word	0x08004949
 80048f0:	08004935 	.word	0x08004935
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004935 	.word	0x08004935
 80048fc:	08004935 	.word	0x08004935
 8004900:	08004935 	.word	0x08004935
 8004904:	08004935 	.word	0x08004935
 8004908:	08004935 	.word	0x08004935
 800490c:	08004949 	.word	0x08004949
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fdfa 	bl	8005510 <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004920:	e013      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3324      	adds	r3, #36	; 0x24
 8004926:	2101      	movs	r1, #1
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fea3 	bl	8005674 <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004932:	e00a      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	e007      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800493a:	bf00      	nop
 800493c:	58024400 	.word	0x58024400
 8004940:	58024800 	.word	0x58024800
 8004944:	00ffffcf 	.word	0x00ffffcf
      break;
 8004948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004950:	4b96      	ldr	r3, [pc, #600]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495c:	4993      	ldr	r1, [pc, #588]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	654b      	str	r3, [r1, #84]	; 0x54
 8004962:	e001      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d038      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	2b05      	cmp	r3, #5
 800497a:	d821      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049c7 	.word	0x080049c7
 8004988:	0800499d 	.word	0x0800499d
 800498c:	080049af 	.word	0x080049af
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049c7 	.word	0x080049c7
 8004998:	080049c7 	.word	0x080049c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	2101      	movs	r1, #1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fdb4 	bl	8005510 <RCCEx_PLL2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049ac:	e00c      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3324      	adds	r3, #36	; 0x24
 80049b2:	2101      	movs	r1, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fe5d 	bl	8005674 <RCCEx_PLL3_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049be:	e003      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	75fb      	strb	r3, [r7, #23]
      break;
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80049c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049ce:	4b77      	ldr	r3, [pc, #476]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f023 0207 	bic.w	r2, r3, #7
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	4974      	ldr	r1, [pc, #464]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	654b      	str	r3, [r1, #84]	; 0x54
 80049e0:	e001      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d03a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d821      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a47 	.word	0x08004a47
 8004a08:	08004a1d 	.word	0x08004a1d
 8004a0c:	08004a2f 	.word	0x08004a2f
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	2101      	movs	r1, #1
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fd74 	bl	8005510 <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a2c:	e00c      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3324      	adds	r3, #36	; 0x24
 8004a32:	2101      	movs	r1, #1
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fe1d 	bl	8005674 <RCCEx_PLL3_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a3e:	e003      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
      break;
 8004a44:	e000      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a4e:	4b57      	ldr	r3, [pc, #348]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	f023 0207 	bic.w	r2, r3, #7
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	4953      	ldr	r1, [pc, #332]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	658b      	str	r3, [r1, #88]	; 0x58
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d04b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7e:	d02e      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a84:	d828      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d02a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d822      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a96:	d026      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a9c:	d81c      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d010      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d816      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01d      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab2:	d111      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fd28 	bl	8005510 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ac4:	e012      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3324      	adds	r3, #36	; 0x24
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fdd1 	bl	8005674 <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ad6:	e009      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
      break;
 8004adc:	e006      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e004      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	492a      	ldr	r1, [pc, #168]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	654b      	str	r3, [r1, #84]	; 0x54
 8004b06:	e001      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d04d      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b22:	d02e      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004b24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b28:	d828      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d02a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d822      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b3a:	d026      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b40:	d81c      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b46:	d010      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4c:	d816      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01d      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d111      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fcd6 	bl	8005510 <RCCEx_PLL2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b68:	e012      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3324      	adds	r3, #36	; 0x24
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd7f 	bl	8005674 <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b7a:	e009      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b80:	e006      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b82:	bf00      	nop
 8004b84:	e004      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba4:	4901      	ldr	r1, [pc, #4]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d04b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bca:	d02e      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004bcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bd0:	d828      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd6:	d02a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d822      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004bde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004be2:	d026      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004be4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004be8:	d81c      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bee:	d010      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf4:	d816      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01d      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfe:	d111      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fc82 	bl	8005510 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c10:	e012      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3324      	adds	r3, #36	; 0x24
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fd2b 	bl	8005674 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c22:	e009      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e004      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c3e:	4b9d      	ldr	r3, [pc, #628]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c4c:	4999      	ldr	r1, [pc, #612]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	658b      	str	r3, [r1, #88]	; 0x58
 8004c52:	e001      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d10a      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3324      	adds	r3, #36	; 0x24
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fcfc 	bl	8005674 <RCCEx_PLL3_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c86:	4b8b      	ldr	r3, [pc, #556]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c94:	4987      	ldr	r1, [pc, #540]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3324      	adds	r3, #36	; 0x24
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fcdb 	bl	8005674 <RCCEx_PLL3_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cc8:	4b7a      	ldr	r3, [pc, #488]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd6:	4977      	ldr	r1, [pc, #476]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d034      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf2:	d01d      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf8:	d817      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d009      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004d04:	e011      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fbff 	bl	8005510 <RCCEx_PLL2_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d16:	e00c      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fca8 	bl	8005674 <RCCEx_PLL3_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d38:	4b5e      	ldr	r3, [pc, #376]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d46:	495b      	ldr	r1, [pc, #364]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d4c:	e001      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d033      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d68:	d01c      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d6e:	d816      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d74:	d003      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d7a:	d007      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004d7c:	e00f      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7e:	4b4d      	ldr	r3, [pc, #308]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	4a4c      	ldr	r2, [pc, #304]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d8a:	e00c      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	2101      	movs	r1, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fc6e 	bl	8005674 <RCCEx_PLL3_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
      break;
 8004da2:	e000      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dac:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	493e      	ldr	r1, [pc, #248]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	654b      	str	r3, [r1, #84]	; 0x54
 8004dc0:	e001      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d029      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dde:	d007      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004de0:	e00f      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de2:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	4a33      	ldr	r2, [pc, #204]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004dee:	e00b      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fb8a 	bl	8005510 <RCCEx_PLL2_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e0e:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	4926      	ldr	r1, [pc, #152]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e20:	e001      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	2102      	movs	r1, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fc1b 	bl	8005674 <RCCEx_PLL3_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d033      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d017      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e62:	d811      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d013      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6e:	d80b      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d106      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e86:	e007      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8c:	e004      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e002      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004e92:	bf00      	nop
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eaa:	4902      	ldr	r1, [pc, #8]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	654b      	str	r3, [r1, #84]	; 0x54
 8004eb0:	e004      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ec8:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	492e      	ldr	r1, [pc, #184]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ef4:	4926      	ldr	r1, [pc, #152]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f06:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f12:	491f      	ldr	r1, [pc, #124]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f2e:	6113      	str	r3, [r2, #16]
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f3a:	4915      	ldr	r1, [pc, #84]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da08      	bge.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f48:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	490e      	ldr	r1, [pc, #56]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f7a:	7dbb      	ldrb	r3, [r7, #22]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e000      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	58024400 	.word	0x58024400

08004f94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f98:	f7ff f85a 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	08006fa4 	.word	0x08006fa4

08004fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	; 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc8:	4ba1      	ldr	r3, [pc, #644]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004fd2:	4b9f      	ldr	r3, [pc, #636]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	0b1b      	lsrs	r3, r3, #12
 8004fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fde:	4b9c      	ldr	r3, [pc, #624]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004fea:	4b99      	ldr	r3, [pc, #612]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	08db      	lsrs	r3, r3, #3
 8004ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8111 	beq.w	8005230 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	f000 8083 	beq.w	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b02      	cmp	r3, #2
 800501a:	f200 80a1 	bhi.w	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d056      	beq.n	80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800502a:	e099      	b.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800502c:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d02d      	beq.n	8005094 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005038:	4b85      	ldr	r3, [pc, #532]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	4a84      	ldr	r2, [pc, #528]	; (8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	ee07 3a90 	vmov	s15, r3
 8005050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b7b      	ldr	r3, [pc, #492]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a03 	vldr	s12, [r7, #12]
 8005076:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005092:	e087      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800525c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050d6:	e065      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b59      	ldr	r3, [pc, #356]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800511a:	e043      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b48      	ldr	r3, [pc, #288]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005142:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800515e:	e021      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b37      	ldr	r3, [pc, #220]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a03 	vldr	s12, [r7, #12]
 8005186:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051be:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ca:	ee17 2a90 	vmov	r2, s15
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80051d2:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	0c1b      	lsrs	r3, r3, #16
 80051d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f8:	ee17 2a90 	vmov	r2, s15
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	0e1b      	lsrs	r3, r3, #24
 8005206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521a:	edd7 6a07 	vldr	s13, [r7, #28]
 800521e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005226:	ee17 2a90 	vmov	r2, s15
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800522e:	e008      	b.n	8005242 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	609a      	str	r2, [r3, #8]
}
 8005242:	bf00      	nop
 8005244:	3724      	adds	r7, #36	; 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	58024400 	.word	0x58024400
 8005254:	03d09000 	.word	0x03d09000
 8005258:	46000000 	.word	0x46000000
 800525c:	4c742400 	.word	0x4c742400
 8005260:	4a742400 	.word	0x4a742400
 8005264:	4af42400 	.word	0x4af42400

08005268 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005270:	4ba1      	ldr	r3, [pc, #644]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800527a:	4b9f      	ldr	r3, [pc, #636]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	0d1b      	lsrs	r3, r3, #20
 8005280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005284:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005286:	4b9c      	ldr	r3, [pc, #624]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005292:	4b99      	ldr	r3, [pc, #612]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	08db      	lsrs	r3, r3, #3
 8005298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8111 	beq.w	80054d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	f000 8083 	beq.w	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	f200 80a1 	bhi.w	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d056      	beq.n	8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052d2:	e099      	b.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d4:	4b88      	ldr	r3, [pc, #544]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d02d      	beq.n	800533c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052e0:	4b85      	ldr	r3, [pc, #532]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	4a84      	ldr	r2, [pc, #528]	; (80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b7b      	ldr	r3, [pc, #492]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a03 	vldr	s12, [r7, #12]
 800531e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800533a:	e087      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005362:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800537e:	e065      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b59      	ldr	r3, [pc, #356]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053c2:	e043      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800550c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b48      	ldr	r3, [pc, #288]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005406:	e021      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b37      	ldr	r3, [pc, #220]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a03 	vldr	s12, [r7, #12]
 800542e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800544a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800544c:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	0a5b      	lsrs	r3, r3, #9
 8005452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005466:	edd7 6a07 	vldr	s13, [r7, #28]
 800546a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800546e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005472:	ee17 2a90 	vmov	r2, s15
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800547a:	4b1f      	ldr	r3, [pc, #124]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	0c1b      	lsrs	r3, r3, #16
 8005480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005494:	edd7 6a07 	vldr	s13, [r7, #28]
 8005498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a0:	ee17 2a90 	vmov	r2, s15
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	0e1b      	lsrs	r3, r3, #24
 80054ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ce:	ee17 2a90 	vmov	r2, s15
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
}
 80054ea:	bf00      	nop
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
 80054fc:	03d09000 	.word	0x03d09000
 8005500:	46000000 	.word	0x46000000
 8005504:	4c742400 	.word	0x4c742400
 8005508:	4a742400 	.word	0x4a742400
 800550c:	4af42400 	.word	0x4af42400

08005510 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800551e:	4b53      	ldr	r3, [pc, #332]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d101      	bne.n	800552e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e099      	b.n	8005662 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800552e:	4b4f      	ldr	r3, [pc, #316]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4e      	ldr	r2, [pc, #312]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005534:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553a:	f7fb fed3 	bl	80012e4 <HAL_GetTick>
 800553e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005540:	e008      	b.n	8005554 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005542:	f7fb fecf 	bl	80012e4 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e086      	b.n	8005662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005554:	4b45      	ldr	r3, [pc, #276]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005560:	4b42      	ldr	r3, [pc, #264]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	493f      	ldr	r1, [pc, #252]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005570:	4313      	orrs	r3, r2
 8005572:	628b      	str	r3, [r1, #40]	; 0x28
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	3b01      	subs	r3, #1
 800557a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	3b01      	subs	r3, #1
 8005584:	025b      	lsls	r3, r3, #9
 8005586:	b29b      	uxth	r3, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	3b01      	subs	r3, #1
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	3b01      	subs	r3, #1
 800559e:	061b      	lsls	r3, r3, #24
 80055a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055a4:	4931      	ldr	r1, [pc, #196]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055aa:	4b30      	ldr	r3, [pc, #192]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	492d      	ldr	r1, [pc, #180]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055bc:	4b2b      	ldr	r3, [pc, #172]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	f023 0220 	bic.w	r2, r3, #32
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	4928      	ldr	r1, [pc, #160]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ce:	4b27      	ldr	r3, [pc, #156]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4a26      	ldr	r2, [pc, #152]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055d4:	f023 0310 	bic.w	r3, r3, #16
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055de:	4b24      	ldr	r3, [pc, #144]	; (8005670 <RCCEx_PLL2_Config+0x160>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	69d2      	ldr	r2, [r2, #28]
 80055e6:	00d2      	lsls	r2, r2, #3
 80055e8:	4920      	ldr	r1, [pc, #128]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055ee:	4b1f      	ldr	r3, [pc, #124]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055f4:	f043 0310 	orr.w	r3, r3, #16
 80055f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005600:	4b1a      	ldr	r3, [pc, #104]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800560a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800560c:	e00f      	b.n	800562e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d106      	bne.n	8005622 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4a14      	ldr	r2, [pc, #80]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 800561a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800561e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005620:	e005      	b.n	800562e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	4a11      	ldr	r2, [pc, #68]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800562c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a0e      	ldr	r2, [pc, #56]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563a:	f7fb fe53 	bl	80012e4 <HAL_GetTick>
 800563e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005640:	e008      	b.n	8005654 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005642:	f7fb fe4f 	bl	80012e4 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	ffff0007 	.word	0xffff0007

08005674 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005682:	4b53      	ldr	r3, [pc, #332]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b03      	cmp	r3, #3
 800568c:	d101      	bne.n	8005692 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e099      	b.n	80057c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005692:	4b4f      	ldr	r3, [pc, #316]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4e      	ldr	r2, [pc, #312]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800569e:	f7fb fe21 	bl	80012e4 <HAL_GetTick>
 80056a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056a4:	e008      	b.n	80056b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056a6:	f7fb fe1d 	bl	80012e4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e086      	b.n	80057c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056b8:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056c4:	4b42      	ldr	r3, [pc, #264]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	051b      	lsls	r3, r3, #20
 80056d2:	493f      	ldr	r1, [pc, #252]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	628b      	str	r3, [r1, #40]	; 0x28
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	3b01      	subs	r3, #1
 80056de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	025b      	lsls	r3, r3, #9
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	3b01      	subs	r3, #1
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005708:	4931      	ldr	r1, [pc, #196]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800570a:	4313      	orrs	r3, r2
 800570c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800570e:	4b30      	ldr	r3, [pc, #192]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	492d      	ldr	r1, [pc, #180]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800571c:	4313      	orrs	r3, r2
 800571e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	4928      	ldr	r1, [pc, #160]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005732:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800573c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005742:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <RCCEx_PLL3_Config+0x160>)
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	69d2      	ldr	r2, [r2, #28]
 800574a:	00d2      	lsls	r2, r2, #3
 800574c:	4920      	ldr	r1, [pc, #128]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005752:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a19      	ldr	r2, [pc, #100]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800576a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800576e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005770:	e00f      	b.n	8005792 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d106      	bne.n	8005786 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800577e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005782:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005784:	e005      	b.n	8005792 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800578c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005790:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0e      	ldr	r2, [pc, #56]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579e:	f7fb fda1 	bl	80012e4 <HAL_GetTick>
 80057a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057a6:	f7fb fd9d 	bl	80012e4 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e006      	b.n	80057c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
 80057d4:	ffff0007 	.word	0xffff0007

080057d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e042      	b.n	8005870 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fb fb13 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2224      	movs	r2, #36	; 0x24
 8005806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f82c 	bl	8005878 <UART_SetConfig>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e022      	b.n	8005870 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fd88 	bl	8006348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fe0f 	bl	800648c <UART_CheckIdleState>
 800586e:	4603      	mov	r3, r0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800587c:	b092      	sub	sp, #72	; 0x48
 800587e:	af00      	add	r7, sp, #0
 8005880:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	431a      	orrs	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	431a      	orrs	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4313      	orrs	r3, r2
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4bbe      	ldr	r3, [pc, #760]	; (8005ba0 <UART_SetConfig+0x328>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4ab3      	ldr	r2, [pc, #716]	; (8005ba4 <UART_SetConfig+0x32c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d004      	beq.n	80058e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058e0:	4313      	orrs	r3, r2
 80058e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	4baf      	ldr	r3, [pc, #700]	; (8005ba8 <UART_SetConfig+0x330>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	f023 010f 	bic.w	r1, r3, #15
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4aa6      	ldr	r2, [pc, #664]	; (8005bac <UART_SetConfig+0x334>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d177      	bne.n	8005a08 <UART_SetConfig+0x190>
 8005918:	4ba5      	ldr	r3, [pc, #660]	; (8005bb0 <UART_SetConfig+0x338>)
 800591a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005920:	2b28      	cmp	r3, #40	; 0x28
 8005922:	d86d      	bhi.n	8005a00 <UART_SetConfig+0x188>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <UART_SetConfig+0xb4>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	080059d1 	.word	0x080059d1
 8005930:	08005a01 	.word	0x08005a01
 8005934:	08005a01 	.word	0x08005a01
 8005938:	08005a01 	.word	0x08005a01
 800593c:	08005a01 	.word	0x08005a01
 8005940:	08005a01 	.word	0x08005a01
 8005944:	08005a01 	.word	0x08005a01
 8005948:	08005a01 	.word	0x08005a01
 800594c:	080059d9 	.word	0x080059d9
 8005950:	08005a01 	.word	0x08005a01
 8005954:	08005a01 	.word	0x08005a01
 8005958:	08005a01 	.word	0x08005a01
 800595c:	08005a01 	.word	0x08005a01
 8005960:	08005a01 	.word	0x08005a01
 8005964:	08005a01 	.word	0x08005a01
 8005968:	08005a01 	.word	0x08005a01
 800596c:	080059e1 	.word	0x080059e1
 8005970:	08005a01 	.word	0x08005a01
 8005974:	08005a01 	.word	0x08005a01
 8005978:	08005a01 	.word	0x08005a01
 800597c:	08005a01 	.word	0x08005a01
 8005980:	08005a01 	.word	0x08005a01
 8005984:	08005a01 	.word	0x08005a01
 8005988:	08005a01 	.word	0x08005a01
 800598c:	080059e9 	.word	0x080059e9
 8005990:	08005a01 	.word	0x08005a01
 8005994:	08005a01 	.word	0x08005a01
 8005998:	08005a01 	.word	0x08005a01
 800599c:	08005a01 	.word	0x08005a01
 80059a0:	08005a01 	.word	0x08005a01
 80059a4:	08005a01 	.word	0x08005a01
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	080059f1 	.word	0x080059f1
 80059b0:	08005a01 	.word	0x08005a01
 80059b4:	08005a01 	.word	0x08005a01
 80059b8:	08005a01 	.word	0x08005a01
 80059bc:	08005a01 	.word	0x08005a01
 80059c0:	08005a01 	.word	0x08005a01
 80059c4:	08005a01 	.word	0x08005a01
 80059c8:	08005a01 	.word	0x08005a01
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d6:	e222      	b.n	8005e1e <UART_SetConfig+0x5a6>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059de:	e21e      	b.n	8005e1e <UART_SetConfig+0x5a6>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e6:	e21a      	b.n	8005e1e <UART_SetConfig+0x5a6>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ee:	e216      	b.n	8005e1e <UART_SetConfig+0x5a6>
 80059f0:	2320      	movs	r3, #32
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f6:	e212      	b.n	8005e1e <UART_SetConfig+0x5a6>
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fe:	e20e      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a06:	e20a      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a69      	ldr	r2, [pc, #420]	; (8005bb4 <UART_SetConfig+0x33c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d130      	bne.n	8005a74 <UART_SetConfig+0x1fc>
 8005a12:	4b67      	ldr	r3, [pc, #412]	; (8005bb0 <UART_SetConfig+0x338>)
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d826      	bhi.n	8005a6c <UART_SetConfig+0x1f4>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x1ac>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a4d 	.word	0x08005a4d
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e1ec      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e1e8      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a52:	e1e4      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5a:	e1e0      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e1dc      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e1d8      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e1d4      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a4f      	ldr	r2, [pc, #316]	; (8005bb8 <UART_SetConfig+0x340>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d130      	bne.n	8005ae0 <UART_SetConfig+0x268>
 8005a7e:	4b4c      	ldr	r3, [pc, #304]	; (8005bb0 <UART_SetConfig+0x338>)
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d826      	bhi.n	8005ad8 <UART_SetConfig+0x260>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x218>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa9 	.word	0x08005aa9
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	08005ab9 	.word	0x08005ab9
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ad1 	.word	0x08005ad1
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e1b6      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab6:	e1b2      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005abe:	e1ae      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac6:	e1aa      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ac8:	2320      	movs	r3, #32
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e1a6      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e1a2      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e19e      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a35      	ldr	r2, [pc, #212]	; (8005bbc <UART_SetConfig+0x344>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d130      	bne.n	8005b4c <UART_SetConfig+0x2d4>
 8005aea:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <UART_SetConfig+0x338>)
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	d826      	bhi.n	8005b44 <UART_SetConfig+0x2cc>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <UART_SetConfig+0x284>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b15 	.word	0x08005b15
 8005b00:	08005b1d 	.word	0x08005b1d
 8005b04:	08005b25 	.word	0x08005b25
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e180      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e17c      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b24:	2308      	movs	r3, #8
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e178      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e174      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b34:	2320      	movs	r3, #32
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e170      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e16c      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e168      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <UART_SetConfig+0x348>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d142      	bne.n	8005bdc <UART_SetConfig+0x364>
 8005b56:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <UART_SetConfig+0x338>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d838      	bhi.n	8005bd4 <UART_SetConfig+0x35c>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <UART_SetConfig+0x2f0>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b81 	.word	0x08005b81
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	08005b91 	.word	0x08005b91
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005bc5 	.word	0x08005bc5
 8005b7c:	08005bcd 	.word	0x08005bcd
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e14a      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e146      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e142      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e13e      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ba0:	cfff69f3 	.word	0xcfff69f3
 8005ba4:	58000c00 	.word	0x58000c00
 8005ba8:	11fff4ff 	.word	0x11fff4ff
 8005bac:	40011000 	.word	0x40011000
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	40004400 	.word	0x40004400
 8005bb8:	40004800 	.word	0x40004800
 8005bbc:	40004c00 	.word	0x40004c00
 8005bc0:	40005000 	.word	0x40005000
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bca:	e128      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005bcc:	2340      	movs	r3, #64	; 0x40
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd2:	e124      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	e120      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4acb      	ldr	r2, [pc, #812]	; (8005f10 <UART_SetConfig+0x698>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d176      	bne.n	8005cd4 <UART_SetConfig+0x45c>
 8005be6:	4bcb      	ldr	r3, [pc, #812]	; (8005f14 <UART_SetConfig+0x69c>)
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bee:	2b28      	cmp	r3, #40	; 0x28
 8005bf0:	d86c      	bhi.n	8005ccc <UART_SetConfig+0x454>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x380>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c9d 	.word	0x08005c9d
 8005bfc:	08005ccd 	.word	0x08005ccd
 8005c00:	08005ccd 	.word	0x08005ccd
 8005c04:	08005ccd 	.word	0x08005ccd
 8005c08:	08005ccd 	.word	0x08005ccd
 8005c0c:	08005ccd 	.word	0x08005ccd
 8005c10:	08005ccd 	.word	0x08005ccd
 8005c14:	08005ccd 	.word	0x08005ccd
 8005c18:	08005ca5 	.word	0x08005ca5
 8005c1c:	08005ccd 	.word	0x08005ccd
 8005c20:	08005ccd 	.word	0x08005ccd
 8005c24:	08005ccd 	.word	0x08005ccd
 8005c28:	08005ccd 	.word	0x08005ccd
 8005c2c:	08005ccd 	.word	0x08005ccd
 8005c30:	08005ccd 	.word	0x08005ccd
 8005c34:	08005ccd 	.word	0x08005ccd
 8005c38:	08005cad 	.word	0x08005cad
 8005c3c:	08005ccd 	.word	0x08005ccd
 8005c40:	08005ccd 	.word	0x08005ccd
 8005c44:	08005ccd 	.word	0x08005ccd
 8005c48:	08005ccd 	.word	0x08005ccd
 8005c4c:	08005ccd 	.word	0x08005ccd
 8005c50:	08005ccd 	.word	0x08005ccd
 8005c54:	08005ccd 	.word	0x08005ccd
 8005c58:	08005cb5 	.word	0x08005cb5
 8005c5c:	08005ccd 	.word	0x08005ccd
 8005c60:	08005ccd 	.word	0x08005ccd
 8005c64:	08005ccd 	.word	0x08005ccd
 8005c68:	08005ccd 	.word	0x08005ccd
 8005c6c:	08005ccd 	.word	0x08005ccd
 8005c70:	08005ccd 	.word	0x08005ccd
 8005c74:	08005ccd 	.word	0x08005ccd
 8005c78:	08005cbd 	.word	0x08005cbd
 8005c7c:	08005ccd 	.word	0x08005ccd
 8005c80:	08005ccd 	.word	0x08005ccd
 8005c84:	08005ccd 	.word	0x08005ccd
 8005c88:	08005ccd 	.word	0x08005ccd
 8005c8c:	08005ccd 	.word	0x08005ccd
 8005c90:	08005ccd 	.word	0x08005ccd
 8005c94:	08005ccd 	.word	0x08005ccd
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca2:	e0bc      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005caa:	e0b8      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb2:	e0b4      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e0b0      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e0ac      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e0a8      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e0a4      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a8f      	ldr	r2, [pc, #572]	; (8005f18 <UART_SetConfig+0x6a0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d130      	bne.n	8005d40 <UART_SetConfig+0x4c8>
 8005cde:	4b8d      	ldr	r3, [pc, #564]	; (8005f14 <UART_SetConfig+0x69c>)
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d826      	bhi.n	8005d38 <UART_SetConfig+0x4c0>
 8005cea:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x478>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d09 	.word	0x08005d09
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e086      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e082      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e07e      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e07a      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e076      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e072      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e06e      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a75      	ldr	r2, [pc, #468]	; (8005f1c <UART_SetConfig+0x6a4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d130      	bne.n	8005dac <UART_SetConfig+0x534>
 8005d4a:	4b72      	ldr	r3, [pc, #456]	; (8005f14 <UART_SetConfig+0x69c>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d826      	bhi.n	8005da4 <UART_SetConfig+0x52c>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0x4e4>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d75 	.word	0x08005d75
 8005d60:	08005d7d 	.word	0x08005d7d
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e050      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e04c      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d84:	2308      	movs	r3, #8
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e048      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e044      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d94:	2320      	movs	r3, #32
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e040      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005d9c:	2340      	movs	r3, #64	; 0x40
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e03c      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e038      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5b      	ldr	r2, [pc, #364]	; (8005f20 <UART_SetConfig+0x6a8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d130      	bne.n	8005e18 <UART_SetConfig+0x5a0>
 8005db6:	4b57      	ldr	r3, [pc, #348]	; (8005f14 <UART_SetConfig+0x69c>)
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	d826      	bhi.n	8005e10 <UART_SetConfig+0x598>
 8005dc2:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x550>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005de1 	.word	0x08005de1
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	08005df1 	.word	0x08005df1
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	2302      	movs	r3, #2
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e01a      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e016      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e012      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e00e      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005e00:	2320      	movs	r3, #32
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e00a      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005e08:	2340      	movs	r3, #64	; 0x40
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e006      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e002      	b.n	8005e1e <UART_SetConfig+0x5a6>
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3f      	ldr	r2, [pc, #252]	; (8005f20 <UART_SetConfig+0x6a8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	f040 80f8 	bne.w	800601a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	dc46      	bgt.n	8005ec0 <UART_SetConfig+0x648>
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	f2c0 8082 	blt.w	8005f3c <UART_SetConfig+0x6c4>
 8005e38:	3b02      	subs	r3, #2
 8005e3a:	2b1e      	cmp	r3, #30
 8005e3c:	d87e      	bhi.n	8005f3c <UART_SetConfig+0x6c4>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x5cc>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005ec7 	.word	0x08005ec7
 8005e48:	08005f3d 	.word	0x08005f3d
 8005e4c:	08005ecf 	.word	0x08005ecf
 8005e50:	08005f3d 	.word	0x08005f3d
 8005e54:	08005f3d 	.word	0x08005f3d
 8005e58:	08005f3d 	.word	0x08005f3d
 8005e5c:	08005edf 	.word	0x08005edf
 8005e60:	08005f3d 	.word	0x08005f3d
 8005e64:	08005f3d 	.word	0x08005f3d
 8005e68:	08005f3d 	.word	0x08005f3d
 8005e6c:	08005f3d 	.word	0x08005f3d
 8005e70:	08005f3d 	.word	0x08005f3d
 8005e74:	08005f3d 	.word	0x08005f3d
 8005e78:	08005f3d 	.word	0x08005f3d
 8005e7c:	08005eef 	.word	0x08005eef
 8005e80:	08005f3d 	.word	0x08005f3d
 8005e84:	08005f3d 	.word	0x08005f3d
 8005e88:	08005f3d 	.word	0x08005f3d
 8005e8c:	08005f3d 	.word	0x08005f3d
 8005e90:	08005f3d 	.word	0x08005f3d
 8005e94:	08005f3d 	.word	0x08005f3d
 8005e98:	08005f3d 	.word	0x08005f3d
 8005e9c:	08005f3d 	.word	0x08005f3d
 8005ea0:	08005f3d 	.word	0x08005f3d
 8005ea4:	08005f3d 	.word	0x08005f3d
 8005ea8:	08005f3d 	.word	0x08005f3d
 8005eac:	08005f3d 	.word	0x08005f3d
 8005eb0:	08005f3d 	.word	0x08005f3d
 8005eb4:	08005f3d 	.word	0x08005f3d
 8005eb8:	08005f3d 	.word	0x08005f3d
 8005ebc:	08005f2f 	.word	0x08005f2f
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d037      	beq.n	8005f34 <UART_SetConfig+0x6bc>
 8005ec4:	e03a      	b.n	8005f3c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ec6:	f7ff f865 	bl	8004f94 <HAL_RCCEx_GetD3PCLK1Freq>
 8005eca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ecc:	e03c      	b.n	8005f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff f874 	bl	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005edc:	e034      	b.n	8005f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ede:	f107 0318 	add.w	r3, r7, #24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff f9c0 	bl	8005268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eec:	e02c      	b.n	8005f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <UART_SetConfig+0x69c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <UART_SetConfig+0x69c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	08db      	lsrs	r3, r3, #3
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <UART_SetConfig+0x6ac>)
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f0c:	e01c      	b.n	8005f48 <UART_SetConfig+0x6d0>
 8005f0e:	bf00      	nop
 8005f10:	40011400 	.word	0x40011400
 8005f14:	58024400 	.word	0x58024400
 8005f18:	40007800 	.word	0x40007800
 8005f1c:	40007c00 	.word	0x40007c00
 8005f20:	58000c00 	.word	0x58000c00
 8005f24:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b9d      	ldr	r3, [pc, #628]	; (80061a0 <UART_SetConfig+0x928>)
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f2c:	e00c      	b.n	8005f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f2e:	4b9d      	ldr	r3, [pc, #628]	; (80061a4 <UART_SetConfig+0x92c>)
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f32:	e009      	b.n	8005f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f3a:	e005      	b.n	8005f48 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 81de 	beq.w	800630c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	4a94      	ldr	r2, [pc, #592]	; (80061a8 <UART_SetConfig+0x930>)
 8005f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d305      	bcc.n	8005f80 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d903      	bls.n	8005f88 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f86:	e1c1      	b.n	800630c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	60fa      	str	r2, [r7, #12]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	4a84      	ldr	r2, [pc, #528]	; (80061a8 <UART_SetConfig+0x930>)
 8005f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005faa:	f7fa f995 	bl	80002d8 <__aeabi_uldivmod>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	020b      	lsls	r3, r1, #8
 8005fc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fc4:	0202      	lsls	r2, r0, #8
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	6849      	ldr	r1, [r1, #4]
 8005fca:	0849      	lsrs	r1, r1, #1
 8005fcc:	2000      	movs	r0, #0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	eb12 0804 	adds.w	r8, r2, r4
 8005fd6:	eb43 0905 	adc.w	r9, r3, r5
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	469a      	mov	sl, r3
 8005fe2:	4693      	mov	fp, r2
 8005fe4:	4652      	mov	r2, sl
 8005fe6:	465b      	mov	r3, fp
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa f974 	bl	80002d8 <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ffe:	d308      	bcc.n	8006012 <UART_SetConfig+0x79a>
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006006:	d204      	bcs.n	8006012 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600e:	60da      	str	r2, [r3, #12]
 8006010:	e17c      	b.n	800630c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006018:	e178      	b.n	800630c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006022:	f040 80c5 	bne.w	80061b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006026:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800602a:	2b20      	cmp	r3, #32
 800602c:	dc48      	bgt.n	80060c0 <UART_SetConfig+0x848>
 800602e:	2b00      	cmp	r3, #0
 8006030:	db7b      	blt.n	800612a <UART_SetConfig+0x8b2>
 8006032:	2b20      	cmp	r3, #32
 8006034:	d879      	bhi.n	800612a <UART_SetConfig+0x8b2>
 8006036:	a201      	add	r2, pc, #4	; (adr r2, 800603c <UART_SetConfig+0x7c4>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	080060c7 	.word	0x080060c7
 8006040:	080060cf 	.word	0x080060cf
 8006044:	0800612b 	.word	0x0800612b
 8006048:	0800612b 	.word	0x0800612b
 800604c:	080060d7 	.word	0x080060d7
 8006050:	0800612b 	.word	0x0800612b
 8006054:	0800612b 	.word	0x0800612b
 8006058:	0800612b 	.word	0x0800612b
 800605c:	080060e7 	.word	0x080060e7
 8006060:	0800612b 	.word	0x0800612b
 8006064:	0800612b 	.word	0x0800612b
 8006068:	0800612b 	.word	0x0800612b
 800606c:	0800612b 	.word	0x0800612b
 8006070:	0800612b 	.word	0x0800612b
 8006074:	0800612b 	.word	0x0800612b
 8006078:	0800612b 	.word	0x0800612b
 800607c:	080060f7 	.word	0x080060f7
 8006080:	0800612b 	.word	0x0800612b
 8006084:	0800612b 	.word	0x0800612b
 8006088:	0800612b 	.word	0x0800612b
 800608c:	0800612b 	.word	0x0800612b
 8006090:	0800612b 	.word	0x0800612b
 8006094:	0800612b 	.word	0x0800612b
 8006098:	0800612b 	.word	0x0800612b
 800609c:	0800612b 	.word	0x0800612b
 80060a0:	0800612b 	.word	0x0800612b
 80060a4:	0800612b 	.word	0x0800612b
 80060a8:	0800612b 	.word	0x0800612b
 80060ac:	0800612b 	.word	0x0800612b
 80060b0:	0800612b 	.word	0x0800612b
 80060b4:	0800612b 	.word	0x0800612b
 80060b8:	0800612b 	.word	0x0800612b
 80060bc:	0800611d 	.word	0x0800611d
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d02e      	beq.n	8006122 <UART_SetConfig+0x8aa>
 80060c4:	e031      	b.n	800612a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fd fff3 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 80060ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060cc:	e033      	b.n	8006136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ce:	f7fe f805 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 80060d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060d4:	e02f      	b.n	8006136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe ff70 	bl	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e4:	e027      	b.n	8006136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e6:	f107 0318 	add.w	r3, r7, #24
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f8bc 	bl	8005268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f4:	e01f      	b.n	8006136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f6:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <UART_SetConfig+0x934>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006102:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <UART_SetConfig+0x934>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	08db      	lsrs	r3, r3, #3
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <UART_SetConfig+0x928>)
 800610e:	fa22 f303 	lsr.w	r3, r2, r3
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006114:	e00f      	b.n	8006136 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006116:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <UART_SetConfig+0x928>)
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800611a:	e00c      	b.n	8006136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800611c:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <UART_SetConfig+0x92c>)
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006120:	e009      	b.n	8006136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006128:	e005      	b.n	8006136 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80e7 	beq.w	800630c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <UART_SetConfig+0x930>)
 8006144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006148:	461a      	mov	r2, r3
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006150:	005a      	lsls	r2, r3, #1
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	441a      	add	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006162:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	2b0f      	cmp	r3, #15
 8006168:	d916      	bls.n	8006198 <UART_SetConfig+0x920>
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006170:	d212      	bcs.n	8006198 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	b29b      	uxth	r3, r3
 8006176:	f023 030f 	bic.w	r3, r3, #15
 800617a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	b29b      	uxth	r3, r3
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	b29a      	uxth	r2, r3
 8006188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800618a:	4313      	orrs	r3, r2
 800618c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e0b9      	b.n	800630c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800619e:	e0b5      	b.n	800630c <UART_SetConfig+0xa94>
 80061a0:	03d09000 	.word	0x03d09000
 80061a4:	003d0900 	.word	0x003d0900
 80061a8:	08006fb4 	.word	0x08006fb4
 80061ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	dc49      	bgt.n	800624c <UART_SetConfig+0x9d4>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	db7c      	blt.n	80062b6 <UART_SetConfig+0xa3e>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d87a      	bhi.n	80062b6 <UART_SetConfig+0xa3e>
 80061c0:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x950>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	08006253 	.word	0x08006253
 80061cc:	0800625b 	.word	0x0800625b
 80061d0:	080062b7 	.word	0x080062b7
 80061d4:	080062b7 	.word	0x080062b7
 80061d8:	08006263 	.word	0x08006263
 80061dc:	080062b7 	.word	0x080062b7
 80061e0:	080062b7 	.word	0x080062b7
 80061e4:	080062b7 	.word	0x080062b7
 80061e8:	08006273 	.word	0x08006273
 80061ec:	080062b7 	.word	0x080062b7
 80061f0:	080062b7 	.word	0x080062b7
 80061f4:	080062b7 	.word	0x080062b7
 80061f8:	080062b7 	.word	0x080062b7
 80061fc:	080062b7 	.word	0x080062b7
 8006200:	080062b7 	.word	0x080062b7
 8006204:	080062b7 	.word	0x080062b7
 8006208:	08006283 	.word	0x08006283
 800620c:	080062b7 	.word	0x080062b7
 8006210:	080062b7 	.word	0x080062b7
 8006214:	080062b7 	.word	0x080062b7
 8006218:	080062b7 	.word	0x080062b7
 800621c:	080062b7 	.word	0x080062b7
 8006220:	080062b7 	.word	0x080062b7
 8006224:	080062b7 	.word	0x080062b7
 8006228:	080062b7 	.word	0x080062b7
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062b7 	.word	0x080062b7
 8006234:	080062b7 	.word	0x080062b7
 8006238:	080062b7 	.word	0x080062b7
 800623c:	080062b7 	.word	0x080062b7
 8006240:	080062b7 	.word	0x080062b7
 8006244:	080062b7 	.word	0x080062b7
 8006248:	080062a9 	.word	0x080062a9
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	d02e      	beq.n	80062ae <UART_SetConfig+0xa36>
 8006250:	e031      	b.n	80062b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006252:	f7fd ff2d 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8006256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006258:	e033      	b.n	80062c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800625a:	f7fd ff3f 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 800625e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006260:	e02f      	b.n	80062c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe feaa 	bl	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006270:	e027      	b.n	80062c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006272:	f107 0318 	add.w	r3, r7, #24
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fff6 	bl	8005268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006280:	e01f      	b.n	80062c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006282:	4b2d      	ldr	r3, [pc, #180]	; (8006338 <UART_SetConfig+0xac0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800628e:	4b2a      	ldr	r3, [pc, #168]	; (8006338 <UART_SetConfig+0xac0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	4a28      	ldr	r2, [pc, #160]	; (800633c <UART_SetConfig+0xac4>)
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062a0:	e00f      	b.n	80062c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80062a2:	4b26      	ldr	r3, [pc, #152]	; (800633c <UART_SetConfig+0xac4>)
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a6:	e00c      	b.n	80062c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <UART_SetConfig+0xac8>)
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ac:	e009      	b.n	80062c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b4:	e005      	b.n	80062c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062c0:	bf00      	nop
    }

    if (pclk != 0U)
 80062c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d021      	beq.n	800630c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <UART_SetConfig+0xacc>)
 80062ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	441a      	add	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	d909      	bls.n	8006306 <UART_SetConfig+0xa8e>
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d205      	bcs.n	8006306 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e002      	b.n	800630c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2201      	movs	r2, #1
 8006310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2201      	movs	r2, #1
 8006318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006328:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800632c:	4618      	mov	r0, r3
 800632e:	3748      	adds	r7, #72	; 0x48
 8006330:	46bd      	mov	sp, r7
 8006332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
 800633c:	03d09000 	.word	0x03d09000
 8006340:	003d0900 	.word	0x003d0900
 8006344:	08006fb4 	.word	0x08006fb4

08006348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01a      	beq.n	800645e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006446:	d10a      	bne.n	800645e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af02      	add	r7, sp, #8
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800649c:	f7fa ff22 	bl	80012e4 <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d10e      	bne.n	80064ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f82f 	bl	8006522 <UART_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e025      	b.n	800651a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d10e      	bne.n	80064fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f819 	bl	8006522 <UART_WaitOnFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e00f      	b.n	800651a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b09c      	sub	sp, #112	; 0x70
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	603b      	str	r3, [r7, #0]
 800652e:	4613      	mov	r3, r2
 8006530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006532:	e0a9      	b.n	8006688 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800653a:	f000 80a5 	beq.w	8006688 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653e:	f7fa fed1 	bl	80012e4 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800654a:	429a      	cmp	r2, r3
 800654c:	d302      	bcc.n	8006554 <UART_WaitOnFlagUntilTimeout+0x32>
 800654e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006550:	2b00      	cmp	r3, #0
 8006552:	d140      	bne.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006568:	667b      	str	r3, [r7, #100]	; 0x64
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006574:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e6      	bne.n	8006554 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	f023 0301 	bic.w	r3, r3, #1
 800659c:	663b      	str	r3, [r7, #96]	; 0x60
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80065a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e5      	bne.n	8006586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e069      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d051      	beq.n	8006688 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f2:	d149      	bne.n	8006688 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006612:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
 800661e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e6      	bne.n	80065fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	613b      	str	r3, [r7, #16]
   return(result);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	66bb      	str	r3, [r7, #104]	; 0x68
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006650:	623a      	str	r2, [r7, #32]
 8006652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	69f9      	ldr	r1, [r7, #28]
 8006656:	6a3a      	ldr	r2, [r7, #32]
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	61bb      	str	r3, [r7, #24]
   return(result);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e5      	bne.n	8006630 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e010      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4013      	ands	r3, r2
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	f43f af46 	beq.w	8006534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3770      	adds	r7, #112	; 0x70
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e027      	b.n	8006718 <HAL_UARTEx_DisableFifoMode+0x66>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	; 0x24
 80066d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006738:	2302      	movs	r3, #2
 800673a:	e02d      	b.n	8006798 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2224      	movs	r2, #36	; 0x24
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f84f 	bl	800681c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e02d      	b.n	8006814 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2224      	movs	r2, #36	; 0x24
 80067c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f811 	bl	800681c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800683c:	e031      	b.n	80068a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800683e:	2310      	movs	r3, #16
 8006840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006842:	2310      	movs	r3, #16
 8006844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	0e5b      	lsrs	r3, r3, #25
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	0f5b      	lsrs	r3, r3, #29
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	7b3a      	ldrb	r2, [r7, #12]
 800686a:	4911      	ldr	r1, [pc, #68]	; (80068b0 <UARTEx_SetNbDataToProcess+0x94>)
 800686c:	5c8a      	ldrb	r2, [r1, r2]
 800686e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006872:	7b3a      	ldrb	r2, [r7, #12]
 8006874:	490f      	ldr	r1, [pc, #60]	; (80068b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006878:	fb93 f3f2 	sdiv	r3, r3, r2
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	7b7a      	ldrb	r2, [r7, #13]
 8006888:	4909      	ldr	r1, [pc, #36]	; (80068b0 <UARTEx_SetNbDataToProcess+0x94>)
 800688a:	5c8a      	ldrb	r2, [r1, r2]
 800688c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006890:	7b7a      	ldrb	r2, [r7, #13]
 8006892:	4908      	ldr	r1, [pc, #32]	; (80068b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006896:	fb93 f3f2 	sdiv	r3, r3, r2
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	08006fcc 	.word	0x08006fcc
 80068b4:	08006fd4 	.word	0x08006fd4

080068b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068b8:	b084      	sub	sp, #16
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	f107 001c 	add.w	r0, r7, #28
 80068c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d120      	bne.n	8006912 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	4b2a      	ldr	r3, [pc, #168]	; (800698c <USB_CoreInit+0xd4>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d105      	bne.n	8006906 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 faac 	bl	8006e64 <USB_CoreReset>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
 8006910:	e01a      	b.n	8006948 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 faa0 	bl	8006e64 <USB_CoreReset>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
 800693a:	e005      	b.n	8006948 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	2b01      	cmp	r3, #1
 800694c:	d116      	bne.n	800697c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <USB_CoreInit+0xd8>)
 800695e:	4313      	orrs	r3, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f043 0206 	orr.w	r2, r3, #6
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f043 0220 	orr.w	r2, r3, #32
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006988:	b004      	add	sp, #16
 800698a:	4770      	bx	lr
 800698c:	ffbdffbf 	.word	0xffbdffbf
 8006990:	03ee0000 	.word	0x03ee0000

08006994 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 0201 	bic.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d115      	bne.n	8006a04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069e4:	2001      	movs	r0, #1
 80069e6:	f7fa fc89 	bl	80012fc <HAL_Delay>
      ms++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa29 	bl	8006e48 <USB_GetMode>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d01e      	beq.n	8006a3a <USB_SetCurrentMode+0x84>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b31      	cmp	r3, #49	; 0x31
 8006a00:	d9f0      	bls.n	80069e4 <USB_SetCurrentMode+0x2e>
 8006a02:	e01a      	b.n	8006a3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d115      	bne.n	8006a36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7fa fc70 	bl	80012fc <HAL_Delay>
      ms++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa10 	bl	8006e48 <USB_GetMode>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <USB_SetCurrentMode+0x84>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b31      	cmp	r3, #49	; 0x31
 8006a32:	d9f0      	bls.n	8006a16 <USB_SetCurrentMode+0x60>
 8006a34:	e001      	b.n	8006a3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e005      	b.n	8006a46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b32      	cmp	r3, #50	; 0x32
 8006a3e:	d101      	bne.n	8006a44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a50:	b084      	sub	sp, #16
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	e009      	b.n	8006a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3340      	adds	r3, #64	; 0x40
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3301      	adds	r3, #1
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b0e      	cmp	r3, #14
 8006a88:	d9f2      	bls.n	8006a70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d11c      	bne.n	8006aca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a9e:	f043 0302 	orr.w	r3, r3, #2
 8006aa2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e005      	b.n	8006ad6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006adc:	461a      	mov	r2, r3
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae8:	4619      	mov	r1, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af0:	461a      	mov	r2, r3
 8006af2:	680b      	ldr	r3, [r1, #0]
 8006af4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d10c      	bne.n	8006b16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b02:	2100      	movs	r1, #0
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f965 	bl	8006dd4 <USB_SetDevSpeed>
 8006b0a:	e008      	b.n	8006b1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f960 	bl	8006dd4 <USB_SetDevSpeed>
 8006b14:	e003      	b.n	8006b1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b16:	2103      	movs	r1, #3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f95b 	bl	8006dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b1e:	2110      	movs	r1, #16
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8f3 	bl	8006d0c <USB_FlushTxFifo>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f91f 	bl	8006d74 <USB_FlushRxFifo>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b46:	461a      	mov	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b52:	461a      	mov	r2, r3
 8006b54:	2300      	movs	r3, #0
 8006b56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	461a      	mov	r2, r3
 8006b60:	2300      	movs	r3, #0
 8006b62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	e043      	b.n	8006bf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b80:	d118      	bne.n	8006bb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	461a      	mov	r2, r3
 8006b96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e013      	b.n	8006bc6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	461a      	mov	r2, r3
 8006bac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e008      	b.n	8006bc6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	461a      	mov	r2, r3
 8006be6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d3b7      	bcc.n	8006b6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	e043      	b.n	8006c88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c16:	d118      	bne.n	8006c4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	e013      	b.n	8006c5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	461a      	mov	r2, r3
 8006c42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	e008      	b.n	8006c5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c56:	461a      	mov	r2, r3
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	3301      	adds	r3, #1
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d3b7      	bcc.n	8006c00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f043 0210 	orr.w	r2, r3, #16
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699a      	ldr	r2, [r3, #24]
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <USB_DevInit+0x2b4>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f043 0208 	orr.w	r2, r3, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d105      	bne.n	8006cf4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <USB_DevInit+0x2b8>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d00:	b004      	add	sp, #16
 8006d02:	4770      	bx	lr
 8006d04:	803c3800 	.word	0x803c3800
 8006d08:	40000004 	.word	0x40000004

08006d0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <USB_FlushTxFifo+0x64>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d901      	bls.n	8006d2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e01b      	b.n	8006d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	daf2      	bge.n	8006d1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	019b      	lsls	r3, r3, #6
 8006d3c:	f043 0220 	orr.w	r2, r3, #32
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4a08      	ldr	r2, [pc, #32]	; (8006d70 <USB_FlushTxFifo+0x64>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e006      	b.n	8006d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d0f0      	beq.n	8006d44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	00030d40 	.word	0x00030d40

08006d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a11      	ldr	r2, [pc, #68]	; (8006dd0 <USB_FlushRxFifo+0x5c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d901      	bls.n	8006d92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e018      	b.n	8006dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	daf2      	bge.n	8006d80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2210      	movs	r2, #16
 8006da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4a08      	ldr	r2, [pc, #32]	; (8006dd0 <USB_FlushRxFifo+0x5c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d901      	bls.n	8006db6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e006      	b.n	8006dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b10      	cmp	r3, #16
 8006dc0:	d0f0      	beq.n	8006da4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	00030d40 	.word	0x00030d40

08006dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df4:	4313      	orrs	r3, r2
 8006df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e20:	f023 0303 	bic.w	r3, r3, #3
 8006e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e34:	f043 0302 	orr.w	r3, r3, #2
 8006e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0301 	and.w	r3, r3, #1
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <USB_CoreReset+0x64>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e01b      	b.n	8006eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	daf2      	bge.n	8006e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <USB_CoreReset+0x64>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d901      	bls.n	8006eac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e006      	b.n	8006eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d0f0      	beq.n	8006e9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	00030d40 	.word	0x00030d40

08006ecc <__libc_init_array>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	4d0d      	ldr	r5, [pc, #52]	; (8006f04 <__libc_init_array+0x38>)
 8006ed0:	4c0d      	ldr	r4, [pc, #52]	; (8006f08 <__libc_init_array+0x3c>)
 8006ed2:	1b64      	subs	r4, r4, r5
 8006ed4:	10a4      	asrs	r4, r4, #2
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	42a6      	cmp	r6, r4
 8006eda:	d109      	bne.n	8006ef0 <__libc_init_array+0x24>
 8006edc:	4d0b      	ldr	r5, [pc, #44]	; (8006f0c <__libc_init_array+0x40>)
 8006ede:	4c0c      	ldr	r4, [pc, #48]	; (8006f10 <__libc_init_array+0x44>)
 8006ee0:	f000 f82e 	bl	8006f40 <_init>
 8006ee4:	1b64      	subs	r4, r4, r5
 8006ee6:	10a4      	asrs	r4, r4, #2
 8006ee8:	2600      	movs	r6, #0
 8006eea:	42a6      	cmp	r6, r4
 8006eec:	d105      	bne.n	8006efa <__libc_init_array+0x2e>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef4:	4798      	blx	r3
 8006ef6:	3601      	adds	r6, #1
 8006ef8:	e7ee      	b.n	8006ed8 <__libc_init_array+0xc>
 8006efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efe:	4798      	blx	r3
 8006f00:	3601      	adds	r6, #1
 8006f02:	e7f2      	b.n	8006eea <__libc_init_array+0x1e>
 8006f04:	08006fe4 	.word	0x08006fe4
 8006f08:	08006fe4 	.word	0x08006fe4
 8006f0c:	08006fe4 	.word	0x08006fe4
 8006f10:	08006fe8 	.word	0x08006fe8

08006f14 <memcpy>:
 8006f14:	440a      	add	r2, r1
 8006f16:	4291      	cmp	r1, r2
 8006f18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f1c:	d100      	bne.n	8006f20 <memcpy+0xc>
 8006f1e:	4770      	bx	lr
 8006f20:	b510      	push	{r4, lr}
 8006f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	d1f9      	bne.n	8006f22 <memcpy+0xe>
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <memset>:
 8006f30:	4402      	add	r2, r0
 8006f32:	4603      	mov	r3, r0
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d100      	bne.n	8006f3a <memset+0xa>
 8006f38:	4770      	bx	lr
 8006f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3e:	e7f9      	b.n	8006f34 <memset+0x4>

08006f40 <_init>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr

08006f4c <_fini>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr
