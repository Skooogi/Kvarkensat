
Kvarkensat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011910  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08011bb0  08011bb0  00021bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011f10  08011f10  00021f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011f14  08011f14  00021f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000016c  24000000  08011f18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002570  2400016c  08012084  0003016c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240026dc  08012084  000326dc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00044739  00000000  00000000  0003019a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000065dd  00000000  00000000  000748d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002338  00000000  00000000  0007aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002100  00000000  00000000  0007d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003fa6a  00000000  00000000  0007f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002cf7e  00000000  00000000  000bed52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001871ba  00000000  00000000  000ebcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00272e8a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a028  00000000  00000000  00272ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400016c 	.word	0x2400016c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011b98 	.word	0x08011b98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000170 	.word	0x24000170
 80002dc:	08011b98 	.word	0x08011b98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000386:	4b24      	ldr	r3, [pc, #144]	; (8000418 <_DoInit+0x98>)
 8000388:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2203      	movs	r2, #3
 800038e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2203      	movs	r2, #3
 8000394:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a20      	ldr	r2, [pc, #128]	; (800041c <_DoInit+0x9c>)
 800039a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a20      	ldr	r2, [pc, #128]	; (8000420 <_DoInit+0xa0>)
 80003a0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003a8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2200      	movs	r2, #0
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2200      	movs	r2, #0
 80003ba:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a17      	ldr	r2, [pc, #92]	; (800041c <_DoInit+0x9c>)
 80003c0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a17      	ldr	r2, [pc, #92]	; (8000424 <_DoInit+0xa4>)
 80003c6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2210      	movs	r2, #16
 80003cc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2200      	movs	r2, #0
 80003d2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2200      	movs	r2, #0
 80003d8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3307      	adds	r3, #7
 80003e4:	4a10      	ldr	r2, [pc, #64]	; (8000428 <_DoInit+0xa8>)
 80003e6:	6810      	ldr	r0, [r2, #0]
 80003e8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80003ea:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a0e      	ldr	r2, [pc, #56]	; (800042c <_DoInit+0xac>)
 80003f2:	6810      	ldr	r0, [r2, #0]
 80003f4:	6018      	str	r0, [r3, #0]
 80003f6:	8891      	ldrh	r1, [r2, #4]
 80003f8:	7992      	ldrb	r2, [r2, #6]
 80003fa:	8099      	strh	r1, [r3, #4]
 80003fc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80003fe:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2220      	movs	r2, #32
 8000406:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8000408:	f3bf 8f5f 	dmb	sy
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	240007d0 	.word	0x240007d0
 800041c:	08011bb0 	.word	0x08011bb0
 8000420:	24000188 	.word	0x24000188
 8000424:	24000588 	.word	0x24000588
 8000428:	08011bbc 	.word	0x08011bbc
 800042c:	08011bc0 	.word	0x08011bc0

08000430 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800043c:	2300      	movs	r3, #0
 800043e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	691b      	ldr	r3, [r3, #16]
 800044a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800044c:	69ba      	ldr	r2, [r7, #24]
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	429a      	cmp	r2, r3
 8000452:	d905      	bls.n	8000460 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	3b01      	subs	r3, #1
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
 800045e:	e007      	b.n	8000470 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	69b9      	ldr	r1, [r7, #24]
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	4413      	add	r3, r2
 800046c:	3b01      	subs	r3, #1
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800047a:	4293      	cmp	r3, r2
 800047c:	bf28      	it	cs
 800047e:	4613      	movcs	r3, r2
 8000480:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4293      	cmp	r3, r2
 8000488:	bf28      	it	cs
 800048a:	4613      	movcs	r3, r2
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	4413      	add	r3, r2
 8000496:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800049a:	68b9      	ldr	r1, [r7, #8]
 800049c:	6978      	ldr	r0, [r7, #20]
 800049e:	f010 fbab 	bl	8010bf8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80004a2:	6a3a      	ldr	r2, [r7, #32]
 80004a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a6:	4413      	add	r3, r2
 80004a8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80004aa:	68ba      	ldr	r2, [r7, #8]
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	4413      	add	r3, r2
 80004b0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80004ba:	69fa      	ldr	r2, [r7, #28]
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	4413      	add	r3, r2
 80004c0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	69fa      	ldr	r2, [r7, #28]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d101      	bne.n	80004d0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80004d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	69fa      	ldr	r2, [r7, #28]
 80004d8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1b2      	bne.n	8000446 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80004e0:	6a3b      	ldr	r3, [r7, #32]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b088      	sub	sp, #32
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	689a      	ldr	r2, [r3, #8]
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	429a      	cmp	r2, r3
 800050c:	d911      	bls.n	8000532 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	4413      	add	r3, r2
 8000516:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	68b9      	ldr	r1, [r7, #8]
 800051c:	6938      	ldr	r0, [r7, #16]
 800051e:	f010 fb6b 	bl	8010bf8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000522:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000526:	69fa      	ldr	r2, [r7, #28]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	441a      	add	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000530:	e01f      	b.n	8000572 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	4413      	add	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	68b9      	ldr	r1, [r7, #8]
 8000544:	6938      	ldr	r0, [r7, #16]
 8000546:	f010 fb57 	bl	8010bf8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000558:	68ba      	ldr	r2, [r7, #8]
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	4413      	add	r3, r2
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	4619      	mov	r1, r3
 8000562:	6938      	ldr	r0, [r7, #16]
 8000564:	f010 fb48 	bl	8010bf8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000568:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	60da      	str	r2, [r3, #12]
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	429a      	cmp	r2, r3
 8000594:	d808      	bhi.n	80005a8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1ad2      	subs	r2, r2, r3
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	4413      	add	r3, r2
 80005a2:	3b01      	subs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	e004      	b.n	80005b2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	3b01      	subs	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80005b2:	697b      	ldr	r3, [r7, #20]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	371c      	adds	r7, #28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	4a1f      	ldr	r2, [pc, #124]	; (800065c <SEGGER_RTT_WriteNoLock+0x9c>)
 80005de:	4413      	add	r3, r2
 80005e0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d029      	beq.n	800063e <SEGGER_RTT_WriteNoLock+0x7e>
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d82e      	bhi.n	800064c <SEGGER_RTT_WriteNoLock+0x8c>
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <SEGGER_RTT_WriteNoLock+0x38>
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d013      	beq.n	800061e <SEGGER_RTT_WriteNoLock+0x5e>
 80005f6:	e029      	b.n	800064c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80005f8:	6978      	ldr	r0, [r7, #20]
 80005fa:	f7ff ffbe 	bl	800057a <_GetAvailWriteSpace>
 80005fe:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	d202      	bcs.n	800060e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800060c:	e021      	b.n	8000652 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	69b9      	ldr	r1, [r7, #24]
 8000616:	6978      	ldr	r0, [r7, #20]
 8000618:	f7ff ff67 	bl	80004ea <_WriteNoCheck>
    break;
 800061c:	e019      	b.n	8000652 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800061e:	6978      	ldr	r0, [r7, #20]
 8000620:	f7ff ffab 	bl	800057a <_GetAvailWriteSpace>
 8000624:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	4293      	cmp	r3, r2
 800062c:	bf28      	it	cs
 800062e:	4613      	movcs	r3, r2
 8000630:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000632:	69fa      	ldr	r2, [r7, #28]
 8000634:	69b9      	ldr	r1, [r7, #24]
 8000636:	6978      	ldr	r0, [r7, #20]
 8000638:	f7ff ff57 	bl	80004ea <_WriteNoCheck>
    break;
 800063c:	e009      	b.n	8000652 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	69b9      	ldr	r1, [r7, #24]
 8000642:	6978      	ldr	r0, [r7, #20]
 8000644:	f7ff fef4 	bl	8000430 <_WriteBlocking>
 8000648:	61f8      	str	r0, [r7, #28]
    break;
 800064a:	e002      	b.n	8000652 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
    break;
 8000650:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000652:	69fb      	ldr	r3, [r7, #28]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	240007d0 	.word	0x240007d0

08000660 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <SEGGER_RTT_Write+0x48>)
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d101      	bne.n	800067e <SEGGER_RTT_Write+0x1e>
 800067a:	f7ff fe81 	bl	8000380 <_DoInit>
  SEGGER_RTT_LOCK();
 800067e:	f3ef 8311 	mrs	r3, BASEPRI
 8000682:	f04f 0120 	mov.w	r1, #32
 8000686:	f381 8811 	msr	BASEPRI, r1
 800068a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	68b9      	ldr	r1, [r7, #8]
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ff95 	bl	80005c0 <SEGGER_RTT_WriteNoLock>
 8000696:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800069e:	697b      	ldr	r3, [r7, #20]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	240007d0 	.word	0x240007d0

080006ac <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ffce 	bl	8000660 <SEGGER_RTT_Write>
  return len;
 80006c4:	683b      	ldr	r3, [r7, #0]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f001 fdfd 	bl	80022d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f84b 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 fc79 	bl	8000fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e2:	f000 fc57 	bl	8000f94 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80006e6:	f000 fa0b 	bl	8000b00 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006ea:	f000 fa6d 	bl	8000bc8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80006ee:	f000 facf 	bl	8000c90 <MX_I2C1_Init>
  MX_I2C4_Init();
 80006f2:	f000 fb0d 	bl	8000d10 <MX_I2C4_Init>
  MX_SPI2_Init();
 80006f6:	f000 fb4b 	bl	8000d90 <MX_SPI2_Init>
  MX_ADC1_Init();
 80006fa:	f000 f8bf 	bl	800087c <MX_ADC1_Init>
  MX_ADC3_Init();
 80006fe:	f000 f999 	bl	8000a34 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000702:	f000 f939 	bl	8000978 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000706:	f00f fd27 	bl	8010158 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800070a:	f000 fb97 	bl	8000e3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // START RADIO RECEIVER
  printf("\nConfiguring radio..\n");
 800070e:	4815      	ldr	r0, [pc, #84]	; (8000764 <main+0x94>)
 8000710:	f010 fb0e 	bl	8010d30 <puts>
  configureRadio();
 8000714:	f000 ff50 	bl	80015b8 <configureRadio>
  printf("Radio configured! \nPLL should be locked above^^\n\n");
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <main+0x98>)
 800071a:	f010 fb09 	bl	8010d30 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* If no flags were set by interrupts, go back to sleep */
		if (!eventflags.dont_sleep)
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <main+0x9c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d019      	beq.n	8000760 <main+0x90>
			continue;
		eventflags.dont_sleep = 0;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <main+0x9c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]

		/* Go through all flags to check which of them are up. Flags could indicate for example the need
		 * for data processing or */
		if (eventflags.tick) {
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <main+0x9c>)
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0f2      	beq.n	8000722 <main+0x52>
			eventflags.tick = 0;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <main+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	705a      	strb	r2, [r3, #1]
			GPIOW(CANLED, 1 & (a >> 8));	// Blink LED while system is running.
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	121b      	asrs	r3, r3, #8
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	2120      	movs	r1, #32
 8000752:	4807      	ldr	r0, [pc, #28]	; (8000770 <main+0xa0>)
 8000754:	f005 fcc0 	bl	80060d8 <HAL_GPIO_WritePin>
			++a;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	e7e0      	b.n	8000722 <main+0x52>
			continue;
 8000760:	bf00      	nop
		if (!eventflags.dont_sleep)
 8000762:	e7de      	b.n	8000722 <main+0x52>
 8000764:	08011bc8 	.word	0x08011bc8
 8000768:	08011be0 	.word	0x08011be0
 800076c:	24000c28 	.word	0x24000c28
 8000770:	58020400 	.word	0x58020400

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09c      	sub	sp, #112	; 0x70
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	224c      	movs	r2, #76	; 0x4c
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f010 fa46 	bl	8010c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2220      	movs	r2, #32
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f010 fa40 	bl	8010c14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000794:	2002      	movs	r0, #2
 8000796:	f007 f8b5 	bl	8007904 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <SystemClock_Config+0xfc>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <SystemClock_Config+0xfc>)
 80007a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <SystemClock_Config+0xfc>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <SystemClock_Config+0x100>)
 80007b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b8:	4a2e      	ldr	r2, [pc, #184]	; (8000874 <SystemClock_Config+0x100>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <SystemClock_Config+0x100>)
 80007c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007cc:	bf00      	nop
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <SystemClock_Config+0xfc>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007da:	d1f8      	bne.n	80007ce <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <SystemClock_Config+0x104>)
 80007de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e0:	f023 0303 	bic.w	r3, r3, #3
 80007e4:	4a24      	ldr	r2, [pc, #144]	; (8000878 <SystemClock_Config+0x104>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000802:	2360      	movs	r3, #96	; 0x60
 8000804:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800080a:	2308      	movs	r3, #8
 800080c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000812:	230c      	movs	r3, #12
 8000814:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000816:	2300      	movs	r3, #0
 8000818:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4618      	mov	r0, r3
 8000824:	f007 f8b8 	bl	8007998 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800082e:	f000 fd7b 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	233f      	movs	r3, #63	; 0x3f
 8000834:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2303      	movs	r3, #3
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800083e:	2308      	movs	r3, #8
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2104      	movs	r1, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f007 fcc9 	bl	80081f0 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000864:	f000 fd60 	bl	8001328 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3770      	adds	r7, #112	; 0x70
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	58024800 	.word	0x58024800
 8000874:	58000400 	.word	0x58000400
 8000878:	58024400 	.word	0x58024400

0800087c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_ADC1_Init+0xec>)
 80008a2:	4a32      	ldr	r2, [pc, #200]	; (800096c <MX_ADC1_Init+0xf0>)
 80008a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <MX_ADC1_Init+0xec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_ADC1_Init+0xec>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <MX_ADC1_Init+0xec>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_ADC1_Init+0xec>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_ADC1_Init+0xec>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_ADC1_Init+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_ADC1_Init+0xec>)
 80008d2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_ADC1_Init+0xec>)
 80008da:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_ADC1_Init+0xec>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_ADC1_Init+0xec>)
 80008e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_ADC1_Init+0xec>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ADC1_Init+0xec>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <MX_ADC1_Init+0xec>)
 80008fe:	f001 ff79 	bl	80027f4 <HAL_ADC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000908:	f000 fd0e 	bl	8001328 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800090c:	2306      	movs	r3, #6
 800090e:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000914:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_ADC1_Init+0xec>)
 8000922:	f003 f811 	bl	8003948 <HAL_ADCEx_MultiModeConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800092c:	f000 fcfc 	bl	8001328 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_ADC1_Init+0xf4>)
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	2306      	movs	r3, #6
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000938:	2303      	movs	r3, #3
 800093a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_ADC1_Init+0xf8>)
 800093e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000940:	2304      	movs	r3, #4
 8000942:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_ADC1_Init+0xec>)
 8000952:	f002 fb47 	bl	8002fe4 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800095c:	f000 fce4 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	240009fc 	.word	0x240009fc
 800096c:	40022000 	.word	0x40022000
 8000970:	0c900008 	.word	0x0c900008
 8000974:	47ff0000 	.word	0x47ff0000

08000978 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_ADC2_Init+0xac>)
 8000992:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <MX_ADC2_Init+0xb0>)
 8000994:	601a      	str	r2, [r3, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_ADC2_Init+0xac>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_ADC2_Init+0xac>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009bc:	2200      	movs	r2, #0
 80009be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009dc:	4811      	ldr	r0, [pc, #68]	; (8000a24 <MX_ADC2_Init+0xac>)
 80009de:	f001 ff09 	bl	80027f4 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80009e8:	f000 fc9e 	bl	8001328 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_ADC2_Init+0xb4>)
 80009ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f0:	2306      	movs	r3, #6
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80009f4:	2303      	movs	r3, #3
 80009f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_ADC2_Init+0xb8>)
 80009fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fc:	2304      	movs	r3, #4
 80009fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_ADC2_Init+0xac>)
 8000a0e:	f002 fae9 	bl	8002fe4 <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000a18:	f000 fc86 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2400094c 	.word	0x2400094c
 8000a28:	40022100 	.word	0x40022100
 8000a2c:	10c00010 	.word	0x10c00010
 8000a30:	47ff0000 	.word	0x47ff0000

08000a34 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <MX_ADC3_Init+0xc4>)
 8000a50:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aaa:	4812      	ldr	r0, [pc, #72]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000aac:	f001 fea2 	bl	80027f4 <HAL_ADC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ab6:	f000 fc37 	bl	8001328 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_ADC3_Init+0xc8>)
 8000abc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000abe:	2306      	movs	r3, #6
 8000ac0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000aca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000acc:	2304      	movs	r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000ade:	f002 fa81 	bl	8002fe4 <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000ae8:	f000 fc1e 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	24000a60 	.word	0x24000a60
 8000af8:	58026000 	.word	0x58026000
 8000afc:	cb840000 	.word	0xcb840000

08000b00 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b04:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b06:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <MX_FDCAN1_Init+0xc4>)
 8000b08:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b2e:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000ba8:	2204      	movs	r2, #4
 8000baa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_FDCAN1_Init+0xc0>)
 8000bae:	f004 fd7b 	bl	80056a8 <HAL_FDCAN_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bb8:	f000 fbb6 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24000b3c 	.word	0x24000b3c
 8000bc4:	4000a000 	.word	0x4000a000

08000bc8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <MX_FDCAN2_Init+0xc4>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_FDCAN2_Init+0xc0>)
 8000c76:	f004 fd17 	bl	80056a8 <HAL_FDCAN_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c80:	f000 fb52 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000c2c 	.word	0x24000c2c
 8000c8c:	4000a400 	.word	0x4000a400

08000c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_I2C1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_I2C1_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ccc:	f005 fa1e 	bl	800610c <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 fb27 	bl	8001328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cde:	f005 faa5 	bl	800622c <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 fb1e 	bl	8001328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cf0:	f005 fae7 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 fb15 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	240009b0 	.word	0x240009b0
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	307075b1 	.word	0x307075b1

08000d10 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d16:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <MX_I2C4_Init+0x78>)
 8000d18:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <MX_I2C4_Init+0x7c>)
 8000d1e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d4c:	f005 f9de 	bl	800610c <HAL_I2C_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d56:	f000 fae7 	bl	8001328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d5e:	f005 fa65 	bl	800622c <HAL_I2CEx_ConfigAnalogFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f000 fade 	bl	8001328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_I2C4_Init+0x74>)
 8000d70:	f005 faa7 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 fad5 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	24000878 	.word	0x24000878
 8000d88:	58001c00 	.word	0x58001c00
 8000d8c:	307075b1 	.word	0x307075b1

08000d90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000d96:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <MX_SPI2_Init+0xa8>)
 8000d98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000d9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000da0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000daa:	2207      	movs	r2, #7
 8000dac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_SPI2_Init+0xa4>)
 8000e20:	f009 fecc 	bl	800abbc <HAL_SPI_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000e2a:	f000 fa7d 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	240008c4 	.word	0x240008c4
 8000e38:	40003800 	.word	0x40003800

08000e3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b09a      	sub	sp, #104	; 0x68
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	222c      	movs	r2, #44	; 0x2c
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00f fecc 	bl	8010c14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e7c:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <MX_TIM1_Init+0x154>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000e90:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea8:	4838      	ldr	r0, [pc, #224]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000eaa:	f00a fe2c 	bl	800bb06 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f000 fa38 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000ec6:	f00a ff51 	bl	800bd6c <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ed0:	f000 fa2a 	bl	8001328 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ed4:	482d      	ldr	r0, [pc, #180]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000ed6:	f00a fe6d 	bl	800bbb4 <HAL_TIM_OC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ee0:	f000 fa22 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ee4:	2320      	movs	r3, #32
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4825      	ldr	r0, [pc, #148]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000ef8:	f00b fc3e 	bl	800c778 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f02:	f000 fa11 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f06:	2330      	movs	r3, #48	; 0x30
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000f2c:	f00a fea4 	bl	800bc78 <HAL_TIM_OC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f36:	f000 f9f7 	bl	8001328 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000f70:	f00b fc90 	bl	800c894 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f7a:	f000 f9d5 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM1_Init+0x150>)
 8000f80:	f000 ffde 	bl	8001f40 <HAL_TIM_MspPostInit>

}
 8000f84:	bf00      	nop
 8000f86:	3768      	adds	r7, #104	; 0x68
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	24000bdc 	.word	0x24000bdc
 8000f90:	40010000 	.word	0x40010000

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MX_DMA_Init+0x3c>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <MX_DMA_Init+0x3c>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_DMA_Init+0x3c>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2038      	movs	r0, #56	; 0x38
 8000fbe:	f002 fe7c 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fc2:	2038      	movs	r0, #56	; 0x38
 8000fc4:	f002 fe93 	bl	8003cee <HAL_NVIC_EnableIRQ>

}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	4bbf      	ldr	r3, [pc, #764]	; (80012e8 <MX_GPIO_Init+0x314>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4abd      	ldr	r2, [pc, #756]	; (80012e8 <MX_GPIO_Init+0x314>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4bbb      	ldr	r3, [pc, #748]	; (80012e8 <MX_GPIO_Init+0x314>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4bb7      	ldr	r3, [pc, #732]	; (80012e8 <MX_GPIO_Init+0x314>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	4ab6      	ldr	r2, [pc, #728]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001018:	4bb3      	ldr	r3, [pc, #716]	; (80012e8 <MX_GPIO_Init+0x314>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4bb0      	ldr	r3, [pc, #704]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	4aae      	ldr	r2, [pc, #696]	; (80012e8 <MX_GPIO_Init+0x314>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001036:	4bac      	ldr	r3, [pc, #688]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001044:	4ba8      	ldr	r3, [pc, #672]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	4aa7      	ldr	r2, [pc, #668]	; (80012e8 <MX_GPIO_Init+0x314>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001054:	4ba4      	ldr	r3, [pc, #656]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4ba1      	ldr	r3, [pc, #644]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	4a9f      	ldr	r2, [pc, #636]	; (80012e8 <MX_GPIO_Init+0x314>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001072:	4b9d      	ldr	r3, [pc, #628]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b99      	ldr	r3, [pc, #612]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001090:	4b95      	ldr	r3, [pc, #596]	; (80012e8 <MX_GPIO_Init+0x314>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109e:	4b92      	ldr	r3, [pc, #584]	; (80012e8 <MX_GPIO_Init+0x314>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	4a90      	ldr	r2, [pc, #576]	; (80012e8 <MX_GPIO_Init+0x314>)
 80010a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ae:	4b8e      	ldr	r3, [pc, #568]	; (80012e8 <MX_GPIO_Init+0x314>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b8a      	ldr	r3, [pc, #552]	; (80012e8 <MX_GPIO_Init+0x314>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	4a89      	ldr	r2, [pc, #548]	; (80012e8 <MX_GPIO_Init+0x314>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010cc:	4b86      	ldr	r3, [pc, #536]	; (80012e8 <MX_GPIO_Init+0x314>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V0_GPIO_Port, EN_3V0_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2110      	movs	r1, #16
 80010de:	4883      	ldr	r0, [pc, #524]	; (80012ec <MX_GPIO_Init+0x318>)
 80010e0:	f004 fffa 	bl	80060d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_RESET_GPIO_Port, DEMOD_RESET_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4880      	ldr	r0, [pc, #512]	; (80012ec <MX_GPIO_Init+0x318>)
 80010ea:	f004 fff5 	bl	80060d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEMOD_CS_GPIO_Port, DEMOD_CS_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2101      	movs	r1, #1
 80010f2:	487f      	ldr	r0, [pc, #508]	; (80012f0 <MX_GPIO_Init+0x31c>)
 80010f4:	f004 fff0 	bl	80060d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2126      	movs	r1, #38	; 0x26
 80010fc:	487c      	ldr	r0, [pc, #496]	; (80012f0 <MX_GPIO_Init+0x31c>)
 80010fe:	f004 ffeb 	bl	80060d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001102:	2374      	movs	r3, #116	; 0x74
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001112:	2305      	movs	r3, #5
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4875      	ldr	r0, [pc, #468]	; (80012f4 <MX_GPIO_Init+0x320>)
 800111e:	f004 fe2b 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8001122:	230b      	movs	r3, #11
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	486f      	ldr	r0, [pc, #444]	; (80012f4 <MX_GPIO_Init+0x320>)
 8001136:	f004 fe1f 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800113a:	f24e 33c2 	movw	r3, #58306	; 0xe3c2
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001140:	2303      	movs	r3, #3
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	486a      	ldr	r0, [pc, #424]	; (80012f8 <MX_GPIO_Init+0x324>)
 8001150:	f004 fe12 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001154:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001166:	230c      	movs	r3, #12
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4862      	ldr	r0, [pc, #392]	; (80012fc <MX_GPIO_Init+0x328>)
 8001172:	f004 fe01 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001176:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117c:	2303      	movs	r3, #3
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	485c      	ldr	r0, [pc, #368]	; (80012fc <MX_GPIO_Init+0x328>)
 800118c:	f004 fdf4 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001190:	230d      	movs	r3, #13
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a0:	230c      	movs	r3, #12
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	4853      	ldr	r0, [pc, #332]	; (80012f8 <MX_GPIO_Init+0x324>)
 80011ac:	f004 fde4 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011b0:	230f      	movs	r3, #15
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b4:	2303      	movs	r3, #3
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	484a      	ldr	r0, [pc, #296]	; (80012ec <MX_GPIO_Init+0x318>)
 80011c4:	f004 fdd8 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_3V0_Pin DEMOD_RESET_Pin */
  GPIO_InitStruct.Pin = EN_3V0_Pin|DEMOD_RESET_Pin;
 80011c8:	2330      	movs	r3, #48	; 0x30
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4843      	ldr	r0, [pc, #268]	; (80012ec <MX_GPIO_Init+0x318>)
 80011e0:	f004 fdca 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEMOD_CS_Pin DEMOD_RXEN_Pin DEMOD_TXEN_Pin CANLED_Pin */
  GPIO_InitStruct.Pin = DEMOD_CS_Pin|DEMOD_RXEN_Pin|DEMOD_TXEN_Pin|CANLED_Pin;
 80011e4:	2327      	movs	r3, #39	; 0x27
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	483d      	ldr	r0, [pc, #244]	; (80012f0 <MX_GPIO_Init+0x31c>)
 80011fc:	f004 fdbc 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG4
                           PG5 PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001200:	f248 1337 	movw	r3, #33079	; 0x8137
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001212:	230c      	movs	r3, #12
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	4838      	ldr	r0, [pc, #224]	; (8001300 <MX_GPIO_Init+0x32c>)
 800121e:	f004 fdab 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001222:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001234:	230c      	movs	r3, #12
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	482d      	ldr	r0, [pc, #180]	; (80012f4 <MX_GPIO_Init+0x320>)
 8001240:	f004 fd9a 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	2303      	movs	r3, #3
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4825      	ldr	r0, [pc, #148]	; (80012f0 <MX_GPIO_Init+0x31c>)
 800125a:	f004 fd8d 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD14
                           PD15 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800125e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001270:	230c      	movs	r3, #12
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4822      	ldr	r0, [pc, #136]	; (8001304 <MX_GPIO_Init+0x330>)
 800127c:	f004 fd7c 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001280:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	481b      	ldr	r0, [pc, #108]	; (8001304 <MX_GPIO_Init+0x330>)
 8001296:	f004 fd6f 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800129a:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_GPIO_Init+0x32c>)
 80012b0:	f004 fd62 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c6:	2307      	movs	r3, #7
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	4619      	mov	r1, r3
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <MX_GPIO_Init+0x318>)
 80012d2:	f004 fd51 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e4:	e010      	b.n	8001308 <MX_GPIO_Init+0x334>
 80012e6:	bf00      	nop
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58020000 	.word	0x58020000
 80012f0:	58020400 	.word	0x58020400
 80012f4:	58021000 	.word	0x58021000
 80012f8:	58020800 	.word	0x58020800
 80012fc:	58021400 	.word	0x58021400
 8001300:	58021800 	.word	0x58021800
 8001304:	58020c00 	.word	0x58020c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800130c:	2306      	movs	r3, #6
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_GPIO_Init+0x350>)
 8001318:	f004 fd2e 	bl	8005d78 <HAL_GPIO_Init>

}
 800131c:	bf00      	nop
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58020800 	.word	0x58020800

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <write_register>:
 */

/*
 * Writes CMX register, addresses and values defined in main.h, refer to CMX994A datasheet
 */
void write_register(uint8_t reg, uint8_t val) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]

	GPIOW(DEMOD_CS, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2101      	movs	r1, #1
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <write_register+0x44>)
 800134a:	f004 fec5 	bl	80060d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 800134e:	1df9      	adds	r1, r7, #7
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	2201      	movs	r2, #1
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <write_register+0x48>)
 8001356:	f009 fd37 	bl	800adc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&val, 1, 100);
 800135a:	1db9      	adds	r1, r7, #6
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	2201      	movs	r2, #1
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <write_register+0x48>)
 8001362:	f009 fd31 	bl	800adc8 <HAL_SPI_Transmit>
	GPIOW(DEMOD_CS, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <write_register+0x44>)
 800136c:	f004 feb4 	bl	80060d8 <HAL_GPIO_WritePin>

}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58020400 	.word	0x58020400
 800137c:	240008c4 	.word	0x240008c4

08001380 <write_register_2>:
/*
 * Required for writing the 2-byte long register in CMX994E for I and Q offset voltages
 */
void write_register_2(uint8_t reg, uint8_t Qval, uint8_t Ival) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	460b      	mov	r3, r1
 800138c:	71bb      	strb	r3, [r7, #6]
 800138e:	4613      	mov	r3, r2
 8001390:	717b      	strb	r3, [r7, #5]

	GPIOW(DEMOD_CS, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2101      	movs	r1, #1
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <write_register_2+0x54>)
 8001398:	f004 fe9e 	bl	80060d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 800139c:	1df9      	adds	r1, r7, #7
 800139e:	2364      	movs	r3, #100	; 0x64
 80013a0:	2201      	movs	r2, #1
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <write_register_2+0x58>)
 80013a4:	f009 fd10 	bl	800adc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&Qval, 1, 100);
 80013a8:	1db9      	adds	r1, r7, #6
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	2201      	movs	r2, #1
 80013ae:	480a      	ldr	r0, [pc, #40]	; (80013d8 <write_register_2+0x58>)
 80013b0:	f009 fd0a 	bl	800adc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&Ival, 1, 100);
 80013b4:	1d79      	adds	r1, r7, #5
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	2201      	movs	r2, #1
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <write_register_2+0x58>)
 80013bc:	f009 fd04 	bl	800adc8 <HAL_SPI_Transmit>
	GPIOW(DEMOD_CS, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2101      	movs	r1, #1
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <write_register_2+0x54>)
 80013c6:	f004 fe87 	bl	80060d8 <HAL_GPIO_WritePin>

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	58020400 	.word	0x58020400
 80013d8:	240008c4 	.word	0x240008c4

080013dc <read_register>:

/*
 * Reads back CMX registers and prints them in binary through RTT
 */
uint8_t read_register(uint8_t reg) {
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	b08a      	sub	sp, #40	; 0x28
 80013e2:	af08      	add	r7, sp, #32
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
	reg ^= 0xF0;
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	f06f 030f 	mvn.w	r3, #15
 80013ee:	4053      	eors	r3, r2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	71fb      	strb	r3, [r7, #7]
	GPIOW(DEMOD_CS, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2101      	movs	r1, #1
 80013f8:	483a      	ldr	r0, [pc, #232]	; (80014e4 <read_register+0x108>)
 80013fa:	f004 fe6d 	bl	80060d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg, 1, 100);
 80013fe:	1df9      	adds	r1, r7, #7
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	2201      	movs	r2, #1
 8001404:	4838      	ldr	r0, [pc, #224]	; (80014e8 <read_register+0x10c>)
 8001406:	f009 fcdf 	bl	800adc8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)spi_buf, 1, 100);
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	2201      	movs	r2, #1
 800140e:	4937      	ldr	r1, [pc, #220]	; (80014ec <read_register+0x110>)
 8001410:	4835      	ldr	r0, [pc, #212]	; (80014e8 <read_register+0x10c>)
 8001412:	f009 fecb 	bl	800b1ac <HAL_SPI_Receive>
	GPIOW(DEMOD_CS, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2101      	movs	r1, #1
 800141a:	4832      	ldr	r0, [pc, #200]	; (80014e4 <read_register+0x108>)
 800141c:	f004 fe5c 	bl	80060d8 <HAL_GPIO_WritePin>
	printf("Register Address: %02x: read %02x = "BYTE_TO_BINARY_PATTERN"\n", reg, spi_buf[0], BYTE_TO_BINARY(spi_buf[0]));
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	469e      	mov	lr, r3
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <read_register+0x110>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4698      	mov	r8, r3
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <read_register+0x110>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	da02      	bge.n	800143a <read_register+0x5e>
 8001434:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001438:	e001      	b.n	800143e <read_register+0x62>
 800143a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <read_register+0x110>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <read_register+0x72>
 800144a:	2331      	movs	r3, #49	; 0x31
 800144c:	e000      	b.n	8001450 <read_register+0x74>
 800144e:	2330      	movs	r3, #48	; 0x30
 8001450:	4a26      	ldr	r2, [pc, #152]	; (80014ec <read_register+0x110>)
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	f002 0220 	and.w	r2, r2, #32
 8001458:	2a00      	cmp	r2, #0
 800145a:	d001      	beq.n	8001460 <read_register+0x84>
 800145c:	2231      	movs	r2, #49	; 0x31
 800145e:	e000      	b.n	8001462 <read_register+0x86>
 8001460:	2230      	movs	r2, #48	; 0x30
 8001462:	4922      	ldr	r1, [pc, #136]	; (80014ec <read_register+0x110>)
 8001464:	7809      	ldrb	r1, [r1, #0]
 8001466:	f001 0110 	and.w	r1, r1, #16
 800146a:	2900      	cmp	r1, #0
 800146c:	d001      	beq.n	8001472 <read_register+0x96>
 800146e:	2131      	movs	r1, #49	; 0x31
 8001470:	e000      	b.n	8001474 <read_register+0x98>
 8001472:	2130      	movs	r1, #48	; 0x30
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <read_register+0x110>)
 8001476:	7800      	ldrb	r0, [r0, #0]
 8001478:	f000 0008 	and.w	r0, r0, #8
 800147c:	2800      	cmp	r0, #0
 800147e:	d001      	beq.n	8001484 <read_register+0xa8>
 8001480:	2031      	movs	r0, #49	; 0x31
 8001482:	e000      	b.n	8001486 <read_register+0xaa>
 8001484:	2030      	movs	r0, #48	; 0x30
 8001486:	4c19      	ldr	r4, [pc, #100]	; (80014ec <read_register+0x110>)
 8001488:	7824      	ldrb	r4, [r4, #0]
 800148a:	f004 0404 	and.w	r4, r4, #4
 800148e:	2c00      	cmp	r4, #0
 8001490:	d001      	beq.n	8001496 <read_register+0xba>
 8001492:	2431      	movs	r4, #49	; 0x31
 8001494:	e000      	b.n	8001498 <read_register+0xbc>
 8001496:	2430      	movs	r4, #48	; 0x30
 8001498:	4d14      	ldr	r5, [pc, #80]	; (80014ec <read_register+0x110>)
 800149a:	782d      	ldrb	r5, [r5, #0]
 800149c:	f005 0502 	and.w	r5, r5, #2
 80014a0:	2d00      	cmp	r5, #0
 80014a2:	d001      	beq.n	80014a8 <read_register+0xcc>
 80014a4:	2531      	movs	r5, #49	; 0x31
 80014a6:	e000      	b.n	80014aa <read_register+0xce>
 80014a8:	2530      	movs	r5, #48	; 0x30
 80014aa:	4e10      	ldr	r6, [pc, #64]	; (80014ec <read_register+0x110>)
 80014ac:	7836      	ldrb	r6, [r6, #0]
 80014ae:	f006 0601 	and.w	r6, r6, #1
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d001      	beq.n	80014ba <read_register+0xde>
 80014b6:	2631      	movs	r6, #49	; 0x31
 80014b8:	e000      	b.n	80014bc <read_register+0xe0>
 80014ba:	2630      	movs	r6, #48	; 0x30
 80014bc:	9606      	str	r6, [sp, #24]
 80014be:	9505      	str	r5, [sp, #20]
 80014c0:	9404      	str	r4, [sp, #16]
 80014c2:	9003      	str	r0, [sp, #12]
 80014c4:	9102      	str	r1, [sp, #8]
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4663      	mov	r3, ip
 80014cc:	4642      	mov	r2, r8
 80014ce:	4671      	mov	r1, lr
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <read_register+0x114>)
 80014d2:	f00f fba7 	bl	8010c24 <iprintf>
	return spi_buf[0];
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <read_register+0x110>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014e4:	58020400 	.word	0x58020400
 80014e8:	240008c4 	.word	0x240008c4
 80014ec:	24000ccc 	.word	0x24000ccc
 80014f0:	08011c14 	.word	0x08011c14
 80014f4:	00000000 	.word	0x00000000

080014f8 <demod_set_vco>:

/*
 * Sets the VCO frequency to the given input frequency by calculating and writing correct values to CMX register
 */
void demod_set_vco(uint32_t freq, uint32_t pll_r_div) { // TODO: Clean up
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]



	uint32_t pll_r = pll_r_div;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	617b      	str	r3, [r7, #20]
	uint32_t pll_m = freq/10e6*pll_r_div; // uint32_t pll_m = freq / demod_pll_step;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001510:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001590 <demod_set_vco+0x98>
 8001514:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001522:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001526:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800152a:	ee17 3a90 	vmov	r3, s15
 800152e:	613b      	str	r3, [r7, #16]
	const uint8_t pll_r_23 = pll_r & 0xFF;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	73fb      	strb	r3, [r7, #15]
	const uint8_t pll_r_24 = (pll_r >> 8) & 0xFF;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	73bb      	strb	r3, [r7, #14]
	// 0x23 has to be written before 0x24
	write_register(CMX994A_PLLR23, pll_r_23);
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	4619      	mov	r1, r3
 800153e:	2023      	movs	r0, #35	; 0x23
 8001540:	f7ff fef8 	bl	8001334 <write_register>
	write_register(CMX994A_PLLR24, pll_r_24);
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	4619      	mov	r1, r3
 8001548:	2024      	movs	r0, #36	; 0x24
 800154a:	f7ff fef3 	bl	8001334 <write_register>
	//printf("Set R register: $23: %02x, $24: %02x\n", pll_r_23, pll_r_24);
	//read_register(CMX994A_PLLR23);
	//read_register(CMX994A_PLLR24);
	const uint8_t pll_m_20 = pll_m & 0xFF;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	737b      	strb	r3, [r7, #13]
	const uint8_t pll_m_21 = (pll_m >> 8) & 0xFF;
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	733b      	strb	r3, [r7, #12]
	const uint8_t pll_m_22 = ((pll_m >> 16) & 0x07) | (1<<7) | (1<<5); // b5 = charge pump enable , b7 = Enable PLL
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	0c1b      	lsrs	r3, r3, #16
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001568:	72fb      	strb	r3, [r7, #11]
	write_register(CMX994A_PLLM20, pll_m_20);
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	4619      	mov	r1, r3
 800156e:	2020      	movs	r0, #32
 8001570:	f7ff fee0 	bl	8001334 <write_register>
	write_register(CMX994A_PLLM21, pll_m_21);
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	4619      	mov	r1, r3
 8001578:	2021      	movs	r0, #33	; 0x21
 800157a:	f7ff fedb 	bl	8001334 <write_register>
	write_register(CMX994A_PLLM22, pll_m_22);
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	4619      	mov	r1, r3
 8001582:	2022      	movs	r0, #34	; 0x22
 8001584:	f7ff fed6 	bl	8001334 <write_register>
	//printf("Set VCO: $20: %02x, $21: %02x, $22: %02x\n", pll_m_20, pll_m_21, pll_m_22);
	//read_register(CMX994A_PLLM20);
	//read_register(CMX994A_PLLM21);
	//read_register(CMX994A_PLLM22);
}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	00000000 	.word	0x00000000
 8001594:	416312d0 	.word	0x416312d0

08001598 <demod_is_locked>:

/*
 * Check from register if VCO is frequency locked
 */
uint8_t demod_is_locked(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	return ( read_register(CMX994A_PLLM22) & (1<<6)) ? 0 : 1;
 800159c:	2022      	movs	r0, #34	; 0x22
 800159e:	f7ff ff1d 	bl	80013dc <read_register>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <configureRadio>:

void configureRadio(){
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af06      	add	r7, sp, #24
	 */
	//General reset


	/* First Enable The Radio and give LDO time to settle */
	GPIOW(EN_3V0, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	2110      	movs	r1, #16
 80015c2:	48ba      	ldr	r0, [pc, #744]	; (80018ac <configureRadio+0x2f4>)
 80015c4:	f004 fd88 	bl	80060d8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015c8:	20c8      	movs	r0, #200	; 0xc8
 80015ca:	f000 ff15 	bl	80023f8 <HAL_Delay>

	/* Define all the registry values */
	uint8_t CMX994A_GCR_T = 0b10101111;
 80015ce:	23af      	movs	r3, #175	; 0xaf
 80015d0:	71fb      	strb	r3, [r7, #7]
	 * 	2 - PLL Enable		1
	 * 	1 - CBUS RX Enable	1 (ORred with GPIO RX Enable pin)
	 * 	0 - CBUS TX Enable  1 (Enables TX divider) (ORred with GPIO TX Enable pin)
	 * 	*/

	uint8_t CMX994A_RXR_T = 0b00000000;
 80015d2:	2300      	movs	r3, #0
 80015d4:	71bb      	strb	r3, [r7, #6]
	 * 5 - Disable LNA		0
	 * 4,3 - ACR Filter		00 for minimum BW , 10 for maximum BW
	 * 2 - DC Correction X	0 (0 for nominal , 1 for double)
	 * 1,0 - LO Divider		00 (divided by 2)
	 * */
	uint8_t CMX994A_OCR_T = 0b00000011;
 80015d6:	2303      	movs	r3, #3
 80015d8:	717b      	strb	r3, [r7, #5]
	 * 3 - Q path disable	0
	 * 2 - I path disable 	0
	 * 1,0 - LO phase corr	00 (enabled 00 , powered down 11)
	 * */

	uint8_t CMX994A_VCOCR_T = 0b00000011;
 80015da:	2303      	movs	r3, #3
 80015dc:	713b      	strb	r3, [r7, #4]

	/* RX Offset register
	 * Recommended value from datasheet : 0x88
	 */
	// Experimentally found values for voltage offsets - the offset should be < 25 mV between each channels P and N.
	uint8_t CMX994A_RXOFFI_T = 0b00001001;
 80015de:	2309      	movs	r3, #9
 80015e0:	70fb      	strb	r3, [r7, #3]
	uint8_t CMX994A_RXOFFQ_T = 0b00101010;
 80015e2:	232a      	movs	r3, #42	; 0x2a
 80015e4:	70bb      	strb	r3, [r7, #2]

	/* LNA Intermodulation Control Register
	 * Recommended value from datasheet (440 MHz : 0x3F , 100 MHz : 0x00 )
	 * Could be set to 0, as very low powers are expected at input
	 */
	uint8_t CMX994A_LNAIM_T = 0x10;
 80015e6:	2310      	movs	r3, #16
 80015e8:	707b      	strb	r3, [r7, #1]

	/*
	 *  Write registers with values from above
	 */
	//printf("General reset\n");
	write_register(CMX994A_GR, 0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2010      	movs	r0, #16
 80015ee:	f7ff fea1 	bl	8001334 <write_register>

	//RX Control Register config
	write_register(CMX994A_RXR, CMX994A_RXR_T);
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	4619      	mov	r1, r3
 80015f6:	2012      	movs	r0, #18
 80015f8:	f7ff fe9c 	bl	8001334 <write_register>
	printf("RX Control Register configured: "BYTE_TO_BINARY_PATTERN"\n", BYTE_TO_BINARY(CMX994A_RXR_T));
 80015fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001600:	2b00      	cmp	r3, #0
 8001602:	da01      	bge.n	8001608 <configureRadio+0x50>
 8001604:	2531      	movs	r5, #49	; 0x31
 8001606:	e000      	b.n	800160a <configureRadio+0x52>
 8001608:	2530      	movs	r5, #48	; 0x30
 800160a:	79bb      	ldrb	r3, [r7, #6]
 800160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <configureRadio+0x60>
 8001614:	2631      	movs	r6, #49	; 0x31
 8001616:	e000      	b.n	800161a <configureRadio+0x62>
 8001618:	2630      	movs	r6, #48	; 0x30
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <configureRadio+0x72>
 8001624:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001628:	e001      	b.n	800162e <configureRadio+0x76>
 800162a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <configureRadio+0x84>
 8001638:	2331      	movs	r3, #49	; 0x31
 800163a:	e000      	b.n	800163e <configureRadio+0x86>
 800163c:	2330      	movs	r3, #48	; 0x30
 800163e:	79ba      	ldrb	r2, [r7, #6]
 8001640:	f002 0208 	and.w	r2, r2, #8
 8001644:	2a00      	cmp	r2, #0
 8001646:	d001      	beq.n	800164c <configureRadio+0x94>
 8001648:	2231      	movs	r2, #49	; 0x31
 800164a:	e000      	b.n	800164e <configureRadio+0x96>
 800164c:	2230      	movs	r2, #48	; 0x30
 800164e:	79b9      	ldrb	r1, [r7, #6]
 8001650:	f001 0104 	and.w	r1, r1, #4
 8001654:	2900      	cmp	r1, #0
 8001656:	d001      	beq.n	800165c <configureRadio+0xa4>
 8001658:	2131      	movs	r1, #49	; 0x31
 800165a:	e000      	b.n	800165e <configureRadio+0xa6>
 800165c:	2130      	movs	r1, #48	; 0x30
 800165e:	79b8      	ldrb	r0, [r7, #6]
 8001660:	f000 0002 	and.w	r0, r0, #2
 8001664:	2800      	cmp	r0, #0
 8001666:	d001      	beq.n	800166c <configureRadio+0xb4>
 8001668:	2031      	movs	r0, #49	; 0x31
 800166a:	e000      	b.n	800166e <configureRadio+0xb6>
 800166c:	2030      	movs	r0, #48	; 0x30
 800166e:	79bc      	ldrb	r4, [r7, #6]
 8001670:	f004 0401 	and.w	r4, r4, #1
 8001674:	2c00      	cmp	r4, #0
 8001676:	d001      	beq.n	800167c <configureRadio+0xc4>
 8001678:	2431      	movs	r4, #49	; 0x31
 800167a:	e000      	b.n	800167e <configureRadio+0xc6>
 800167c:	2430      	movs	r4, #48	; 0x30
 800167e:	9404      	str	r4, [sp, #16]
 8001680:	9003      	str	r0, [sp, #12]
 8001682:	9102      	str	r1, [sp, #8]
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	4663      	mov	r3, ip
 800168a:	4632      	mov	r2, r6
 800168c:	4629      	mov	r1, r5
 800168e:	4888      	ldr	r0, [pc, #544]	; (80018b0 <configureRadio+0x2f8>)
 8001690:	f00f fac8 	bl	8010c24 <iprintf>
	printf("RX Control Register read:  \n  ");
 8001694:	4887      	ldr	r0, [pc, #540]	; (80018b4 <configureRadio+0x2fc>)
 8001696:	f00f fac5 	bl	8010c24 <iprintf>
	read_register(CMX994A_RXR);
 800169a:	2012      	movs	r0, #18
 800169c:	f7ff fe9e 	bl	80013dc <read_register>

	//Options Control Register config
	write_register(CMX994A_OCR, CMX994A_OCR_T);
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	4619      	mov	r1, r3
 80016a4:	2015      	movs	r0, #21
 80016a6:	f7ff fe45 	bl	8001334 <write_register>
	printf("Options Control Register configured: "BYTE_TO_BINARY_PATTERN"\n", BYTE_TO_BINARY(CMX994A_OCR_T));
 80016aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da01      	bge.n	80016b6 <configureRadio+0xfe>
 80016b2:	2531      	movs	r5, #49	; 0x31
 80016b4:	e000      	b.n	80016b8 <configureRadio+0x100>
 80016b6:	2530      	movs	r5, #48	; 0x30
 80016b8:	797b      	ldrb	r3, [r7, #5]
 80016ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <configureRadio+0x10e>
 80016c2:	2631      	movs	r6, #49	; 0x31
 80016c4:	e000      	b.n	80016c8 <configureRadio+0x110>
 80016c6:	2630      	movs	r6, #48	; 0x30
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <configureRadio+0x120>
 80016d2:	f04f 0c31 	mov.w	ip, #49	; 0x31
 80016d6:	e001      	b.n	80016dc <configureRadio+0x124>
 80016d8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80016dc:	797b      	ldrb	r3, [r7, #5]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <configureRadio+0x132>
 80016e6:	2331      	movs	r3, #49	; 0x31
 80016e8:	e000      	b.n	80016ec <configureRadio+0x134>
 80016ea:	2330      	movs	r3, #48	; 0x30
 80016ec:	797a      	ldrb	r2, [r7, #5]
 80016ee:	f002 0208 	and.w	r2, r2, #8
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	d001      	beq.n	80016fa <configureRadio+0x142>
 80016f6:	2231      	movs	r2, #49	; 0x31
 80016f8:	e000      	b.n	80016fc <configureRadio+0x144>
 80016fa:	2230      	movs	r2, #48	; 0x30
 80016fc:	7979      	ldrb	r1, [r7, #5]
 80016fe:	f001 0104 	and.w	r1, r1, #4
 8001702:	2900      	cmp	r1, #0
 8001704:	d001      	beq.n	800170a <configureRadio+0x152>
 8001706:	2131      	movs	r1, #49	; 0x31
 8001708:	e000      	b.n	800170c <configureRadio+0x154>
 800170a:	2130      	movs	r1, #48	; 0x30
 800170c:	7978      	ldrb	r0, [r7, #5]
 800170e:	f000 0002 	and.w	r0, r0, #2
 8001712:	2800      	cmp	r0, #0
 8001714:	d001      	beq.n	800171a <configureRadio+0x162>
 8001716:	2031      	movs	r0, #49	; 0x31
 8001718:	e000      	b.n	800171c <configureRadio+0x164>
 800171a:	2030      	movs	r0, #48	; 0x30
 800171c:	797c      	ldrb	r4, [r7, #5]
 800171e:	f004 0401 	and.w	r4, r4, #1
 8001722:	2c00      	cmp	r4, #0
 8001724:	d001      	beq.n	800172a <configureRadio+0x172>
 8001726:	2431      	movs	r4, #49	; 0x31
 8001728:	e000      	b.n	800172c <configureRadio+0x174>
 800172a:	2430      	movs	r4, #48	; 0x30
 800172c:	9404      	str	r4, [sp, #16]
 800172e:	9003      	str	r0, [sp, #12]
 8001730:	9102      	str	r1, [sp, #8]
 8001732:	9201      	str	r2, [sp, #4]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4663      	mov	r3, ip
 8001738:	4632      	mov	r2, r6
 800173a:	4629      	mov	r1, r5
 800173c:	485e      	ldr	r0, [pc, #376]	; (80018b8 <configureRadio+0x300>)
 800173e:	f00f fa71 	bl	8010c24 <iprintf>
	printf("Options Control Register read:  \n  ");
 8001742:	485e      	ldr	r0, [pc, #376]	; (80018bc <configureRadio+0x304>)
 8001744:	f00f fa6e 	bl	8010c24 <iprintf>
	read_register(CMX994A_OCR);
 8001748:	2015      	movs	r0, #21
 800174a:	f7ff fe47 	bl	80013dc <read_register>

	//VCO Control Register config
	write_register(CMX994A_VCOCR, CMX994A_VCOCR_T);//CMX994A_VCOCR_TXDIV1
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	4619      	mov	r1, r3
 8001752:	2025      	movs	r0, #37	; 0x25
 8001754:	f7ff fdee 	bl	8001334 <write_register>
	printf("VCO Control Register configured: "BYTE_TO_BINARY_PATTERN"\n", BYTE_TO_BINARY(CMX994A_VCOCR_T));
 8001758:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	da01      	bge.n	8001764 <configureRadio+0x1ac>
 8001760:	2531      	movs	r5, #49	; 0x31
 8001762:	e000      	b.n	8001766 <configureRadio+0x1ae>
 8001764:	2530      	movs	r5, #48	; 0x30
 8001766:	793b      	ldrb	r3, [r7, #4]
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <configureRadio+0x1bc>
 8001770:	2631      	movs	r6, #49	; 0x31
 8001772:	e000      	b.n	8001776 <configureRadio+0x1be>
 8001774:	2630      	movs	r6, #48	; 0x30
 8001776:	793b      	ldrb	r3, [r7, #4]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <configureRadio+0x1ce>
 8001780:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001784:	e001      	b.n	800178a <configureRadio+0x1d2>
 8001786:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800178a:	793b      	ldrb	r3, [r7, #4]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <configureRadio+0x1e0>
 8001794:	2331      	movs	r3, #49	; 0x31
 8001796:	e000      	b.n	800179a <configureRadio+0x1e2>
 8001798:	2330      	movs	r3, #48	; 0x30
 800179a:	793a      	ldrb	r2, [r7, #4]
 800179c:	f002 0208 	and.w	r2, r2, #8
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d001      	beq.n	80017a8 <configureRadio+0x1f0>
 80017a4:	2231      	movs	r2, #49	; 0x31
 80017a6:	e000      	b.n	80017aa <configureRadio+0x1f2>
 80017a8:	2230      	movs	r2, #48	; 0x30
 80017aa:	7939      	ldrb	r1, [r7, #4]
 80017ac:	f001 0104 	and.w	r1, r1, #4
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d001      	beq.n	80017b8 <configureRadio+0x200>
 80017b4:	2131      	movs	r1, #49	; 0x31
 80017b6:	e000      	b.n	80017ba <configureRadio+0x202>
 80017b8:	2130      	movs	r1, #48	; 0x30
 80017ba:	7938      	ldrb	r0, [r7, #4]
 80017bc:	f000 0002 	and.w	r0, r0, #2
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d001      	beq.n	80017c8 <configureRadio+0x210>
 80017c4:	2031      	movs	r0, #49	; 0x31
 80017c6:	e000      	b.n	80017ca <configureRadio+0x212>
 80017c8:	2030      	movs	r0, #48	; 0x30
 80017ca:	793c      	ldrb	r4, [r7, #4]
 80017cc:	f004 0401 	and.w	r4, r4, #1
 80017d0:	2c00      	cmp	r4, #0
 80017d2:	d001      	beq.n	80017d8 <configureRadio+0x220>
 80017d4:	2431      	movs	r4, #49	; 0x31
 80017d6:	e000      	b.n	80017da <configureRadio+0x222>
 80017d8:	2430      	movs	r4, #48	; 0x30
 80017da:	9404      	str	r4, [sp, #16]
 80017dc:	9003      	str	r0, [sp, #12]
 80017de:	9102      	str	r1, [sp, #8]
 80017e0:	9201      	str	r2, [sp, #4]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4663      	mov	r3, ip
 80017e6:	4632      	mov	r2, r6
 80017e8:	4629      	mov	r1, r5
 80017ea:	4835      	ldr	r0, [pc, #212]	; (80018c0 <configureRadio+0x308>)
 80017ec:	f00f fa1a 	bl	8010c24 <iprintf>
	printf("VCO Control Register read:  \n  ");
 80017f0:	4834      	ldr	r0, [pc, #208]	; (80018c4 <configureRadio+0x30c>)
 80017f2:	f00f fa17 	bl	8010c24 <iprintf>
	read_register(CMX994A_VCOCR);
 80017f6:	2025      	movs	r0, #37	; 0x25
 80017f8:	f7ff fdf0 	bl	80013dc <read_register>


	//VCO Control Register config
	write_register(CMX994A_LNAINT, CMX994A_LNAIM_T);
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	4619      	mov	r1, r3
 8001800:	2014      	movs	r0, #20
 8001802:	f7ff fd97 	bl	8001334 <write_register>
	write_register_2(CMX994A_RXEXTOFF, CMX994A_RXOFFQ_T, CMX994A_RXOFFI_T);
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	4619      	mov	r1, r3
 800180c:	2017      	movs	r0, #23
 800180e:	f7ff fdb7 	bl	8001380 <write_register_2>
	//HAL_GPIO_WritePin (DEMOD_TXEN_GPIO_Port, DEMOD_TXEN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin (DEMOD_RXEN_GPIO_Port, DEMOD_RXEN_Pin, GPIO_PIN_SET);


	/* Write the VCO registers (R and M dividers for the VCO. M is calculated from LO_FREQ and RVAL) */
	demod_set_vco(LO_FREQ, RVAL);
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <configureRadio+0x310>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <configureRadio+0x314>)
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe6b 	bl	80014f8 <demod_set_vco>

	//General Control Register config (Write this register last as it will enable the VCO)
	write_register(CMX994A_GCR, CMX994A_GCR_T);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4619      	mov	r1, r3
 8001826:	2011      	movs	r0, #17
 8001828:	f7ff fd84 	bl	8001334 <write_register>

	printf("General Control Register configured: "BYTE_TO_BINARY_PATTERN"\n", BYTE_TO_BINARY(CMX994A_GCR_T));
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da01      	bge.n	8001838 <configureRadio+0x280>
 8001834:	2531      	movs	r5, #49	; 0x31
 8001836:	e000      	b.n	800183a <configureRadio+0x282>
 8001838:	2530      	movs	r5, #48	; 0x30
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <configureRadio+0x290>
 8001844:	2631      	movs	r6, #49	; 0x31
 8001846:	e000      	b.n	800184a <configureRadio+0x292>
 8001848:	2630      	movs	r6, #48	; 0x30
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <configureRadio+0x2a2>
 8001854:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001858:	e001      	b.n	800185e <configureRadio+0x2a6>
 800185a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <configureRadio+0x2b4>
 8001868:	2331      	movs	r3, #49	; 0x31
 800186a:	e000      	b.n	800186e <configureRadio+0x2b6>
 800186c:	2330      	movs	r3, #48	; 0x30
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	f002 0208 	and.w	r2, r2, #8
 8001874:	2a00      	cmp	r2, #0
 8001876:	d001      	beq.n	800187c <configureRadio+0x2c4>
 8001878:	2231      	movs	r2, #49	; 0x31
 800187a:	e000      	b.n	800187e <configureRadio+0x2c6>
 800187c:	2230      	movs	r2, #48	; 0x30
 800187e:	79f9      	ldrb	r1, [r7, #7]
 8001880:	f001 0104 	and.w	r1, r1, #4
 8001884:	2900      	cmp	r1, #0
 8001886:	d001      	beq.n	800188c <configureRadio+0x2d4>
 8001888:	2131      	movs	r1, #49	; 0x31
 800188a:	e000      	b.n	800188e <configureRadio+0x2d6>
 800188c:	2130      	movs	r1, #48	; 0x30
 800188e:	79f8      	ldrb	r0, [r7, #7]
 8001890:	f000 0002 	and.w	r0, r0, #2
 8001894:	2800      	cmp	r0, #0
 8001896:	d001      	beq.n	800189c <configureRadio+0x2e4>
 8001898:	2031      	movs	r0, #49	; 0x31
 800189a:	e000      	b.n	800189e <configureRadio+0x2e6>
 800189c:	2030      	movs	r0, #48	; 0x30
 800189e:	79fc      	ldrb	r4, [r7, #7]
 80018a0:	f004 0401 	and.w	r4, r4, #1
 80018a4:	2c00      	cmp	r4, #0
 80018a6:	d013      	beq.n	80018d0 <configureRadio+0x318>
 80018a8:	2431      	movs	r4, #49	; 0x31
 80018aa:	e012      	b.n	80018d2 <configureRadio+0x31a>
 80018ac:	58020000 	.word	0x58020000
 80018b0:	08011c4c 	.word	0x08011c4c
 80018b4:	08011c80 	.word	0x08011c80
 80018b8:	08011ca0 	.word	0x08011ca0
 80018bc:	08011cd8 	.word	0x08011cd8
 80018c0:	08011cfc 	.word	0x08011cfc
 80018c4:	08011d30 	.word	0x08011d30
 80018c8:	24000000 	.word	0x24000000
 80018cc:	24000004 	.word	0x24000004
 80018d0:	2430      	movs	r4, #48	; 0x30
 80018d2:	9404      	str	r4, [sp, #16]
 80018d4:	9003      	str	r0, [sp, #12]
 80018d6:	9102      	str	r1, [sp, #8]
 80018d8:	9201      	str	r2, [sp, #4]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4663      	mov	r3, ip
 80018de:	4632      	mov	r2, r6
 80018e0:	4629      	mov	r1, r5
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <configureRadio+0x360>)
 80018e4:	f00f f99e 	bl	8010c24 <iprintf>
	printf("General Control Register read: \n  ");
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <configureRadio+0x364>)
 80018ea:	f00f f99b 	bl	8010c24 <iprintf>
	read_register(CMX994A_GCR);
 80018ee:	2011      	movs	r0, #17
 80018f0:	f7ff fd74 	bl	80013dc <read_register>

	HAL_Delay(10);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f000 fd7f 	bl	80023f8 <HAL_Delay>

	printf("Radio: PLL locked (1/0): %d \n", demod_is_locked());
 80018fa:	f7ff fe4d 	bl	8001598 <demod_is_locked>
 80018fe:	4603      	mov	r3, r0
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <configureRadio+0x368>)
 8001904:	f00f f98e 	bl	8010c24 <iprintf>
	HAL_Delay(1000);
 8001908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190c:	f000 fd74 	bl	80023f8 <HAL_Delay>
			  demod_set_vco(200e6, RVAL);
			  HAL_Delay(5000);
		  }

	#endif
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001918:	08011d50 	.word	0x08011d50
 800191c:	08011d88 	.word	0x08011d88
 8001920:	08011dac 	.word	0x08011dac

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_MspInit+0x30>)
 800192c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001930:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_MspInit+0x30>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_MspInit+0x30>)
 800193c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	58024400 	.word	0x58024400

08001958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a68      	ldr	r2, [pc, #416]	; (8001b18 <HAL_ADC_MspInit+0x1c0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d175      	bne.n	8001a66 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800197a:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_ADC_MspInit+0x1c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	4a66      	ldr	r2, [pc, #408]	; (8001b1c <HAL_ADC_MspInit+0x1c4>)
 8001982:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001984:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_ADC_MspInit+0x1c4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10e      	bne.n	80019aa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800198c:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 800198e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001992:	4a63      	ldr	r2, [pc, #396]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 800199e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a5b      	ldr	r2, [pc, #364]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c8:	23c0      	movs	r3, #192	; 0xc0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4852      	ldr	r0, [pc, #328]	; (8001b24 <HAL_ADC_MspInit+0x1cc>)
 80019dc:	f004 f9cc 	bl	8005d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019e0:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 80019e2:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_ADC_MspInit+0x1d4>)
 80019e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 80019e8:	2209      	movs	r2, #9
 80019ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ec:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 80019fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a00:	4b49      	ldr	r3, [pc, #292]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a28:	2203      	movs	r2, #3
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a38:	483b      	ldr	r0, [pc, #236]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a3a:	f002 f973 	bl	8003d24 <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001a44:	f7ff fc70 	bl	8001328 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <HAL_ADC_MspInit+0x1d0>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2012      	movs	r0, #18
 8001a5a:	f002 f92e 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a5e:	2012      	movs	r0, #18
 8001a60:	f002 f945 	bl	8003cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a64:	e054      	b.n	8001b10 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <HAL_ADC_MspInit+0x1d8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d13b      	bne.n	8001ae8 <HAL_ADC_MspInit+0x190>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_ADC_MspInit+0x1c4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_ADC_MspInit+0x1c4>)
 8001a78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_ADC_MspInit+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10e      	bne.n	8001aa0 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001a8a:	f043 0320 	orr.w	r3, r3, #32
 8001a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001abe:	2330      	movs	r3, #48	; 0x30
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4818      	ldr	r0, [pc, #96]	; (8001b34 <HAL_ADC_MspInit+0x1dc>)
 8001ad2:	f004 f951 	bl	8005d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2012      	movs	r0, #18
 8001adc:	f002 f8ed 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ae0:	2012      	movs	r0, #18
 8001ae2:	f002 f904 	bl	8003cee <HAL_NVIC_EnableIRQ>
}
 8001ae6:	e013      	b.n	8001b10 <HAL_ADC_MspInit+0x1b8>
  else if(hadc->Instance==ADC3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_ADC_MspInit+0x1e0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10e      	bne.n	8001b10 <HAL_ADC_MspInit+0x1b8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_ADC_MspInit+0x1c8>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	; 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	24000598 	.word	0x24000598
 8001b20:	58024400 	.word	0x58024400
 8001b24:	58020000 	.word	0x58020000
 8001b28:	24000ac4 	.word	0x24000ac4
 8001b2c:	40020410 	.word	0x40020410
 8001b30:	40022100 	.word	0x40022100
 8001b34:	58020800 	.word	0x58020800
 8001b38:	58026000 	.word	0x58026000

08001b3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0ba      	sub	sp, #232	; 0xe8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	22bc      	movs	r2, #188	; 0xbc
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00f f859 	bl	8010c14 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <HAL_FDCAN_MspInit+0x17c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d14e      	bne.n	8001c0a <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f006 fe96 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001b8a:	f7ff fbcd 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b8e:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <HAL_FDCAN_MspInit+0x180>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4a49      	ldr	r2, [pc, #292]	; (8001cbc <HAL_FDCAN_MspInit+0x180>)
 8001b96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001b98:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_FDCAN_MspInit+0x180>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10e      	bne.n	8001bbe <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001ba2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ba6:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001bb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bf6:	2309      	movs	r3, #9
 8001bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4830      	ldr	r0, [pc, #192]	; (8001cc4 <HAL_FDCAN_MspInit+0x188>)
 8001c04:	f004 f8b8 	bl	8005d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001c08:	e052      	b.n	8001cb0 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <HAL_FDCAN_MspInit+0x18c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d14d      	bne.n	8001cb0 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	f107 0318 	add.w	r3, r7, #24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 fe42 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001c32:	f7ff fb79 	bl	8001328 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_FDCAN_MspInit+0x180>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_FDCAN_MspInit+0x180>)
 8001c3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_FDCAN_MspInit+0x180>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d10e      	bne.n	8001c66 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001c4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001c5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_FDCAN_MspInit+0x184>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c84:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <HAL_FDCAN_MspInit+0x188>)
 8001cac:	f004 f864 	bl	8005d78 <HAL_GPIO_Init>
}
 8001cb0:	bf00      	nop
 8001cb2:	37e8      	adds	r7, #232	; 0xe8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	4000a000 	.word	0x4000a000
 8001cbc:	2400059c 	.word	0x2400059c
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58020400 	.word	0x58020400
 8001cc8:	4000a400 	.word	0x4000a400

08001ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0ba      	sub	sp, #232	; 0xe8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	22bc      	movs	r2, #188	; 0xbc
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f00e ff91 	bl	8010c14 <memset>
  if(hi2c->Instance==I2C1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a49      	ldr	r2, [pc, #292]	; (8001e1c <HAL_I2C_MspInit+0x150>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d142      	bne.n	8001d82 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d06:	f107 0318 	add.w	r3, r7, #24
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 fdd0 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d16:	f7ff fb07 	bl	8001328 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4a3f      	ldr	r2, [pc, #252]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3e:	2312      	movs	r3, #18
 8001d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d50:	2304      	movs	r3, #4
 8001d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4831      	ldr	r0, [pc, #196]	; (8001e24 <HAL_I2C_MspInit+0x158>)
 8001d5e:	f004 f80b 	bl	8005d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d68:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d80:	e047      	b.n	8001e12 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C4)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_I2C_MspInit+0x15c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d142      	bne.n	8001e12 <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f006 fd88 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_MspInit+0xde>
      Error_Handler();
 8001da6:	f7ff fabf 	bl	8001328 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dc8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001de2:	2304      	movs	r3, #4
 8001de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dec:	4619      	mov	r1, r3
 8001dee:	480f      	ldr	r0, [pc, #60]	; (8001e2c <HAL_I2C_MspInit+0x160>)
 8001df0:	f003 ffc2 	bl	8005d78 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_I2C_MspInit+0x154>)
 8001e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
}
 8001e12:	bf00      	nop
 8001e14:	37e8      	adds	r7, #232	; 0xe8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	58024400 	.word	0x58024400
 8001e24:	58020400 	.word	0x58020400
 8001e28:	58001c00 	.word	0x58001c00
 8001e2c:	58020c00 	.word	0x58020c00

08001e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0b8      	sub	sp, #224	; 0xe0
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	22bc      	movs	r2, #188	; 0xbc
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00e fedf 	bl	8010c14 <memset>
  if(hspi->Instance==SPI2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <HAL_SPI_MspInit+0xc0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d142      	bne.n	8001ee6 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 fd1e 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e7a:	f7ff fa55 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001eba:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed4:	2305      	movs	r3, #5
 8001ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <HAL_SPI_MspInit+0xc8>)
 8001ee2:	f003 ff49 	bl	8005d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	37e0      	adds	r7, #224	; 0xe0
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40003800 	.word	0x40003800
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58020400 	.word	0x58020400

08001efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_TIM_Base_MspInit+0x3c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_TIM_Base_MspInit+0x40>)
 8001f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_TIM_Base_MspInit+0x40>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_TIM_Base_MspInit+0x40>)
 8001f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	58024400 	.word	0x58024400

08001f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <HAL_TIM_MspPostInit+0x6c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d11f      	bne.n	8001fa2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_TIM_MspPostInit+0x70>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_TIM_MspPostInit+0x70>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_TIM_MspPostInit+0x70>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <HAL_TIM_MspPostInit+0x74>)
 8001f9e:	f003 feeb 	bl	8005d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020000 	.word	0x58020000

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SET_EVENT(tick);
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SysTick_Handler+0x18>)
 8002006:	2201      	movs	r2, #1
 8002008:	705a      	strb	r2, [r3, #1]
 800200a:	4b03      	ldr	r3, [pc, #12]	; (8002018 <SysTick_Handler+0x18>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002010:	f000 f9d2 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	24000c28 	.word	0x24000c28

0800201c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <ADC_IRQHandler+0x14>)
 8002022:	f000 fd87 	bl	8002b34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002026:	4803      	ldr	r0, [pc, #12]	; (8002034 <ADC_IRQHandler+0x18>)
 8002028:	f000 fd84 	bl	8002b34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	240009fc 	.word	0x240009fc
 8002034:	2400094c 	.word	0x2400094c

08002038 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <DMA2_Stream0_IRQHandler+0x10>)
 800203e:	f002 f9cd 	bl	80043dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	24000ac4 	.word	0x24000ac4

0800204c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <OTG_FS_IRQHandler+0x10>)
 8002052:	f004 fad9 	bl	8006608 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	240021c0 	.word	0x240021c0

08002060 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e00a      	b.n	8002088 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002072:	f3af 8000 	nop.w
 8002076:	4601      	mov	r1, r0
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	b2ca      	uxtb	r2, r1
 8002080:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf0      	blt.n	8002072 <_read+0x12>
	}

return len;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_close>:
	}
	return len;
}

int _close(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
	return -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c2:	605a      	str	r2, [r3, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_isatty>:

int _isatty(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f00e fd36 	bl	8010ba4 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	24080000 	.word	0x24080000
 8002164:	00000400 	.word	0x00000400
 8002168:	240005a0 	.word	0x240005a0
 800216c:	240026e0 	.word	0x240026e0

08002170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002174:	4b37      	ldr	r3, [pc, #220]	; (8002254 <SystemInit+0xe4>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	4a36      	ldr	r2, [pc, #216]	; (8002254 <SystemInit+0xe4>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002184:	4b34      	ldr	r3, [pc, #208]	; (8002258 <SystemInit+0xe8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2b06      	cmp	r3, #6
 800218e:	d807      	bhi.n	80021a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <SystemInit+0xe8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 030f 	bic.w	r3, r3, #15
 8002198:	4a2f      	ldr	r2, [pc, #188]	; (8002258 <SystemInit+0xe8>)
 800219a:	f043 0307 	orr.w	r3, r3, #7
 800219e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <SystemInit+0xec>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <SystemInit+0xec>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <SystemInit+0xec>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <SystemInit+0xec>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4929      	ldr	r1, [pc, #164]	; (800225c <SystemInit+0xec>)
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <SystemInit+0xf0>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <SystemInit+0xe8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <SystemInit+0xe8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 030f 	bic.w	r3, r3, #15
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <SystemInit+0xe8>)
 80021d4:	f043 0307 	orr.w	r3, r3, #7
 80021d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <SystemInit+0xec>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <SystemInit+0xec>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <SystemInit+0xec>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <SystemInit+0xec>)
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <SystemInit+0xf4>)
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <SystemInit+0xec>)
 80021f4:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <SystemInit+0xf8>)
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <SystemInit+0xec>)
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <SystemInit+0xfc>)
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <SystemInit+0xec>)
 8002200:	2200      	movs	r2, #0
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <SystemInit+0xec>)
 8002206:	4a19      	ldr	r2, [pc, #100]	; (800226c <SystemInit+0xfc>)
 8002208:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <SystemInit+0xec>)
 800220c:	2200      	movs	r2, #0
 800220e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <SystemInit+0xec>)
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <SystemInit+0xfc>)
 8002214:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <SystemInit+0xec>)
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <SystemInit+0xec>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <SystemInit+0xec>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <SystemInit+0xec>)
 800222a:	2200      	movs	r2, #0
 800222c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <SystemInit+0x100>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <SystemInit+0x104>)
 8002234:	4013      	ands	r3, r2
 8002236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800223a:	d202      	bcs.n	8002242 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <SystemInit+0x108>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <SystemInit+0x10c>)
 8002244:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002248:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00
 8002258:	52002000 	.word	0x52002000
 800225c:	58024400 	.word	0x58024400
 8002260:	eaf6ed7f 	.word	0xeaf6ed7f
 8002264:	02020200 	.word	0x02020200
 8002268:	01ff0000 	.word	0x01ff0000
 800226c:	01010280 	.word	0x01010280
 8002270:	5c001000 	.word	0x5c001000
 8002274:	ffff0000 	.word	0xffff0000
 8002278:	51008108 	.word	0x51008108
 800227c:	52004000 	.word	0x52004000

08002280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002284:	f7ff ff74 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800228a:	490d      	ldr	r1, [pc, #52]	; (80022c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a0:	4c0a      	ldr	r4, [pc, #40]	; (80022cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ae:	f00e fc7f 	bl	8010bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b2:	f7fe fa0d 	bl	80006d0 <main>
  bx  lr
 80022b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80022bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022c0:	2400016c 	.word	0x2400016c
  ldr r2, =_sidata
 80022c4:	08011f18 	.word	0x08011f18
  ldr r2, =_sbss
 80022c8:	2400016c 	.word	0x2400016c
  ldr r4, =_ebss
 80022cc:	240026dc 	.word	0x240026dc

080022d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC3_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022da:	2003      	movs	r0, #3
 80022dc:	f001 fce2 	bl	8003ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022e0:	f006 f93c 	bl	800855c <HAL_RCC_GetSysClockFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_Init+0x68>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	4913      	ldr	r1, [pc, #76]	; (8002340 <HAL_Init+0x6c>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_Init+0x68>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <HAL_Init+0x6c>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_Init+0x70>)
 8002316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002318:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <HAL_Init+0x74>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f814 	bl	800234c <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e002      	b.n	8002334 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800232e:	f7ff faf9 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	58024400 	.word	0x58024400
 8002340:	08011e60 	.word	0x08011e60
 8002344:	2400000c 	.word	0x2400000c
 8002348:	24000008 	.word	0x24000008

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_InitTick+0x60>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e021      	b.n	80023a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_InitTick+0x64>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_InitTick+0x60>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fcc7 	bl	8003d0a <HAL_SYSTICK_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00e      	b.n	80023a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d80a      	bhi.n	80023a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f001 fc91 	bl	8003cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <HAL_InitTick+0x68>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	24000014 	.word	0x24000014
 80023b0:	24000008 	.word	0x24000008
 80023b4:	24000010 	.word	0x24000010

080023b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_IncTick+0x20>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x24>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_IncTick+0x24>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	24000014 	.word	0x24000014
 80023dc:	24000ce0 	.word	0x24000ce0

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	24000ce0 	.word	0x24000ce0

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffde 	bl	80023e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	24000014 	.word	0x24000014

08002440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_GetREVID+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0c1b      	lsrs	r3, r3, #16
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	5c001000 	.word	0x5c001000

08002458 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3360      	adds	r3, #96	; 0x60
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	431a      	orrs	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	611a      	str	r2, [r3, #16]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002532:	b480      	push	{r7}
 8002534:	b087      	sub	sp, #28
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	431a      	orrs	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]
  }
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3330      	adds	r3, #48	; 0x30
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	4413      	add	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	211f      	movs	r1, #31
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	f003 011f 	and.w	r1, r3, #31
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	431a      	orrs	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3314      	adds	r3, #20
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	0e5b      	lsrs	r3, r3, #25
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0d1b      	lsrs	r3, r3, #20
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2107      	movs	r1, #7
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	401a      	ands	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	0d1b      	lsrs	r3, r3, #20
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0318 	and.w	r3, r3, #24
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002688:	40d9      	lsrs	r1, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	400b      	ands	r3, r1
 800268e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002692:	431a      	orrs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	000fffff 	.word	0x000fffff

080026ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 031f 	and.w	r3, r3, #31
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <LL_ADC_DisableDeepPowerDown+0x20>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6093      	str	r3, [r2, #8]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	5fffffc0 	.word	0x5fffffc0

08002708 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271c:	d101      	bne.n	8002722 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <LL_ADC_EnableInternalRegulator+0x24>)
 800273e:	4013      	ands	r3, r2
 8002740:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	6fffffc0 	.word	0x6fffffc0

08002758 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800276c:	d101      	bne.n	8002772 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <LL_ADC_IsEnabled+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_IsEnabled+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d101      	bne.n	80027be <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d101      	bne.n	80027e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e18e      	b.n	8002b2c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff f89b 	bl	8001958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff67 	bl	8002708 <LL_ADC_IsDeepPowerDownEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff4d 	bl	80026e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff82 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d114      	bne.n	8002884 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff66 	bl	8002730 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002864:	4b9a      	ldr	r3, [pc, #616]	; (8002ad0 <HAL_ADC_Init+0x2dc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	4a9a      	ldr	r2, [pc, #616]	; (8002ad4 <HAL_ADC_Init+0x2e0>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002876:	e002      	b.n	800287e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3b01      	subs	r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff65 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff76 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 80028ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 8128 	bne.w	8002b1a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8124 	bne.w	8002b1a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff4a 	bl	8002780 <LL_ADC_IsEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d136      	bne.n	8002960 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a78      	ldr	r2, [pc, #480]	; (8002ad8 <HAL_ADC_Init+0x2e4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_ADC_Init+0x112>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a76      	ldr	r2, [pc, #472]	; (8002adc <HAL_ADC_Init+0x2e8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10e      	bne.n	8002924 <HAL_ADC_Init+0x130>
 8002906:	4874      	ldr	r0, [pc, #464]	; (8002ad8 <HAL_ADC_Init+0x2e4>)
 8002908:	f7ff ff3a 	bl	8002780 <LL_ADC_IsEnabled>
 800290c:	4604      	mov	r4, r0
 800290e:	4873      	ldr	r0, [pc, #460]	; (8002adc <HAL_ADC_Init+0x2e8>)
 8002910:	f7ff ff36 	bl	8002780 <LL_ADC_IsEnabled>
 8002914:	4603      	mov	r3, r0
 8002916:	4323      	orrs	r3, r4
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e008      	b.n	8002936 <HAL_ADC_Init+0x142>
 8002924:	486e      	ldr	r0, [pc, #440]	; (8002ae0 <HAL_ADC_Init+0x2ec>)
 8002926:	f7ff ff2b 	bl	8002780 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a66      	ldr	r2, [pc, #408]	; (8002ad8 <HAL_ADC_Init+0x2e4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_ADC_Init+0x15a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a64      	ldr	r2, [pc, #400]	; (8002adc <HAL_ADC_Init+0x2e8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x15e>
 800294e:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_ADC_Init+0x2f0>)
 8002950:	e000      	b.n	8002954 <HAL_ADC_Init+0x160>
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_ADC_Init+0x2f4>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f7ff fd7c 	bl	8002458 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002960:	f7ff fd6e 	bl	8002440 <HAL_GetREVID>
 8002964:	4603      	mov	r3, r0
 8002966:	f241 0203 	movw	r2, #4099	; 0x1003
 800296a:	4293      	cmp	r3, r2
 800296c:	d914      	bls.n	8002998 <HAL_ADC_Init+0x1a4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b10      	cmp	r3, #16
 8002974:	d110      	bne.n	8002998 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7d5b      	ldrb	r3, [r3, #21]
 800297a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002980:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002986:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7f1b      	ldrb	r3, [r3, #28]
 800298c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800298e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002990:	f043 030c 	orr.w	r3, r3, #12
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	e00d      	b.n	80029b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7d5b      	ldrb	r3, [r3, #21]
 800299c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80029a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7f1b      	ldrb	r3, [r3, #28]
 80029ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7f1b      	ldrb	r3, [r3, #28]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	045b      	lsls	r3, r3, #17
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_ADC_Init+0x2f8>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	69b9      	ldr	r1, [r7, #24]
 80029f6:	430b      	orrs	r3, r1
 80029f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fed1 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002a04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fede 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 8002a10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d14a      	bne.n	8002aae <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d147      	bne.n	8002aae <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7d1b      	ldrb	r3, [r3, #20]
 8002a22:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_ADC_Init+0x2fc>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d11b      	bne.n	8002a82 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_ADC_Init+0x300>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a5e:	3a01      	subs	r2, #1
 8002a60:	0411      	lsls	r1, r2, #16
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a72:	430a      	orrs	r2, r1
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	611a      	str	r2, [r3, #16]
 8002a80:	e007      	b.n	8002a92 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fdeb 	bl	8003684 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d120      	bne.n	8002af8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f023 010f 	bic.w	r1, r3, #15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	1e5a      	subs	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ace:	e01b      	b.n	8002b08 <HAL_ADC_Init+0x314>
 8002ad0:	24000008 	.word	0x24000008
 8002ad4:	053e2d63 	.word	0x053e2d63
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40022100 	.word	0x40022100
 8002ae0:	58026000 	.word	0x58026000
 8002ae4:	40022300 	.word	0x40022300
 8002ae8:	58026300 	.word	0x58026300
 8002aec:	fff0c003 	.word	0xfff0c003
 8002af0:	ffffbffc 	.word	0xffffbffc
 8002af4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 020f 	bic.w	r2, r2, #15
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f023 0303 	bic.w	r3, r3, #3
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
 8002b18:	e007      	b.n	8002b2a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0210 	orr.w	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3724      	adds	r7, #36	; 0x24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a87      	ldr	r2, [pc, #540]	; (8002d74 <HAL_ADC_IRQHandler+0x240>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x30>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a86      	ldr	r2, [pc, #536]	; (8002d78 <HAL_ADC_IRQHandler+0x244>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_IRQHandler+0x34>
 8002b64:	4b85      	ldr	r3, [pc, #532]	; (8002d7c <HAL_ADC_IRQHandler+0x248>)
 8002b66:	e000      	b.n	8002b6a <HAL_ADC_IRQHandler+0x36>
 8002b68:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <HAL_ADC_IRQHandler+0x24c>)
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fd9e 	bl	80026ac <LL_ADC_GetMultimode>
 8002b70:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d017      	beq.n	8002bac <HAL_ADC_IRQHandler+0x78>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fec8 	bl	8003934 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x8c>
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8083 	beq.w	8002cd2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07d      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fcb8 	bl	8002568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d062      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <HAL_ADC_IRQHandler+0x244>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_IRQHandler+0xda>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_IRQHandler+0xdc>
 8002c0e:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_ADC_IRQHandler+0x240>)
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d008      	beq.n	8002c2a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d002      	beq.n	8002c2a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b09      	cmp	r3, #9
 8002c28:	d104      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	623b      	str	r3, [r7, #32]
 8002c32:	e00c      	b.n	8002c4e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a4f      	ldr	r2, [pc, #316]	; (8002d78 <HAL_ADC_IRQHandler+0x244>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d002      	beq.n	8002c44 <HAL_ADC_IRQHandler+0x110>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_IRQHandler+0x112>
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_ADC_IRQHandler+0x240>)
 8002c46:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d135      	bne.n	8002cc4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d12e      	bne.n	8002cc4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fd9b 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11a      	bne.n	8002cac <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 020c 	bic.w	r2, r2, #12
 8002c84:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d112      	bne.n	8002cc4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
 8002caa:	e00b      	b.n	8002cc4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0210 	orr.w	r2, r3, #16
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f96f 	bl	8002fa8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	220c      	movs	r2, #12
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x1b2>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a0 	beq.w	8002e32 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 809a 	beq.w	8002e32 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fc63 	bl	80025e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d20:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fc1e 	bl	8002568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d2c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_ADC_IRQHandler+0x244>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d002      	beq.n	8002d3e <HAL_ADC_IRQHandler+0x20a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	e000      	b.n	8002d40 <HAL_ADC_IRQHandler+0x20c>
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_ADC_IRQHandler+0x240>)
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d008      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d002      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b07      	cmp	r3, #7
 8002d58:	d104      	bne.n	8002d64 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e014      	b.n	8002d8e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_ADC_IRQHandler+0x244>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00a      	beq.n	8002d84 <HAL_ADC_IRQHandler+0x250>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e008      	b.n	8002d86 <HAL_ADC_IRQHandler+0x252>
 8002d74:	40022000 	.word	0x40022000
 8002d78:	40022100 	.word	0x40022100
 8002d7c:	40022300 	.word	0x40022300
 8002d80:	58026300 	.word	0x58026300
 8002d84:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <HAL_ADC_IRQHandler+0x464>)
 8002d86:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d047      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_ADC_IRQHandler+0x27a>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03f      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d13a      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d133      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d12e      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fcfe 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11a      	bne.n	8002e0c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002de4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d112      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
 8002e0a:	e00b      	b.n	8002e24 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fd5d 	bl	80038e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2260      	movs	r2, #96	; 0x60
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d011      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x32c>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8b2 	bl	8002fbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x35c>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fd43 	bl	800390c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x38c>
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fd35 	bl	8003920 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d043      	beq.n	8002f52 <HAL_ADC_IRQHandler+0x41e>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d03e      	beq.n	8002f52 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002edc:	2301      	movs	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee0:	e021      	b.n	8002f26 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <HAL_ADC_IRQHandler+0x464>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_IRQHandler+0x3c8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <HAL_ADC_IRQHandler+0x468>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_IRQHandler+0x3cc>
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_ADC_IRQHandler+0x46c>)
 8002efe:	e000      	b.n	8002f02 <HAL_ADC_IRQHandler+0x3ce>
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_ADC_IRQHandler+0x470>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fbe0 	bl	80026c8 <LL_ADC_GetMultiDMATransfer>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e008      	b.n	8002f26 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002f22:	2301      	movs	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10e      	bne.n	8002f4a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f043 0202 	orr.w	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f843 	bl	8002fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2210      	movs	r2, #16
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d018      	beq.n	8002f8e <HAL_ADC_IRQHandler+0x45a>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d013      	beq.n	8002f8e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f043 0208 	orr.w	r2, r3, #8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f86:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fcb5 	bl	80038f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3728      	adds	r7, #40	; 0x28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	40022100 	.word	0x40022100
 8002fa0:	40022300 	.word	0x40022300
 8002fa4:	58026300 	.word	0x58026300

08002fa8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b0a1      	sub	sp, #132	; 0x84
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a9d      	ldr	r2, [pc, #628]	; (8003274 <HAL_ADC_ConfigChannel+0x290>)
 8002ffe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x2a>
 800300a:	2302      	movs	r3, #2
 800300c:	e321      	b.n	8003652 <HAL_ADC_ConfigChannel+0x66e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fbc3 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 8306 	bne.w	8003634 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003030:	2b00      	cmp	r3, #0
 8003032:	d108      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x62>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2201      	movs	r2, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	e016      	b.n	8003074 <HAL_ADC_ConfigChannel+0x90>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003056:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e003      	b.n	800306a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2201      	movs	r2, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	69d1      	ldr	r1, [r2, #28]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	430b      	orrs	r3, r1
 8003080:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	f7ff fa7d 	bl	800258e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fb84 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 800309e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fb91 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 80030aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 80b3 	bne.w	800321a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 80af 	bne.w	800321a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f7ff fa9f 	bl	800260c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030ce:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_ADC_ConfigChannel+0x294>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030da:	d10b      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x110>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	e01d      	b.n	8003130 <HAL_ADC_ConfigChannel+0x14c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <HAL_ADC_ConfigChannel+0x136>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	e00a      	b.n	8003130 <HAL_ADC_ConfigChannel+0x14c>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d027      	beq.n	800318a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6919      	ldr	r1, [r3, #16]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003148:	f7ff f9ba 	bl	80024c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6919      	ldr	r1, [r3, #16]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	7e5b      	ldrb	r3, [r3, #25]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d102      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x17e>
 800315c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003160:	e000      	b.n	8003164 <HAL_ADC_ConfigChannel+0x180>
 8003162:	2300      	movs	r3, #0
 8003164:	461a      	mov	r2, r3
 8003166:	f7ff f9e4 	bl	8002532 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	7e1b      	ldrb	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x19c>
 800317a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800317e:	e000      	b.n	8003182 <HAL_ADC_ConfigChannel+0x19e>
 8003180:	2300      	movs	r3, #0
 8003182:	461a      	mov	r2, r3
 8003184:	f7ff f9bc 	bl	8002500 <LL_ADC_SetDataRightShift>
 8003188:	e047      	b.n	800321a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	069b      	lsls	r3, r3, #26
 800319a:	429a      	cmp	r2, r3
 800319c:	d107      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	069b      	lsls	r3, r3, #26
 80031be:	429a      	cmp	r2, r3
 80031c0:	d107      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	069b      	lsls	r3, r3, #26
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d107      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	069b      	lsls	r3, r3, #26
 8003206:	429a      	cmp	r2, r3
 8003208:	d107      	bne.n	800321a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003218:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff faae 	bl	8002780 <LL_ADC_IsEnabled>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 820d 	bne.w	8003646 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	461a      	mov	r2, r3
 800323a:	f7ff fa13 	bl	8002664 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <HAL_ADC_ConfigChannel+0x290>)
 8003244:	4293      	cmp	r3, r2
 8003246:	f040 8133 	bne.w	80034b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003256:	2b00      	cmp	r3, #0
 8003258:	d110      	bne.n	800327c <HAL_ADC_ConfigChannel+0x298>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	3301      	adds	r3, #1
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2b09      	cmp	r3, #9
 8003268:	bf94      	ite	ls
 800326a:	2301      	movls	r3, #1
 800326c:	2300      	movhi	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e01e      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x2cc>
 8003272:	bf00      	nop
 8003274:	47ff0000 	.word	0x47ff0000
 8003278:	5c001000 	.word	0x5c001000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800328e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3301      	adds	r3, #1
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2b09      	cmp	r3, #9
 80032a8:	bf94      	ite	ls
 80032aa:	2301      	movls	r3, #1
 80032ac:	2300      	movhi	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d079      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x2ec>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	3301      	adds	r3, #1
 80032c8:	069b      	lsls	r3, r3, #26
 80032ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ce:	e015      	b.n	80032fc <HAL_ADC_ConfigChannel+0x318>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	069b      	lsls	r3, r3, #26
 80032f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_ADC_ConfigChannel+0x338>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	3301      	adds	r3, #1
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	e017      	b.n	800334c <HAL_ADC_ConfigChannel+0x368>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800332e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003334:	2320      	movs	r3, #32
 8003336:	e003      	b.n	8003340 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	3301      	adds	r3, #1
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	ea42 0103 	orr.w	r1, r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x38e>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	3301      	adds	r3, #1
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	051b      	lsls	r3, r3, #20
 8003370:	e018      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x3c0>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e003      	b.n	8003396 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a4:	430b      	orrs	r3, r1
 80033a6:	e07e      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x3e0>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	0e9b      	lsrs	r3, r3, #26
 80033ba:	3301      	adds	r3, #1
 80033bc:	069b      	lsls	r3, r3, #26
 80033be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c2:	e015      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x40c>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e003      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	069b      	lsls	r3, r3, #26
 80033ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x42c>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	3301      	adds	r3, #1
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	e017      	b.n	8003440 <HAL_ADC_ConfigChannel+0x45c>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	61bb      	str	r3, [r7, #24]
  return result;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003428:	2320      	movs	r3, #32
 800342a:	e003      	b.n	8003434 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	ea42 0103 	orr.w	r1, r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_ADC_ConfigChannel+0x488>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	3301      	adds	r3, #1
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	3b1e      	subs	r3, #30
 8003464:	051b      	lsls	r3, r3, #20
 8003466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800346a:	e01b      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x4c0>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	60fb      	str	r3, [r7, #12]
  return result;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003484:	2320      	movs	r3, #32
 8003486:	e003      	b.n	8003490 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	f003 021f 	and.w	r2, r3, #31
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	3b1e      	subs	r3, #30
 800349e:	051b      	lsls	r3, r3, #20
 80034a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a4:	430b      	orrs	r3, r1
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7ff f8ae 	bl	800260c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f280 80c6 	bge.w	8003646 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a67      	ldr	r2, [pc, #412]	; (800365c <HAL_ADC_ConfigChannel+0x678>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x4ea>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a65      	ldr	r2, [pc, #404]	; (8003660 <HAL_ADC_ConfigChannel+0x67c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x4ee>
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_ADC_ConfigChannel+0x680>)
 80034d0:	e000      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x4f0>
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_ADC_ConfigChannel+0x684>)
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe ffe5 	bl	80024a4 <LL_ADC_GetCommonPathInternalCh>
 80034da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a5e      	ldr	r2, [pc, #376]	; (800365c <HAL_ADC_ConfigChannel+0x678>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x50c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5d      	ldr	r2, [pc, #372]	; (8003660 <HAL_ADC_ConfigChannel+0x67c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10e      	bne.n	800350e <HAL_ADC_ConfigChannel+0x52a>
 80034f0:	485a      	ldr	r0, [pc, #360]	; (800365c <HAL_ADC_ConfigChannel+0x678>)
 80034f2:	f7ff f945 	bl	8002780 <LL_ADC_IsEnabled>
 80034f6:	4604      	mov	r4, r0
 80034f8:	4859      	ldr	r0, [pc, #356]	; (8003660 <HAL_ADC_ConfigChannel+0x67c>)
 80034fa:	f7ff f941 	bl	8002780 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	4323      	orrs	r3, r4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e008      	b.n	8003520 <HAL_ADC_ConfigChannel+0x53c>
 800350e:	4857      	ldr	r0, [pc, #348]	; (800366c <HAL_ADC_ConfigChannel+0x688>)
 8003510:	f7ff f936 	bl	8002780 <LL_ADC_IsEnabled>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d07d      	beq.n	8003620 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a51      	ldr	r2, [pc, #324]	; (8003670 <HAL_ADC_ConfigChannel+0x68c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d130      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x5ac>
 800352e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d12b      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4b      	ldr	r2, [pc, #300]	; (800366c <HAL_ADC_ConfigChannel+0x688>)
 800353e:	4293      	cmp	r3, r2
 8003540:	f040 8081 	bne.w	8003646 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a44      	ldr	r2, [pc, #272]	; (800365c <HAL_ADC_ConfigChannel+0x678>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x574>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a43      	ldr	r2, [pc, #268]	; (8003660 <HAL_ADC_ConfigChannel+0x67c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x578>
 8003558:	4a42      	ldr	r2, [pc, #264]	; (8003664 <HAL_ADC_ConfigChannel+0x680>)
 800355a:	e000      	b.n	800355e <HAL_ADC_ConfigChannel+0x57a>
 800355c:	4a42      	ldr	r2, [pc, #264]	; (8003668 <HAL_ADC_ConfigChannel+0x684>)
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7fe ff89 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800356c:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_ADC_ConfigChannel+0x690>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	4a41      	ldr	r2, [pc, #260]	; (8003678 <HAL_ADC_ConfigChannel+0x694>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003580:	e002      	b.n	8003588 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3b01      	subs	r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f9      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800358e:	e05a      	b.n	8003646 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_ADC_ConfigChannel+0x698>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d11e      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x5f4>
 800359a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d119      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a30      	ldr	r2, [pc, #192]	; (800366c <HAL_ADC_ConfigChannel+0x688>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d14b      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2a      	ldr	r2, [pc, #168]	; (800365c <HAL_ADC_ConfigChannel+0x678>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x5de>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_ADC_ConfigChannel+0x67c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x5e2>
 80035c2:	4a28      	ldr	r2, [pc, #160]	; (8003664 <HAL_ADC_ConfigChannel+0x680>)
 80035c4:	e000      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x5e4>
 80035c6:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_ADC_ConfigChannel+0x684>)
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f7fe ff54 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d6:	e036      	b.n	8003646 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a28      	ldr	r2, [pc, #160]	; (8003680 <HAL_ADC_ConfigChannel+0x69c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d131      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x662>
 80035e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d12c      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1e      	ldr	r2, [pc, #120]	; (800366c <HAL_ADC_ConfigChannel+0x688>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d127      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_ADC_ConfigChannel+0x678>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_ADC_ConfigChannel+0x626>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a16      	ldr	r2, [pc, #88]	; (8003660 <HAL_ADC_ConfigChannel+0x67c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x62a>
 800360a:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_ADC_ConfigChannel+0x680>)
 800360c:	e000      	b.n	8003610 <HAL_ADC_ConfigChannel+0x62c>
 800360e:	4a16      	ldr	r2, [pc, #88]	; (8003668 <HAL_ADC_ConfigChannel+0x684>)
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f7fe ff30 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
 800361e:	e012      	b.n	8003646 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003632:	e008      	b.n	8003646 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800364e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003652:	4618      	mov	r0, r3
 8003654:	3784      	adds	r7, #132	; 0x84
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	40022000 	.word	0x40022000
 8003660:	40022100 	.word	0x40022100
 8003664:	40022300 	.word	0x40022300
 8003668:	58026300 	.word	0x58026300
 800366c:	58026000 	.word	0x58026000
 8003670:	cb840000 	.word	0xcb840000
 8003674:	24000008 	.word	0x24000008
 8003678:	053e2d63 	.word	0x053e2d63
 800367c:	c7520000 	.word	0xc7520000
 8003680:	cfb80000 	.word	0xcfb80000

08003684 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a79      	ldr	r2, [pc, #484]	; (8003878 <ADC_ConfigureBoostMode+0x1f4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <ADC_ConfigureBoostMode+0x1c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a78      	ldr	r2, [pc, #480]	; (800387c <ADC_ConfigureBoostMode+0x1f8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d109      	bne.n	80036b4 <ADC_ConfigureBoostMode+0x30>
 80036a0:	4b77      	ldr	r3, [pc, #476]	; (8003880 <ADC_ConfigureBoostMode+0x1fc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e008      	b.n	80036c6 <ADC_ConfigureBoostMode+0x42>
 80036b4:	4b73      	ldr	r3, [pc, #460]	; (8003884 <ADC_ConfigureBoostMode+0x200>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01c      	beq.n	8003704 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036ca:	f005 f8c1 	bl	8008850 <HAL_RCC_GetHCLKFreq>
 80036ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036d8:	d010      	beq.n	80036fc <ADC_ConfigureBoostMode+0x78>
 80036da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036de:	d871      	bhi.n	80037c4 <ADC_ConfigureBoostMode+0x140>
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d002      	beq.n	80036ec <ADC_ConfigureBoostMode+0x68>
 80036e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ea:	d16b      	bne.n	80037c4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	60fb      	str	r3, [r7, #12]
        break;
 80036fa:	e066      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	60fb      	str	r3, [r7, #12]
        break;
 8003702:	e062      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003708:	f006 f812 	bl	8009730 <HAL_RCCEx_GetPeriphCLKFreq>
 800370c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003716:	d051      	beq.n	80037bc <ADC_ConfigureBoostMode+0x138>
 8003718:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800371c:	d854      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 800371e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003722:	d047      	beq.n	80037b4 <ADC_ConfigureBoostMode+0x130>
 8003724:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003728:	d84e      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 800372a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800372e:	d03d      	beq.n	80037ac <ADC_ConfigureBoostMode+0x128>
 8003730:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003734:	d848      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 8003736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800373a:	d033      	beq.n	80037a4 <ADC_ConfigureBoostMode+0x120>
 800373c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003740:	d842      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 8003742:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003746:	d029      	beq.n	800379c <ADC_ConfigureBoostMode+0x118>
 8003748:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800374c:	d83c      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 800374e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003752:	d01a      	beq.n	800378a <ADC_ConfigureBoostMode+0x106>
 8003754:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003758:	d836      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 800375a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800375e:	d014      	beq.n	800378a <ADC_ConfigureBoostMode+0x106>
 8003760:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003764:	d830      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 8003766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376a:	d00e      	beq.n	800378a <ADC_ConfigureBoostMode+0x106>
 800376c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003770:	d82a      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 8003772:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003776:	d008      	beq.n	800378a <ADC_ConfigureBoostMode+0x106>
 8003778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800377c:	d824      	bhi.n	80037c8 <ADC_ConfigureBoostMode+0x144>
 800377e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003782:	d002      	beq.n	800378a <ADC_ConfigureBoostMode+0x106>
 8003784:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003788:	d11e      	bne.n	80037c8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	0c9b      	lsrs	r3, r3, #18
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	60fb      	str	r3, [r7, #12]
        break;
 800379a:	e016      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	60fb      	str	r3, [r7, #12]
        break;
 80037a2:	e012      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	60fb      	str	r3, [r7, #12]
        break;
 80037aa:	e00e      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	60fb      	str	r3, [r7, #12]
        break;
 80037b2:	e00a      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	09db      	lsrs	r3, r3, #7
 80037b8:	60fb      	str	r3, [r7, #12]
        break;
 80037ba:	e006      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	60fb      	str	r3, [r7, #12]
        break;
 80037c2:	e002      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
        break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80037c8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80037ca:	f7fe fe39 	bl	8002440 <HAL_GetREVID>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d815      	bhi.n	8003804 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <ADC_ConfigureBoostMode+0x204>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d908      	bls.n	80037f2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80037f0:	e03e      	b.n	8003870 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	609a      	str	r2, [r3, #8]
}
 8003802:	e035      	b.n	8003870 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <ADC_ConfigureBoostMode+0x208>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d808      	bhi.n	8003824 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003820:	609a      	str	r2, [r3, #8]
}
 8003822:	e025      	b.n	8003870 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <ADC_ConfigureBoostMode+0x20c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d80a      	bhi.n	8003842 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	e016      	b.n	8003870 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <ADC_ConfigureBoostMode+0x210>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d80a      	bhi.n	8003860 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385c:	609a      	str	r2, [r3, #8]
}
 800385e:	e007      	b.n	8003870 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800386e:	609a      	str	r2, [r3, #8]
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40022000 	.word	0x40022000
 800387c:	40022100 	.word	0x40022100
 8003880:	40022300 	.word	0x40022300
 8003884:	58026300 	.word	0x58026300
 8003888:	01312d00 	.word	0x01312d00
 800388c:	005f5e10 	.word	0x005f5e10
 8003890:	00bebc20 	.word	0x00bebc20
 8003894:	017d7840 	.word	0x017d7840

08003898 <LL_ADC_IsEnabled>:
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <LL_ADC_IsEnabled+0x18>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <LL_ADC_IsEnabled+0x1a>
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <LL_ADC_REG_IsConversionOngoing>:
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d101      	bne.n	80038d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b09f      	sub	sp, #124	; 0x7c
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003962:	2302      	movs	r3, #2
 8003964:	e0be      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003972:	2300      	movs	r3, #0
 8003974:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d102      	bne.n	8003986 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003980:	4b5b      	ldr	r3, [pc, #364]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	e001      	b.n	800398a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e09d      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff87 	bl	80038be <LL_ADC_REG_IsConversionOngoing>
 80039b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff81 	bl	80038be <LL_ADC_REG_IsConversionOngoing>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d17f      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d17c      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a47      	ldr	r2, [pc, #284]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a46      	ldr	r2, [pc, #280]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039de:	e000      	b.n	80039e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80039e0:	4b45      	ldr	r3, [pc, #276]	; (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d039      	beq.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3a      	ldr	r2, [pc, #232]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a38      	ldr	r2, [pc, #224]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10e      	bne.n	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a12:	4836      	ldr	r0, [pc, #216]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a14:	f7ff ff40 	bl	8003898 <LL_ADC_IsEnabled>
 8003a18:	4604      	mov	r4, r0
 8003a1a:	4835      	ldr	r0, [pc, #212]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a1c:	f7ff ff3c 	bl	8003898 <LL_ADC_IsEnabled>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4323      	orrs	r3, r4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e008      	b.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003a30:	4832      	ldr	r0, [pc, #200]	; (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a32:	f7ff ff31 	bl	8003898 <LL_ADC_IsEnabled>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d047      	beq.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	6811      	ldr	r1, [r2, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	6892      	ldr	r2, [r2, #8]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5e:	e03a      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10e      	bne.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003a80:	481a      	ldr	r0, [pc, #104]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a82:	f7ff ff09 	bl	8003898 <LL_ADC_IsEnabled>
 8003a86:	4604      	mov	r4, r0
 8003a88:	4819      	ldr	r0, [pc, #100]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a8a:	f7ff ff05 	bl	8003898 <LL_ADC_IsEnabled>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4323      	orrs	r3, r4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	e008      	b.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003a9e:	4817      	ldr	r0, [pc, #92]	; (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003aa0:	f7ff fefa 	bl	8003898 <LL_ADC_IsEnabled>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003abe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac0:	e009      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ad4:	e000      	b.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ad6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ae0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	377c      	adds	r7, #124	; 0x7c
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40022100 	.word	0x40022100
 8003af4:	40022300 	.word	0x40022300
 8003af8:	58026300 	.word	0x58026300
 8003afc:	58026000 	.word	0x58026000
 8003b00:	fffff0e0 	.word	0xfffff0e0

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <__NVIC_SetPriorityGrouping+0x40>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b32:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <__NVIC_SetPriorityGrouping+0x40>)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	60d3      	str	r3, [r2, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000ed00 	.word	0xe000ed00
 8003b48:	05fa0000 	.word	0x05fa0000

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4907      	ldr	r1, [pc, #28]	; (8003ba0 <__NVIC_EnableIRQ+0x38>)
 8003b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db0a      	blt.n	8003bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	490c      	ldr	r1, [pc, #48]	; (8003bf0 <__NVIC_SetPriority+0x4c>)
 8003bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc2:	0112      	lsls	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bcc:	e00a      	b.n	8003be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <__NVIC_SetPriority+0x50>)
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	761a      	strb	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000e100 	.word	0xe000e100
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf28      	it	cs
 8003c16:	2304      	movcs	r3, #4
 8003c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <NVIC_EncodePriority+0x30>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3b03      	subs	r3, #3
 8003c26:	e000      	b.n	8003c2a <NVIC_EncodePriority+0x32>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	4313      	orrs	r3, r2
         );
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c70:	d301      	bcc.n	8003c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <SysTick_Config+0x40>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7e:	210f      	movs	r1, #15
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f7ff ff8e 	bl	8003ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <SysTick_Config+0x40>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8e:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <SysTick_Config+0x40>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	e000e010 	.word	0xe000e010

08003ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff29 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc8:	f7ff ff40 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	6978      	ldr	r0, [r7, #20]
 8003cd4:	f7ff ff90 	bl	8003bf8 <NVIC_EncodePriority>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff5f 	bl	8003ba4 <__NVIC_SetPriority>
}
 8003ce6:	bf00      	nop
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff33 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffa4 	bl	8003c60 <SysTick_Config>
 8003d18:	4603      	mov	r3, r0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7fe fb58 	bl	80023e0 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e316      	b.n	800436a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a66      	ldr	r2, [pc, #408]	; (8003edc <HAL_DMA_Init+0x1b8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a65      	ldr	r2, [pc, #404]	; (8003ee0 <HAL_DMA_Init+0x1bc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a63      	ldr	r2, [pc, #396]	; (8003ee4 <HAL_DMA_Init+0x1c0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a62      	ldr	r2, [pc, #392]	; (8003ee8 <HAL_DMA_Init+0x1c4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d03b      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a60      	ldr	r2, [pc, #384]	; (8003eec <HAL_DMA_Init+0x1c8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d036      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a5f      	ldr	r2, [pc, #380]	; (8003ef0 <HAL_DMA_Init+0x1cc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d031      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5d      	ldr	r2, [pc, #372]	; (8003ef4 <HAL_DMA_Init+0x1d0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02c      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a5c      	ldr	r2, [pc, #368]	; (8003ef8 <HAL_DMA_Init+0x1d4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d027      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5a      	ldr	r2, [pc, #360]	; (8003efc <HAL_DMA_Init+0x1d8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a59      	ldr	r2, [pc, #356]	; (8003f00 <HAL_DMA_Init+0x1dc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01d      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a57      	ldr	r2, [pc, #348]	; (8003f04 <HAL_DMA_Init+0x1e0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a56      	ldr	r2, [pc, #344]	; (8003f08 <HAL_DMA_Init+0x1e4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a54      	ldr	r2, [pc, #336]	; (8003f0c <HAL_DMA_Init+0x1e8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a53      	ldr	r2, [pc, #332]	; (8003f10 <HAL_DMA_Init+0x1ec>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a51      	ldr	r2, [pc, #324]	; (8003f14 <HAL_DMA_Init+0x1f0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_Init+0xb8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a50      	ldr	r2, [pc, #320]	; (8003f18 <HAL_DMA_Init+0x1f4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_DMA_Init+0xbc>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_DMA_Init+0xbe>
 8003de0:	2300      	movs	r3, #0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 813b 	beq.w	800405e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a37      	ldr	r2, [pc, #220]	; (8003edc <HAL_DMA_Init+0x1b8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d04a      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a36      	ldr	r2, [pc, #216]	; (8003ee0 <HAL_DMA_Init+0x1bc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d045      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a34      	ldr	r2, [pc, #208]	; (8003ee4 <HAL_DMA_Init+0x1c0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d040      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a33      	ldr	r2, [pc, #204]	; (8003ee8 <HAL_DMA_Init+0x1c4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d03b      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a31      	ldr	r2, [pc, #196]	; (8003eec <HAL_DMA_Init+0x1c8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d036      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a30      	ldr	r2, [pc, #192]	; (8003ef0 <HAL_DMA_Init+0x1cc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d031      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2e      	ldr	r2, [pc, #184]	; (8003ef4 <HAL_DMA_Init+0x1d0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02c      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <HAL_DMA_Init+0x1d4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d027      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <HAL_DMA_Init+0x1d8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d022      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <HAL_DMA_Init+0x1dc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d01d      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <HAL_DMA_Init+0x1e0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <HAL_DMA_Init+0x1e4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <HAL_DMA_Init+0x1e8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <HAL_DMA_Init+0x1ec>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <HAL_DMA_Init+0x1f0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_DMA_Init+0x174>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a21      	ldr	r2, [pc, #132]	; (8003f18 <HAL_DMA_Init+0x1f4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <HAL_DMA_Init+0x186>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e007      	b.n	8003eba <HAL_DMA_Init+0x196>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003eba:	e02f      	b.n	8003f1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ebc:	f7fe fa90 	bl	80023e0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d928      	bls.n	8003f1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e246      	b.n	800436a <HAL_DMA_Init+0x646>
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1c8      	bne.n	8003ebc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4b83      	ldr	r3, [pc, #524]	; (8004144 <HAL_DMA_Init+0x420>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f80:	4b71      	ldr	r3, [pc, #452]	; (8004148 <HAL_DMA_Init+0x424>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b71      	ldr	r3, [pc, #452]	; (800414c <HAL_DMA_Init+0x428>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8c:	d328      	bcc.n	8003fe0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b28      	cmp	r3, #40	; 0x28
 8003f94:	d903      	bls.n	8003f9e <HAL_DMA_Init+0x27a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f9c:	d917      	bls.n	8003fce <HAL_DMA_Init+0x2aa>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa4:	d903      	bls.n	8003fae <HAL_DMA_Init+0x28a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b42      	cmp	r3, #66	; 0x42
 8003fac:	d90f      	bls.n	8003fce <HAL_DMA_Init+0x2aa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b46      	cmp	r3, #70	; 0x46
 8003fb4:	d903      	bls.n	8003fbe <HAL_DMA_Init+0x29a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b48      	cmp	r3, #72	; 0x48
 8003fbc:	d907      	bls.n	8003fce <HAL_DMA_Init+0x2aa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b4e      	cmp	r3, #78	; 0x4e
 8003fc4:	d905      	bls.n	8003fd2 <HAL_DMA_Init+0x2ae>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b52      	cmp	r3, #82	; 0x52
 8003fcc:	d801      	bhi.n	8003fd2 <HAL_DMA_Init+0x2ae>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_DMA_Init+0x2b0>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fde:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b04      	cmp	r3, #4
 8004008:	d117      	bne.n	800403a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f001 f9b9 	bl	8005394 <DMA_CheckFifoParam>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e197      	b.n	800436a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f001 f8f4 	bl	8005230 <DMA_CalcBaseAndBitshift>
 8004048:	4603      	mov	r3, r0
 800404a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	223f      	movs	r2, #63	; 0x3f
 8004056:	409a      	lsls	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	e0cd      	b.n	80041fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3b      	ldr	r2, [pc, #236]	; (8004150 <HAL_DMA_Init+0x42c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d022      	beq.n	80040ae <HAL_DMA_Init+0x38a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a39      	ldr	r2, [pc, #228]	; (8004154 <HAL_DMA_Init+0x430>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01d      	beq.n	80040ae <HAL_DMA_Init+0x38a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a38      	ldr	r2, [pc, #224]	; (8004158 <HAL_DMA_Init+0x434>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d018      	beq.n	80040ae <HAL_DMA_Init+0x38a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a36      	ldr	r2, [pc, #216]	; (800415c <HAL_DMA_Init+0x438>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_DMA_Init+0x38a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a35      	ldr	r2, [pc, #212]	; (8004160 <HAL_DMA_Init+0x43c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_DMA_Init+0x38a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a33      	ldr	r2, [pc, #204]	; (8004164 <HAL_DMA_Init+0x440>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_DMA_Init+0x38a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a32      	ldr	r2, [pc, #200]	; (8004168 <HAL_DMA_Init+0x444>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_DMA_Init+0x38a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a30      	ldr	r2, [pc, #192]	; (800416c <HAL_DMA_Init+0x448>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_DMA_Init+0x38e>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_DMA_Init+0x390>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8097 	beq.w	80041e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a24      	ldr	r2, [pc, #144]	; (8004150 <HAL_DMA_Init+0x42c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d021      	beq.n	8004108 <HAL_DMA_Init+0x3e4>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_DMA_Init+0x430>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01c      	beq.n	8004108 <HAL_DMA_Init+0x3e4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a21      	ldr	r2, [pc, #132]	; (8004158 <HAL_DMA_Init+0x434>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d017      	beq.n	8004108 <HAL_DMA_Init+0x3e4>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <HAL_DMA_Init+0x438>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d012      	beq.n	8004108 <HAL_DMA_Init+0x3e4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <HAL_DMA_Init+0x43c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00d      	beq.n	8004108 <HAL_DMA_Init+0x3e4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <HAL_DMA_Init+0x440>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d008      	beq.n	8004108 <HAL_DMA_Init+0x3e4>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <HAL_DMA_Init+0x444>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_Init+0x3e4>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a19      	ldr	r2, [pc, #100]	; (800416c <HAL_DMA_Init+0x448>)
 8004106:	4293      	cmp	r3, r2
 8004108:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_DMA_Init+0x44c>)
 8004126:	4013      	ands	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d020      	beq.n	8004174 <HAL_DMA_Init+0x450>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d102      	bne.n	8004140 <HAL_DMA_Init+0x41c>
 800413a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800413e:	e01a      	b.n	8004176 <HAL_DMA_Init+0x452>
 8004140:	2300      	movs	r3, #0
 8004142:	e018      	b.n	8004176 <HAL_DMA_Init+0x452>
 8004144:	fe10803f 	.word	0xfe10803f
 8004148:	5c001000 	.word	0x5c001000
 800414c:	ffff0000 	.word	0xffff0000
 8004150:	58025408 	.word	0x58025408
 8004154:	5802541c 	.word	0x5802541c
 8004158:	58025430 	.word	0x58025430
 800415c:	58025444 	.word	0x58025444
 8004160:	58025458 	.word	0x58025458
 8004164:	5802546c 	.word	0x5802546c
 8004168:	58025480 	.word	0x58025480
 800416c:	58025494 	.word	0x58025494
 8004170:	fffe000f 	.word	0xfffe000f
 8004174:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68d2      	ldr	r2, [r2, #12]
 800417a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800417c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800418c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800419c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b6e      	ldr	r3, [pc, #440]	; (8004374 <HAL_DMA_Init+0x650>)
 80041bc:	4413      	add	r3, r2
 80041be:	4a6e      	ldr	r2, [pc, #440]	; (8004378 <HAL_DMA_Init+0x654>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	009a      	lsls	r2, r3, #2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f001 f82f 	bl	8005230 <DMA_CalcBaseAndBitshift>
 80041d2:	4603      	mov	r3, r0
 80041d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2201      	movs	r2, #1
 80041e0:	409a      	lsls	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	e008      	b.n	80041fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2203      	movs	r2, #3
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0b7      	b.n	800436a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5f      	ldr	r2, [pc, #380]	; (800437c <HAL_DMA_Init+0x658>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d072      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a5d      	ldr	r2, [pc, #372]	; (8004380 <HAL_DMA_Init+0x65c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d06d      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <HAL_DMA_Init+0x660>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d068      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5a      	ldr	r2, [pc, #360]	; (8004388 <HAL_DMA_Init+0x664>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d063      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a59      	ldr	r2, [pc, #356]	; (800438c <HAL_DMA_Init+0x668>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d05e      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a57      	ldr	r2, [pc, #348]	; (8004390 <HAL_DMA_Init+0x66c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d059      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a56      	ldr	r2, [pc, #344]	; (8004394 <HAL_DMA_Init+0x670>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d054      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a54      	ldr	r2, [pc, #336]	; (8004398 <HAL_DMA_Init+0x674>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d04f      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a53      	ldr	r2, [pc, #332]	; (800439c <HAL_DMA_Init+0x678>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d04a      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a51      	ldr	r2, [pc, #324]	; (80043a0 <HAL_DMA_Init+0x67c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d045      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a50      	ldr	r2, [pc, #320]	; (80043a4 <HAL_DMA_Init+0x680>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d040      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a4e      	ldr	r2, [pc, #312]	; (80043a8 <HAL_DMA_Init+0x684>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d03b      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4d      	ldr	r2, [pc, #308]	; (80043ac <HAL_DMA_Init+0x688>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d036      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a4b      	ldr	r2, [pc, #300]	; (80043b0 <HAL_DMA_Init+0x68c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d031      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <HAL_DMA_Init+0x690>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d02c      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a48      	ldr	r2, [pc, #288]	; (80043b8 <HAL_DMA_Init+0x694>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d027      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a47      	ldr	r2, [pc, #284]	; (80043bc <HAL_DMA_Init+0x698>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d022      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a45      	ldr	r2, [pc, #276]	; (80043c0 <HAL_DMA_Init+0x69c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01d      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a44      	ldr	r2, [pc, #272]	; (80043c4 <HAL_DMA_Init+0x6a0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d018      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a42      	ldr	r2, [pc, #264]	; (80043c8 <HAL_DMA_Init+0x6a4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a41      	ldr	r2, [pc, #260]	; (80043cc <HAL_DMA_Init+0x6a8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3f      	ldr	r2, [pc, #252]	; (80043d0 <HAL_DMA_Init+0x6ac>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3e      	ldr	r2, [pc, #248]	; (80043d4 <HAL_DMA_Init+0x6b0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_DMA_Init+0x5c6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a3c      	ldr	r2, [pc, #240]	; (80043d8 <HAL_DMA_Init+0x6b4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_DMA_Init+0x5ca>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_DMA_Init+0x5cc>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d032      	beq.n	800435a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f001 f8c9 	bl	800548c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d102      	bne.n	8004308 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800431c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_DMA_Init+0x624>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b08      	cmp	r3, #8
 800432c:	d80c      	bhi.n	8004348 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f001 f946 	bl	80055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	e008      	b.n	800435a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	a7fdabf8 	.word	0xa7fdabf8
 8004378:	cccccccd 	.word	0xcccccccd
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
 80043bc:	58025408 	.word	0x58025408
 80043c0:	5802541c 	.word	0x5802541c
 80043c4:	58025430 	.word	0x58025430
 80043c8:	58025444 	.word	0x58025444
 80043cc:	58025458 	.word	0x58025458
 80043d0:	5802546c 	.word	0x5802546c
 80043d4:	58025480 	.word	0x58025480
 80043d8:	58025494 	.word	0x58025494

080043dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043e8:	4b67      	ldr	r3, [pc, #412]	; (8004588 <HAL_DMA_IRQHandler+0x1ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a67      	ldr	r2, [pc, #412]	; (800458c <HAL_DMA_IRQHandler+0x1b0>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	0a9b      	lsrs	r3, r3, #10
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a5f      	ldr	r2, [pc, #380]	; (8004590 <HAL_DMA_IRQHandler+0x1b4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d04a      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5d      	ldr	r2, [pc, #372]	; (8004594 <HAL_DMA_IRQHandler+0x1b8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d045      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a5c      	ldr	r2, [pc, #368]	; (8004598 <HAL_DMA_IRQHandler+0x1bc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d040      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5a      	ldr	r2, [pc, #360]	; (800459c <HAL_DMA_IRQHandler+0x1c0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d03b      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a59      	ldr	r2, [pc, #356]	; (80045a0 <HAL_DMA_IRQHandler+0x1c4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d036      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a57      	ldr	r2, [pc, #348]	; (80045a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d031      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a56      	ldr	r2, [pc, #344]	; (80045a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d02c      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a54      	ldr	r2, [pc, #336]	; (80045ac <HAL_DMA_IRQHandler+0x1d0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d027      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a53      	ldr	r2, [pc, #332]	; (80045b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d022      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a51      	ldr	r2, [pc, #324]	; (80045b4 <HAL_DMA_IRQHandler+0x1d8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01d      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a50      	ldr	r2, [pc, #320]	; (80045b8 <HAL_DMA_IRQHandler+0x1dc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d018      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4e      	ldr	r2, [pc, #312]	; (80045bc <HAL_DMA_IRQHandler+0x1e0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a4d      	ldr	r2, [pc, #308]	; (80045c0 <HAL_DMA_IRQHandler+0x1e4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a4b      	ldr	r2, [pc, #300]	; (80045c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_DMA_IRQHandler+0x1ec>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_DMA_IRQHandler+0xd2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a48      	ldr	r2, [pc, #288]	; (80045cc <HAL_DMA_IRQHandler+0x1f0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_DMA_IRQHandler+0xd6>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_DMA_IRQHandler+0xd8>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 842b 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2208      	movs	r2, #8
 80044c4:	409a      	lsls	r2, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80a2 	beq.w	8004614 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2e      	ldr	r2, [pc, #184]	; (8004590 <HAL_DMA_IRQHandler+0x1b4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d04a      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2d      	ldr	r2, [pc, #180]	; (8004594 <HAL_DMA_IRQHandler+0x1b8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d045      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <HAL_DMA_IRQHandler+0x1bc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d040      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2a      	ldr	r2, [pc, #168]	; (800459c <HAL_DMA_IRQHandler+0x1c0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d03b      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <HAL_DMA_IRQHandler+0x1c4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d036      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d031      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d02c      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a24      	ldr	r2, [pc, #144]	; (80045ac <HAL_DMA_IRQHandler+0x1d0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d027      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d022      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <HAL_DMA_IRQHandler+0x1d8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d01d      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1f      	ldr	r2, [pc, #124]	; (80045b8 <HAL_DMA_IRQHandler+0x1dc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_DMA_IRQHandler+0x1e0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1c      	ldr	r2, [pc, #112]	; (80045c0 <HAL_DMA_IRQHandler+0x1e4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <HAL_DMA_IRQHandler+0x1ec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_DMA_IRQHandler+0x194>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_DMA_IRQHandler+0x1f0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d12f      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x1f4>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e02e      	b.n	80045e4 <HAL_DMA_IRQHandler+0x208>
 8004586:	bf00      	nop
 8004588:	24000008 	.word	0x24000008
 800458c:	1b4e81b5 	.word	0x1b4e81b5
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf14      	ite	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	2300      	moveq	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2208      	movs	r2, #8
 8004602:	409a      	lsls	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f043 0201 	orr.w	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d06e      	beq.n	8004708 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a69      	ldr	r2, [pc, #420]	; (80047d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d04a      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a67      	ldr	r2, [pc, #412]	; (80047d8 <HAL_DMA_IRQHandler+0x3fc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d045      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a66      	ldr	r2, [pc, #408]	; (80047dc <HAL_DMA_IRQHandler+0x400>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d040      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a64      	ldr	r2, [pc, #400]	; (80047e0 <HAL_DMA_IRQHandler+0x404>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d03b      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a63      	ldr	r2, [pc, #396]	; (80047e4 <HAL_DMA_IRQHandler+0x408>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d036      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a61      	ldr	r2, [pc, #388]	; (80047e8 <HAL_DMA_IRQHandler+0x40c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d031      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a60      	ldr	r2, [pc, #384]	; (80047ec <HAL_DMA_IRQHandler+0x410>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d02c      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a5e      	ldr	r2, [pc, #376]	; (80047f0 <HAL_DMA_IRQHandler+0x414>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d027      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5d      	ldr	r2, [pc, #372]	; (80047f4 <HAL_DMA_IRQHandler+0x418>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a5b      	ldr	r2, [pc, #364]	; (80047f8 <HAL_DMA_IRQHandler+0x41c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01d      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a5a      	ldr	r2, [pc, #360]	; (80047fc <HAL_DMA_IRQHandler+0x420>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a58      	ldr	r2, [pc, #352]	; (8004800 <HAL_DMA_IRQHandler+0x424>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a57      	ldr	r2, [pc, #348]	; (8004804 <HAL_DMA_IRQHandler+0x428>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a55      	ldr	r2, [pc, #340]	; (8004808 <HAL_DMA_IRQHandler+0x42c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a54      	ldr	r2, [pc, #336]	; (800480c <HAL_DMA_IRQHandler+0x430>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_DMA_IRQHandler+0x2ee>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a52      	ldr	r2, [pc, #328]	; (8004810 <HAL_DMA_IRQHandler+0x434>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10a      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x304>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e003      	b.n	80046e8 <HAL_DMA_IRQHandler+0x30c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2201      	movs	r2, #1
 80046f6:	409a      	lsls	r2, r3
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	f043 0202 	orr.w	r2, r3, #2
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2204      	movs	r2, #4
 8004712:	409a      	lsls	r2, r3
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 808f 	beq.w	800483c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d04a      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <HAL_DMA_IRQHandler+0x3fc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d045      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <HAL_DMA_IRQHandler+0x400>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d040      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a27      	ldr	r2, [pc, #156]	; (80047e0 <HAL_DMA_IRQHandler+0x404>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d03b      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a26      	ldr	r2, [pc, #152]	; (80047e4 <HAL_DMA_IRQHandler+0x408>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d036      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a24      	ldr	r2, [pc, #144]	; (80047e8 <HAL_DMA_IRQHandler+0x40c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d031      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a23      	ldr	r2, [pc, #140]	; (80047ec <HAL_DMA_IRQHandler+0x410>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d02c      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <HAL_DMA_IRQHandler+0x414>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d027      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <HAL_DMA_IRQHandler+0x418>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <HAL_DMA_IRQHandler+0x41c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01d      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_DMA_IRQHandler+0x420>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <HAL_DMA_IRQHandler+0x424>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_DMA_IRQHandler+0x428>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_DMA_IRQHandler+0x42c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_DMA_IRQHandler+0x430>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_DMA_IRQHandler+0x3e2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_DMA_IRQHandler+0x434>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d12a      	bne.n	8004814 <HAL_DMA_IRQHandler+0x438>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e023      	b.n	800481c <HAL_DMA_IRQHandler+0x440>
 80047d4:	40020010 	.word	0x40020010
 80047d8:	40020028 	.word	0x40020028
 80047dc:	40020040 	.word	0x40020040
 80047e0:	40020058 	.word	0x40020058
 80047e4:	40020070 	.word	0x40020070
 80047e8:	40020088 	.word	0x40020088
 80047ec:	400200a0 	.word	0x400200a0
 80047f0:	400200b8 	.word	0x400200b8
 80047f4:	40020410 	.word	0x40020410
 80047f8:	40020428 	.word	0x40020428
 80047fc:	40020440 	.word	0x40020440
 8004800:	40020458 	.word	0x40020458
 8004804:	40020470 	.word	0x40020470
 8004808:	40020488 	.word	0x40020488
 800480c:	400204a0 	.word	0x400204a0
 8004810:	400204b8 	.word	0x400204b8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2204      	movs	r2, #4
 800482a:	409a      	lsls	r2, r3
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f043 0204 	orr.w	r2, r3, #4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2210      	movs	r2, #16
 8004846:	409a      	lsls	r2, r3
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a6 	beq.w	800499e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a85      	ldr	r2, [pc, #532]	; (8004a6c <HAL_DMA_IRQHandler+0x690>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d04a      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a83      	ldr	r2, [pc, #524]	; (8004a70 <HAL_DMA_IRQHandler+0x694>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d045      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a82      	ldr	r2, [pc, #520]	; (8004a74 <HAL_DMA_IRQHandler+0x698>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d040      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a80      	ldr	r2, [pc, #512]	; (8004a78 <HAL_DMA_IRQHandler+0x69c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d03b      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7f      	ldr	r2, [pc, #508]	; (8004a7c <HAL_DMA_IRQHandler+0x6a0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d036      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_DMA_IRQHandler+0x6a4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a7c      	ldr	r2, [pc, #496]	; (8004a84 <HAL_DMA_IRQHandler+0x6a8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d02c      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a7a      	ldr	r2, [pc, #488]	; (8004a88 <HAL_DMA_IRQHandler+0x6ac>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d027      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a79      	ldr	r2, [pc, #484]	; (8004a8c <HAL_DMA_IRQHandler+0x6b0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a77      	ldr	r2, [pc, #476]	; (8004a90 <HAL_DMA_IRQHandler+0x6b4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01d      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a76      	ldr	r2, [pc, #472]	; (8004a94 <HAL_DMA_IRQHandler+0x6b8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a74      	ldr	r2, [pc, #464]	; (8004a98 <HAL_DMA_IRQHandler+0x6bc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a73      	ldr	r2, [pc, #460]	; (8004a9c <HAL_DMA_IRQHandler+0x6c0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a71      	ldr	r2, [pc, #452]	; (8004aa0 <HAL_DMA_IRQHandler+0x6c4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a70      	ldr	r2, [pc, #448]	; (8004aa4 <HAL_DMA_IRQHandler+0x6c8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x516>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a6e      	ldr	r2, [pc, #440]	; (8004aa8 <HAL_DMA_IRQHandler+0x6cc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10a      	bne.n	8004908 <HAL_DMA_IRQHandler+0x52c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e009      	b.n	800491c <HAL_DMA_IRQHandler+0x540>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d03e      	beq.n	800499e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2210      	movs	r2, #16
 800492a:	409a      	lsls	r2, r3
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d018      	beq.n	8004970 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d024      	beq.n	800499e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
 800495c:	e01f      	b.n	800499e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
 800496e:	e016      	b.n	800499e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d107      	bne.n	800498e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0208 	bic.w	r2, r2, #8
 800498c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2220      	movs	r2, #32
 80049a8:	409a      	lsls	r2, r3
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8110 	beq.w	8004bd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <HAL_DMA_IRQHandler+0x690>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d04a      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <HAL_DMA_IRQHandler+0x694>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d045      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <HAL_DMA_IRQHandler+0x698>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d040      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <HAL_DMA_IRQHandler+0x69c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d03b      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <HAL_DMA_IRQHandler+0x6a0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d036      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a25      	ldr	r2, [pc, #148]	; (8004a80 <HAL_DMA_IRQHandler+0x6a4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d031      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <HAL_DMA_IRQHandler+0x6a8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02c      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a22      	ldr	r2, [pc, #136]	; (8004a88 <HAL_DMA_IRQHandler+0x6ac>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d027      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a20      	ldr	r2, [pc, #128]	; (8004a8c <HAL_DMA_IRQHandler+0x6b0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d022      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <HAL_DMA_IRQHandler+0x6b4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d01d      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	; (8004a94 <HAL_DMA_IRQHandler+0x6b8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d018      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <HAL_DMA_IRQHandler+0x6bc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1a      	ldr	r2, [pc, #104]	; (8004a9c <HAL_DMA_IRQHandler+0x6c0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <HAL_DMA_IRQHandler+0x6c4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d009      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <HAL_DMA_IRQHandler+0x6c8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x678>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <HAL_DMA_IRQHandler+0x6cc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d12b      	bne.n	8004aac <HAL_DMA_IRQHandler+0x6d0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e02a      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x6e4>
 8004a6a:	bf00      	nop
 8004a6c:	40020010 	.word	0x40020010
 8004a70:	40020028 	.word	0x40020028
 8004a74:	40020040 	.word	0x40020040
 8004a78:	40020058 	.word	0x40020058
 8004a7c:	40020070 	.word	0x40020070
 8004a80:	40020088 	.word	0x40020088
 8004a84:	400200a0 	.word	0x400200a0
 8004a88:	400200b8 	.word	0x400200b8
 8004a8c:	40020410 	.word	0x40020410
 8004a90:	40020428 	.word	0x40020428
 8004a94:	40020440 	.word	0x40020440
 8004a98:	40020458 	.word	0x40020458
 8004a9c:	40020470 	.word	0x40020470
 8004aa0:	40020488 	.word	0x40020488
 8004aa4:	400204a0 	.word	0x400204a0
 8004aa8:	400204b8 	.word	0x400204b8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8087 	beq.w	8004bd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	2220      	movs	r2, #32
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d139      	bne.n	8004b56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0216 	bic.w	r2, r2, #22
 8004af0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <HAL_DMA_IRQHandler+0x736>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0208 	bic.w	r2, r2, #8
 8004b20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	223f      	movs	r2, #63	; 0x3f
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 834a 	beq.w	80051e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
          }
          return;
 8004b54:	e344      	b.n	80051e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d018      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d108      	bne.n	8004b84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d02c      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
 8004b82:	e027      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d023      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
 8004b94:	e01e      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10f      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0210 	bic.w	r2, r2, #16
 8004bb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8306 	beq.w	80051ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8088 	beq.w	8004cfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2204      	movs	r2, #4
 8004bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_DMA_IRQHandler+0xa08>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d04a      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a79      	ldr	r2, [pc, #484]	; (8004de8 <HAL_DMA_IRQHandler+0xa0c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d045      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a77      	ldr	r2, [pc, #476]	; (8004dec <HAL_DMA_IRQHandler+0xa10>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d040      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a76      	ldr	r2, [pc, #472]	; (8004df0 <HAL_DMA_IRQHandler+0xa14>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d03b      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a74      	ldr	r2, [pc, #464]	; (8004df4 <HAL_DMA_IRQHandler+0xa18>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d036      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a73      	ldr	r2, [pc, #460]	; (8004df8 <HAL_DMA_IRQHandler+0xa1c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d031      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a71      	ldr	r2, [pc, #452]	; (8004dfc <HAL_DMA_IRQHandler+0xa20>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d02c      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a70      	ldr	r2, [pc, #448]	; (8004e00 <HAL_DMA_IRQHandler+0xa24>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d027      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6e      	ldr	r2, [pc, #440]	; (8004e04 <HAL_DMA_IRQHandler+0xa28>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d022      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6d      	ldr	r2, [pc, #436]	; (8004e08 <HAL_DMA_IRQHandler+0xa2c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d01d      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a6b      	ldr	r2, [pc, #428]	; (8004e0c <HAL_DMA_IRQHandler+0xa30>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a6a      	ldr	r2, [pc, #424]	; (8004e10 <HAL_DMA_IRQHandler+0xa34>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a68      	ldr	r2, [pc, #416]	; (8004e14 <HAL_DMA_IRQHandler+0xa38>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a67      	ldr	r2, [pc, #412]	; (8004e18 <HAL_DMA_IRQHandler+0xa3c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a65      	ldr	r2, [pc, #404]	; (8004e1c <HAL_DMA_IRQHandler+0xa40>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x8b8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a64      	ldr	r2, [pc, #400]	; (8004e20 <HAL_DMA_IRQHandler+0xa44>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <HAL_DMA_IRQHandler+0x8ca>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e007      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x8da>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d307      	bcc.n	8004cd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f2      	bne.n	8004cb6 <HAL_DMA_IRQHandler+0x8da>
 8004cd0:	e000      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004cd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004cea:	e003      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8272 	beq.w	80051ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
 8004d0e:	e26c      	b.n	80051ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a43      	ldr	r2, [pc, #268]	; (8004e24 <HAL_DMA_IRQHandler+0xa48>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d022      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x984>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a42      	ldr	r2, [pc, #264]	; (8004e28 <HAL_DMA_IRQHandler+0xa4c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01d      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x984>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <HAL_DMA_IRQHandler+0xa50>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x984>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3f      	ldr	r2, [pc, #252]	; (8004e30 <HAL_DMA_IRQHandler+0xa54>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x984>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3d      	ldr	r2, [pc, #244]	; (8004e34 <HAL_DMA_IRQHandler+0xa58>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x984>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3c      	ldr	r2, [pc, #240]	; (8004e38 <HAL_DMA_IRQHandler+0xa5c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x984>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <HAL_DMA_IRQHandler+0xa60>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x984>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a39      	ldr	r2, [pc, #228]	; (8004e40 <HAL_DMA_IRQHandler+0xa64>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x988>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <HAL_DMA_IRQHandler+0x98a>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 823f 	beq.w	80051ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80cd 	beq.w	8004f24 <HAL_DMA_IRQHandler+0xb48>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80c7 	beq.w	8004f24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	2204      	movs	r2, #4
 8004da0:	409a      	lsls	r2, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d049      	beq.n	8004e44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8210 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dcc:	e20a      	b.n	80051e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8206 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de0:	e200      	b.n	80051e4 <HAL_DMA_IRQHandler+0xe08>
 8004de2:	bf00      	nop
 8004de4:	40020010 	.word	0x40020010
 8004de8:	40020028 	.word	0x40020028
 8004dec:	40020040 	.word	0x40020040
 8004df0:	40020058 	.word	0x40020058
 8004df4:	40020070 	.word	0x40020070
 8004df8:	40020088 	.word	0x40020088
 8004dfc:	400200a0 	.word	0x400200a0
 8004e00:	400200b8 	.word	0x400200b8
 8004e04:	40020410 	.word	0x40020410
 8004e08:	40020428 	.word	0x40020428
 8004e0c:	40020440 	.word	0x40020440
 8004e10:	40020458 	.word	0x40020458
 8004e14:	40020470 	.word	0x40020470
 8004e18:	40020488 	.word	0x40020488
 8004e1c:	400204a0 	.word	0x400204a0
 8004e20:	400204b8 	.word	0x400204b8
 8004e24:	58025408 	.word	0x58025408
 8004e28:	5802541c 	.word	0x5802541c
 8004e2c:	58025430 	.word	0x58025430
 8004e30:	58025444 	.word	0x58025444
 8004e34:	58025458 	.word	0x58025458
 8004e38:	5802546c 	.word	0x5802546c
 8004e3c:	58025480 	.word	0x58025480
 8004e40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d160      	bne.n	8004f10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a8c      	ldr	r2, [pc, #560]	; (8005084 <HAL_DMA_IRQHandler+0xca8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d04a      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a8a      	ldr	r2, [pc, #552]	; (8005088 <HAL_DMA_IRQHandler+0xcac>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d045      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a89      	ldr	r2, [pc, #548]	; (800508c <HAL_DMA_IRQHandler+0xcb0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d040      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a87      	ldr	r2, [pc, #540]	; (8005090 <HAL_DMA_IRQHandler+0xcb4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d03b      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a86      	ldr	r2, [pc, #536]	; (8005094 <HAL_DMA_IRQHandler+0xcb8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d036      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a84      	ldr	r2, [pc, #528]	; (8005098 <HAL_DMA_IRQHandler+0xcbc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d031      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a83      	ldr	r2, [pc, #524]	; (800509c <HAL_DMA_IRQHandler+0xcc0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d02c      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a81      	ldr	r2, [pc, #516]	; (80050a0 <HAL_DMA_IRQHandler+0xcc4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d027      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a80      	ldr	r2, [pc, #512]	; (80050a4 <HAL_DMA_IRQHandler+0xcc8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d022      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a7e      	ldr	r2, [pc, #504]	; (80050a8 <HAL_DMA_IRQHandler+0xccc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01d      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7d      	ldr	r2, [pc, #500]	; (80050ac <HAL_DMA_IRQHandler+0xcd0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7b      	ldr	r2, [pc, #492]	; (80050b0 <HAL_DMA_IRQHandler+0xcd4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7a      	ldr	r2, [pc, #488]	; (80050b4 <HAL_DMA_IRQHandler+0xcd8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a78      	ldr	r2, [pc, #480]	; (80050b8 <HAL_DMA_IRQHandler+0xcdc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a77      	ldr	r2, [pc, #476]	; (80050bc <HAL_DMA_IRQHandler+0xce0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_DMA_IRQHandler+0xb12>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a75      	ldr	r2, [pc, #468]	; (80050c0 <HAL_DMA_IRQHandler+0xce4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <HAL_DMA_IRQHandler+0xb24>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0208 	bic.w	r2, r2, #8
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e007      	b.n	8004f10 <HAL_DMA_IRQHandler+0xb34>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8165 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f22:	e15f      	b.n	80051e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80c5 	beq.w	80050c4 <HAL_DMA_IRQHandler+0xce8>
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80bf 	beq.w	80050c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	2202      	movs	r2, #2
 8004f50:	409a      	lsls	r2, r3
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d018      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 813a 	beq.w	80051e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f7c:	e134      	b.n	80051e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8130 	beq.w	80051e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f90:	e12a      	b.n	80051e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d168      	bne.n	800506e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a38      	ldr	r2, [pc, #224]	; (8005084 <HAL_DMA_IRQHandler+0xca8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d04a      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a37      	ldr	r2, [pc, #220]	; (8005088 <HAL_DMA_IRQHandler+0xcac>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d045      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a35      	ldr	r2, [pc, #212]	; (800508c <HAL_DMA_IRQHandler+0xcb0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d040      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a34      	ldr	r2, [pc, #208]	; (8005090 <HAL_DMA_IRQHandler+0xcb4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d03b      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	; (8005094 <HAL_DMA_IRQHandler+0xcb8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d036      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a31      	ldr	r2, [pc, #196]	; (8005098 <HAL_DMA_IRQHandler+0xcbc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d031      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <HAL_DMA_IRQHandler+0xcc0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d02c      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_DMA_IRQHandler+0xcc4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d027      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <HAL_DMA_IRQHandler+0xcc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d022      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <HAL_DMA_IRQHandler+0xccc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d01d      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <HAL_DMA_IRQHandler+0xcd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d018      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <HAL_DMA_IRQHandler+0xcd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <HAL_DMA_IRQHandler+0xcd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00e      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <HAL_DMA_IRQHandler+0xcdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d009      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a23      	ldr	r2, [pc, #140]	; (80050bc <HAL_DMA_IRQHandler+0xce0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_DMA_IRQHandler+0xc60>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <HAL_DMA_IRQHandler+0xce4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <HAL_DMA_IRQHandler+0xc72>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0214 	bic.w	r2, r2, #20
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e007      	b.n	800505e <HAL_DMA_IRQHandler+0xc82>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 020a 	bic.w	r2, r2, #10
 800505c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80b8 	beq.w	80051e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005080:	e0b2      	b.n	80051e8 <HAL_DMA_IRQHandler+0xe0c>
 8005082:	bf00      	nop
 8005084:	40020010 	.word	0x40020010
 8005088:	40020028 	.word	0x40020028
 800508c:	40020040 	.word	0x40020040
 8005090:	40020058 	.word	0x40020058
 8005094:	40020070 	.word	0x40020070
 8005098:	40020088 	.word	0x40020088
 800509c:	400200a0 	.word	0x400200a0
 80050a0:	400200b8 	.word	0x400200b8
 80050a4:	40020410 	.word	0x40020410
 80050a8:	40020428 	.word	0x40020428
 80050ac:	40020440 	.word	0x40020440
 80050b0:	40020458 	.word	0x40020458
 80050b4:	40020470 	.word	0x40020470
 80050b8:	40020488 	.word	0x40020488
 80050bc:	400204a0 	.word	0x400204a0
 80050c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2208      	movs	r2, #8
 80050ce:	409a      	lsls	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8088 	beq.w	80051ea <HAL_DMA_IRQHandler+0xe0e>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8082 	beq.w	80051ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a41      	ldr	r2, [pc, #260]	; (80051f0 <HAL_DMA_IRQHandler+0xe14>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d04a      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3f      	ldr	r2, [pc, #252]	; (80051f4 <HAL_DMA_IRQHandler+0xe18>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d045      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a3e      	ldr	r2, [pc, #248]	; (80051f8 <HAL_DMA_IRQHandler+0xe1c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d040      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a3c      	ldr	r2, [pc, #240]	; (80051fc <HAL_DMA_IRQHandler+0xe20>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d03b      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3b      	ldr	r2, [pc, #236]	; (8005200 <HAL_DMA_IRQHandler+0xe24>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d036      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a39      	ldr	r2, [pc, #228]	; (8005204 <HAL_DMA_IRQHandler+0xe28>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d031      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a38      	ldr	r2, [pc, #224]	; (8005208 <HAL_DMA_IRQHandler+0xe2c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d02c      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a36      	ldr	r2, [pc, #216]	; (800520c <HAL_DMA_IRQHandler+0xe30>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d027      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a35      	ldr	r2, [pc, #212]	; (8005210 <HAL_DMA_IRQHandler+0xe34>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d022      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a33      	ldr	r2, [pc, #204]	; (8005214 <HAL_DMA_IRQHandler+0xe38>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01d      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a32      	ldr	r2, [pc, #200]	; (8005218 <HAL_DMA_IRQHandler+0xe3c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d018      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a30      	ldr	r2, [pc, #192]	; (800521c <HAL_DMA_IRQHandler+0xe40>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <HAL_DMA_IRQHandler+0xe44>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2d      	ldr	r2, [pc, #180]	; (8005224 <HAL_DMA_IRQHandler+0xe48>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <HAL_DMA_IRQHandler+0xe4c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_DMA_IRQHandler+0xdaa>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a2a      	ldr	r2, [pc, #168]	; (800522c <HAL_DMA_IRQHandler+0xe50>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d108      	bne.n	8005198 <HAL_DMA_IRQHandler+0xdbc>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 021c 	bic.w	r2, r2, #28
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e007      	b.n	80051a8 <HAL_DMA_IRQHandler+0xdcc>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 020e 	bic.w	r2, r2, #14
 80051a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2201      	movs	r2, #1
 80051b2:	409a      	lsls	r2, r3
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	e004      	b.n	80051ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051e0:	bf00      	nop
 80051e2:	e002      	b.n	80051ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051ea:	3728      	adds	r7, #40	; 0x28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8

08005230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a42      	ldr	r2, [pc, #264]	; (8005348 <DMA_CalcBaseAndBitshift+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d04a      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a41      	ldr	r2, [pc, #260]	; (800534c <DMA_CalcBaseAndBitshift+0x11c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d045      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a3f      	ldr	r2, [pc, #252]	; (8005350 <DMA_CalcBaseAndBitshift+0x120>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d040      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3e      	ldr	r2, [pc, #248]	; (8005354 <DMA_CalcBaseAndBitshift+0x124>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d03b      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3c      	ldr	r2, [pc, #240]	; (8005358 <DMA_CalcBaseAndBitshift+0x128>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d036      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a3b      	ldr	r2, [pc, #236]	; (800535c <DMA_CalcBaseAndBitshift+0x12c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d031      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a39      	ldr	r2, [pc, #228]	; (8005360 <DMA_CalcBaseAndBitshift+0x130>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d02c      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a38      	ldr	r2, [pc, #224]	; (8005364 <DMA_CalcBaseAndBitshift+0x134>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d027      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a36      	ldr	r2, [pc, #216]	; (8005368 <DMA_CalcBaseAndBitshift+0x138>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d022      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a35      	ldr	r2, [pc, #212]	; (800536c <DMA_CalcBaseAndBitshift+0x13c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d01d      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a33      	ldr	r2, [pc, #204]	; (8005370 <DMA_CalcBaseAndBitshift+0x140>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d018      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a32      	ldr	r2, [pc, #200]	; (8005374 <DMA_CalcBaseAndBitshift+0x144>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a30      	ldr	r2, [pc, #192]	; (8005378 <DMA_CalcBaseAndBitshift+0x148>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00e      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2f      	ldr	r2, [pc, #188]	; (800537c <DMA_CalcBaseAndBitshift+0x14c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d009      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <DMA_CalcBaseAndBitshift+0x150>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <DMA_CalcBaseAndBitshift+0xa8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2c      	ldr	r2, [pc, #176]	; (8005384 <DMA_CalcBaseAndBitshift+0x154>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <DMA_CalcBaseAndBitshift+0xac>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <DMA_CalcBaseAndBitshift+0xae>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d024      	beq.n	800532c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	3b10      	subs	r3, #16
 80052ea:	4a27      	ldr	r2, [pc, #156]	; (8005388 <DMA_CalcBaseAndBitshift+0x158>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	4a24      	ldr	r2, [pc, #144]	; (800538c <DMA_CalcBaseAndBitshift+0x15c>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	461a      	mov	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b03      	cmp	r3, #3
 8005308:	d908      	bls.n	800531c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <DMA_CalcBaseAndBitshift+0x160>)
 8005312:	4013      	ands	r3, r2
 8005314:	1d1a      	adds	r2, r3, #4
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	659a      	str	r2, [r3, #88]	; 0x58
 800531a:	e00d      	b.n	8005338 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <DMA_CalcBaseAndBitshift+0x160>)
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6593      	str	r3, [r2, #88]	; 0x58
 800532a:	e005      	b.n	8005338 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40020010 	.word	0x40020010
 800534c:	40020028 	.word	0x40020028
 8005350:	40020040 	.word	0x40020040
 8005354:	40020058 	.word	0x40020058
 8005358:	40020070 	.word	0x40020070
 800535c:	40020088 	.word	0x40020088
 8005360:	400200a0 	.word	0x400200a0
 8005364:	400200b8 	.word	0x400200b8
 8005368:	40020410 	.word	0x40020410
 800536c:	40020428 	.word	0x40020428
 8005370:	40020440 	.word	0x40020440
 8005374:	40020458 	.word	0x40020458
 8005378:	40020470 	.word	0x40020470
 800537c:	40020488 	.word	0x40020488
 8005380:	400204a0 	.word	0x400204a0
 8005384:	400204b8 	.word	0x400204b8
 8005388:	aaaaaaab 	.word	0xaaaaaaab
 800538c:	08011e70 	.word	0x08011e70
 8005390:	fffffc00 	.word	0xfffffc00

08005394 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d120      	bne.n	80053ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d858      	bhi.n	8005462 <DMA_CheckFifoParam+0xce>
 80053b0:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <DMA_CheckFifoParam+0x24>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053db 	.word	0x080053db
 80053c0:	080053c9 	.word	0x080053c9
 80053c4:	08005463 	.word	0x08005463
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d048      	beq.n	8005466 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053d8:	e045      	b.n	8005466 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053e2:	d142      	bne.n	800546a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053e8:	e03f      	b.n	800546a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f2:	d123      	bne.n	800543c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d838      	bhi.n	800546e <DMA_CheckFifoParam+0xda>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <DMA_CheckFifoParam+0x70>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005415 	.word	0x08005415
 8005408:	0800541b 	.word	0x0800541b
 800540c:	08005415 	.word	0x08005415
 8005410:	0800542d 	.word	0x0800542d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
        break;
 8005418:	e030      	b.n	800547c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d025      	beq.n	8005472 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800542a:	e022      	b.n	8005472 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005434:	d11f      	bne.n	8005476 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800543a:	e01c      	b.n	8005476 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	2b02      	cmp	r3, #2
 8005442:	d902      	bls.n	800544a <DMA_CheckFifoParam+0xb6>
 8005444:	2b03      	cmp	r3, #3
 8005446:	d003      	beq.n	8005450 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005448:	e018      	b.n	800547c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
        break;
 800544e:	e015      	b.n	800547c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00e      	beq.n	800547a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
    break;
 8005460:	e00b      	b.n	800547a <DMA_CheckFifoParam+0xe6>
        break;
 8005462:	bf00      	nop
 8005464:	e00a      	b.n	800547c <DMA_CheckFifoParam+0xe8>
        break;
 8005466:	bf00      	nop
 8005468:	e008      	b.n	800547c <DMA_CheckFifoParam+0xe8>
        break;
 800546a:	bf00      	nop
 800546c:	e006      	b.n	800547c <DMA_CheckFifoParam+0xe8>
        break;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <DMA_CheckFifoParam+0xe8>
        break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <DMA_CheckFifoParam+0xe8>
        break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <DMA_CheckFifoParam+0xe8>
    break;
 800547a:	bf00      	nop
    }
  }

  return status;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop

0800548c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a38      	ldr	r2, [pc, #224]	; (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d022      	beq.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a36      	ldr	r2, [pc, #216]	; (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01d      	beq.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a35      	ldr	r2, [pc, #212]	; (8005588 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d018      	beq.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a33      	ldr	r2, [pc, #204]	; (800558c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a32      	ldr	r2, [pc, #200]	; (8005590 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a30      	ldr	r2, [pc, #192]	; (8005594 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d009      	beq.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2d      	ldr	r2, [pc, #180]	; (800559c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d101      	bne.n	80054ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01a      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	3b08      	subs	r3, #8
 80054fc:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4b26      	ldr	r3, [pc, #152]	; (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005518:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2201      	movs	r2, #1
 8005522:	409a      	lsls	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005528:	e024      	b.n	8005574 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	3b10      	subs	r3, #16
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005534:	fba2 2303 	umull	r2, r3, r2, r3
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d806      	bhi.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d902      	bls.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3308      	adds	r3, #8
 8005550:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4b18      	ldr	r3, [pc, #96]	; (80055b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	461a      	mov	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005564:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	2201      	movs	r2, #1
 800556e:	409a      	lsls	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	58025408 	.word	0x58025408
 8005584:	5802541c 	.word	0x5802541c
 8005588:	58025430 	.word	0x58025430
 800558c:	58025444 	.word	0x58025444
 8005590:	58025458 	.word	0x58025458
 8005594:	5802546c 	.word	0x5802546c
 8005598:	58025480 	.word	0x58025480
 800559c:	58025494 	.word	0x58025494
 80055a0:	cccccccd 	.word	0xcccccccd
 80055a4:	16009600 	.word	0x16009600
 80055a8:	58025880 	.word	0x58025880
 80055ac:	aaaaaaab 	.word	0xaaaaaaab
 80055b0:	400204b8 	.word	0x400204b8
 80055b4:	4002040f 	.word	0x4002040f
 80055b8:	10008200 	.word	0x10008200
 80055bc:	40020880 	.word	0x40020880

080055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04a      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d847      	bhi.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a25      	ldr	r2, [pc, #148]	; (8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a24      	ldr	r2, [pc, #144]	; (800567c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01d      	beq.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a22      	ldr	r2, [pc, #136]	; (8005680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a21      	ldr	r2, [pc, #132]	; (8005684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1e      	ldr	r2, [pc, #120]	; (800568c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4b17      	ldr	r3, [pc, #92]	; (8005698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005648:	671a      	str	r2, [r3, #112]	; 0x70
 800564a:	e009      	b.n	8005660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800565e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b01      	subs	r3, #1
 8005664:	2201      	movs	r2, #1
 8005666:	409a      	lsls	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	58025408 	.word	0x58025408
 800567c:	5802541c 	.word	0x5802541c
 8005680:	58025430 	.word	0x58025430
 8005684:	58025444 	.word	0x58025444
 8005688:	58025458 	.word	0x58025458
 800568c:	5802546c 	.word	0x5802546c
 8005690:	58025480 	.word	0x58025480
 8005694:	58025494 	.word	0x58025494
 8005698:	1600963f 	.word	0x1600963f
 800569c:	58025940 	.word	0x58025940
 80056a0:	1000823f 	.word	0x1000823f
 80056a4:	40020940 	.word	0x40020940

080056a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b098      	sub	sp, #96	; 0x60
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80056b0:	4a84      	ldr	r2, [pc, #528]	; (80058c4 <HAL_FDCAN_Init+0x21c>)
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	4611      	mov	r1, r2
 80056b8:	224c      	movs	r2, #76	; 0x4c
 80056ba:	4618      	mov	r0, r3
 80056bc:	f00b fa9c 	bl	8010bf8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e1ca      	b.n	8005a60 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a7e      	ldr	r2, [pc, #504]	; (80058c8 <HAL_FDCAN_Init+0x220>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d106      	bne.n	80056e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fa20 	bl	8001b3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0210 	bic.w	r2, r2, #16
 800570a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800570c:	f7fc fe68 	bl	80023e0 <HAL_GetTick>
 8005710:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005712:	e014      	b.n	800573e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005714:	f7fc fe64 	bl	80023e0 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b0a      	cmp	r3, #10
 8005720:	d90d      	bls.n	800573e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005728:	f043 0201 	orr.w	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e190      	b.n	8005a60 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b08      	cmp	r3, #8
 800574a:	d0e3      	beq.n	8005714 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800575c:	f7fc fe40 	bl	80023e0 <HAL_GetTick>
 8005760:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005762:	e014      	b.n	800578e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005764:	f7fc fe3c 	bl	80023e0 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b0a      	cmp	r3, #10
 8005770:	d90d      	bls.n	800578e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005778:	f043 0201 	orr.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2203      	movs	r2, #3
 8005786:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e168      	b.n	8005a60 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0e3      	beq.n	8005764 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0202 	orr.w	r2, r2, #2
 80057aa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	7c1b      	ldrb	r3, [r3, #16]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d108      	bne.n	80057c6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c2:	619a      	str	r2, [r3, #24]
 80057c4:	e007      	b.n	80057d6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	7c5b      	ldrb	r3, [r3, #17]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d108      	bne.n	80057f0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ec:	619a      	str	r2, [r3, #24]
 80057ee:	e007      	b.n	8005800 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7c9b      	ldrb	r3, [r3, #18]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d108      	bne.n	800581a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005816:	619a      	str	r2, [r3, #24]
 8005818:	e007      	b.n	800582a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005828:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800584e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0210 	bic.w	r2, r2, #16
 800585e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d108      	bne.n	800587a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0204 	orr.w	r2, r2, #4
 8005876:	619a      	str	r2, [r3, #24]
 8005878:	e030      	b.n	80058dc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02c      	beq.n	80058dc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d020      	beq.n	80058cc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699a      	ldr	r2, [r3, #24]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005898:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0210 	orr.w	r2, r2, #16
 80058a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d114      	bne.n	80058dc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699a      	ldr	r2, [r3, #24]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0220 	orr.w	r2, r2, #32
 80058c0:	619a      	str	r2, [r3, #24]
 80058c2:	e00b      	b.n	80058dc <HAL_FDCAN_Init+0x234>
 80058c4:	08011dcc 	.word	0x08011dcc
 80058c8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0220 	orr.w	r2, r2, #32
 80058da:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058ec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058f4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005904:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005906:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005910:	d115      	bne.n	800593e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	3b01      	subs	r3, #1
 800591e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005920:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	3b01      	subs	r3, #1
 8005928:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800592a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	3b01      	subs	r3, #1
 8005934:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800593a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800593c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	4413      	add	r3, r2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005972:	f023 0107 	bic.w	r1, r3, #7
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005980:	4413      	add	r3, r2
 8005982:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d012      	beq.n	80059be <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059a0:	f023 0107 	bic.w	r1, r3, #7
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80059ae:	4413      	add	r3, r2
 80059b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d013      	beq.n	80059ee <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059ce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80059dc:	4413      	add	r3, r2
 80059de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80059e2:	011a      	lsls	r2, r3, #4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d013      	beq.n	8005a1e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059fe:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a11      	ldr	r2, [pc, #68]	; (8005a68 <HAL_FDCAN_Init+0x3c0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d107      	bne.n	8005a38 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f022 0203 	bic.w	r2, r2, #3
 8005a36:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f80b 	bl	8005a6c <FDCAN_CalcultateRamBlockAddresses>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005a5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3760      	adds	r7, #96	; 0x60
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	4000a000 	.word	0x4000a000

08005a6c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a82:	4ba7      	ldr	r3, [pc, #668]	; (8005d20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	0091      	lsls	r1, r2, #2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6812      	ldr	r2, [r2, #0]
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	041a      	lsls	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ac2:	4b97      	ldr	r3, [pc, #604]	; (8005d20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0091      	lsls	r1, r2, #2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005adc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae4:	041a      	lsls	r2, r3, #16
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4413      	add	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005b04:	4b86      	ldr	r3, [pc, #536]	; (8005d20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	0091      	lsls	r1, r2, #2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b1e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	041a      	lsls	r2, r3, #16
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	4413      	add	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005b4c:	4b74      	ldr	r3, [pc, #464]	; (8005d20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	0091      	lsls	r1, r2, #2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b66:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	041a      	lsls	r2, r3, #16
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	4413      	add	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b94:	4b62      	ldr	r3, [pc, #392]	; (8005d20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	0091      	lsls	r1, r2, #2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005bc0:	4b57      	ldr	r3, [pc, #348]	; (8005d20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	0091      	lsls	r1, r2, #2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bda:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	041a      	lsls	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005c02:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0091      	lsls	r1, r2, #2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c1c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c24:	041a      	lsls	r2, r3, #16
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c38:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	061a      	lsls	r2, r3, #24
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c50:	4b34      	ldr	r3, [pc, #208]	; (8005d24 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005c52:	4413      	add	r3, r2
 8005c54:	009a      	lsls	r2, r3, #2
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	441a      	add	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	441a      	add	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	441a      	add	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	441a      	add	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d16:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d915      	bls.n	8005d48 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005d1c:	e006      	b.n	8005d2c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005d1e:	bf00      	nop
 8005d20:	ffff0003 	.word	0xffff0003
 8005d24:	10002b00 	.word	0x10002b00
 8005d28:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d32:	f043 0220 	orr.w	r2, r3, #32
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e010      	b.n	8005d6a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e005      	b.n	8005d5c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d3f3      	bcc.n	8005d50 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b089      	sub	sp, #36	; 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d86:	4b89      	ldr	r3, [pc, #548]	; (8005fac <HAL_GPIO_Init+0x234>)
 8005d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d8a:	e194      	b.n	80060b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2101      	movs	r1, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	4013      	ands	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8186 	beq.w	80060b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d005      	beq.n	8005dbc <HAL_GPIO_Init+0x44>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d130      	bne.n	8005e1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005df2:	2201      	movs	r2, #1
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	f003 0201 	and.w	r2, r3, #1
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d017      	beq.n	8005e5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	2203      	movs	r2, #3
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d123      	bne.n	8005eae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	08da      	lsrs	r2, r3, #3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3208      	adds	r2, #8
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	220f      	movs	r2, #15
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	08da      	lsrs	r2, r3, #3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3208      	adds	r2, #8
 8005ea8:	69b9      	ldr	r1, [r7, #24]
 8005eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0203 	and.w	r2, r3, #3
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 80e0 	beq.w	80060b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ef0:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <HAL_GPIO_Init+0x238>)
 8005ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ef6:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <HAL_GPIO_Init+0x238>)
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f00:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <HAL_GPIO_Init+0x238>)
 8005f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f0e:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <HAL_GPIO_Init+0x23c>)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	3302      	adds	r3, #2
 8005f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	220f      	movs	r2, #15
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a20      	ldr	r2, [pc, #128]	; (8005fb8 <HAL_GPIO_Init+0x240>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d052      	beq.n	8005fe0 <HAL_GPIO_Init+0x268>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	; (8005fbc <HAL_GPIO_Init+0x244>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d031      	beq.n	8005fa6 <HAL_GPIO_Init+0x22e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1e      	ldr	r2, [pc, #120]	; (8005fc0 <HAL_GPIO_Init+0x248>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02b      	beq.n	8005fa2 <HAL_GPIO_Init+0x22a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <HAL_GPIO_Init+0x24c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d025      	beq.n	8005f9e <HAL_GPIO_Init+0x226>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <HAL_GPIO_Init+0x250>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01f      	beq.n	8005f9a <HAL_GPIO_Init+0x222>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1b      	ldr	r2, [pc, #108]	; (8005fcc <HAL_GPIO_Init+0x254>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d019      	beq.n	8005f96 <HAL_GPIO_Init+0x21e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1a      	ldr	r2, [pc, #104]	; (8005fd0 <HAL_GPIO_Init+0x258>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <HAL_GPIO_Init+0x21a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_GPIO_Init+0x25c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00d      	beq.n	8005f8e <HAL_GPIO_Init+0x216>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <HAL_GPIO_Init+0x260>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <HAL_GPIO_Init+0x212>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <HAL_GPIO_Init+0x264>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d101      	bne.n	8005f86 <HAL_GPIO_Init+0x20e>
 8005f82:	2309      	movs	r3, #9
 8005f84:	e02d      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005f86:	230a      	movs	r3, #10
 8005f88:	e02b      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	e029      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005f8e:	2307      	movs	r3, #7
 8005f90:	e027      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005f92:	2306      	movs	r3, #6
 8005f94:	e025      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005f96:	2305      	movs	r3, #5
 8005f98:	e023      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005f9a:	2304      	movs	r3, #4
 8005f9c:	e021      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e01f      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e01d      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e01b      	b.n	8005fe2 <HAL_GPIO_Init+0x26a>
 8005faa:	bf00      	nop
 8005fac:	58000080 	.word	0x58000080
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	58000400 	.word	0x58000400
 8005fb8:	58020000 	.word	0x58020000
 8005fbc:	58020400 	.word	0x58020400
 8005fc0:	58020800 	.word	0x58020800
 8005fc4:	58020c00 	.word	0x58020c00
 8005fc8:	58021000 	.word	0x58021000
 8005fcc:	58021400 	.word	0x58021400
 8005fd0:	58021800 	.word	0x58021800
 8005fd4:	58021c00 	.word	0x58021c00
 8005fd8:	58022000 	.word	0x58022000
 8005fdc:	58022400 	.word	0x58022400
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	f002 0203 	and.w	r2, r2, #3
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	4093      	lsls	r3, r2
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ff2:	4938      	ldr	r1, [pc, #224]	; (80060d4 <HAL_GPIO_Init+0x35c>)
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	43db      	mvns	r3, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4013      	ands	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800602e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	43db      	mvns	r3, r3
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4013      	ands	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	43db      	mvns	r3, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4013      	ands	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	43db      	mvns	r3, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4013      	ands	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa22 f303 	lsr.w	r3, r2, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f47f ae63 	bne.w	8005d8c <HAL_GPIO_Init+0x14>
  }
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	3724      	adds	r7, #36	; 0x24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	58000400 	.word	0x58000400

080060d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	807b      	strh	r3, [r7, #2]
 80060e4:	4613      	mov	r3, r2
 80060e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060e8:	787b      	ldrb	r3, [r7, #1]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ee:	887a      	ldrh	r2, [r7, #2]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060f4:	e003      	b.n	80060fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060f6:	887b      	ldrh	r3, [r7, #2]
 80060f8:	041a      	lsls	r2, r3, #16
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	619a      	str	r2, [r3, #24]
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e07f      	b.n	800621e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fb fdca 	bl	8001ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800615c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800616c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d107      	bne.n	8006186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	e006      	b.n	8006194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d104      	bne.n	80061a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b1d      	ldr	r3, [pc, #116]	; (8006228 <HAL_I2C_Init+0x11c>)
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	02008000 	.word	0x02008000

0800622c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	d138      	bne.n	80062b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800624c:	2302      	movs	r3, #2
 800624e:	e032      	b.n	80062b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800627e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6819      	ldr	r1, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d139      	bne.n	800634c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e033      	b.n	800634e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2224      	movs	r2, #36	; 0x24
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0201 	bic.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006314:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	e000      	b.n	800634e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800634c:	2302      	movs	r3, #2
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800635a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635c:	b08f      	sub	sp, #60	; 0x3c
 800635e:	af0a      	add	r7, sp, #40	; 0x28
 8006360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e116      	b.n	800659a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f00a f8c8 	bl	801051c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2203      	movs	r2, #3
 8006390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f006 fc11 	bl	800cbd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	687e      	ldr	r6, [r7, #4]
 80063b8:	466d      	mov	r5, sp
 80063ba:	f106 0410 	add.w	r4, r6, #16
 80063be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80063ce:	1d33      	adds	r3, r6, #4
 80063d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063d2:	6838      	ldr	r0, [r7, #0]
 80063d4:	f006 fadc 	bl	800c990 <USB_CoreInit>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e0d7      	b.n	800659a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2100      	movs	r1, #0
 80063f0:	4618      	mov	r0, r3
 80063f2:	f006 fbff 	bl	800cbf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
 80063fa:	e04a      	b.n	8006492 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80063fc:	7bfa      	ldrb	r2, [r7, #15]
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	333d      	adds	r3, #61	; 0x3d
 800640c:	2201      	movs	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006410:	7bfa      	ldrb	r2, [r7, #15]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	333c      	adds	r3, #60	; 0x3c
 8006420:	7bfa      	ldrb	r2, [r7, #15]
 8006422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006424:	7bfa      	ldrb	r2, [r7, #15]
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	b298      	uxth	r0, r3
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	3344      	adds	r3, #68	; 0x44
 8006438:	4602      	mov	r2, r0
 800643a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800643c:	7bfa      	ldrb	r2, [r7, #15]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	3340      	adds	r3, #64	; 0x40
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006450:	7bfa      	ldrb	r2, [r7, #15]
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	3348      	adds	r3, #72	; 0x48
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006464:	7bfa      	ldrb	r2, [r7, #15]
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	334c      	adds	r3, #76	; 0x4c
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006478:	7bfa      	ldrb	r2, [r7, #15]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	3354      	adds	r3, #84	; 0x54
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	3301      	adds	r3, #1
 8006490:	73fb      	strb	r3, [r7, #15]
 8006492:	7bfa      	ldrb	r2, [r7, #15]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d3af      	bcc.n	80063fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	e044      	b.n	800652c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80064a2:	7bfa      	ldrb	r2, [r7, #15]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80064b8:	7bfa      	ldrb	r2, [r7, #15]
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064ce:	7bfa      	ldrb	r2, [r7, #15]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064e4:	7bfa      	ldrb	r2, [r7, #15]
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064fa:	7bfa      	ldrb	r2, [r7, #15]
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006510:	7bfa      	ldrb	r2, [r7, #15]
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	4613      	mov	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	3301      	adds	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
 800652c:	7bfa      	ldrb	r2, [r7, #15]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d3b5      	bcc.n	80064a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	687e      	ldr	r6, [r7, #4]
 800653e:	466d      	mov	r5, sp
 8006540:	f106 0410 	add.w	r4, r6, #16
 8006544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800654a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800654c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006550:	e885 0003 	stmia.w	r5, {r0, r1}
 8006554:	1d33      	adds	r3, r6, #4
 8006556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006558:	6838      	ldr	r0, [r7, #0]
 800655a:	f006 fb97 	bl	800cc8c <USB_DevInit>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e014      	b.n	800659a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	2b01      	cmp	r3, #1
 8006586:	d102      	bne.n	800658e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 f98b 	bl	80078a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f007 fce5 	bl	800df62 <USB_DevDisconnect>

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_PCD_Start+0x1c>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e020      	b.n	8006600 <HAL_PCD_Start+0x5e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d109      	bne.n	80065e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d005      	beq.n	80065e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f006 fae2 	bl	800cbb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f007 fc95 	bl	800df20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b08d      	sub	sp, #52	; 0x34
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f007 fd53 	bl	800e0ca <USB_GetMode>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 84b7 	bne.w	8006f9a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f007 fcb7 	bl	800dfa4 <USB_ReadInterrupts>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 84ad 	beq.w	8006f98 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f007 fca4 	bl	800dfa4 <USB_ReadInterrupts>
 800665c:	4603      	mov	r3, r0
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d107      	bne.n	8006676 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f002 0202 	and.w	r2, r2, #2
 8006674:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f007 fc92 	bl	800dfa4 <USB_ReadInterrupts>
 8006680:	4603      	mov	r3, r0
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b10      	cmp	r3, #16
 8006688:	d161      	bne.n	800674e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0210 	bic.w	r2, r2, #16
 8006698:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 020f 	and.w	r2, r3, #15
 80066a6:	4613      	mov	r3, r2
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	3304      	adds	r3, #4
 80066b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	0c5b      	lsrs	r3, r3, #17
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d124      	bne.n	8006710 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d035      	beq.n	800673e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	6a38      	ldr	r0, [r7, #32]
 80066e6:	f007 fac9 	bl	800dc7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f6:	441a      	add	r2, r3
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6a1a      	ldr	r2, [r3, #32]
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	091b      	lsrs	r3, r3, #4
 8006704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006708:	441a      	add	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	621a      	str	r2, [r3, #32]
 800670e:	e016      	b.n	800673e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	0c5b      	lsrs	r3, r3, #17
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	2b06      	cmp	r3, #6
 800671a:	d110      	bne.n	800673e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006722:	2208      	movs	r2, #8
 8006724:	4619      	mov	r1, r3
 8006726:	6a38      	ldr	r0, [r7, #32]
 8006728:	f007 faa8 	bl	800dc7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	6a1a      	ldr	r2, [r3, #32]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006738:	441a      	add	r2, r3
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699a      	ldr	r2, [r3, #24]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0210 	orr.w	r2, r2, #16
 800674c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f007 fc26 	bl	800dfa4 <USB_ReadInterrupts>
 8006758:	4603      	mov	r3, r0
 800675a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800675e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006762:	f040 80a7 	bne.w	80068b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f007 fc2b 	bl	800dfca <USB_ReadDevAllOutEpInterrupt>
 8006774:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006776:	e099      	b.n	80068ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 808e 	beq.w	80068a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	4611      	mov	r1, r2
 800678e:	4618      	mov	r0, r3
 8006790:	f007 fc4f 	bl	800e032 <USB_ReadDevOutEPInterrupt>
 8006794:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00c      	beq.n	80067ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	461a      	mov	r2, r3
 80067ae:	2301      	movs	r3, #1
 80067b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80067b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 feef 	bl	8007598 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00c      	beq.n	80067de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	461a      	mov	r2, r3
 80067d2:	2308      	movs	r3, #8
 80067d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80067d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 ffc5 	bl	8007768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	461a      	mov	r2, r3
 80067f6:	2310      	movs	r3, #16
 80067f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d030      	beq.n	8006866 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680c:	2b80      	cmp	r3, #128	; 0x80
 800680e:	d109      	bne.n	8006824 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006822:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006826:	4613      	mov	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	3304      	adds	r3, #4
 8006838:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	78db      	ldrb	r3, [r3, #3]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d108      	bne.n	8006854 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2200      	movs	r2, #0
 8006846:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	b2db      	uxtb	r3, r3
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f009 ff96 	bl	8010780 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	461a      	mov	r2, r3
 8006862:	2302      	movs	r3, #2
 8006864:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687c:	461a      	mov	r2, r3
 800687e:	2320      	movs	r3, #32
 8006880:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	461a      	mov	r2, r3
 800689a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800689e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	3301      	adds	r3, #1
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f47f af62 	bne.w	8006778 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f007 fb73 	bl	800dfa4 <USB_ReadInterrupts>
 80068be:	4603      	mov	r3, r0
 80068c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068c8:	f040 80db 	bne.w	8006a82 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f007 fb94 	bl	800dffe <USB_ReadDevAllInEpInterrupt>
 80068d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80068dc:	e0cd      	b.n	8006a7a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80c2 	beq.w	8006a6e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f007 fbba 	bl	800e06e <USB_ReadDevInEPInterrupt>
 80068fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d057      	beq.n	80069b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	2201      	movs	r2, #1
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	43db      	mvns	r3, r3
 8006920:	69f9      	ldr	r1, [r7, #28]
 8006922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006926:	4013      	ands	r3, r2
 8006928:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006936:	461a      	mov	r2, r3
 8006938:	2301      	movs	r3, #1
 800693a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d132      	bne.n	80069aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	334c      	adds	r3, #76	; 0x4c
 8006954:	6819      	ldr	r1, [r3, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695a:	4613      	mov	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4403      	add	r3, r0
 8006964:	3348      	adds	r3, #72	; 0x48
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4419      	add	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696e:	4613      	mov	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4403      	add	r3, r0
 8006978:	334c      	adds	r3, #76	; 0x4c
 800697a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d113      	bne.n	80069aa <HAL_PCD_IRQHandler+0x3a2>
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006986:	4613      	mov	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	3354      	adds	r3, #84	; 0x54
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d108      	bne.n	80069aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069a2:	461a      	mov	r2, r3
 80069a4:	2101      	movs	r1, #1
 80069a6:	f007 fbc3 	bl	800e130 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f009 fe60 	bl	8010676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069cc:	461a      	mov	r2, r3
 80069ce:	2308      	movs	r3, #8
 80069d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	461a      	mov	r2, r3
 80069ea:	2310      	movs	r3, #16
 80069ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a04:	461a      	mov	r2, r3
 8006a06:	2340      	movs	r3, #64	; 0x40
 8006a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d023      	beq.n	8006a5c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a16:	6a38      	ldr	r0, [r7, #32]
 8006a18:	f006 fa96 	bl	800cf48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	3338      	adds	r3, #56	; 0x38
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	78db      	ldrb	r3, [r3, #3]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d108      	bne.n	8006a4a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f009 fead 	bl	80107a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a56:	461a      	mov	r2, r3
 8006a58:	2302      	movs	r3, #2
 8006a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fd08 	bl	800747e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	3301      	adds	r3, #1
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f47f af2e 	bne.w	80068de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f007 fa8c 	bl	800dfa4 <USB_ReadInterrupts>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a96:	d122      	bne.n	8006ade <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d108      	bne.n	8006ac8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006abe:	2100      	movs	r1, #0
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 ff13 	bl	80078ec <HAL_PCDEx_LPM_Callback>
 8006ac6:	e002      	b.n	8006ace <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f009 fe4b 	bl	8010764 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f007 fa5e 	bl	800dfa4 <USB_ReadInterrupts>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af2:	d112      	bne.n	8006b1a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d102      	bne.n	8006b0a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f009 fe07 	bl	8010718 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695a      	ldr	r2, [r3, #20]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f007 fa40 	bl	800dfa4 <USB_ReadInterrupts>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b2e:	d121      	bne.n	8006b74 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006b3e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d111      	bne.n	8006b6e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	089b      	lsrs	r3, r3, #2
 8006b5a:	f003 020f 	and.w	r2, r3, #15
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006b64:	2101      	movs	r1, #1
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fec0 	bl	80078ec <HAL_PCDEx_LPM_Callback>
 8006b6c:	e002      	b.n	8006b74 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f009 fdd2 	bl	8010718 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f007 fa13 	bl	800dfa4 <USB_ReadInterrupts>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b88:	f040 80b7 	bne.w	8006cfa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2110      	movs	r1, #16
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f006 f9ce 	bl	800cf48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bac:	2300      	movs	r3, #0
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb0:	e046      	b.n	8006c40 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006be4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bf8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d3b3      	bcc.n	8006bb2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006c5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c76:	f043 030b 	orr.w	r3, r3, #11
 8006c7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8c:	f043 030b 	orr.w	r3, r3, #11
 8006c90:	6453      	str	r3, [r2, #68]	; 0x44
 8006c92:	e015      	b.n	8006cc0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	695a      	ldr	r2, [r3, #20]
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	f242 032b 	movw	r3, #8235	; 0x202b
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cba:	f043 030b 	orr.w	r3, r3, #11
 8006cbe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cd2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f007 fa23 	bl	800e130 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f007 f950 	bl	800dfa4 <USB_ReadInterrupts>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	d124      	bne.n	8006d5a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f007 f9e7 	bl	800e0e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f006 f98f 	bl	800d042 <USB_GetDevSpeed>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681c      	ldr	r4, [r3, #0]
 8006d30:	f001 fd8e 	bl	8008850 <HAL_RCC_GetHCLKFreq>
 8006d34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f005 fe94 	bl	800ca6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f009 fcbe 	bl	80106c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695a      	ldr	r2, [r3, #20]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f007 f920 	bl	800dfa4 <USB_ReadInterrupts>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d10a      	bne.n	8006d84 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f009 fc9b 	bl	80106aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f002 0208 	and.w	r2, r2, #8
 8006d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f007 f90b 	bl	800dfa4 <USB_ReadInterrupts>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d122      	bne.n	8006dde <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006da4:	2301      	movs	r3, #1
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
 8006da8:	e014      	b.n	8006dd4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dae:	4613      	mov	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	440b      	add	r3, r1
 8006db8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d105      	bne.n	8006dce <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb27 	bl	800741c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d3e5      	bcc.n	8006daa <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f007 f8de 	bl	800dfa4 <USB_ReadInterrupts>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006df2:	d13b      	bne.n	8006e6c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006df4:	2301      	movs	r3, #1
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
 8006df8:	e02b      	b.n	8006e52 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0e:	4613      	mov	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	440b      	add	r3, r1
 8006e18:	3340      	adds	r3, #64	; 0x40
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d115      	bne.n	8006e4c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006e20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	da12      	bge.n	8006e4c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	333f      	adds	r3, #63	; 0x3f
 8006e36:	2201      	movs	r2, #1
 8006e38:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fae8 	bl	800741c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	3301      	adds	r3, #1
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3ce      	bcc.n	8006dfa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695a      	ldr	r2, [r3, #20]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f007 f897 	bl	800dfa4 <USB_ReadInterrupts>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e80:	d155      	bne.n	8006f2e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e82:	2301      	movs	r3, #1
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	e045      	b.n	8006f14 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d12e      	bne.n	8006f0e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006eb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da2b      	bge.n	8006f0e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006ec2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d121      	bne.n	8006f0e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f0a:	6053      	str	r3, [r2, #4]
            break;
 8006f0c:	e007      	b.n	8006f1e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	3301      	adds	r3, #1
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d3b4      	bcc.n	8006e88 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695a      	ldr	r2, [r3, #20]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f007 f836 	bl	800dfa4 <USB_ReadInterrupts>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f42:	d10a      	bne.n	8006f5a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f009 fc3f 	bl	80107c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f007 f820 	bl	800dfa4 <USB_ReadInterrupts>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d115      	bne.n	8006f9a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f009 fc2f 	bl	80107e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6859      	ldr	r1, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	e000      	b.n	8006f9a <HAL_PCD_IRQHandler+0x992>
      return;
 8006f98:	bf00      	nop
    }
  }
}
 8006f9a:	3734      	adds	r7, #52	; 0x34
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd90      	pop	{r4, r7, pc}

08006fa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_PCD_SetAddress+0x1a>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e013      	b.n	8006fe2 <HAL_PCD_SetAddress+0x42>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f006 ff7e 	bl	800ded4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	70fb      	strb	r3, [r7, #3]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	803b      	strh	r3, [r7, #0]
 8007000:	4613      	mov	r3, r2
 8007002:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800700c:	2b00      	cmp	r3, #0
 800700e:	da0f      	bge.n	8007030 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	f003 020f 	and.w	r2, r3, #15
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	3338      	adds	r3, #56	; 0x38
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	3304      	adds	r3, #4
 8007026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	705a      	strb	r2, [r3, #1]
 800702e:	e00f      	b.n	8007050 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	f003 020f 	and.w	r2, r3, #15
 8007036:	4613      	mov	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4413      	add	r3, r2
 8007046:	3304      	adds	r3, #4
 8007048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	b2da      	uxtb	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800705c:	883a      	ldrh	r2, [r7, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	78ba      	ldrb	r2, [r7, #2]
 8007066:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800707a:	78bb      	ldrb	r3, [r7, #2]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d102      	bne.n	8007086 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_PCD_EP_Open+0xaa>
 8007090:	2302      	movs	r3, #2
 8007092:	e00e      	b.n	80070b2 <HAL_PCD_EP_Open+0xc8>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68f9      	ldr	r1, [r7, #12]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f005 fff2 	bl	800d08c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80070b0:	7afb      	ldrb	r3, [r7, #11]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da0f      	bge.n	80070ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	3338      	adds	r3, #56	; 0x38
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	3304      	adds	r3, #4
 80070e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	705a      	strb	r2, [r3, #1]
 80070ec:	e00f      	b.n	800710e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	3304      	adds	r3, #4
 8007106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	b2da      	uxtb	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_PCD_EP_Close+0x6e>
 8007124:	2302      	movs	r3, #2
 8007126:	e00e      	b.n	8007146 <HAL_PCD_EP_Close+0x8c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68f9      	ldr	r1, [r7, #12]
 8007136:	4618      	mov	r0, r3
 8007138:	f006 f830 	bl	800d19c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	460b      	mov	r3, r1
 800715c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	4613      	mov	r3, r2
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	3304      	adds	r3, #4
 8007176:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2200      	movs	r2, #0
 8007188:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	b2da      	uxtb	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d102      	bne.n	80071aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d109      	bne.n	80071c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6979      	ldr	r1, [r7, #20]
 80071c2:	f006 fb17 	bl	800d7f4 <USB_EP0StartXfer>
 80071c6:	e008      	b.n	80071da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	6979      	ldr	r1, [r7, #20]
 80071d6:	f006 f8bd 	bl	800d354 <USB_EPStartXfer>
  }

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	f003 020f 	and.w	r2, r3, #15
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	4613      	mov	r3, r2
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	460b      	mov	r3, r1
 8007222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	f003 020f 	and.w	r2, r3, #15
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	3338      	adds	r3, #56	; 0x38
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	3304      	adds	r3, #4
 800723a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2201      	movs	r2, #1
 8007252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	b2da      	uxtb	r2, r3
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d102      	bne.n	800726e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800726e:	7afb      	ldrb	r3, [r7, #11]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	6979      	ldr	r1, [r7, #20]
 8007286:	f006 fab5 	bl	800d7f4 <USB_EP0StartXfer>
 800728a:	e008      	b.n	800729e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	6979      	ldr	r1, [r7, #20]
 800729a:	f006 f85b 	bl	800d354 <USB_EPStartXfer>
  }

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	f003 020f 	and.w	r2, r3, #15
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d901      	bls.n	80072c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e050      	b.n	8007368 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da0f      	bge.n	80072ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	4613      	mov	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	3338      	adds	r3, #56	; 0x38
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4413      	add	r3, r2
 80072e2:	3304      	adds	r3, #4
 80072e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	705a      	strb	r2, [r3, #1]
 80072ec:	e00d      	b.n	800730a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	3304      	adds	r3, #4
 8007302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	b2da      	uxtb	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_PCD_EP_SetStall+0x82>
 8007326:	2302      	movs	r3, #2
 8007328:	e01e      	b.n	8007368 <HAL_PCD_EP_SetStall+0xc0>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68f9      	ldr	r1, [r7, #12]
 8007338:	4618      	mov	r0, r3
 800733a:	f006 fcf7 	bl	800dd2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	b2d9      	uxtb	r1, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007358:	461a      	mov	r2, r3
 800735a:	f006 fee9 	bl	800e130 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	f003 020f 	and.w	r2, r3, #15
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d901      	bls.n	800738e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e042      	b.n	8007414 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800738e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007392:	2b00      	cmp	r3, #0
 8007394:	da0f      	bge.n	80073b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	3338      	adds	r3, #56	; 0x38
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4413      	add	r3, r2
 80073aa:	3304      	adds	r3, #4
 80073ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	705a      	strb	r2, [r3, #1]
 80073b4:	e00f      	b.n	80073d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	4613      	mov	r3, r2
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
 80073ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_PCD_EP_ClrStall+0x86>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e00e      	b.n	8007414 <HAL_PCD_EP_ClrStall+0xa4>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68f9      	ldr	r1, [r7, #12]
 8007404:	4618      	mov	r0, r3
 8007406:	f006 fcff 	bl	800de08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800742c:	2b00      	cmp	r3, #0
 800742e:	da0c      	bge.n	800744a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	3338      	adds	r3, #56	; 0x38
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	3304      	adds	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e00c      	b.n	8007464 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	4613      	mov	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4413      	add	r3, r2
 8007460:	3304      	adds	r3, #4
 8007462:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68f9      	ldr	r1, [r7, #12]
 800746a:	4618      	mov	r0, r3
 800746c:	f006 fb1e 	bl	800daac <USB_EPStopXfer>
 8007470:	4603      	mov	r3, r0
 8007472:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007474:	7afb      	ldrb	r3, [r7, #11]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b08a      	sub	sp, #40	; 0x28
 8007482:	af02      	add	r7, sp, #8
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	3338      	adds	r3, #56	; 0x38
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	4413      	add	r3, r2
 80074a2:	3304      	adds	r3, #4
 80074a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d901      	bls.n	80074b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e06c      	b.n	8007590 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d902      	bls.n	80074d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3303      	adds	r3, #3
 80074d6:	089b      	lsrs	r3, r3, #2
 80074d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074da:	e02b      	b.n	8007534 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	699a      	ldr	r2, [r3, #24]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d902      	bls.n	80074f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3303      	adds	r3, #3
 80074fc:	089b      	lsrs	r3, r3, #2
 80074fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6919      	ldr	r1, [r3, #16]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007510:	b2db      	uxtb	r3, r3
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4603      	mov	r3, r0
 8007516:	6978      	ldr	r0, [r7, #20]
 8007518:	f006 fb72 	bl	800dc00 <USB_WritePacket>

    ep->xfer_buff  += len;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	441a      	add	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	441a      	add	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	b29b      	uxth	r3, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	d809      	bhi.n	800755e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1a      	ldr	r2, [r3, #32]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007552:	429a      	cmp	r2, r3
 8007554:	d203      	bcs.n	800755e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1be      	bne.n	80074dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	429a      	cmp	r2, r3
 8007568:	d811      	bhi.n	800758e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	2201      	movs	r2, #1
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	43db      	mvns	r3, r3
 8007584:	6939      	ldr	r1, [r7, #16]
 8007586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800758a:	4013      	ands	r3, r2
 800758c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	333c      	adds	r3, #60	; 0x3c
 80075b0:	3304      	adds	r3, #4
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d17b      	bne.n	80076c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	4a61      	ldr	r2, [pc, #388]	; (8007760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	f240 80b9 	bls.w	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 80b3 	beq.w	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fa:	461a      	mov	r2, r3
 80075fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007600:	6093      	str	r3, [r2, #8]
 8007602:	e0a7      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	461a      	mov	r2, r3
 800761c:	2320      	movs	r3, #32
 800761e:	6093      	str	r3, [r2, #8]
 8007620:	e098      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 8093 	bne.w	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4a4b      	ldr	r2, [pc, #300]	; (8007760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d90f      	bls.n	8007656 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	461a      	mov	r2, r3
 800764e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007652:	6093      	str	r3, [r2, #8]
 8007654:	e07e      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	4413      	add	r3, r2
 8007668:	3304      	adds	r3, #4
 800766a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	69da      	ldr	r2, [r3, #28]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	0159      	lsls	r1, r3, #5
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	440b      	add	r3, r1
 8007678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d114      	bne.n	80076b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076a0:	461a      	mov	r2, r3
 80076a2:	2101      	movs	r1, #1
 80076a4:	f006 fd44 	bl	800e130 <USB_EP0_OutStart>
 80076a8:	e006      	b.n	80076b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	441a      	add	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f008 ffbe 	bl	8010640 <HAL_PCD_DataOutStageCallback>
 80076c4:	e046      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4a26      	ldr	r2, [pc, #152]	; (8007764 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d124      	bne.n	8007718 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e4:	461a      	mov	r2, r3
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	6093      	str	r3, [r2, #8]
 80076ec:	e032      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007704:	461a      	mov	r2, r3
 8007706:	2320      	movs	r3, #32
 8007708:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f008 ff95 	bl	8010640 <HAL_PCD_DataOutStageCallback>
 8007716:	e01d      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d114      	bne.n	8007748 <PCD_EP_OutXfrComplete_int+0x1b0>
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d108      	bne.n	8007748 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007740:	461a      	mov	r2, r3
 8007742:	2100      	movs	r1, #0
 8007744:	f006 fcf4 	bl	800e130 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f008 ff76 	bl	8010640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	4f54300a 	.word	0x4f54300a
 8007764:	4f54310a 	.word	0x4f54310a

08007768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	333c      	adds	r3, #60	; 0x3c
 8007780:	3304      	adds	r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4a15      	ldr	r2, [pc, #84]	; (80077f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d90e      	bls.n	80077bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	461a      	mov	r2, r3
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f008 ff2d 	bl	801061c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4a0a      	ldr	r2, [pc, #40]	; (80077f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d90c      	bls.n	80077e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d108      	bne.n	80077e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077dc:	461a      	mov	r2, r3
 80077de:	2101      	movs	r1, #1
 80077e0:	f006 fca6 	bl	800e130 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	4f54300a 	.word	0x4f54300a

080077f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
 8007800:	4613      	mov	r3, r2
 8007802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d107      	bne.n	8007822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007812:	883b      	ldrh	r3, [r7, #0]
 8007814:	0419      	lsls	r1, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	430a      	orrs	r2, r1
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
 8007820:	e028      	b.n	8007874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	e00d      	b.n	8007852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	3340      	adds	r3, #64	; 0x40
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	0c1b      	lsrs	r3, r3, #16
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	3301      	adds	r3, #1
 8007850:	73fb      	strb	r3, [r7, #15]
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	3b01      	subs	r3, #1
 8007858:	429a      	cmp	r2, r3
 800785a:	d3ec      	bcc.n	8007836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800785c:	883b      	ldrh	r3, [r7, #0]
 800785e:	0418      	lsls	r0, r3, #16
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	3b01      	subs	r3, #1
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	4302      	orrs	r2, r0
 800786c:	3340      	adds	r3, #64	; 0x40
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	887a      	ldrh	r2, [r7, #2]
 8007894:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	10000003 	.word	0x10000003

080078ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <HAL_PWREx_ConfigSupply+0x70>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b04      	cmp	r3, #4
 8007916:	d00a      	beq.n	800792e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007918:	4b16      	ldr	r3, [pc, #88]	; (8007974 <HAL_PWREx_ConfigSupply+0x70>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d001      	beq.n	800792a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e01f      	b.n	800796a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e01d      	b.n	800796a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800792e:	4b11      	ldr	r3, [pc, #68]	; (8007974 <HAL_PWREx_ConfigSupply+0x70>)
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f023 0207 	bic.w	r2, r3, #7
 8007936:	490f      	ldr	r1, [pc, #60]	; (8007974 <HAL_PWREx_ConfigSupply+0x70>)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4313      	orrs	r3, r2
 800793c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800793e:	f7fa fd4f 	bl	80023e0 <HAL_GetTick>
 8007942:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007944:	e009      	b.n	800795a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007946:	f7fa fd4b 	bl	80023e0 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007954:	d901      	bls.n	800795a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e007      	b.n	800796a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <HAL_PWREx_ConfigSupply+0x70>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007966:	d1ee      	bne.n	8007946 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	58024800 	.word	0x58024800

08007978 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800797c:	4b05      	ldr	r3, [pc, #20]	; (8007994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	4a04      	ldr	r2, [pc, #16]	; (8007994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007986:	60d3      	str	r3, [r2, #12]
}
 8007988:	bf00      	nop
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	58024800 	.word	0x58024800

08007998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d102      	bne.n	80079ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f000 bc1c 	b.w	80081e4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8087 	beq.w	8007ac8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079ba:	4b9e      	ldr	r3, [pc, #632]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079c4:	4b9b      	ldr	r3, [pc, #620]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b10      	cmp	r3, #16
 80079ce:	d007      	beq.n	80079e0 <HAL_RCC_OscConfig+0x48>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2b18      	cmp	r3, #24
 80079d4:	d110      	bne.n	80079f8 <HAL_RCC_OscConfig+0x60>
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	f003 0303 	and.w	r3, r3, #3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d10b      	bne.n	80079f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e0:	4b94      	ldr	r3, [pc, #592]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d06c      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x12e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d168      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e3f5      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a00:	d106      	bne.n	8007a10 <HAL_RCC_OscConfig+0x78>
 8007a02:	4b8c      	ldr	r3, [pc, #560]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a8b      	ldr	r2, [pc, #556]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e02e      	b.n	8007a6e <HAL_RCC_OscConfig+0xd6>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10c      	bne.n	8007a32 <HAL_RCC_OscConfig+0x9a>
 8007a18:	4b86      	ldr	r3, [pc, #536]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a85      	ldr	r2, [pc, #532]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	4b83      	ldr	r3, [pc, #524]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a82      	ldr	r2, [pc, #520]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	e01d      	b.n	8007a6e <HAL_RCC_OscConfig+0xd6>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a3a:	d10c      	bne.n	8007a56 <HAL_RCC_OscConfig+0xbe>
 8007a3c:	4b7d      	ldr	r3, [pc, #500]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a7c      	ldr	r2, [pc, #496]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	4b7a      	ldr	r3, [pc, #488]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a79      	ldr	r2, [pc, #484]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	e00b      	b.n	8007a6e <HAL_RCC_OscConfig+0xd6>
 8007a56:	4b77      	ldr	r3, [pc, #476]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a76      	ldr	r2, [pc, #472]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	4b74      	ldr	r3, [pc, #464]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a73      	ldr	r2, [pc, #460]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d013      	beq.n	8007a9e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a76:	f7fa fcb3 	bl	80023e0 <HAL_GetTick>
 8007a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a7e:	f7fa fcaf 	bl	80023e0 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b64      	cmp	r3, #100	; 0x64
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e3a9      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a90:	4b68      	ldr	r3, [pc, #416]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCC_OscConfig+0xe6>
 8007a9c:	e014      	b.n	8007ac8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9e:	f7fa fc9f 	bl	80023e0 <HAL_GetTick>
 8007aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007aa4:	e008      	b.n	8007ab8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aa6:	f7fa fc9b 	bl	80023e0 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b64      	cmp	r3, #100	; 0x64
 8007ab2:	d901      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e395      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ab8:	4b5e      	ldr	r3, [pc, #376]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1f0      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x10e>
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80ca 	beq.w	8007c6a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ad6:	4b57      	ldr	r3, [pc, #348]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ade:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ae0:	4b54      	ldr	r3, [pc, #336]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <HAL_RCC_OscConfig+0x164>
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2b18      	cmp	r3, #24
 8007af0:	d156      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x208>
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d151      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007afc:	4b4d      	ldr	r3, [pc, #308]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_RCC_OscConfig+0x17c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e367      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b14:	4b47      	ldr	r3, [pc, #284]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f023 0219 	bic.w	r2, r3, #25
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	4944      	ldr	r1, [pc, #272]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b26:	f7fa fc5b 	bl	80023e0 <HAL_GetTick>
 8007b2a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b2e:	f7fa fc57 	bl	80023e0 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e351      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b40:	4b3c      	ldr	r3, [pc, #240]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0f0      	beq.n	8007b2e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b4c:	f7fa fc78 	bl	8002440 <HAL_GetREVID>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d817      	bhi.n	8007b8a <HAL_RCC_OscConfig+0x1f2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d108      	bne.n	8007b74 <HAL_RCC_OscConfig+0x1dc>
 8007b62:	4b34      	ldr	r3, [pc, #208]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b6a:	4a32      	ldr	r2, [pc, #200]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b72:	e07a      	b.n	8007c6a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b74:	4b2f      	ldr	r3, [pc, #188]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	492c      	ldr	r1, [pc, #176]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b88:	e06f      	b.n	8007c6a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	061b      	lsls	r3, r3, #24
 8007b98:	4926      	ldr	r1, [pc, #152]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b9e:	e064      	b.n	8007c6a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d047      	beq.n	8007c38 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ba8:	4b22      	ldr	r3, [pc, #136]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f023 0219 	bic.w	r2, r3, #25
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	491f      	ldr	r1, [pc, #124]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bba:	f7fa fc11 	bl	80023e0 <HAL_GetTick>
 8007bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bc0:	e008      	b.n	8007bd4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bc2:	f7fa fc0d 	bl	80023e0 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e307      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bd4:	4b17      	ldr	r3, [pc, #92]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f0      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be0:	f7fa fc2e 	bl	8002440 <HAL_GetREVID>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d817      	bhi.n	8007c1e <HAL_RCC_OscConfig+0x286>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d108      	bne.n	8007c08 <HAL_RCC_OscConfig+0x270>
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bfe:	4a0d      	ldr	r2, [pc, #52]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c04:	6053      	str	r3, [r2, #4]
 8007c06:	e030      	b.n	8007c6a <HAL_RCC_OscConfig+0x2d2>
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	031b      	lsls	r3, r3, #12
 8007c16:	4907      	ldr	r1, [pc, #28]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	604b      	str	r3, [r1, #4]
 8007c1c:	e025      	b.n	8007c6a <HAL_RCC_OscConfig+0x2d2>
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	061b      	lsls	r3, r3, #24
 8007c2c:	4901      	ldr	r1, [pc, #4]	; (8007c34 <HAL_RCC_OscConfig+0x29c>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	604b      	str	r3, [r1, #4]
 8007c32:	e01a      	b.n	8007c6a <HAL_RCC_OscConfig+0x2d2>
 8007c34:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c38:	4b9e      	ldr	r3, [pc, #632]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a9d      	ldr	r2, [pc, #628]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c44:	f7fa fbcc 	bl	80023e0 <HAL_GetTick>
 8007c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c4c:	f7fa fbc8 	bl	80023e0 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e2c2      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c5e:	4b95      	ldr	r3, [pc, #596]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f0      	bne.n	8007c4c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0310 	and.w	r3, r3, #16
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 80a9 	beq.w	8007dca <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c78:	4b8e      	ldr	r3, [pc, #568]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c82:	4b8c      	ldr	r3, [pc, #560]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c86:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d007      	beq.n	8007c9e <HAL_RCC_OscConfig+0x306>
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b18      	cmp	r3, #24
 8007c92:	d13a      	bne.n	8007d0a <HAL_RCC_OscConfig+0x372>
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d135      	bne.n	8007d0a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c9e:	4b85      	ldr	r3, [pc, #532]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x31e>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d001      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e296      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cb6:	f7fa fbc3 	bl	8002440 <HAL_GetREVID>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d817      	bhi.n	8007cf4 <HAL_RCC_OscConfig+0x35c>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d108      	bne.n	8007cde <HAL_RCC_OscConfig+0x346>
 8007ccc:	4b79      	ldr	r3, [pc, #484]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007cd4:	4a77      	ldr	r2, [pc, #476]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cda:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cdc:	e075      	b.n	8007dca <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cde:	4b75      	ldr	r3, [pc, #468]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	069b      	lsls	r3, r3, #26
 8007cec:	4971      	ldr	r1, [pc, #452]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cf2:	e06a      	b.n	8007dca <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cf4:	4b6f      	ldr	r3, [pc, #444]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	496c      	ldr	r1, [pc, #432]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d08:	e05f      	b.n	8007dca <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d042      	beq.n	8007d98 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d12:	4b68      	ldr	r3, [pc, #416]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a67      	ldr	r2, [pc, #412]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1e:	f7fa fb5f 	bl	80023e0 <HAL_GetTick>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d26:	f7fa fb5b 	bl	80023e0 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e255      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d38:	4b5e      	ldr	r3, [pc, #376]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0f0      	beq.n	8007d26 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d44:	f7fa fb7c 	bl	8002440 <HAL_GetREVID>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d817      	bhi.n	8007d82 <HAL_RCC_OscConfig+0x3ea>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d108      	bne.n	8007d6c <HAL_RCC_OscConfig+0x3d4>
 8007d5a:	4b56      	ldr	r3, [pc, #344]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d62:	4a54      	ldr	r2, [pc, #336]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d68:	6053      	str	r3, [r2, #4]
 8007d6a:	e02e      	b.n	8007dca <HAL_RCC_OscConfig+0x432>
 8007d6c:	4b51      	ldr	r3, [pc, #324]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	069b      	lsls	r3, r3, #26
 8007d7a:	494e      	ldr	r1, [pc, #312]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	604b      	str	r3, [r1, #4]
 8007d80:	e023      	b.n	8007dca <HAL_RCC_OscConfig+0x432>
 8007d82:	4b4c      	ldr	r3, [pc, #304]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	061b      	lsls	r3, r3, #24
 8007d90:	4948      	ldr	r1, [pc, #288]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60cb      	str	r3, [r1, #12]
 8007d96:	e018      	b.n	8007dca <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d98:	4b46      	ldr	r3, [pc, #280]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a45      	ldr	r2, [pc, #276]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fa fb1c 	bl	80023e0 <HAL_GetTick>
 8007da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007dac:	f7fa fb18 	bl	80023e0 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e212      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007dbe:	4b3d      	ldr	r3, [pc, #244]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1f0      	bne.n	8007dac <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d036      	beq.n	8007e44 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d019      	beq.n	8007e12 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dde:	4b35      	ldr	r3, [pc, #212]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de2:	4a34      	ldr	r2, [pc, #208]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dea:	f7fa faf9 	bl	80023e0 <HAL_GetTick>
 8007dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007df0:	e008      	b.n	8007e04 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007df2:	f7fa faf5 	bl	80023e0 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e1ef      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e04:	4b2b      	ldr	r3, [pc, #172]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0f0      	beq.n	8007df2 <HAL_RCC_OscConfig+0x45a>
 8007e10:	e018      	b.n	8007e44 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e12:	4b28      	ldr	r3, [pc, #160]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e16:	4a27      	ldr	r2, [pc, #156]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1e:	f7fa fadf 	bl	80023e0 <HAL_GetTick>
 8007e22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e24:	e008      	b.n	8007e38 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e26:	f7fa fadb 	bl	80023e0 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d901      	bls.n	8007e38 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e1d5      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e38:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1f0      	bne.n	8007e26 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d039      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d019      	beq.n	8007e8c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e58:	4b16      	ldr	r3, [pc, #88]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e64:	f7fa fabc 	bl	80023e0 <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007e6c:	f7fa fab8 	bl	80023e0 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e1b2      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0f0      	beq.n	8007e6c <HAL_RCC_OscConfig+0x4d4>
 8007e8a:	e01b      	b.n	8007ec4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <HAL_RCC_OscConfig+0x51c>)
 8007e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e98:	f7fa faa2 	bl	80023e0 <HAL_GetTick>
 8007e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e9e:	e00b      	b.n	8007eb8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ea0:	f7fa fa9e 	bl	80023e0 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d904      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e198      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
 8007eb2:	bf00      	nop
 8007eb4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007eb8:	4ba3      	ldr	r3, [pc, #652]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1ed      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8081 	beq.w	8007fd4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ed2:	4b9e      	ldr	r3, [pc, #632]	; (800814c <HAL_RCC_OscConfig+0x7b4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a9d      	ldr	r2, [pc, #628]	; (800814c <HAL_RCC_OscConfig+0x7b4>)
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ede:	f7fa fa7f 	bl	80023e0 <HAL_GetTick>
 8007ee2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ee6:	f7fa fa7b 	bl	80023e0 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b64      	cmp	r3, #100	; 0x64
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e175      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ef8:	4b94      	ldr	r3, [pc, #592]	; (800814c <HAL_RCC_OscConfig+0x7b4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0f0      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d106      	bne.n	8007f1a <HAL_RCC_OscConfig+0x582>
 8007f0c:	4b8e      	ldr	r3, [pc, #568]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f10:	4a8d      	ldr	r2, [pc, #564]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f12:	f043 0301 	orr.w	r3, r3, #1
 8007f16:	6713      	str	r3, [r2, #112]	; 0x70
 8007f18:	e02d      	b.n	8007f76 <HAL_RCC_OscConfig+0x5de>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10c      	bne.n	8007f3c <HAL_RCC_OscConfig+0x5a4>
 8007f22:	4b89      	ldr	r3, [pc, #548]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	4a88      	ldr	r2, [pc, #544]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2e:	4b86      	ldr	r3, [pc, #536]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f32:	4a85      	ldr	r2, [pc, #532]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f34:	f023 0304 	bic.w	r3, r3, #4
 8007f38:	6713      	str	r3, [r2, #112]	; 0x70
 8007f3a:	e01c      	b.n	8007f76 <HAL_RCC_OscConfig+0x5de>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	d10c      	bne.n	8007f5e <HAL_RCC_OscConfig+0x5c6>
 8007f44:	4b80      	ldr	r3, [pc, #512]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f48:	4a7f      	ldr	r2, [pc, #508]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f4a:	f043 0304 	orr.w	r3, r3, #4
 8007f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f50:	4b7d      	ldr	r3, [pc, #500]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	4a7c      	ldr	r2, [pc, #496]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5c:	e00b      	b.n	8007f76 <HAL_RCC_OscConfig+0x5de>
 8007f5e:	4b7a      	ldr	r3, [pc, #488]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	4a79      	ldr	r2, [pc, #484]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f64:	f023 0301 	bic.w	r3, r3, #1
 8007f68:	6713      	str	r3, [r2, #112]	; 0x70
 8007f6a:	4b77      	ldr	r3, [pc, #476]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	4a76      	ldr	r2, [pc, #472]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f70:	f023 0304 	bic.w	r3, r3, #4
 8007f74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d015      	beq.n	8007faa <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7e:	f7fa fa2f 	bl	80023e0 <HAL_GetTick>
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f84:	e00a      	b.n	8007f9c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f86:	f7fa fa2b 	bl	80023e0 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e123      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f9c:	4b6a      	ldr	r3, [pc, #424]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0ee      	beq.n	8007f86 <HAL_RCC_OscConfig+0x5ee>
 8007fa8:	e014      	b.n	8007fd4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007faa:	f7fa fa19 	bl	80023e0 <HAL_GetTick>
 8007fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007fb0:	e00a      	b.n	8007fc8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fb2:	f7fa fa15 	bl	80023e0 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e10d      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007fc8:	4b5f      	ldr	r3, [pc, #380]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1ee      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8102 	beq.w	80081e2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007fde:	4b5a      	ldr	r3, [pc, #360]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fe6:	2b18      	cmp	r3, #24
 8007fe8:	f000 80bd 	beq.w	8008166 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	f040 8095 	bne.w	8008120 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ff6:	4b54      	ldr	r3, [pc, #336]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a53      	ldr	r2, [pc, #332]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8007ffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008002:	f7fa f9ed 	bl	80023e0 <HAL_GetTick>
 8008006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008008:	e008      	b.n	800801c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800800a:	f7fa f9e9 	bl	80023e0 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e0e3      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800801c:	4b4a      	ldr	r3, [pc, #296]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f0      	bne.n	800800a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008028:	4b47      	ldr	r3, [pc, #284]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 800802a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800802c:	4b48      	ldr	r3, [pc, #288]	; (8008150 <HAL_RCC_OscConfig+0x7b8>)
 800802e:	4013      	ands	r3, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008038:	0112      	lsls	r2, r2, #4
 800803a:	430a      	orrs	r2, r1
 800803c:	4942      	ldr	r1, [pc, #264]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 800803e:	4313      	orrs	r3, r2
 8008040:	628b      	str	r3, [r1, #40]	; 0x28
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	3b01      	subs	r3, #1
 8008048:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008050:	3b01      	subs	r3, #1
 8008052:	025b      	lsls	r3, r3, #9
 8008054:	b29b      	uxth	r3, r3
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	3b01      	subs	r3, #1
 800805e:	041b      	lsls	r3, r3, #16
 8008060:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806a:	3b01      	subs	r3, #1
 800806c:	061b      	lsls	r3, r3, #24
 800806e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008072:	4935      	ldr	r1, [pc, #212]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8008074:	4313      	orrs	r3, r2
 8008076:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008078:	4b33      	ldr	r3, [pc, #204]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	4a32      	ldr	r2, [pc, #200]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 800807e:	f023 0301 	bic.w	r3, r3, #1
 8008082:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008084:	4b30      	ldr	r3, [pc, #192]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8008086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008088:	4b32      	ldr	r3, [pc, #200]	; (8008154 <HAL_RCC_OscConfig+0x7bc>)
 800808a:	4013      	ands	r3, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008090:	00d2      	lsls	r2, r2, #3
 8008092:	492d      	ldr	r1, [pc, #180]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8008094:	4313      	orrs	r3, r2
 8008096:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008098:	4b2b      	ldr	r3, [pc, #172]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	f023 020c 	bic.w	r2, r3, #12
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	4928      	ldr	r1, [pc, #160]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80080aa:	4b27      	ldr	r3, [pc, #156]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	f023 0202 	bic.w	r2, r3, #2
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b6:	4924      	ldr	r1, [pc, #144]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80080bc:	4b22      	ldr	r3, [pc, #136]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	4a21      	ldr	r2, [pc, #132]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c8:	4b1f      	ldr	r3, [pc, #124]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80080d4:	4b1c      	ldr	r3, [pc, #112]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	4a1b      	ldr	r2, [pc, #108]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	4a18      	ldr	r2, [pc, #96]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080e6:	f043 0301 	orr.w	r3, r3, #1
 80080ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080ec:	4b16      	ldr	r3, [pc, #88]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a15      	ldr	r2, [pc, #84]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 80080f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f8:	f7fa f972 	bl	80023e0 <HAL_GetTick>
 80080fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080fe:	e008      	b.n	8008112 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008100:	f7fa f96e 	bl	80023e0 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e068      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008112:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0f0      	beq.n	8008100 <HAL_RCC_OscConfig+0x768>
 800811e:	e060      	b.n	80081e2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008120:	4b09      	ldr	r3, [pc, #36]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a08      	ldr	r2, [pc, #32]	; (8008148 <HAL_RCC_OscConfig+0x7b0>)
 8008126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800812a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812c:	f7fa f958 	bl	80023e0 <HAL_GetTick>
 8008130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008132:	e011      	b.n	8008158 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008134:	f7fa f954 	bl	80023e0 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d90a      	bls.n	8008158 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e04e      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
 8008146:	bf00      	nop
 8008148:	58024400 	.word	0x58024400
 800814c:	58024800 	.word	0x58024800
 8008150:	fffffc0c 	.word	0xfffffc0c
 8008154:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008158:	4b24      	ldr	r3, [pc, #144]	; (80081ec <HAL_RCC_OscConfig+0x854>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e7      	bne.n	8008134 <HAL_RCC_OscConfig+0x79c>
 8008164:	e03d      	b.n	80081e2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008166:	4b21      	ldr	r3, [pc, #132]	; (80081ec <HAL_RCC_OscConfig+0x854>)
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800816c:	4b1f      	ldr	r3, [pc, #124]	; (80081ec <HAL_RCC_OscConfig+0x854>)
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b01      	cmp	r3, #1
 8008178:	d031      	beq.n	80081de <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f003 0203 	and.w	r2, r3, #3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008184:	429a      	cmp	r2, r3
 8008186:	d12a      	bne.n	80081de <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	091b      	lsrs	r3, r3, #4
 800818c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008194:	429a      	cmp	r2, r3
 8008196:	d122      	bne.n	80081de <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d11a      	bne.n	80081de <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	0a5b      	lsrs	r3, r3, #9
 80081ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d111      	bne.n	80081de <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d108      	bne.n	80081de <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	0e1b      	lsrs	r3, r3, #24
 80081d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081da:	429a      	cmp	r2, r3
 80081dc:	d001      	beq.n	80081e2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3730      	adds	r7, #48	; 0x30
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	58024400 	.word	0x58024400

080081f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e19c      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008204:	4b8a      	ldr	r3, [pc, #552]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d910      	bls.n	8008234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008212:	4b87      	ldr	r3, [pc, #540]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f023 020f 	bic.w	r2, r3, #15
 800821a:	4985      	ldr	r1, [pc, #532]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	4313      	orrs	r3, r2
 8008220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008222:	4b83      	ldr	r3, [pc, #524]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d001      	beq.n	8008234 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e184      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d010      	beq.n	8008262 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	4b7b      	ldr	r3, [pc, #492]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800824c:	429a      	cmp	r2, r3
 800824e:	d908      	bls.n	8008262 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008250:	4b78      	ldr	r3, [pc, #480]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	4975      	ldr	r1, [pc, #468]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 800825e:	4313      	orrs	r3, r2
 8008260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d010      	beq.n	8008290 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695a      	ldr	r2, [r3, #20]
 8008272:	4b70      	ldr	r3, [pc, #448]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800827a:	429a      	cmp	r2, r3
 800827c:	d908      	bls.n	8008290 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800827e:	4b6d      	ldr	r3, [pc, #436]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	496a      	ldr	r1, [pc, #424]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 800828c:	4313      	orrs	r3, r2
 800828e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	d010      	beq.n	80082be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699a      	ldr	r2, [r3, #24]
 80082a0:	4b64      	ldr	r3, [pc, #400]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d908      	bls.n	80082be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082ac:	4b61      	ldr	r3, [pc, #388]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	495e      	ldr	r1, [pc, #376]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d010      	beq.n	80082ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	69da      	ldr	r2, [r3, #28]
 80082ce:	4b59      	ldr	r3, [pc, #356]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d908      	bls.n	80082ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082da:	4b56      	ldr	r3, [pc, #344]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	4953      	ldr	r1, [pc, #332]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d010      	beq.n	800831a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	4b4d      	ldr	r3, [pc, #308]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	429a      	cmp	r2, r3
 8008306:	d908      	bls.n	800831a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008308:	4b4a      	ldr	r3, [pc, #296]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	f023 020f 	bic.w	r2, r3, #15
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	4947      	ldr	r1, [pc, #284]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008316:	4313      	orrs	r3, r2
 8008318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d055      	beq.n	80083d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008326:	4b43      	ldr	r3, [pc, #268]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	4940      	ldr	r1, [pc, #256]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008334:	4313      	orrs	r3, r2
 8008336:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	2b02      	cmp	r3, #2
 800833e:	d107      	bne.n	8008350 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008340:	4b3c      	ldr	r3, [pc, #240]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d121      	bne.n	8008390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e0f6      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d107      	bne.n	8008368 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008358:	4b36      	ldr	r3, [pc, #216]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d115      	bne.n	8008390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e0ea      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d107      	bne.n	8008380 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008370:	4b30      	ldr	r3, [pc, #192]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008378:	2b00      	cmp	r3, #0
 800837a:	d109      	bne.n	8008390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e0de      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008380:	4b2c      	ldr	r3, [pc, #176]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e0d6      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008390:	4b28      	ldr	r3, [pc, #160]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f023 0207 	bic.w	r2, r3, #7
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	4925      	ldr	r1, [pc, #148]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a2:	f7fa f81d 	bl	80023e0 <HAL_GetTick>
 80083a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083a8:	e00a      	b.n	80083c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083aa:	f7fa f819 	bl	80023e0 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e0be      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083c0:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d1eb      	bne.n	80083aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d010      	beq.n	8008400 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	4b14      	ldr	r3, [pc, #80]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d208      	bcs.n	8008400 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	f023 020f 	bic.w	r2, r3, #15
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	490e      	ldr	r1, [pc, #56]	; (8008434 <HAL_RCC_ClockConfig+0x244>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 030f 	and.w	r3, r3, #15
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d214      	bcs.n	8008438 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800840e:	4b08      	ldr	r3, [pc, #32]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f023 020f 	bic.w	r2, r3, #15
 8008416:	4906      	ldr	r1, [pc, #24]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	4313      	orrs	r3, r2
 800841c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <HAL_RCC_ClockConfig+0x240>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d005      	beq.n	8008438 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e086      	b.n	800853e <HAL_RCC_ClockConfig+0x34e>
 8008430:	52002000 	.word	0x52002000
 8008434:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d010      	beq.n	8008466 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008450:	429a      	cmp	r2, r3
 8008452:	d208      	bcs.n	8008466 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008454:	4b3c      	ldr	r3, [pc, #240]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	4939      	ldr	r1, [pc, #228]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 8008462:	4313      	orrs	r3, r2
 8008464:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d010      	beq.n	8008494 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	695a      	ldr	r2, [r3, #20]
 8008476:	4b34      	ldr	r3, [pc, #208]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800847e:	429a      	cmp	r2, r3
 8008480:	d208      	bcs.n	8008494 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008482:	4b31      	ldr	r3, [pc, #196]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	492e      	ldr	r1, [pc, #184]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 8008490:	4313      	orrs	r3, r2
 8008492:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b00      	cmp	r3, #0
 800849e:	d010      	beq.n	80084c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699a      	ldr	r2, [r3, #24]
 80084a4:	4b28      	ldr	r3, [pc, #160]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d208      	bcs.n	80084c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084b0:	4b25      	ldr	r3, [pc, #148]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4922      	ldr	r1, [pc, #136]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d010      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	69da      	ldr	r2, [r3, #28]
 80084d2:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084da:	429a      	cmp	r2, r3
 80084dc:	d208      	bcs.n	80084f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80084de:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	4917      	ldr	r1, [pc, #92]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80084f0:	f000 f834 	bl	800855c <HAL_RCC_GetSysClockFreq>
 80084f4:	4602      	mov	r2, r0
 80084f6:	4b14      	ldr	r3, [pc, #80]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	4912      	ldr	r1, [pc, #72]	; (800854c <HAL_RCC_ClockConfig+0x35c>)
 8008502:	5ccb      	ldrb	r3, [r1, r3]
 8008504:	f003 031f 	and.w	r3, r3, #31
 8008508:	fa22 f303 	lsr.w	r3, r2, r3
 800850c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800850e:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <HAL_RCC_ClockConfig+0x358>)
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	4a0d      	ldr	r2, [pc, #52]	; (800854c <HAL_RCC_ClockConfig+0x35c>)
 8008518:	5cd3      	ldrb	r3, [r2, r3]
 800851a:	f003 031f 	and.w	r3, r3, #31
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	fa22 f303 	lsr.w	r3, r2, r3
 8008524:	4a0a      	ldr	r2, [pc, #40]	; (8008550 <HAL_RCC_ClockConfig+0x360>)
 8008526:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008528:	4a0a      	ldr	r2, [pc, #40]	; (8008554 <HAL_RCC_ClockConfig+0x364>)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800852e:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <HAL_RCC_ClockConfig+0x368>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f7f9 ff0a 	bl	800234c <HAL_InitTick>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400
 800854c:	08011e60 	.word	0x08011e60
 8008550:	2400000c 	.word	0x2400000c
 8008554:	24000008 	.word	0x24000008
 8008558:	24000010 	.word	0x24000010

0800855c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800855c:	b480      	push	{r7}
 800855e:	b089      	sub	sp, #36	; 0x24
 8008560:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008562:	4bb3      	ldr	r3, [pc, #716]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800856a:	2b18      	cmp	r3, #24
 800856c:	f200 8155 	bhi.w	800881a <HAL_RCC_GetSysClockFreq+0x2be>
 8008570:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	080085dd 	.word	0x080085dd
 800857c:	0800881b 	.word	0x0800881b
 8008580:	0800881b 	.word	0x0800881b
 8008584:	0800881b 	.word	0x0800881b
 8008588:	0800881b 	.word	0x0800881b
 800858c:	0800881b 	.word	0x0800881b
 8008590:	0800881b 	.word	0x0800881b
 8008594:	0800881b 	.word	0x0800881b
 8008598:	08008603 	.word	0x08008603
 800859c:	0800881b 	.word	0x0800881b
 80085a0:	0800881b 	.word	0x0800881b
 80085a4:	0800881b 	.word	0x0800881b
 80085a8:	0800881b 	.word	0x0800881b
 80085ac:	0800881b 	.word	0x0800881b
 80085b0:	0800881b 	.word	0x0800881b
 80085b4:	0800881b 	.word	0x0800881b
 80085b8:	08008609 	.word	0x08008609
 80085bc:	0800881b 	.word	0x0800881b
 80085c0:	0800881b 	.word	0x0800881b
 80085c4:	0800881b 	.word	0x0800881b
 80085c8:	0800881b 	.word	0x0800881b
 80085cc:	0800881b 	.word	0x0800881b
 80085d0:	0800881b 	.word	0x0800881b
 80085d4:	0800881b 	.word	0x0800881b
 80085d8:	0800860f 	.word	0x0800860f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085dc:	4b94      	ldr	r3, [pc, #592]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d009      	beq.n	80085fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085e8:	4b91      	ldr	r3, [pc, #580]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	08db      	lsrs	r3, r3, #3
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	4a90      	ldr	r2, [pc, #576]	; (8008834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085f4:	fa22 f303 	lsr.w	r3, r2, r3
 80085f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80085fa:	e111      	b.n	8008820 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085fc:	4b8d      	ldr	r3, [pc, #564]	; (8008834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085fe:	61bb      	str	r3, [r7, #24]
    break;
 8008600:	e10e      	b.n	8008820 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008602:	4b8d      	ldr	r3, [pc, #564]	; (8008838 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008604:	61bb      	str	r3, [r7, #24]
    break;
 8008606:	e10b      	b.n	8008820 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008608:	4b8c      	ldr	r3, [pc, #560]	; (800883c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800860a:	61bb      	str	r3, [r7, #24]
    break;
 800860c:	e108      	b.n	8008820 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800860e:	4b88      	ldr	r3, [pc, #544]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008618:	4b85      	ldr	r3, [pc, #532]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800861a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861c:	091b      	lsrs	r3, r3, #4
 800861e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008622:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008624:	4b82      	ldr	r3, [pc, #520]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800862e:	4b80      	ldr	r3, [pc, #512]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	08db      	lsrs	r3, r3, #3
 8008634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80e1 	beq.w	8008814 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b02      	cmp	r3, #2
 8008656:	f000 8083 	beq.w	8008760 <HAL_RCC_GetSysClockFreq+0x204>
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b02      	cmp	r3, #2
 800865e:	f200 80a1 	bhi.w	80087a4 <HAL_RCC_GetSysClockFreq+0x248>
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_RCC_GetSysClockFreq+0x114>
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d056      	beq.n	800871c <HAL_RCC_GetSysClockFreq+0x1c0>
 800866e:	e099      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008670:	4b6f      	ldr	r3, [pc, #444]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02d      	beq.n	80086d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800867c:	4b6c      	ldr	r3, [pc, #432]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	08db      	lsrs	r3, r3, #3
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	4a6b      	ldr	r2, [pc, #428]	; (8008834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
 800868c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b62      	ldr	r3, [pc, #392]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008840 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80086d6:	e087      	b.n	80087e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008844 <HAL_RCC_GetSysClockFreq+0x2e8>
 80086e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ea:	4b51      	ldr	r3, [pc, #324]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80086fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008840 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800870e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800871a:	e065      	b.n	80087e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008848 <HAL_RCC_GetSysClockFreq+0x2ec>
 800872a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872e:	4b40      	ldr	r3, [pc, #256]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008742:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008840 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875e:	e043      	b.n	80087e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800884c <HAL_RCC_GetSysClockFreq+0x2f0>
 800876e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008772:	4b2f      	ldr	r3, [pc, #188]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008782:	ed97 6a02 	vldr	s12, [r7, #8]
 8008786:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008840 <HAL_RCC_GetSysClockFreq+0x2e4>
 800878a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087a2:	e021      	b.n	80087e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008848 <HAL_RCC_GetSysClockFreq+0x2ec>
 80087b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b6:	4b1e      	ldr	r3, [pc, #120]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008840 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80087e8:	4b11      	ldr	r3, [pc, #68]	; (8008830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	0a5b      	lsrs	r3, r3, #9
 80087ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f2:	3301      	adds	r3, #1
 80087f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008800:	edd7 6a07 	vldr	s13, [r7, #28]
 8008804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800880c:	ee17 3a90 	vmov	r3, s15
 8008810:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008812:	e005      	b.n	8008820 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	61bb      	str	r3, [r7, #24]
    break;
 8008818:	e002      	b.n	8008820 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800881c:	61bb      	str	r3, [r7, #24]
    break;
 800881e:	bf00      	nop
  }

  return sysclockfreq;
 8008820:	69bb      	ldr	r3, [r7, #24]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3724      	adds	r7, #36	; 0x24
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	58024400 	.word	0x58024400
 8008834:	03d09000 	.word	0x03d09000
 8008838:	003d0900 	.word	0x003d0900
 800883c:	00989680 	.word	0x00989680
 8008840:	46000000 	.word	0x46000000
 8008844:	4c742400 	.word	0x4c742400
 8008848:	4a742400 	.word	0x4a742400
 800884c:	4b189680 	.word	0x4b189680

08008850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008856:	f7ff fe81 	bl	800855c <HAL_RCC_GetSysClockFreq>
 800885a:	4602      	mov	r2, r0
 800885c:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	0a1b      	lsrs	r3, r3, #8
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	490f      	ldr	r1, [pc, #60]	; (80088a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008868:	5ccb      	ldrb	r3, [r1, r3]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	fa22 f303 	lsr.w	r3, r2, r3
 8008872:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800887e:	5cd3      	ldrb	r3, [r2, r3]
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	fa22 f303 	lsr.w	r3, r2, r3
 800888a:	4a07      	ldr	r2, [pc, #28]	; (80088a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800888c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800888e:	4a07      	ldr	r2, [pc, #28]	; (80088ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008894:	4b04      	ldr	r3, [pc, #16]	; (80088a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008896:	681b      	ldr	r3, [r3, #0]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	58024400 	.word	0x58024400
 80088a4:	08011e60 	.word	0x08011e60
 80088a8:	2400000c 	.word	0x2400000c
 80088ac:	24000008 	.word	0x24000008

080088b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088b8:	2300      	movs	r3, #0
 80088ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088bc:	2300      	movs	r3, #0
 80088be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d03f      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088d4:	d02a      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80088d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088da:	d824      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80088dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088e0:	d018      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80088e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088e6:	d81e      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80088ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f0:	d007      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80088f2:	e018      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f4:	4bab      	ldr	r3, [pc, #684]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	4aaa      	ldr	r2, [pc, #680]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008900:	e015      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	2102      	movs	r1, #2
 8008908:	4618      	mov	r0, r3
 800890a:	f001 fff3 	bl	800a8f4 <RCCEx_PLL2_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008912:	e00c      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3324      	adds	r3, #36	; 0x24
 8008918:	2102      	movs	r1, #2
 800891a:	4618      	mov	r0, r3
 800891c:	f002 f89c 	bl	800aa58 <RCCEx_PLL3_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008924:	e003      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
      break;
 800892a:	e000      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800892c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d109      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008934:	4b9b      	ldr	r3, [pc, #620]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008940:	4998      	ldr	r1, [pc, #608]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008942:	4313      	orrs	r3, r2
 8008944:	650b      	str	r3, [r1, #80]	; 0x50
 8008946:	e001      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008954:	2b00      	cmp	r3, #0
 8008956:	d03d      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895c:	2b04      	cmp	r3, #4
 800895e:	d826      	bhi.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	0800897d 	.word	0x0800897d
 800896c:	0800898b 	.word	0x0800898b
 8008970:	0800899d 	.word	0x0800899d
 8008974:	080089b5 	.word	0x080089b5
 8008978:	080089b5 	.word	0x080089b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800897c:	4b89      	ldr	r3, [pc, #548]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	4a88      	ldr	r2, [pc, #544]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008988:	e015      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3304      	adds	r3, #4
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f001 ffaf 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800899a:	e00c      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3324      	adds	r3, #36	; 0x24
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f002 f858 	bl	800aa58 <RCCEx_PLL3_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089ac:	e003      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	75fb      	strb	r3, [r7, #23]
      break;
 80089b2:	e000      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80089b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089bc:	4b79      	ldr	r3, [pc, #484]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c0:	f023 0207 	bic.w	r2, r3, #7
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c8:	4976      	ldr	r1, [pc, #472]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	650b      	str	r3, [r1, #80]	; 0x50
 80089ce:	e001      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d042      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e8:	d02b      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80089ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ee:	d825      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80089f0:	2bc0      	cmp	r3, #192	; 0xc0
 80089f2:	d028      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80089f4:	2bc0      	cmp	r3, #192	; 0xc0
 80089f6:	d821      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80089f8:	2b80      	cmp	r3, #128	; 0x80
 80089fa:	d016      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80089fc:	2b80      	cmp	r3, #128	; 0x80
 80089fe:	d81d      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008a04:	2b40      	cmp	r3, #64	; 0x40
 8008a06:	d007      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008a08:	e018      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a0a:	4b66      	ldr	r3, [pc, #408]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	4a65      	ldr	r2, [pc, #404]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a16:	e017      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 ff68 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008a24:	4603      	mov	r3, r0
 8008a26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a28:	e00e      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3324      	adds	r3, #36	; 0x24
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4618      	mov	r0, r3
 8008a32:	f002 f811 	bl	800aa58 <RCCEx_PLL3_Config>
 8008a36:	4603      	mov	r3, r0
 8008a38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a3a:	e005      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a40:	e002      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008a42:	bf00      	nop
 8008a44:	e000      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008a4e:	4b55      	ldr	r3, [pc, #340]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5a:	4952      	ldr	r1, [pc, #328]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	650b      	str	r3, [r1, #80]	; 0x50
 8008a60:	e001      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d049      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a7c:	d030      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a82:	d82a      	bhi.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a88:	d02c      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008a8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a8e:	d824      	bhi.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a94:	d018      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9a:	d81e      	bhi.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008aa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aa4:	d007      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008aa6:	e018      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa8:	4b3e      	ldr	r3, [pc, #248]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	4a3d      	ldr	r2, [pc, #244]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ab4:	e017      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	2100      	movs	r1, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 ff19 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008ac6:	e00e      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3324      	adds	r3, #36	; 0x24
 8008acc:	2100      	movs	r1, #0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 ffc2 	bl	800aa58 <RCCEx_PLL3_Config>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ad8:	e005      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ade:	e002      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ae0:	bf00      	nop
 8008ae2:	e000      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008aec:	4b2d      	ldr	r3, [pc, #180]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008afa:	492a      	ldr	r1, [pc, #168]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	658b      	str	r3, [r1, #88]	; 0x58
 8008b00:	e001      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d04c      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b1c:	d030      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b22:	d82a      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b28:	d02c      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008b2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b2e:	d824      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b34:	d018      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b3a:	d81e      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b44:	d007      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008b46:	e018      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b48:	4b16      	ldr	r3, [pc, #88]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b54:	e017      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f001 fec9 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008b62:	4603      	mov	r3, r0
 8008b64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b66:	e00e      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3324      	adds	r3, #36	; 0x24
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 ff72 	bl	800aa58 <RCCEx_PLL3_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b78:	e005      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7e:	e002      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008b80:	bf00      	nop
 8008b82:	e000      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10d      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b8c:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b9a:	4902      	ldr	r1, [pc, #8]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	658b      	str	r3, [r1, #88]	; 0x58
 8008ba0:	e004      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008ba2:	bf00      	nop
 8008ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d032      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bbc:	2b30      	cmp	r3, #48	; 0x30
 8008bbe:	d01c      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008bc0:	2b30      	cmp	r3, #48	; 0x30
 8008bc2:	d817      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d00c      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d813      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d016      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008bd0:	2b10      	cmp	r3, #16
 8008bd2:	d10f      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd4:	4baf      	ldr	r3, [pc, #700]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	4aae      	ldr	r2, [pc, #696]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008be0:	e00e      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3304      	adds	r3, #4
 8008be6:	2102      	movs	r1, #2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fe83 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008bf2:	e005      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf8:	e002      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008bfa:	bf00      	nop
 8008bfc:	e000      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d109      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c06:	4ba3      	ldr	r3, [pc, #652]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c12:	49a0      	ldr	r1, [pc, #640]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c18:	e001      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d047      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c32:	d030      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c38:	d82a      	bhi.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008c3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c3e:	d02c      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008c40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c44:	d824      	bhi.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4a:	d018      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c50:	d81e      	bhi.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c5a:	d007      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008c5c:	e018      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c5e:	4b8d      	ldr	r3, [pc, #564]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	4a8c      	ldr	r2, [pc, #560]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c6a:	e017      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 fe3e 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c7c:	e00e      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3324      	adds	r3, #36	; 0x24
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 fee7 	bl	800aa58 <RCCEx_PLL3_Config>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c8e:	e005      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	75fb      	strb	r3, [r7, #23]
      break;
 8008c94:	e002      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008c96:	bf00      	nop
 8008c98:	e000      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ca2:	4b7c      	ldr	r3, [pc, #496]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cae:	4979      	ldr	r1, [pc, #484]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	650b      	str	r3, [r1, #80]	; 0x50
 8008cb4:	e001      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d049      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cce:	d02e      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cd4:	d828      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cda:	d02a      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008cdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ce0:	d822      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008ce2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ce6:	d026      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008ce8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008cec:	d81c      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf2:	d010      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf8:	d816      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d01d      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d02:	d111      	bne.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3304      	adds	r3, #4
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 fdf2 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008d10:	4603      	mov	r3, r0
 8008d12:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008d14:	e012      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3324      	adds	r3, #36	; 0x24
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 fe9b 	bl	800aa58 <RCCEx_PLL3_Config>
 8008d22:	4603      	mov	r3, r0
 8008d24:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008d26:	e009      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2c:	e006      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008d2e:	bf00      	nop
 8008d30:	e004      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008d32:	bf00      	nop
 8008d34:	e002      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008d36:	bf00      	nop
 8008d38:	e000      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d109      	bne.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d42:	4b54      	ldr	r3, [pc, #336]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d46:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d4e:	4951      	ldr	r1, [pc, #324]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	650b      	str	r3, [r1, #80]	; 0x50
 8008d54:	e001      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d04b      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d70:	d02e      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d76:	d828      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7c:	d02a      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d82:	d822      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008d84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d88:	d026      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008d8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d8e:	d81c      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d94:	d010      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d9a:	d816      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01d      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008da4:	d111      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3304      	adds	r3, #4
 8008daa:	2101      	movs	r1, #1
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 fda1 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008db2:	4603      	mov	r3, r0
 8008db4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008db6:	e012      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3324      	adds	r3, #36	; 0x24
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 fe4a 	bl	800aa58 <RCCEx_PLL3_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008dc8:	e009      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dce:	e006      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008dd0:	bf00      	nop
 8008dd2:	e004      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008de4:	4b2b      	ldr	r3, [pc, #172]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008df2:	4928      	ldr	r1, [pc, #160]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	658b      	str	r3, [r1, #88]	; 0x58
 8008df8:	e001      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d02f      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e12:	d00e      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e18:	d814      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d015      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e22:	d10f      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e24:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a1a      	ldr	r2, [pc, #104]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008e30:	e00c      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3304      	adds	r3, #4
 8008e36:	2101      	movs	r1, #1
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 fd5b 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008e42:	e003      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
      break;
 8008e48:	e000      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e52:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e5e:	490d      	ldr	r1, [pc, #52]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	650b      	str	r3, [r1, #80]	; 0x50
 8008e64:	e001      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d033      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d81c      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008ebf 	.word	0x08008ebf
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008ea7 	.word	0x08008ea7
 8008e90:	08008ebf 	.word	0x08008ebf
 8008e94:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e98:	4bb8      	ldr	r3, [pc, #736]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	4ab7      	ldr	r2, [pc, #732]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ea4:	e00c      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	2102      	movs	r1, #2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 fd21 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008eb6:	e003      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
      break;
 8008ebc:	e000      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d109      	bne.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ec6:	4bad      	ldr	r3, [pc, #692]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eca:	f023 0203 	bic.w	r2, r3, #3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed2:	49aa      	ldr	r1, [pc, #680]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ed8:	e001      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8086 	beq.w	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008eec:	4ba4      	ldr	r3, [pc, #656]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4aa3      	ldr	r2, [pc, #652]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ef8:	f7f9 fa72 	bl	80023e0 <HAL_GetTick>
 8008efc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008efe:	e009      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f00:	f7f9 fa6e 	bl	80023e0 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	2b64      	cmp	r3, #100	; 0x64
 8008f0c:	d902      	bls.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	75fb      	strb	r3, [r7, #23]
        break;
 8008f12:	e005      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f14:	4b9a      	ldr	r3, [pc, #616]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0ef      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d166      	bne.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f26:	4b95      	ldr	r3, [pc, #596]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f30:	4053      	eors	r3, r2
 8008f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d013      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f3a:	4b90      	ldr	r3, [pc, #576]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f44:	4b8d      	ldr	r3, [pc, #564]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f48:	4a8c      	ldr	r2, [pc, #560]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f50:	4b8a      	ldr	r3, [pc, #552]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f54:	4a89      	ldr	r2, [pc, #548]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f5c:	4a87      	ldr	r2, [pc, #540]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6c:	d115      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6e:	f7f9 fa37 	bl	80023e0 <HAL_GetTick>
 8008f72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f74:	e00b      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f76:	f7f9 fa33 	bl	80023e0 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d902      	bls.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	75fb      	strb	r3, [r7, #23]
            break;
 8008f8c:	e005      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f8e:	4b7b      	ldr	r3, [pc, #492]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0ed      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d126      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fae:	d10d      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008fb0:	4b72      	ldr	r3, [pc, #456]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fbe:	0919      	lsrs	r1, r3, #4
 8008fc0:	4b70      	ldr	r3, [pc, #448]	; (8009184 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008fc2:	400b      	ands	r3, r1
 8008fc4:	496d      	ldr	r1, [pc, #436]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	610b      	str	r3, [r1, #16]
 8008fca:	e005      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008fcc:	4b6b      	ldr	r3, [pc, #428]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	4a6a      	ldr	r2, [pc, #424]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fd6:	6113      	str	r3, [r2, #16]
 8008fd8:	4b68      	ldr	r3, [pc, #416]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fe6:	4965      	ldr	r1, [pc, #404]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	670b      	str	r3, [r1, #112]	; 0x70
 8008fec:	e004      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	75bb      	strb	r3, [r7, #22]
 8008ff2:	e001      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d07e      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009008:	2b28      	cmp	r3, #40	; 0x28
 800900a:	d867      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800900c:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	080090e3 	.word	0x080090e3
 8009018:	080090dd 	.word	0x080090dd
 800901c:	080090dd 	.word	0x080090dd
 8009020:	080090dd 	.word	0x080090dd
 8009024:	080090dd 	.word	0x080090dd
 8009028:	080090dd 	.word	0x080090dd
 800902c:	080090dd 	.word	0x080090dd
 8009030:	080090dd 	.word	0x080090dd
 8009034:	080090b9 	.word	0x080090b9
 8009038:	080090dd 	.word	0x080090dd
 800903c:	080090dd 	.word	0x080090dd
 8009040:	080090dd 	.word	0x080090dd
 8009044:	080090dd 	.word	0x080090dd
 8009048:	080090dd 	.word	0x080090dd
 800904c:	080090dd 	.word	0x080090dd
 8009050:	080090dd 	.word	0x080090dd
 8009054:	080090cb 	.word	0x080090cb
 8009058:	080090dd 	.word	0x080090dd
 800905c:	080090dd 	.word	0x080090dd
 8009060:	080090dd 	.word	0x080090dd
 8009064:	080090dd 	.word	0x080090dd
 8009068:	080090dd 	.word	0x080090dd
 800906c:	080090dd 	.word	0x080090dd
 8009070:	080090dd 	.word	0x080090dd
 8009074:	080090e3 	.word	0x080090e3
 8009078:	080090dd 	.word	0x080090dd
 800907c:	080090dd 	.word	0x080090dd
 8009080:	080090dd 	.word	0x080090dd
 8009084:	080090dd 	.word	0x080090dd
 8009088:	080090dd 	.word	0x080090dd
 800908c:	080090dd 	.word	0x080090dd
 8009090:	080090dd 	.word	0x080090dd
 8009094:	080090e3 	.word	0x080090e3
 8009098:	080090dd 	.word	0x080090dd
 800909c:	080090dd 	.word	0x080090dd
 80090a0:	080090dd 	.word	0x080090dd
 80090a4:	080090dd 	.word	0x080090dd
 80090a8:	080090dd 	.word	0x080090dd
 80090ac:	080090dd 	.word	0x080090dd
 80090b0:	080090dd 	.word	0x080090dd
 80090b4:	080090e3 	.word	0x080090e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	2101      	movs	r1, #1
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fc18 	bl	800a8f4 <RCCEx_PLL2_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80090c8:	e00c      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3324      	adds	r3, #36	; 0x24
 80090ce:	2101      	movs	r1, #1
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 fcc1 	bl	800aa58 <RCCEx_PLL3_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80090da:	e003      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	75fb      	strb	r3, [r7, #23]
      break;
 80090e0:	e000      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80090e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d109      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090ea:	4b24      	ldr	r3, [pc, #144]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090f6:	4921      	ldr	r1, [pc, #132]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	654b      	str	r3, [r1, #84]	; 0x54
 80090fc:	e001      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d03e      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009112:	2b05      	cmp	r3, #5
 8009114:	d820      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009116:	a201      	add	r2, pc, #4	; (adr r2, 800911c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	0800915f 	.word	0x0800915f
 8009120:	08009135 	.word	0x08009135
 8009124:	08009147 	.word	0x08009147
 8009128:	0800915f 	.word	0x0800915f
 800912c:	0800915f 	.word	0x0800915f
 8009130:	0800915f 	.word	0x0800915f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3304      	adds	r3, #4
 8009138:	2101      	movs	r1, #1
 800913a:	4618      	mov	r0, r3
 800913c:	f001 fbda 	bl	800a8f4 <RCCEx_PLL2_Config>
 8009140:	4603      	mov	r3, r0
 8009142:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009144:	e00c      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3324      	adds	r3, #36	; 0x24
 800914a:	2101      	movs	r1, #1
 800914c:	4618      	mov	r0, r3
 800914e:	f001 fc83 	bl	800aa58 <RCCEx_PLL3_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009156:	e003      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
      break;
 800915c:	e000      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800915e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d110      	bne.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916a:	f023 0207 	bic.w	r2, r3, #7
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009172:	4902      	ldr	r1, [pc, #8]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009174:	4313      	orrs	r3, r2
 8009176:	654b      	str	r3, [r1, #84]	; 0x54
 8009178:	e008      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800917a:	bf00      	nop
 800917c:	58024400 	.word	0x58024400
 8009180:	58024800 	.word	0x58024800
 8009184:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d039      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919e:	2b05      	cmp	r3, #5
 80091a0:	d820      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091eb 	.word	0x080091eb
 80091ac:	080091c1 	.word	0x080091c1
 80091b0:	080091d3 	.word	0x080091d3
 80091b4:	080091eb 	.word	0x080091eb
 80091b8:	080091eb 	.word	0x080091eb
 80091bc:	080091eb 	.word	0x080091eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	2101      	movs	r1, #1
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 fb94 	bl	800a8f4 <RCCEx_PLL2_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80091d0:	e00c      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3324      	adds	r3, #36	; 0x24
 80091d6:	2101      	movs	r1, #1
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 fc3d 	bl	800aa58 <RCCEx_PLL3_Config>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80091e2:	e003      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
      break;
 80091e8:	e000      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80091ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10a      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091f2:	4bb7      	ldr	r3, [pc, #732]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80091f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f6:	f023 0207 	bic.w	r2, r3, #7
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	49b3      	ldr	r1, [pc, #716]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009202:	4313      	orrs	r3, r2
 8009204:	658b      	str	r3, [r1, #88]	; 0x58
 8009206:	e001      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d04b      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800921e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009222:	d02e      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009228:	d828      	bhi.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800922a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922e:	d02a      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009234:	d822      	bhi.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009236:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800923a:	d026      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800923c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009240:	d81c      	bhi.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009246:	d010      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800924c:	d816      	bhi.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d01d      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009256:	d111      	bne.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3304      	adds	r3, #4
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f001 fb48 	bl	800a8f4 <RCCEx_PLL2_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009268:	e012      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3324      	adds	r3, #36	; 0x24
 800926e:	2102      	movs	r1, #2
 8009270:	4618      	mov	r0, r3
 8009272:	f001 fbf1 	bl	800aa58 <RCCEx_PLL3_Config>
 8009276:	4603      	mov	r3, r0
 8009278:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800927a:	e009      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	75fb      	strb	r3, [r7, #23]
      break;
 8009280:	e006      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009282:	bf00      	nop
 8009284:	e004      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009286:	bf00      	nop
 8009288:	e002      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800928a:	bf00      	nop
 800928c:	e000      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800928e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10a      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009296:	4b8e      	ldr	r3, [pc, #568]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a4:	498a      	ldr	r1, [pc, #552]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	654b      	str	r3, [r1, #84]	; 0x54
 80092aa:	e001      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
 80092ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d04b      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80092c6:	d02e      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80092c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80092cc:	d828      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80092ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d2:	d02a      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80092d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d8:	d822      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80092da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092de:	d026      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80092e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092e4:	d81c      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80092e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ea:	d010      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80092ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092f0:	d816      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01d      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80092f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092fa:	d111      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3304      	adds	r3, #4
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f001 faf6 	bl	800a8f4 <RCCEx_PLL2_Config>
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800930c:	e012      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3324      	adds	r3, #36	; 0x24
 8009312:	2102      	movs	r1, #2
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fb9f 	bl	800aa58 <RCCEx_PLL3_Config>
 800931a:	4603      	mov	r3, r0
 800931c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800931e:	e009      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	75fb      	strb	r3, [r7, #23]
      break;
 8009324:	e006      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009326:	bf00      	nop
 8009328:	e004      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800932a:	bf00      	nop
 800932c:	e002      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800932e:	bf00      	nop
 8009330:	e000      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800933a:	4b65      	ldr	r3, [pc, #404]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800933c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009348:	4961      	ldr	r1, [pc, #388]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800934a:	4313      	orrs	r3, r2
 800934c:	658b      	str	r3, [r1, #88]	; 0x58
 800934e:	e001      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800935c:	2b00      	cmp	r3, #0
 800935e:	d04b      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009366:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800936a:	d02e      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800936c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009370:	d828      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009376:	d02a      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800937c:	d822      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800937e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009382:	d026      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009384:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009388:	d81c      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800938a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800938e:	d010      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009394:	d816      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009396:	2b00      	cmp	r3, #0
 8009398:	d01d      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800939a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939e:	d111      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3304      	adds	r3, #4
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 faa4 	bl	800a8f4 <RCCEx_PLL2_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80093b0:	e012      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3324      	adds	r3, #36	; 0x24
 80093b6:	2102      	movs	r1, #2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f001 fb4d 	bl	800aa58 <RCCEx_PLL3_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80093c2:	e009      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	75fb      	strb	r3, [r7, #23]
      break;
 80093c8:	e006      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80093ca:	bf00      	nop
 80093cc:	e004      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80093ce:	bf00      	nop
 80093d0:	e002      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80093d2:	bf00      	nop
 80093d4:	e000      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80093d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80093de:	4b3c      	ldr	r3, [pc, #240]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093ec:	4938      	ldr	r1, [pc, #224]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	658b      	str	r3, [r1, #88]	; 0x58
 80093f2:	e001      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d01a      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800940a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800940e:	d10a      	bne.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3324      	adds	r3, #36	; 0x24
 8009414:	2102      	movs	r1, #2
 8009416:	4618      	mov	r0, r3
 8009418:	f001 fb1e 	bl	800aa58 <RCCEx_PLL3_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009426:	4b2a      	ldr	r3, [pc, #168]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009434:	4926      	ldr	r1, [pc, #152]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009436:	4313      	orrs	r3, r2
 8009438:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01a      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800944c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009450:	d10a      	bne.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3324      	adds	r3, #36	; 0x24
 8009456:	2102      	movs	r1, #2
 8009458:	4618      	mov	r0, r3
 800945a:	f001 fafd 	bl	800aa58 <RCCEx_PLL3_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009468:	4b19      	ldr	r3, [pc, #100]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800946a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009476:	4916      	ldr	r1, [pc, #88]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009478:	4313      	orrs	r3, r2
 800947a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d036      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800948e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009492:	d01f      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009498:	d817      	bhi.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800949e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a2:	d009      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80094a4:	e011      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3304      	adds	r3, #4
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f001 fa21 	bl	800a8f4 <RCCEx_PLL2_Config>
 80094b2:	4603      	mov	r3, r0
 80094b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80094b6:	e00e      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3324      	adds	r3, #36	; 0x24
 80094bc:	2102      	movs	r1, #2
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 faca 	bl	800aa58 <RCCEx_PLL3_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80094c8:	e005      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
      break;
 80094ce:	e002      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80094d0:	58024400 	.word	0x58024400
      break;
 80094d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10a      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094dc:	4b93      	ldr	r3, [pc, #588]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094ea:	4990      	ldr	r1, [pc, #576]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	658b      	str	r3, [r1, #88]	; 0x58
 80094f0:	e001      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d033      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009508:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800950c:	d01c      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800950e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009512:	d816      	bhi.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009518:	d003      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800951a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800951e:	d007      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009520:	e00f      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009522:	4b82      	ldr	r3, [pc, #520]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	4a81      	ldr	r2, [pc, #516]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800952c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800952e:	e00c      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3324      	adds	r3, #36	; 0x24
 8009534:	2101      	movs	r1, #1
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fa8e 	bl	800aa58 <RCCEx_PLL3_Config>
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009540:	e003      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	75fb      	strb	r3, [r7, #23]
      break;
 8009546:	e000      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009550:	4b76      	ldr	r3, [pc, #472]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800955e:	4973      	ldr	r1, [pc, #460]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009560:	4313      	orrs	r3, r2
 8009562:	654b      	str	r3, [r1, #84]	; 0x54
 8009564:	e001      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d029      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800957e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009582:	d007      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009584:	e00f      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009586:	4b69      	ldr	r3, [pc, #420]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	4a68      	ldr	r2, [pc, #416]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800958c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009592:	e00b      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	2102      	movs	r1, #2
 800959a:	4618      	mov	r0, r3
 800959c:	f001 f9aa 	bl	800a8f4 <RCCEx_PLL2_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80095a4:	e002      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	75fb      	strb	r3, [r7, #23]
      break;
 80095aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095b2:	4b5e      	ldr	r3, [pc, #376]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80095b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095be:	495b      	ldr	r1, [pc, #364]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80095c4:	e001      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	3324      	adds	r3, #36	; 0x24
 80095da:	2102      	movs	r1, #2
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 fa3b 	bl	800aa58 <RCCEx_PLL3_Config>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d030      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009600:	d017      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009606:	d811      	bhi.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800960c:	d013      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800960e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009612:	d80b      	bhi.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009614:	2b00      	cmp	r3, #0
 8009616:	d010      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961c:	d106      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800961e:	4b43      	ldr	r3, [pc, #268]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	4a42      	ldr	r2, [pc, #264]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800962a:	e007      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
      break;
 8009630:	e004      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009632:	bf00      	nop
 8009634:	e002      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009636:	bf00      	nop
 8009638:	e000      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800963a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009642:	4b3a      	ldr	r3, [pc, #232]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964e:	4937      	ldr	r1, [pc, #220]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009650:	4313      	orrs	r3, r2
 8009652:	654b      	str	r3, [r1, #84]	; 0x54
 8009654:	e001      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d008      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009666:	4b31      	ldr	r3, [pc, #196]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800966a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	492e      	ldr	r1, [pc, #184]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009674:	4313      	orrs	r3, r2
 8009676:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d009      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009684:	4b29      	ldr	r3, [pc, #164]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009692:	4926      	ldr	r1, [pc, #152]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009694:	4313      	orrs	r3, r2
 8009696:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d008      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096a4:	4b21      	ldr	r3, [pc, #132]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096b0:	491e      	ldr	r1, [pc, #120]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00d      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096c2:	4b1a      	ldr	r3, [pc, #104]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	4a19      	ldr	r2, [pc, #100]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096cc:	6113      	str	r3, [r2, #16]
 80096ce:	4b17      	ldr	r3, [pc, #92]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096d0:	691a      	ldr	r2, [r3, #16]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80096d8:	4914      	ldr	r1, [pc, #80]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	da08      	bge.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f2:	490e      	ldr	r1, [pc, #56]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009704:	4b09      	ldr	r3, [pc, #36]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009708:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009712:	4906      	ldr	r1, [pc, #24]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009714:	4313      	orrs	r3, r2
 8009716:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009718:	7dbb      	ldrb	r3, [r7, #22]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
}
 8009724:	4618      	mov	r0, r3
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	58024400 	.word	0x58024400

08009730 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b090      	sub	sp, #64	; 0x40
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973e:	f040 8095 	bne.w	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009742:	4bae      	ldr	r3, [pc, #696]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	633b      	str	r3, [r7, #48]	; 0x30
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	2b04      	cmp	r3, #4
 8009750:	f200 8088 	bhi.w	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009754:	a201      	add	r2, pc, #4	; (adr r2, 800975c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	08009771 	.word	0x08009771
 8009760:	08009799 	.word	0x08009799
 8009764:	080097c1 	.word	0x080097c1
 8009768:	0800985d 	.word	0x0800985d
 800976c:	080097e9 	.word	0x080097e9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009770:	4ba2      	ldr	r3, [pc, #648]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800977c:	d108      	bne.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800977e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009782:	4618      	mov	r0, r3
 8009784:	f000 ff64 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800978c:	f000 bc95 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009794:	f000 bc91 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009798:	4b98      	ldr	r3, [pc, #608]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097a4:	d108      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097a6:	f107 0318 	add.w	r3, r7, #24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fca8 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097b4:	f000 bc81 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097bc:	f000 bc7d 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097c0:	4b8e      	ldr	r3, [pc, #568]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097cc:	d108      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ce:	f107 030c 	add.w	r3, r7, #12
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fde8 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097dc:	f000 bc6d 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097e4:	f000 bc69 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097e8:	4b84      	ldr	r3, [pc, #528]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80097ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097f2:	4b82      	ldr	r3, [pc, #520]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d10c      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009804:	4b7d      	ldr	r3, [pc, #500]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	08db      	lsrs	r3, r3, #3
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	4a7c      	ldr	r2, [pc, #496]	; (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009810:	fa22 f303 	lsr.w	r3, r2, r3
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009816:	e01f      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009818:	4b78      	ldr	r3, [pc, #480]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009824:	d106      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800982c:	d102      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800982e:	4b75      	ldr	r3, [pc, #468]	; (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009832:	e011      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009834:	4b71      	ldr	r3, [pc, #452]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800983c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009840:	d106      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009848:	d102      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800984a:	4b6f      	ldr	r3, [pc, #444]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800984c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800984e:	e003      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009854:	f000 bc31 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009858:	f000 bc2f 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800985c:	4b6b      	ldr	r3, [pc, #428]	; (8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009860:	f000 bc2b 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009868:	f000 bc27 	b.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009872:	f040 8095 	bne.w	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009876:	4b61      	ldr	r3, [pc, #388]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800987e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009886:	d04d      	beq.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800988e:	f200 8084 	bhi.w	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	2bc0      	cmp	r3, #192	; 0xc0
 8009896:	d07d      	beq.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	2bc0      	cmp	r3, #192	; 0xc0
 800989c:	d87d      	bhi.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	2b80      	cmp	r3, #128	; 0x80
 80098a2:	d02d      	beq.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	2b80      	cmp	r3, #128	; 0x80
 80098a8:	d877      	bhi.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	2b40      	cmp	r3, #64	; 0x40
 80098b4:	d012      	beq.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80098b6:	e070      	b.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098b8:	4b50      	ldr	r3, [pc, #320]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098c4:	d107      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fec0 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098d4:	e3f1      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098da:	e3ee      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098dc:	4b47      	ldr	r3, [pc, #284]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098e8:	d107      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ea:	f107 0318 	add.w	r3, r7, #24
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fc06 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098f8:	e3df      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098fe:	e3dc      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009900:	4b3e      	ldr	r3, [pc, #248]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800990c:	d107      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800990e:	f107 030c 	add.w	r3, r7, #12
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fd48 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800991c:	e3cd      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009922:	e3ca      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009924:	4b35      	ldr	r3, [pc, #212]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800992c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800992e:	4b33      	ldr	r3, [pc, #204]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0304 	and.w	r3, r3, #4
 8009936:	2b04      	cmp	r3, #4
 8009938:	d10c      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d109      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009940:	4b2e      	ldr	r3, [pc, #184]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	08db      	lsrs	r3, r3, #3
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	4a2d      	ldr	r2, [pc, #180]	; (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
 8009950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009952:	e01e      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009954:	4b29      	ldr	r3, [pc, #164]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800995c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009960:	d106      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009968:	d102      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800996a:	4b26      	ldr	r3, [pc, #152]	; (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800996e:	e010      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009970:	4b22      	ldr	r3, [pc, #136]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800997c:	d106      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009984:	d102      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009986:	4b20      	ldr	r3, [pc, #128]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800998a:	e002      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009990:	e393      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009992:	e392      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009994:	4b1d      	ldr	r3, [pc, #116]	; (8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009998:	e38f      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800999e:	e38c      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a6:	f040 80a7 	bne.w	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80099aa:	4b14      	ldr	r3, [pc, #80]	; (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80099ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80099b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099ba:	d05f      	beq.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099c2:	f200 8096 	bhi.w	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099cc:	f000 808e 	beq.w	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099d6:	f200 808c 	bhi.w	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099e0:	d03a      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099e8:	f200 8083 	bhi.w	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00e      	beq.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099f8:	d01c      	beq.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80099fa:	e07a      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80099fc:	58024400 	.word	0x58024400
 8009a00:	03d09000 	.word	0x03d09000
 8009a04:	003d0900 	.word	0x003d0900
 8009a08:	00989680 	.word	0x00989680
 8009a0c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a10:	4baa      	ldr	r3, [pc, #680]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fe14 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a2c:	e345      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a32:	e342      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a34:	4ba1      	ldr	r3, [pc, #644]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a40:	d107      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a42:	f107 0318 	add.w	r3, r7, #24
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fb5a 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a50:	e333      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a56:	e330      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a58:	4b98      	ldr	r3, [pc, #608]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a64:	d107      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a66:	f107 030c 	add.w	r3, r7, #12
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fc9c 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a74:	e321      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a7a:	e31e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a7c:	4b8f      	ldr	r3, [pc, #572]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a86:	4b8d      	ldr	r3, [pc, #564]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d10c      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d109      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a98:	4b88      	ldr	r3, [pc, #544]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	08db      	lsrs	r3, r3, #3
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	4a87      	ldr	r2, [pc, #540]	; (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aaa:	e01e      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aac:	4b83      	ldr	r3, [pc, #524]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ab8:	d106      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ac0:	d102      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ac2:	4b80      	ldr	r3, [pc, #512]	; (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac6:	e010      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ac8:	4b7c      	ldr	r3, [pc, #496]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad4:	d106      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009adc:	d102      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009ade:	4b7a      	ldr	r3, [pc, #488]	; (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ae2:	e002      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ae8:	e2e7      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009aea:	e2e6      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009aec:	4b77      	ldr	r3, [pc, #476]	; (8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af0:	e2e3      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af6:	e2e0      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009afe:	f040 809c 	bne.w	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009b02:	4b6e      	ldr	r3, [pc, #440]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b06:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009b0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b12:	d054      	beq.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b1a:	f200 808b 	bhi.w	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b24:	f000 8083 	beq.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b2e:	f200 8081 	bhi.w	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b38:	d02f      	beq.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b40:	d878      	bhi.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d004      	beq.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b4e:	d012      	beq.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009b50:	e070      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b52:	4b5a      	ldr	r3, [pc, #360]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b5e:	d107      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fd73 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b6e:	e2a4      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b74:	e2a1      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b76:	4b51      	ldr	r3, [pc, #324]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b82:	d107      	bne.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b84:	f107 0318 	add.w	r3, r7, #24
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 fab9 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009b92:	e292      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b98:	e28f      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b9a:	4b48      	ldr	r3, [pc, #288]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ba6:	d107      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ba8:	f107 030c 	add.w	r3, r7, #12
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fbfb 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bb6:	e280      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bbc:	e27d      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bbe:	4b3f      	ldr	r3, [pc, #252]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bc8:	4b3c      	ldr	r3, [pc, #240]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d10c      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d109      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bda:	4b38      	ldr	r3, [pc, #224]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	08db      	lsrs	r3, r3, #3
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	4a36      	ldr	r2, [pc, #216]	; (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009be6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bec:	e01e      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bee:	4b33      	ldr	r3, [pc, #204]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bfa:	d106      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c02:	d102      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c04:	4b2f      	ldr	r3, [pc, #188]	; (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c08:	e010      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c0a:	4b2c      	ldr	r3, [pc, #176]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c16:	d106      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c1e:	d102      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c20:	4b29      	ldr	r3, [pc, #164]	; (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c24:	e002      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009c2a:	e246      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c2c:	e245      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c2e:	4b27      	ldr	r3, [pc, #156]	; (8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c32:	e242      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c38:	e23f      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c40:	f040 80a8 	bne.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009c44:	4b1d      	ldr	r3, [pc, #116]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c48:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009c4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c54:	d060      	beq.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5c:	f200 8097 	bhi.w	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c66:	f000 808f 	beq.w	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c70:	f200 808d 	bhi.w	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7a:	d03b      	beq.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c82:	f200 8084 	bhi.w	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c92:	d01d      	beq.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009c94:	e07b      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ca2:	d107      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fcd1 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cb2:	e202      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cb8:	e1ff      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009cba:	bf00      	nop
 8009cbc:	58024400 	.word	0x58024400
 8009cc0:	03d09000 	.word	0x03d09000
 8009cc4:	003d0900 	.word	0x003d0900
 8009cc8:	00989680 	.word	0x00989680
 8009ccc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cd0:	4ba3      	ldr	r3, [pc, #652]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cdc:	d107      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cde:	f107 0318 	add.w	r3, r7, #24
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 fa0c 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cec:	e1e5      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cf2:	e1e2      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cf4:	4b9a      	ldr	r3, [pc, #616]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d00:	d107      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d02:	f107 030c 	add.w	r3, r7, #12
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fb4e 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d10:	e1d3      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d16:	e1d0      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d18:	4b91      	ldr	r3, [pc, #580]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d22:	4b8f      	ldr	r3, [pc, #572]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d10c      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d34:	4b8a      	ldr	r3, [pc, #552]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	08db      	lsrs	r3, r3, #3
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	4a89      	ldr	r2, [pc, #548]	; (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d40:	fa22 f303 	lsr.w	r3, r2, r3
 8009d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d46:	e01e      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d48:	4b85      	ldr	r3, [pc, #532]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d54:	d106      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d5c:	d102      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009d5e:	4b82      	ldr	r3, [pc, #520]	; (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d62:	e010      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d64:	4b7e      	ldr	r3, [pc, #504]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d70:	d106      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d78:	d102      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d7a:	4b7c      	ldr	r3, [pc, #496]	; (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d7e:	e002      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d84:	e199      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d86:	e198      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d88:	4b79      	ldr	r3, [pc, #484]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8c:	e195      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d92:	e192      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d9a:	d173      	bne.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009d9c:	4b70      	ldr	r3, [pc, #448]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009da4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dac:	d02f      	beq.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8009dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db4:	d863      	bhi.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc2:	d012      	beq.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009dc4:	e05b      	b.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dc6:	4b66      	ldr	r3, [pc, #408]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dd2:	d107      	bne.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dd4:	f107 0318 	add.w	r3, r7, #24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f991 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009de2:	e16a      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009de8:	e167      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dea:	4b5d      	ldr	r3, [pc, #372]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009df6:	d107      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df8:	f107 030c 	add.w	r3, r7, #12
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 fad3 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e06:	e158      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e0c:	e155      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e0e:	4b54      	ldr	r3, [pc, #336]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e16:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e18:	4b51      	ldr	r3, [pc, #324]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d10c      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d109      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e2a:	4b4d      	ldr	r3, [pc, #308]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	08db      	lsrs	r3, r3, #3
 8009e30:	f003 0303 	and.w	r3, r3, #3
 8009e34:	4a4b      	ldr	r2, [pc, #300]	; (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3c:	e01e      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e3e:	4b48      	ldr	r3, [pc, #288]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4a:	d106      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e52:	d102      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009e54:	4b44      	ldr	r3, [pc, #272]	; (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e58:	e010      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e5a:	4b41      	ldr	r3, [pc, #260]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e66:	d106      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e6e:	d102      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e70:	4b3e      	ldr	r3, [pc, #248]	; (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e74:	e002      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e7a:	e11e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e7c:	e11d      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e82:	e11a      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e8a:	d133      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e8c:	4b34      	ldr	r3, [pc, #208]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d004      	beq.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ea2:	d012      	beq.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009ea4:	e023      	b.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ea6:	4b2e      	ldr	r3, [pc, #184]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb2:	d107      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fbc9 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ec2:	e0fa      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ec8:	e0f7      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eca:	4b25      	ldr	r3, [pc, #148]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ed6:	d107      	bne.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ed8:	f107 0318 	add.w	r3, r7, #24
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 f90f 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ee6:	e0e8      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eec:	e0e5      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ef2:	e0e2      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009efa:	f040 808f 	bne.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009efe:	4b18      	ldr	r3, [pc, #96]	; (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009f06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f0e:	d075      	beq.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f16:	d87e      	bhi.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1e:	d060      	beq.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f26:	d876      	bhi.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f2e:	d045      	beq.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f36:	d86e      	bhi.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f3e:	d02b      	beq.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f46:	d866      	bhi.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f54:	d00e      	beq.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009f56:	e05e      	b.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f58:	f000 f8bc 	bl	800a0d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009f5e:	e0ac      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f60:	58024400 	.word	0x58024400
 8009f64:	03d09000 	.word	0x03d09000
 8009f68:	003d0900 	.word	0x003d0900
 8009f6c:	00989680 	.word	0x00989680
 8009f70:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f74:	4b53      	ldr	r3, [pc, #332]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f80:	d107      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f82:	f107 0318 	add.w	r3, r7, #24
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 f8ba 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009f90:	e093      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f96:	e090      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f98:	4b4a      	ldr	r3, [pc, #296]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fa4:	d107      	bne.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fa6:	f107 030c 	add.w	r3, r7, #12
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f9fc 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fb4:	e081      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fba:	e07e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fbc:	4b41      	ldr	r3, [pc, #260]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d109      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fc8:	4b3e      	ldr	r3, [pc, #248]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	08db      	lsrs	r3, r3, #3
 8009fce:	f003 0303 	and.w	r3, r3, #3
 8009fd2:	4a3d      	ldr	r2, [pc, #244]	; (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fda:	e06e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fe0:	e06b      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009fe2:	4b38      	ldr	r3, [pc, #224]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fee:	d102      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009ff0:	4b36      	ldr	r3, [pc, #216]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ff4:	e061      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ffa:	e05e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ffc:	4b31      	ldr	r3, [pc, #196]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a008:	d102      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800a00a:	4b31      	ldr	r3, [pc, #196]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a00c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a00e:	e054      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a014:	e051      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a01a:	e04e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a022:	d148      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a024:	4b27      	ldr	r3, [pc, #156]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a02c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a034:	d02a      	beq.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03c:	d838      	bhi.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	2b00      	cmp	r3, #0
 800a042:	d004      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a04a:	d00d      	beq.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a04c:	e030      	b.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a04e:	4b1d      	ldr	r3, [pc, #116]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a05a:	d102      	bne.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800a05c:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a05e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a060:	e02b      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a066:	e028      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a068:	4b16      	ldr	r3, [pc, #88]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a074:	d107      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fae8 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a084:	e019      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a08a:	e016      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a08c:	4b0d      	ldr	r3, [pc, #52]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a098:	d107      	bne.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a09a:	f107 0318 	add.w	r3, r7, #24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f82e 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0a8:	e007      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0ae:	e004      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0b4:	e001      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3740      	adds	r7, #64	; 0x40
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	58024400 	.word	0x58024400
 800a0c8:	03d09000 	.word	0x03d09000
 800a0cc:	003d0900 	.word	0x003d0900
 800a0d0:	00989680 	.word	0x00989680

0800a0d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a0d8:	f7fe fbba 	bl	8008850 <HAL_RCC_GetHCLKFreq>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	091b      	lsrs	r3, r3, #4
 800a0e4:	f003 0307 	and.w	r3, r3, #7
 800a0e8:	4904      	ldr	r1, [pc, #16]	; (800a0fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a0ea:	5ccb      	ldrb	r3, [r1, r3]
 800a0ec:	f003 031f 	and.w	r3, r3, #31
 800a0f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	58024400 	.word	0x58024400
 800a0fc:	08011e60 	.word	0x08011e60

0800a100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a100:	b480      	push	{r7}
 800a102:	b089      	sub	sp, #36	; 0x24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a108:	4ba1      	ldr	r3, [pc, #644]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a112:	4b9f      	ldr	r3, [pc, #636]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a116:	0b1b      	lsrs	r3, r3, #12
 800a118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a11c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a11e:	4b9c      	ldr	r3, [pc, #624]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	091b      	lsrs	r3, r3, #4
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a12a:	4b99      	ldr	r3, [pc, #612]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12e:	08db      	lsrs	r3, r3, #3
 800a130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	fb02 f303 	mul.w	r3, r2, r3
 800a13a:	ee07 3a90 	vmov	s15, r3
 800a13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 8111 	beq.w	800a370 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b02      	cmp	r3, #2
 800a152:	f000 8083 	beq.w	800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	f200 80a1 	bhi.w	800a2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d056      	beq.n	800a218 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a16a:	e099      	b.n	800a2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a16c:	4b88      	ldr	r3, [pc, #544]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0320 	and.w	r3, r3, #32
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02d      	beq.n	800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a178:	4b85      	ldr	r3, [pc, #532]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	08db      	lsrs	r3, r3, #3
 800a17e:	f003 0303 	and.w	r3, r3, #3
 800a182:	4a84      	ldr	r2, [pc, #528]	; (800a394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a184:	fa22 f303 	lsr.w	r3, r2, r3
 800a188:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	ee07 3a90 	vmov	s15, r3
 800a190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a2:	4b7b      	ldr	r3, [pc, #492]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1d2:	e087      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a39c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e6:	4b6a      	ldr	r3, [pc, #424]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a216:	e065      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22a:	4b59      	ldr	r3, [pc, #356]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a232:	ee07 3a90 	vmov	s15, r3
 800a236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a25a:	e043      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a266:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26e:	4b48      	ldr	r3, [pc, #288]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a27e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a282:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a29e:	e021      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2b2:	4b37      	ldr	r3, [pc, #220]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ba:	ee07 3a90 	vmov	s15, r3
 800a2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a2e4:	4b2a      	ldr	r3, [pc, #168]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	0a5b      	lsrs	r3, r3, #9
 800a2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a30a:	ee17 2a90 	vmov	r2, s15
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a312:	4b1f      	ldr	r3, [pc, #124]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a316:	0c1b      	lsrs	r3, r3, #16
 800a318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31c:	ee07 3a90 	vmov	s15, r3
 800a320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a32c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a338:	ee17 2a90 	vmov	r2, s15
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a340:	4b13      	ldr	r3, [pc, #76]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	0e1b      	lsrs	r3, r3, #24
 800a346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a35a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a35e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a366:	ee17 2a90 	vmov	r2, s15
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a36e:	e008      	b.n	800a382 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	609a      	str	r2, [r3, #8]
}
 800a382:	bf00      	nop
 800a384:	3724      	adds	r7, #36	; 0x24
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400
 800a394:	03d09000 	.word	0x03d09000
 800a398:	46000000 	.word	0x46000000
 800a39c:	4c742400 	.word	0x4c742400
 800a3a0:	4a742400 	.word	0x4a742400
 800a3a4:	4b189680 	.word	0x4b189680

0800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b089      	sub	sp, #36	; 0x24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3b0:	4ba1      	ldr	r3, [pc, #644]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	f003 0303 	and.w	r3, r3, #3
 800a3b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a3ba:	4b9f      	ldr	r3, [pc, #636]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	0d1b      	lsrs	r3, r3, #20
 800a3c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a3c6:	4b9c      	ldr	r3, [pc, #624]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	0a1b      	lsrs	r3, r3, #8
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a3d2:	4b99      	ldr	r3, [pc, #612]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 8111 	beq.w	800a618 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	f000 8083 	beq.w	800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	2b02      	cmp	r3, #2
 800a402:	f200 80a1 	bhi.w	800a548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d056      	beq.n	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a412:	e099      	b.n	800a548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a414:	4b88      	ldr	r3, [pc, #544]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0320 	and.w	r3, r3, #32
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d02d      	beq.n	800a47c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a420:	4b85      	ldr	r3, [pc, #532]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	08db      	lsrs	r3, r3, #3
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	4a84      	ldr	r2, [pc, #528]	; (800a63c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a42c:	fa22 f303 	lsr.w	r3, r2, r3
 800a430:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	ee07 3a90 	vmov	s15, r3
 800a438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44a:	4b7b      	ldr	r3, [pc, #492]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a45e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a476:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a47a:	e087      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a644 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48e:	4b6a      	ldr	r3, [pc, #424]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4be:	e065      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d2:	4b59      	ldr	r3, [pc, #356]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a502:	e043      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a64c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a516:	4b48      	ldr	r3, [pc, #288]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a526:	ed97 6a03 	vldr	s12, [r7, #12]
 800a52a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a546:	e021      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a552:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a55a:	4b37      	ldr	r3, [pc, #220]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a562:	ee07 3a90 	vmov	s15, r3
 800a566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a56a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a56e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a57a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a582:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a58a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a58c:	4b2a      	ldr	r3, [pc, #168]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	0a5b      	lsrs	r3, r3, #9
 800a592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5b2:	ee17 2a90 	vmov	r2, s15
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a5ba:	4b1f      	ldr	r3, [pc, #124]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c4:	ee07 3a90 	vmov	s15, r3
 800a5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e0:	ee17 2a90 	vmov	r2, s15
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a5e8:	4b13      	ldr	r3, [pc, #76]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	0e1b      	lsrs	r3, r3, #24
 800a5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a602:	edd7 6a07 	vldr	s13, [r7, #28]
 800a606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a60e:	ee17 2a90 	vmov	r2, s15
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a616:	e008      	b.n	800a62a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	609a      	str	r2, [r3, #8]
}
 800a62a:	bf00      	nop
 800a62c:	3724      	adds	r7, #36	; 0x24
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	58024400 	.word	0x58024400
 800a63c:	03d09000 	.word	0x03d09000
 800a640:	46000000 	.word	0x46000000
 800a644:	4c742400 	.word	0x4c742400
 800a648:	4a742400 	.word	0x4a742400
 800a64c:	4b189680 	.word	0x4b189680

0800a650 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a650:	b480      	push	{r7}
 800a652:	b089      	sub	sp, #36	; 0x24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a658:	4ba0      	ldr	r3, [pc, #640]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	f003 0303 	and.w	r3, r3, #3
 800a660:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a662:	4b9e      	ldr	r3, [pc, #632]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a666:	091b      	lsrs	r3, r3, #4
 800a668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a66c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a66e:	4b9b      	ldr	r3, [pc, #620]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a678:	4b98      	ldr	r3, [pc, #608]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	08db      	lsrs	r3, r3, #3
 800a67e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	fb02 f303 	mul.w	r3, r2, r3
 800a688:	ee07 3a90 	vmov	s15, r3
 800a68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a690:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 8111 	beq.w	800a8be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	f000 8083 	beq.w	800a7aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	f200 80a1 	bhi.w	800a7ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d056      	beq.n	800a766 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a6b8:	e099      	b.n	800a7ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ba:	4b88      	ldr	r3, [pc, #544]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02d      	beq.n	800a722 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6c6:	4b85      	ldr	r3, [pc, #532]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	08db      	lsrs	r3, r3, #3
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	4a83      	ldr	r2, [pc, #524]	; (800a8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f0:	4b7a      	ldr	r3, [pc, #488]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f8:	ee07 3a90 	vmov	s15, r3
 800a6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a700:	ed97 6a03 	vldr	s12, [r7, #12]
 800a704:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a720:	e087      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	ee07 3a90 	vmov	s15, r3
 800a728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a734:	4b69      	ldr	r3, [pc, #420]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73c:	ee07 3a90 	vmov	s15, r3
 800a740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a744:	ed97 6a03 	vldr	s12, [r7, #12]
 800a748:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a74c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a764:	e065      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a770:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a8ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a778:	4b58      	ldr	r3, [pc, #352]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a780:	ee07 3a90 	vmov	s15, r3
 800a784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a788:	ed97 6a03 	vldr	s12, [r7, #12]
 800a78c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7a8:	e043      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	ee07 3a90 	vmov	s15, r3
 800a7b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a7b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7bc:	4b47      	ldr	r3, [pc, #284]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c4:	ee07 3a90 	vmov	s15, r3
 800a7c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7ec:	e021      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	ee07 3a90 	vmov	s15, r3
 800a7f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a800:	4b36      	ldr	r3, [pc, #216]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a808:	ee07 3a90 	vmov	s15, r3
 800a80c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a810:	ed97 6a03 	vldr	s12, [r7, #12]
 800a814:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a830:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a832:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	0a5b      	lsrs	r3, r3, #9
 800a838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83c:	ee07 3a90 	vmov	s15, r3
 800a840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a84c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a858:	ee17 2a90 	vmov	r2, s15
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a860:	4b1e      	ldr	r3, [pc, #120]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a864:	0c1b      	lsrs	r3, r3, #16
 800a866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86a:	ee07 3a90 	vmov	s15, r3
 800a86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a87a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a87e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a886:	ee17 2a90 	vmov	r2, s15
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a88e:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	0e1b      	lsrs	r3, r3, #24
 800a894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a898:	ee07 3a90 	vmov	s15, r3
 800a89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b4:	ee17 2a90 	vmov	r2, s15
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a8bc:	e008      	b.n	800a8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	609a      	str	r2, [r3, #8]
}
 800a8d0:	bf00      	nop
 800a8d2:	3724      	adds	r7, #36	; 0x24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	58024400 	.word	0x58024400
 800a8e0:	03d09000 	.word	0x03d09000
 800a8e4:	46000000 	.word	0x46000000
 800a8e8:	4c742400 	.word	0x4c742400
 800a8ec:	4a742400 	.word	0x4a742400
 800a8f0:	4b189680 	.word	0x4b189680

0800a8f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a902:	4b53      	ldr	r3, [pc, #332]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d101      	bne.n	800a912 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e099      	b.n	800aa46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a912:	4b4f      	ldr	r3, [pc, #316]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a4e      	ldr	r2, [pc, #312]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a91c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a91e:	f7f7 fd5f 	bl	80023e0 <HAL_GetTick>
 800a922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a924:	e008      	b.n	800a938 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a926:	f7f7 fd5b 	bl	80023e0 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	2b02      	cmp	r3, #2
 800a932:	d901      	bls.n	800a938 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a934:	2303      	movs	r3, #3
 800a936:	e086      	b.n	800aa46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a938:	4b45      	ldr	r3, [pc, #276]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1f0      	bne.n	800a926 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a944:	4b42      	ldr	r3, [pc, #264]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a948:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	031b      	lsls	r3, r3, #12
 800a952:	493f      	ldr	r1, [pc, #252]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a954:	4313      	orrs	r3, r2
 800a956:	628b      	str	r3, [r1, #40]	; 0x28
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	3b01      	subs	r3, #1
 800a968:	025b      	lsls	r3, r3, #9
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	3b01      	subs	r3, #1
 800a974:	041b      	lsls	r3, r3, #16
 800a976:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	3b01      	subs	r3, #1
 800a982:	061b      	lsls	r3, r3, #24
 800a984:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a988:	4931      	ldr	r1, [pc, #196]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a98e:	4b30      	ldr	r3, [pc, #192]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	492d      	ldr	r1, [pc, #180]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a9a0:	4b2b      	ldr	r3, [pc, #172]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	f023 0220 	bic.w	r2, r3, #32
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	4928      	ldr	r1, [pc, #160]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a9b2:	4b27      	ldr	r3, [pc, #156]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b6:	4a26      	ldr	r2, [pc, #152]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9b8:	f023 0310 	bic.w	r3, r3, #16
 800a9bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a9be:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9c2:	4b24      	ldr	r3, [pc, #144]	; (800aa54 <RCCEx_PLL2_Config+0x160>)
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	69d2      	ldr	r2, [r2, #28]
 800a9ca:	00d2      	lsls	r2, r2, #3
 800a9cc:	4920      	ldr	r1, [pc, #128]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a9d2:	4b1f      	ldr	r3, [pc, #124]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	4a1e      	ldr	r2, [pc, #120]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9d8:	f043 0310 	orr.w	r3, r3, #16
 800a9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	4a19      	ldr	r2, [pc, #100]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9f0:	e00f      	b.n	800aa12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d106      	bne.n	800aa06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a9f8:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a14      	ldr	r2, [pc, #80]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa04:	e005      	b.n	800aa12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aa06:	4b12      	ldr	r3, [pc, #72]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0a:	4a11      	ldr	r2, [pc, #68]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aa12:	4b0f      	ldr	r3, [pc, #60]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a0e      	ldr	r2, [pc, #56]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa1e:	f7f7 fcdf 	bl	80023e0 <HAL_GetTick>
 800aa22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa24:	e008      	b.n	800aa38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa26:	f7f7 fcdb 	bl	80023e0 <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d901      	bls.n	800aa38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e006      	b.n	800aa46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0f0      	beq.n	800aa26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	58024400 	.word	0x58024400
 800aa54:	ffff0007 	.word	0xffff0007

0800aa58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa66:	4b53      	ldr	r3, [pc, #332]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d101      	bne.n	800aa76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e099      	b.n	800abaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa76:	4b4f      	ldr	r3, [pc, #316]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a4e      	ldr	r2, [pc, #312]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa82:	f7f7 fcad 	bl	80023e0 <HAL_GetTick>
 800aa86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa88:	e008      	b.n	800aa9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aa8a:	f7f7 fca9 	bl	80023e0 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d901      	bls.n	800aa9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e086      	b.n	800abaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa9c:	4b45      	ldr	r3, [pc, #276]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f0      	bne.n	800aa8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aaa8:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	051b      	lsls	r3, r3, #20
 800aab6:	493f      	ldr	r1, [pc, #252]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aab8:	4313      	orrs	r3, r2
 800aaba:	628b      	str	r3, [r1, #40]	; 0x28
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	025b      	lsls	r3, r3, #9
 800aace:	b29b      	uxth	r3, r3
 800aad0:	431a      	orrs	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	041b      	lsls	r3, r3, #16
 800aada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	061b      	lsls	r3, r3, #24
 800aae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aaec:	4931      	ldr	r1, [pc, #196]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aaf2:	4b30      	ldr	r3, [pc, #192]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	492d      	ldr	r1, [pc, #180]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ab04:	4b2b      	ldr	r3, [pc, #172]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	4928      	ldr	r1, [pc, #160]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ab16:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	4a26      	ldr	r2, [pc, #152]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ab22:	4b24      	ldr	r3, [pc, #144]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab26:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <RCCEx_PLL3_Config+0x160>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	69d2      	ldr	r2, [r2, #28]
 800ab2e:	00d2      	lsls	r2, r2, #3
 800ab30:	4920      	ldr	r1, [pc, #128]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab32:	4313      	orrs	r3, r2
 800ab34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ab36:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	4a1e      	ldr	r2, [pc, #120]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab48:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	4a19      	ldr	r2, [pc, #100]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab54:	e00f      	b.n	800ab76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d106      	bne.n	800ab6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab5c:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	4a14      	ldr	r2, [pc, #80]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab68:	e005      	b.n	800ab76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	4a11      	ldr	r2, [pc, #68]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab76:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a0e      	ldr	r2, [pc, #56]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab82:	f7f7 fc2d 	bl	80023e0 <HAL_GetTick>
 800ab86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab88:	e008      	b.n	800ab9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab8a:	f7f7 fc29 	bl	80023e0 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d901      	bls.n	800ab9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e006      	b.n	800abaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab9c:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f0      	beq.n	800ab8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	58024400 	.word	0x58024400
 800abb8:	ffff0007 	.word	0xffff0007

0800abbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e0f1      	b.n	800adb2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a78      	ldr	r2, [pc, #480]	; (800adbc <HAL_SPI_Init+0x200>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d00f      	beq.n	800abfe <HAL_SPI_Init+0x42>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a77      	ldr	r2, [pc, #476]	; (800adc0 <HAL_SPI_Init+0x204>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00a      	beq.n	800abfe <HAL_SPI_Init+0x42>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a75      	ldr	r2, [pc, #468]	; (800adc4 <HAL_SPI_Init+0x208>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d005      	beq.n	800abfe <HAL_SPI_Init+0x42>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	2b0f      	cmp	r3, #15
 800abf8:	d901      	bls.n	800abfe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e0d9      	b.n	800adb2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 ff66 	bl	800bad0 <SPI_GetPacketSize>
 800ac04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a6c      	ldr	r2, [pc, #432]	; (800adbc <HAL_SPI_Init+0x200>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d00c      	beq.n	800ac2a <HAL_SPI_Init+0x6e>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a6a      	ldr	r2, [pc, #424]	; (800adc0 <HAL_SPI_Init+0x204>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d007      	beq.n	800ac2a <HAL_SPI_Init+0x6e>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a69      	ldr	r2, [pc, #420]	; (800adc4 <HAL_SPI_Init+0x208>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d002      	beq.n	800ac2a <HAL_SPI_Init+0x6e>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d811      	bhi.n	800ac4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac2e:	4a63      	ldr	r2, [pc, #396]	; (800adbc <HAL_SPI_Init+0x200>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d009      	beq.n	800ac48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a61      	ldr	r2, [pc, #388]	; (800adc0 <HAL_SPI_Init+0x204>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d004      	beq.n	800ac48 <HAL_SPI_Init+0x8c>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a60      	ldr	r2, [pc, #384]	; (800adc4 <HAL_SPI_Init+0x208>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d104      	bne.n	800ac52 <HAL_SPI_Init+0x96>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b10      	cmp	r3, #16
 800ac4c:	d901      	bls.n	800ac52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e0af      	b.n	800adb2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d106      	bne.n	800ac6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7f7 f8e2 	bl	8001e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f022 0201 	bic.w	r2, r2, #1
 800ac82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ac8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac98:	d119      	bne.n	800acce <HAL_SPI_Init+0x112>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aca2:	d103      	bne.n	800acac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d008      	beq.n	800acbe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10c      	bne.n	800acce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800acb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acbc:	d107      	bne.n	800acce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800accc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	69da      	ldr	r2, [r3, #28]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd6:	431a      	orrs	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace0:	ea42 0103 	orr.w	r1, r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	430a      	orrs	r2, r1
 800acee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf8:	431a      	orrs	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	431a      	orrs	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	431a      	orrs	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	431a      	orrs	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad22:	431a      	orrs	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad2e:	ea42 0103 	orr.w	r1, r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d113      	bne.n	800ad6e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0201 	bic.w	r2, r2, #1
 800ad7c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	40013000 	.word	0x40013000
 800adc0:	40003800 	.word	0x40003800
 800adc4:	40003c00 	.word	0x40003c00

0800adc8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	; 0x28
 800adcc:	af02      	add	r7, sp, #8
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	4613      	mov	r3, r2
 800add6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3320      	adds	r3, #32
 800adde:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adea:	2b01      	cmp	r3, #1
 800adec:	d101      	bne.n	800adf2 <HAL_SPI_Transmit+0x2a>
 800adee:	2302      	movs	r3, #2
 800adf0:	e1d7      	b.n	800b1a2 <HAL_SPI_Transmit+0x3da>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adfa:	f7f7 faf1 	bl	80023e0 <HAL_GetTick>
 800adfe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d007      	beq.n	800ae1c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ae18:	7efb      	ldrb	r3, [r7, #27]
 800ae1a:	e1c2      	b.n	800b1a2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <HAL_SPI_Transmit+0x60>
 800ae22:	88fb      	ldrh	r3, [r7, #6]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d107      	bne.n	800ae38 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ae34:	7efb      	ldrb	r3, [r7, #27]
 800ae36:	e1b4      	b.n	800b1a2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	88fa      	ldrh	r2, [r7, #6]
 800ae52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	88fa      	ldrh	r2, [r7, #6]
 800ae5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ae88:	d107      	bne.n	800ae9a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae98:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	4b96      	ldr	r3, [pc, #600]	; (800b0fc <HAL_SPI_Transmit+0x334>)
 800aea2:	4013      	ands	r3, r2
 800aea4:	88f9      	ldrh	r1, [r7, #6]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	6812      	ldr	r2, [r2, #0]
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f042 0201 	orr.w	r2, r2, #1
 800aebc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aec6:	d107      	bne.n	800aed8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	2b0f      	cmp	r3, #15
 800aede:	d947      	bls.n	800af70 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aee0:	e03f      	b.n	800af62 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d114      	bne.n	800af1a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6812      	ldr	r2, [r2, #0]
 800aefa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af00:	1d1a      	adds	r2, r3, #4
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	b29a      	uxth	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800af18:	e023      	b.n	800af62 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af1a:	f7f7 fa61 	bl	80023e0 <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d803      	bhi.n	800af32 <HAL_SPI_Transmit+0x16a>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af30:	d102      	bne.n	800af38 <HAL_SPI_Transmit+0x170>
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d114      	bne.n	800af62 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f000 fcfb 	bl	800b934 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e11f      	b.n	800b1a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af68:	b29b      	uxth	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1b9      	bne.n	800aee2 <HAL_SPI_Transmit+0x11a>
 800af6e:	e0f2      	b.n	800b156 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	2b07      	cmp	r3, #7
 800af76:	f240 80e7 	bls.w	800b148 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800af7a:	e05d      	b.n	800b038 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b02      	cmp	r3, #2
 800af88:	d132      	bne.n	800aff0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af90:	b29b      	uxth	r3, r3
 800af92:	2b01      	cmp	r3, #1
 800af94:	d918      	bls.n	800afc8 <HAL_SPI_Transmit+0x200>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d014      	beq.n	800afc8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6812      	ldr	r2, [r2, #0]
 800afa8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800afba:	b29b      	uxth	r3, r3
 800afbc:	3b02      	subs	r3, #2
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800afc6:	e037      	b.n	800b038 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afcc:	881a      	ldrh	r2, [r3, #0]
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd6:	1c9a      	adds	r2, r3, #2
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	3b01      	subs	r3, #1
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800afee:	e023      	b.n	800b038 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aff0:	f7f7 f9f6 	bl	80023e0 <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d803      	bhi.n	800b008 <HAL_SPI_Transmit+0x240>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b006:	d102      	bne.n	800b00e <HAL_SPI_Transmit+0x246>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d114      	bne.n	800b038 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f000 fc90 	bl	800b934 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e0b4      	b.n	800b1a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d19b      	bne.n	800af7c <HAL_SPI_Transmit+0x1b4>
 800b044:	e087      	b.n	800b156 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	695b      	ldr	r3, [r3, #20]
 800b04c:	f003 0302 	and.w	r3, r3, #2
 800b050:	2b02      	cmp	r3, #2
 800b052:	d155      	bne.n	800b100 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d918      	bls.n	800b092 <HAL_SPI_Transmit+0x2ca>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b064:	2b40      	cmp	r3, #64	; 0x40
 800b066:	d914      	bls.n	800b092 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6812      	ldr	r2, [r2, #0]
 800b072:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b078:	1d1a      	adds	r2, r3, #4
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b084:	b29b      	uxth	r3, r3
 800b086:	3b04      	subs	r3, #4
 800b088:	b29a      	uxth	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b090:	e05a      	b.n	800b148 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b098:	b29b      	uxth	r3, r3
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d917      	bls.n	800b0ce <HAL_SPI_Transmit+0x306>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d013      	beq.n	800b0ce <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0aa:	881a      	ldrh	r2, [r3, #0]
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b4:	1c9a      	adds	r2, r3, #2
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	3b02      	subs	r3, #2
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b0cc:	e03c      	b.n	800b148 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3320      	adds	r3, #32
 800b0d8:	7812      	ldrb	r2, [r2, #0]
 800b0da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b0f8:	e026      	b.n	800b148 <HAL_SPI_Transmit+0x380>
 800b0fa:	bf00      	nop
 800b0fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b100:	f7f7 f96e 	bl	80023e0 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d803      	bhi.n	800b118 <HAL_SPI_Transmit+0x350>
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b116:	d102      	bne.n	800b11e <HAL_SPI_Transmit+0x356>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d114      	bne.n	800b148 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 fc08 	bl	800b934 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e02c      	b.n	800b1a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2b00      	cmp	r3, #0
 800b152:	f47f af78 	bne.w	800b046 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2200      	movs	r2, #0
 800b15e:	2108      	movs	r1, #8
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f000 fc87 	bl	800ba74 <SPI_WaitOnFlagUntilTimeout>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d007      	beq.n	800b17c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b172:	f043 0220 	orr.w	r2, r3, #32
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 fbd9 	bl	800b934 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e000      	b.n	800b1a2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b1a0:	7efb      	ldrb	r3, [r7, #27]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop

0800b1ac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08a      	sub	sp, #40	; 0x28
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	603b      	str	r3, [r7, #0]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3330      	adds	r3, #48	; 0x30
 800b1c6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1d0:	d112      	bne.n	800b1f8 <HAL_SPI_Receive+0x4c>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10e      	bne.n	800b1f8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2204      	movs	r2, #4
 800b1de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b1e2:	88fa      	ldrh	r2, [r7, #6]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 f978 	bl	800b4e4 <HAL_SPI_TransmitReceive>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	e16f      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d101      	bne.n	800b206 <HAL_SPI_Receive+0x5a>
 800b202:	2302      	movs	r3, #2
 800b204:	e168      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b20e:	f7f7 f8e7 	bl	80023e0 <HAL_GetTick>
 800b212:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d007      	beq.n	800b230 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b220:	2302      	movs	r3, #2
 800b222:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b22c:	7ffb      	ldrb	r3, [r7, #31]
 800b22e:	e153      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <HAL_SPI_Receive+0x90>
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d107      	bne.n	800b24c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b248:	7ffb      	ldrb	r3, [r7, #31]
 800b24a:	e145      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2204      	movs	r2, #4
 800b250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	88fa      	ldrh	r2, [r7, #6]
 800b266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	88fa      	ldrh	r2, [r7, #6]
 800b26e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b29c:	d107      	bne.n	800b2ae <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	4b8a      	ldr	r3, [pc, #552]	; (800b4e0 <HAL_SPI_Receive+0x334>)
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	88f9      	ldrh	r1, [r7, #6]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	6812      	ldr	r2, [r2, #0]
 800b2be:	430b      	orrs	r3, r1
 800b2c0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f042 0201 	orr.w	r2, r2, #1
 800b2d0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2da:	d107      	bne.n	800b2ec <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	2b0f      	cmp	r3, #15
 800b2f2:	d948      	bls.n	800b386 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b2f4:	e040      	b.n	800b378 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	695a      	ldr	r2, [r3, #20]
 800b2fc:	f248 0308 	movw	r3, #32776	; 0x8008
 800b300:	4013      	ands	r3, r2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d014      	beq.n	800b330 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b30e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b310:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b316:	1d1a      	adds	r2, r3, #4
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b322:	b29b      	uxth	r3, r3
 800b324:	3b01      	subs	r3, #1
 800b326:	b29a      	uxth	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b32e:	e023      	b.n	800b378 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b330:	f7f7 f856 	bl	80023e0 <HAL_GetTick>
 800b334:	4602      	mov	r2, r0
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d803      	bhi.n	800b348 <HAL_SPI_Receive+0x19c>
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b346:	d102      	bne.n	800b34e <HAL_SPI_Receive+0x1a2>
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d114      	bne.n	800b378 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f000 faf0 	bl	800b934 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e0af      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b37e:	b29b      	uxth	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1b8      	bne.n	800b2f6 <HAL_SPI_Receive+0x14a>
 800b384:	e095      	b.n	800b4b2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	2b07      	cmp	r3, #7
 800b38c:	f240 808b 	bls.w	800b4a6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b390:	e03f      	b.n	800b412 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d114      	bne.n	800b3ca <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	8812      	ldrh	r2, [r2, #0]
 800b3a8:	b292      	uxth	r2, r2
 800b3aa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3b0:	1c9a      	adds	r2, r3, #2
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b3c8:	e023      	b.n	800b412 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3ca:	f7f7 f809 	bl	80023e0 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d803      	bhi.n	800b3e2 <HAL_SPI_Receive+0x236>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e0:	d102      	bne.n	800b3e8 <HAL_SPI_Receive+0x23c>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d114      	bne.n	800b412 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 faa3 	bl	800b934 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b40e:	2303      	movs	r3, #3
 800b410:	e062      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b418:	b29b      	uxth	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1b9      	bne.n	800b392 <HAL_SPI_Receive+0x1e6>
 800b41e:	e048      	b.n	800b4b2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d117      	bne.n	800b45e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b43a:	7812      	ldrb	r2, [r2, #0]
 800b43c:	b2d2      	uxtb	r2, r2
 800b43e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b444:	1c5a      	adds	r2, r3, #1
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b450:	b29b      	uxth	r3, r3
 800b452:	3b01      	subs	r3, #1
 800b454:	b29a      	uxth	r2, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b45c:	e023      	b.n	800b4a6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b45e:	f7f6 ffbf 	bl	80023e0 <HAL_GetTick>
 800b462:	4602      	mov	r2, r0
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d803      	bhi.n	800b476 <HAL_SPI_Receive+0x2ca>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b474:	d102      	bne.n	800b47c <HAL_SPI_Receive+0x2d0>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d114      	bne.n	800b4a6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 fa59 	bl	800b934 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e018      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1b6      	bne.n	800b420 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f000 fa3e 	bl	800b934 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800b4d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	ffff0000 	.word	0xffff0000

0800b4e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08e      	sub	sp, #56	; 0x38
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3320      	adds	r3, #32
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3330      	adds	r3, #48	; 0x30
 800b506:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d101      	bne.n	800b516 <HAL_SPI_TransmitReceive+0x32>
 800b512:	2302      	movs	r3, #2
 800b514:	e209      	b.n	800b92a <HAL_SPI_TransmitReceive+0x446>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b51e:	f7f6 ff5f 	bl	80023e0 <HAL_GetTick>
 800b522:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b524:	887b      	ldrh	r3, [r7, #2]
 800b526:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b528:	887b      	ldrh	r3, [r7, #2]
 800b52a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b532:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b53a:	7efb      	ldrb	r3, [r7, #27]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d014      	beq.n	800b56a <HAL_SPI_TransmitReceive+0x86>
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b546:	d106      	bne.n	800b556 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b550:	7efb      	ldrb	r3, [r7, #27]
 800b552:	2b04      	cmp	r3, #4
 800b554:	d009      	beq.n	800b56a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b556:	2302      	movs	r3, #2
 800b558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b568:	e1df      	b.n	800b92a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d005      	beq.n	800b57c <HAL_SPI_TransmitReceive+0x98>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <HAL_SPI_TransmitReceive+0x98>
 800b576:	887b      	ldrh	r3, [r7, #2]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d109      	bne.n	800b590 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b58a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b58e:	e1cc      	b.n	800b92a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d003      	beq.n	800b5a4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2205      	movs	r2, #5
 800b5a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	887a      	ldrh	r2, [r7, #2]
 800b5b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	887a      	ldrh	r2, [r7, #2]
 800b5be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	887a      	ldrh	r2, [r7, #2]
 800b5cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	887a      	ldrh	r2, [r7, #2]
 800b5d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	4b82      	ldr	r3, [pc, #520]	; (800b7f4 <HAL_SPI_TransmitReceive+0x310>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	8879      	ldrh	r1, [r7, #2]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	6812      	ldr	r2, [r2, #0]
 800b5f4:	430b      	orrs	r3, r1
 800b5f6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f042 0201 	orr.w	r2, r2, #1
 800b606:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b610:	d107      	bne.n	800b622 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b620:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	2b0f      	cmp	r3, #15
 800b628:	d970      	bls.n	800b70c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b62a:	e068      	b.n	800b6fe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	695b      	ldr	r3, [r3, #20]
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b02      	cmp	r3, #2
 800b638:	d11a      	bne.n	800b670 <HAL_SPI_TransmitReceive+0x18c>
 800b63a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d017      	beq.n	800b670 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6812      	ldr	r2, [r2, #0]
 800b64a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b650:	1d1a      	adds	r2, r3, #4
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	3b01      	subs	r3, #1
 800b660:	b29a      	uxth	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b66e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	695a      	ldr	r2, [r3, #20]
 800b676:	f248 0308 	movw	r3, #32776	; 0x8008
 800b67a:	4013      	ands	r3, r2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d01a      	beq.n	800b6b6 <HAL_SPI_TransmitReceive+0x1d2>
 800b680:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b682:	2b00      	cmp	r3, #0
 800b684:	d017      	beq.n	800b6b6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b68e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b690:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6b6:	f7f6 fe93 	bl	80023e0 <HAL_GetTick>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d803      	bhi.n	800b6ce <HAL_SPI_TransmitReceive+0x1ea>
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d102      	bne.n	800b6d4 <HAL_SPI_TransmitReceive+0x1f0>
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d114      	bne.n	800b6fe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 f92d 	bl	800b934 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e115      	b.n	800b92a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b6fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b700:	2b00      	cmp	r3, #0
 800b702:	d193      	bne.n	800b62c <HAL_SPI_TransmitReceive+0x148>
 800b704:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b706:	2b00      	cmp	r3, #0
 800b708:	d190      	bne.n	800b62c <HAL_SPI_TransmitReceive+0x148>
 800b70a:	e0e7      	b.n	800b8dc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	2b07      	cmp	r3, #7
 800b712:	f240 80dd 	bls.w	800b8d0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b716:	e066      	b.n	800b7e6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	f003 0302 	and.w	r3, r3, #2
 800b722:	2b02      	cmp	r3, #2
 800b724:	d119      	bne.n	800b75a <HAL_SPI_TransmitReceive+0x276>
 800b726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d016      	beq.n	800b75a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b730:	881a      	ldrh	r2, [r3, #0]
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73a:	1c9a      	adds	r2, r3, #2
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b746:	b29b      	uxth	r3, r3
 800b748:	3b01      	subs	r3, #1
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b758:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b01      	cmp	r3, #1
 800b766:	d11a      	bne.n	800b79e <HAL_SPI_TransmitReceive+0x2ba>
 800b768:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d017      	beq.n	800b79e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b772:	6a3a      	ldr	r2, [r7, #32]
 800b774:	8812      	ldrh	r2, [r2, #0]
 800b776:	b292      	uxth	r2, r2
 800b778:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b77e:	1c9a      	adds	r2, r3, #2
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	3b01      	subs	r3, #1
 800b78e:	b29a      	uxth	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b79c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b79e:	f7f6 fe1f 	bl	80023e0 <HAL_GetTick>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d803      	bhi.n	800b7b6 <HAL_SPI_TransmitReceive+0x2d2>
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b4:	d102      	bne.n	800b7bc <HAL_SPI_TransmitReceive+0x2d8>
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d114      	bne.n	800b7e6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 f8b9 	bl	800b934 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e0a1      	b.n	800b92a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b7e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d195      	bne.n	800b718 <HAL_SPI_TransmitReceive+0x234>
 800b7ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d192      	bne.n	800b718 <HAL_SPI_TransmitReceive+0x234>
 800b7f2:	e073      	b.n	800b8dc <HAL_SPI_TransmitReceive+0x3f8>
 800b7f4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	f003 0302 	and.w	r3, r3, #2
 800b802:	2b02      	cmp	r3, #2
 800b804:	d11b      	bne.n	800b83e <HAL_SPI_TransmitReceive+0x35a>
 800b806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d018      	beq.n	800b83e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3320      	adds	r3, #32
 800b816:	7812      	ldrb	r2, [r2, #0]
 800b818:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	3b01      	subs	r3, #1
 800b82e:	b29a      	uxth	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b83c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d11d      	bne.n	800b888 <HAL_SPI_TransmitReceive+0x3a4>
 800b84c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d01a      	beq.n	800b888 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b85e:	7812      	ldrb	r2, [r2, #0]
 800b860:	b2d2      	uxtb	r2, r2
 800b862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b874:	b29b      	uxth	r3, r3
 800b876:	3b01      	subs	r3, #1
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b886:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b888:	f7f6 fdaa 	bl	80023e0 <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b894:	429a      	cmp	r2, r3
 800b896:	d803      	bhi.n	800b8a0 <HAL_SPI_TransmitReceive+0x3bc>
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d102      	bne.n	800b8a6 <HAL_SPI_TransmitReceive+0x3c2>
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d114      	bne.n	800b8d0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f000 f844 	bl	800b934 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e02c      	b.n	800b92a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b8d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d190      	bne.n	800b7f8 <HAL_SPI_TransmitReceive+0x314>
 800b8d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d18d      	bne.n	800b7f8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2108      	movs	r1, #8
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 f8c4 	bl	800ba74 <SPI_WaitOnFlagUntilTimeout>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d007      	beq.n	800b902 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8f8:	f043 0220 	orr.w	r2, r3, #32
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 f816 	bl	800b934 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e001      	b.n	800b92a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800b926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3730      	adds	r7, #48	; 0x30
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop

0800b934 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	699a      	ldr	r2, [r3, #24]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f042 0208 	orr.w	r2, r2, #8
 800b952:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	699a      	ldr	r2, [r3, #24]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f042 0210 	orr.w	r2, r2, #16
 800b962:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f022 0201 	bic.w	r2, r2, #1
 800b972:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6919      	ldr	r1, [r3, #16]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	4b3c      	ldr	r3, [pc, #240]	; (800ba70 <SPI_CloseTransfer+0x13c>)
 800b980:	400b      	ands	r3, r1
 800b982:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689a      	ldr	r2, [r3, #8]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b992:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b04      	cmp	r3, #4
 800b99e:	d014      	beq.n	800b9ca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f003 0320 	and.w	r3, r3, #32
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00f      	beq.n	800b9ca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	699a      	ldr	r2, [r3, #24]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f042 0220 	orr.w	r2, r2, #32
 800b9c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d014      	beq.n	800ba00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00f      	beq.n	800ba00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9e6:	f043 0204 	orr.w	r2, r3, #4
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	699a      	ldr	r2, [r3, #24]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00f      	beq.n	800ba2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba10:	f043 0201 	orr.w	r2, r3, #1
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	699a      	ldr	r2, [r3, #24]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00f      	beq.n	800ba54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba3a:	f043 0208 	orr.w	r2, r3, #8
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	699a      	ldr	r2, [r3, #24]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	fffffc90 	.word	0xfffffc90

0800ba74 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	603b      	str	r3, [r7, #0]
 800ba80:	4613      	mov	r3, r2
 800ba82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ba84:	e010      	b.n	800baa8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba86:	f7f6 fcab 	bl	80023e0 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d803      	bhi.n	800ba9e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9c:	d102      	bne.n	800baa4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800baa4:	2303      	movs	r3, #3
 800baa6:	e00f      	b.n	800bac8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	695a      	ldr	r2, [r3, #20]
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	4013      	ands	r3, r2
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	bf0c      	ite	eq
 800bab8:	2301      	moveq	r3, #1
 800baba:	2300      	movne	r3, #0
 800babc:	b2db      	uxtb	r3, r3
 800babe:	461a      	mov	r2, r3
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d0df      	beq.n	800ba86 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800badc:	095b      	lsrs	r3, r3, #5
 800bade:	3301      	adds	r3, #1
 800bae0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	3301      	adds	r3, #1
 800bae8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	3307      	adds	r3, #7
 800baee:	08db      	lsrs	r3, r3, #3
 800baf0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	fb02 f303 	mul.w	r3, r2, r3
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b082      	sub	sp, #8
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d101      	bne.n	800bb18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e049      	b.n	800bbac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d106      	bne.n	800bb32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7f6 f9e5 	bl	8001efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2202      	movs	r2, #2
 800bb36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4619      	mov	r1, r3
 800bb44:	4610      	mov	r0, r2
 800bb46:	f000 fa09 	bl	800bf5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e049      	b.n	800bc5a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f841 	bl	800bc62 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	f000 f9b2 	bl	800bf5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
	...

0800bc78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d101      	bne.n	800bc96 <HAL_TIM_OC_ConfigChannel+0x1e>
 800bc92:	2302      	movs	r3, #2
 800bc94:	e066      	b.n	800bd64 <HAL_TIM_OC_ConfigChannel+0xec>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b14      	cmp	r3, #20
 800bca2:	d857      	bhi.n	800bd54 <HAL_TIM_OC_ConfigChannel+0xdc>
 800bca4:	a201      	add	r2, pc, #4	; (adr r2, 800bcac <HAL_TIM_OC_ConfigChannel+0x34>)
 800bca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcaa:	bf00      	nop
 800bcac:	0800bd01 	.word	0x0800bd01
 800bcb0:	0800bd55 	.word	0x0800bd55
 800bcb4:	0800bd55 	.word	0x0800bd55
 800bcb8:	0800bd55 	.word	0x0800bd55
 800bcbc:	0800bd0f 	.word	0x0800bd0f
 800bcc0:	0800bd55 	.word	0x0800bd55
 800bcc4:	0800bd55 	.word	0x0800bd55
 800bcc8:	0800bd55 	.word	0x0800bd55
 800bccc:	0800bd1d 	.word	0x0800bd1d
 800bcd0:	0800bd55 	.word	0x0800bd55
 800bcd4:	0800bd55 	.word	0x0800bd55
 800bcd8:	0800bd55 	.word	0x0800bd55
 800bcdc:	0800bd2b 	.word	0x0800bd2b
 800bce0:	0800bd55 	.word	0x0800bd55
 800bce4:	0800bd55 	.word	0x0800bd55
 800bce8:	0800bd55 	.word	0x0800bd55
 800bcec:	0800bd39 	.word	0x0800bd39
 800bcf0:	0800bd55 	.word	0x0800bd55
 800bcf4:	0800bd55 	.word	0x0800bd55
 800bcf8:	0800bd55 	.word	0x0800bd55
 800bcfc:	0800bd47 	.word	0x0800bd47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 f9c2 	bl	800c090 <TIM_OC1_SetConfig>
      break;
 800bd0c:	e025      	b.n	800bd5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68b9      	ldr	r1, [r7, #8]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 fa4b 	bl	800c1b0 <TIM_OC2_SetConfig>
      break;
 800bd1a:	e01e      	b.n	800bd5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68b9      	ldr	r1, [r7, #8]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 face 	bl	800c2c4 <TIM_OC3_SetConfig>
      break;
 800bd28:	e017      	b.n	800bd5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68b9      	ldr	r1, [r7, #8]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 fb4f 	bl	800c3d4 <TIM_OC4_SetConfig>
      break;
 800bd36:	e010      	b.n	800bd5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68b9      	ldr	r1, [r7, #8]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 fbb2 	bl	800c4a8 <TIM_OC5_SetConfig>
      break;
 800bd44:	e009      	b.n	800bd5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 fc0f 	bl	800c570 <TIM_OC6_SetConfig>
      break;
 800bd52:	e002      	b.n	800bd5a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	75fb      	strb	r3, [r7, #23]
      break;
 800bd58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_TIM_ConfigClockSource+0x1c>
 800bd84:	2302      	movs	r3, #2
 800bd86:	e0dc      	b.n	800bf42 <HAL_TIM_ConfigClockSource+0x1d6>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	4b6a      	ldr	r3, [pc, #424]	; (800bf4c <HAL_TIM_ConfigClockSource+0x1e0>)
 800bda4:	4013      	ands	r3, r2
 800bda6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a64      	ldr	r2, [pc, #400]	; (800bf50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	f000 80a9 	beq.w	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdc4:	4a62      	ldr	r2, [pc, #392]	; (800bf50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	f200 80ae 	bhi.w	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdcc:	4a61      	ldr	r2, [pc, #388]	; (800bf54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	f000 80a1 	beq.w	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdd4:	4a5f      	ldr	r2, [pc, #380]	; (800bf54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	f200 80a6 	bhi.w	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800bddc:	4a5e      	ldr	r2, [pc, #376]	; (800bf58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	f000 8099 	beq.w	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800bde4:	4a5c      	ldr	r2, [pc, #368]	; (800bf58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	f200 809e 	bhi.w	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bdf0:	f000 8091 	beq.w	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bdf8:	f200 8096 	bhi.w	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be00:	f000 8089 	beq.w	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800be04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be08:	f200 808e 	bhi.w	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be10:	d03e      	beq.n	800be90 <HAL_TIM_ConfigClockSource+0x124>
 800be12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be16:	f200 8087 	bhi.w	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be1e:	f000 8086 	beq.w	800bf2e <HAL_TIM_ConfigClockSource+0x1c2>
 800be22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be26:	d87f      	bhi.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be28:	2b70      	cmp	r3, #112	; 0x70
 800be2a:	d01a      	beq.n	800be62 <HAL_TIM_ConfigClockSource+0xf6>
 800be2c:	2b70      	cmp	r3, #112	; 0x70
 800be2e:	d87b      	bhi.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be30:	2b60      	cmp	r3, #96	; 0x60
 800be32:	d050      	beq.n	800bed6 <HAL_TIM_ConfigClockSource+0x16a>
 800be34:	2b60      	cmp	r3, #96	; 0x60
 800be36:	d877      	bhi.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be38:	2b50      	cmp	r3, #80	; 0x50
 800be3a:	d03c      	beq.n	800beb6 <HAL_TIM_ConfigClockSource+0x14a>
 800be3c:	2b50      	cmp	r3, #80	; 0x50
 800be3e:	d873      	bhi.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be40:	2b40      	cmp	r3, #64	; 0x40
 800be42:	d058      	beq.n	800bef6 <HAL_TIM_ConfigClockSource+0x18a>
 800be44:	2b40      	cmp	r3, #64	; 0x40
 800be46:	d86f      	bhi.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be48:	2b30      	cmp	r3, #48	; 0x30
 800be4a:	d064      	beq.n	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800be4c:	2b30      	cmp	r3, #48	; 0x30
 800be4e:	d86b      	bhi.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be50:	2b20      	cmp	r3, #32
 800be52:	d060      	beq.n	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800be54:	2b20      	cmp	r3, #32
 800be56:	d867      	bhi.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d05c      	beq.n	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800be5c:	2b10      	cmp	r3, #16
 800be5e:	d05a      	beq.n	800bf16 <HAL_TIM_ConfigClockSource+0x1aa>
 800be60:	e062      	b.n	800bf28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	6899      	ldr	r1, [r3, #8]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f000 fc61 	bl	800c738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	609a      	str	r2, [r3, #8]
      break;
 800be8e:	e04f      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	6899      	ldr	r1, [r3, #8]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	f000 fc4a 	bl	800c738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800beb2:	609a      	str	r2, [r3, #8]
      break;
 800beb4:	e03c      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6818      	ldr	r0, [r3, #0]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	6859      	ldr	r1, [r3, #4]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	461a      	mov	r2, r3
 800bec4:	f000 fbba 	bl	800c63c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2150      	movs	r1, #80	; 0x50
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fc14 	bl	800c6fc <TIM_ITRx_SetConfig>
      break;
 800bed4:	e02c      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6818      	ldr	r0, [r3, #0]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	6859      	ldr	r1, [r3, #4]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	461a      	mov	r2, r3
 800bee4:	f000 fbd9 	bl	800c69a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2160      	movs	r1, #96	; 0x60
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 fc04 	bl	800c6fc <TIM_ITRx_SetConfig>
      break;
 800bef4:	e01c      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6818      	ldr	r0, [r3, #0]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	6859      	ldr	r1, [r3, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	461a      	mov	r2, r3
 800bf04:	f000 fb9a 	bl	800c63c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2140      	movs	r1, #64	; 0x40
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 fbf4 	bl	800c6fc <TIM_ITRx_SetConfig>
      break;
 800bf14:	e00c      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	4610      	mov	r0, r2
 800bf22:	f000 fbeb 	bl	800c6fc <TIM_ITRx_SetConfig>
      break;
 800bf26:	e003      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf2c:	e000      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bf2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	ffceff88 	.word	0xffceff88
 800bf50:	00100040 	.word	0x00100040
 800bf54:	00100030 	.word	0x00100030
 800bf58:	00100020 	.word	0x00100020

0800bf5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a40      	ldr	r2, [pc, #256]	; (800c070 <TIM_Base_SetConfig+0x114>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d013      	beq.n	800bf9c <TIM_Base_SetConfig+0x40>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf7a:	d00f      	beq.n	800bf9c <TIM_Base_SetConfig+0x40>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a3d      	ldr	r2, [pc, #244]	; (800c074 <TIM_Base_SetConfig+0x118>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d00b      	beq.n	800bf9c <TIM_Base_SetConfig+0x40>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a3c      	ldr	r2, [pc, #240]	; (800c078 <TIM_Base_SetConfig+0x11c>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d007      	beq.n	800bf9c <TIM_Base_SetConfig+0x40>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a3b      	ldr	r2, [pc, #236]	; (800c07c <TIM_Base_SetConfig+0x120>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d003      	beq.n	800bf9c <TIM_Base_SetConfig+0x40>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a3a      	ldr	r2, [pc, #232]	; (800c080 <TIM_Base_SetConfig+0x124>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d108      	bne.n	800bfae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a2f      	ldr	r2, [pc, #188]	; (800c070 <TIM_Base_SetConfig+0x114>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d01f      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfbc:	d01b      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a2c      	ldr	r2, [pc, #176]	; (800c074 <TIM_Base_SetConfig+0x118>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d017      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a2b      	ldr	r2, [pc, #172]	; (800c078 <TIM_Base_SetConfig+0x11c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d013      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a2a      	ldr	r2, [pc, #168]	; (800c07c <TIM_Base_SetConfig+0x120>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d00f      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a29      	ldr	r2, [pc, #164]	; (800c080 <TIM_Base_SetConfig+0x124>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d00b      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a28      	ldr	r2, [pc, #160]	; (800c084 <TIM_Base_SetConfig+0x128>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d007      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a27      	ldr	r2, [pc, #156]	; (800c088 <TIM_Base_SetConfig+0x12c>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d003      	beq.n	800bff6 <TIM_Base_SetConfig+0x9a>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a26      	ldr	r2, [pc, #152]	; (800c08c <TIM_Base_SetConfig+0x130>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d108      	bne.n	800c008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	4313      	orrs	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	4313      	orrs	r3, r2
 800c014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a10      	ldr	r2, [pc, #64]	; (800c070 <TIM_Base_SetConfig+0x114>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d00f      	beq.n	800c054 <TIM_Base_SetConfig+0xf8>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a12      	ldr	r2, [pc, #72]	; (800c080 <TIM_Base_SetConfig+0x124>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d00b      	beq.n	800c054 <TIM_Base_SetConfig+0xf8>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a11      	ldr	r2, [pc, #68]	; (800c084 <TIM_Base_SetConfig+0x128>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d007      	beq.n	800c054 <TIM_Base_SetConfig+0xf8>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a10      	ldr	r2, [pc, #64]	; (800c088 <TIM_Base_SetConfig+0x12c>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d003      	beq.n	800c054 <TIM_Base_SetConfig+0xf8>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a0f      	ldr	r2, [pc, #60]	; (800c08c <TIM_Base_SetConfig+0x130>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d103      	bne.n	800c05c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	615a      	str	r2, [r3, #20]
}
 800c062:	bf00      	nop
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	40010000 	.word	0x40010000
 800c074:	40000400 	.word	0x40000400
 800c078:	40000800 	.word	0x40000800
 800c07c:	40000c00 	.word	0x40000c00
 800c080:	40010400 	.word	0x40010400
 800c084:	40014000 	.word	0x40014000
 800c088:	40014400 	.word	0x40014400
 800c08c:	40014800 	.word	0x40014800

0800c090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c090:	b480      	push	{r7}
 800c092:	b087      	sub	sp, #28
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	f023 0201 	bic.w	r2, r3, #1
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	4b37      	ldr	r3, [pc, #220]	; (800c198 <TIM_OC1_SetConfig+0x108>)
 800c0bc:	4013      	ands	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	f023 0302 	bic.w	r3, r3, #2
 800c0d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a2d      	ldr	r2, [pc, #180]	; (800c19c <TIM_OC1_SetConfig+0x10c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d00f      	beq.n	800c10c <TIM_OC1_SetConfig+0x7c>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a2c      	ldr	r2, [pc, #176]	; (800c1a0 <TIM_OC1_SetConfig+0x110>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d00b      	beq.n	800c10c <TIM_OC1_SetConfig+0x7c>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a2b      	ldr	r2, [pc, #172]	; (800c1a4 <TIM_OC1_SetConfig+0x114>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d007      	beq.n	800c10c <TIM_OC1_SetConfig+0x7c>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a2a      	ldr	r2, [pc, #168]	; (800c1a8 <TIM_OC1_SetConfig+0x118>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d003      	beq.n	800c10c <TIM_OC1_SetConfig+0x7c>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a29      	ldr	r2, [pc, #164]	; (800c1ac <TIM_OC1_SetConfig+0x11c>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d10c      	bne.n	800c126 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f023 0308 	bic.w	r3, r3, #8
 800c112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f023 0304 	bic.w	r3, r3, #4
 800c124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a1c      	ldr	r2, [pc, #112]	; (800c19c <TIM_OC1_SetConfig+0x10c>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d00f      	beq.n	800c14e <TIM_OC1_SetConfig+0xbe>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a1b      	ldr	r2, [pc, #108]	; (800c1a0 <TIM_OC1_SetConfig+0x110>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d00b      	beq.n	800c14e <TIM_OC1_SetConfig+0xbe>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a1a      	ldr	r2, [pc, #104]	; (800c1a4 <TIM_OC1_SetConfig+0x114>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d007      	beq.n	800c14e <TIM_OC1_SetConfig+0xbe>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a19      	ldr	r2, [pc, #100]	; (800c1a8 <TIM_OC1_SetConfig+0x118>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d003      	beq.n	800c14e <TIM_OC1_SetConfig+0xbe>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a18      	ldr	r2, [pc, #96]	; (800c1ac <TIM_OC1_SetConfig+0x11c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d111      	bne.n	800c172 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c15c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	693a      	ldr	r2, [r7, #16]
 800c164:	4313      	orrs	r3, r2
 800c166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	4313      	orrs	r3, r2
 800c170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	685a      	ldr	r2, [r3, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	697a      	ldr	r2, [r7, #20]
 800c18a:	621a      	str	r2, [r3, #32]
}
 800c18c:	bf00      	nop
 800c18e:	371c      	adds	r7, #28
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr
 800c198:	fffeff8f 	.word	0xfffeff8f
 800c19c:	40010000 	.word	0x40010000
 800c1a0:	40010400 	.word	0x40010400
 800c1a4:	40014000 	.word	0x40014000
 800c1a8:	40014400 	.word	0x40014400
 800c1ac:	40014800 	.word	0x40014800

0800c1b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	f023 0210 	bic.w	r2, r3, #16
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	4b34      	ldr	r3, [pc, #208]	; (800c2ac <TIM_OC2_SetConfig+0xfc>)
 800c1dc:	4013      	ands	r3, r2
 800c1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	021b      	lsls	r3, r3, #8
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	f023 0320 	bic.w	r3, r3, #32
 800c1fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	011b      	lsls	r3, r3, #4
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	4313      	orrs	r3, r2
 800c206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a29      	ldr	r2, [pc, #164]	; (800c2b0 <TIM_OC2_SetConfig+0x100>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d003      	beq.n	800c218 <TIM_OC2_SetConfig+0x68>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a28      	ldr	r2, [pc, #160]	; (800c2b4 <TIM_OC2_SetConfig+0x104>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d10d      	bne.n	800c234 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c21e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	011b      	lsls	r3, r3, #4
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	4313      	orrs	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a1e      	ldr	r2, [pc, #120]	; (800c2b0 <TIM_OC2_SetConfig+0x100>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00f      	beq.n	800c25c <TIM_OC2_SetConfig+0xac>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a1d      	ldr	r2, [pc, #116]	; (800c2b4 <TIM_OC2_SetConfig+0x104>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d00b      	beq.n	800c25c <TIM_OC2_SetConfig+0xac>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a1c      	ldr	r2, [pc, #112]	; (800c2b8 <TIM_OC2_SetConfig+0x108>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d007      	beq.n	800c25c <TIM_OC2_SetConfig+0xac>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a1b      	ldr	r2, [pc, #108]	; (800c2bc <TIM_OC2_SetConfig+0x10c>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_OC2_SetConfig+0xac>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a1a      	ldr	r2, [pc, #104]	; (800c2c0 <TIM_OC2_SetConfig+0x110>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d113      	bne.n	800c284 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c26a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	4313      	orrs	r3, r2
 800c276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	4313      	orrs	r3, r2
 800c282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	693a      	ldr	r2, [r7, #16]
 800c288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	621a      	str	r2, [r3, #32]
}
 800c29e:	bf00      	nop
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	feff8fff 	.word	0xfeff8fff
 800c2b0:	40010000 	.word	0x40010000
 800c2b4:	40010400 	.word	0x40010400
 800c2b8:	40014000 	.word	0x40014000
 800c2bc:	40014400 	.word	0x40014400
 800c2c0:	40014800 	.word	0x40014800

0800c2c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	4b33      	ldr	r3, [pc, #204]	; (800c3bc <TIM_OC3_SetConfig+0xf8>)
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f023 0303 	bic.w	r3, r3, #3
 800c2fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	4313      	orrs	r3, r2
 800c304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c30c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	021b      	lsls	r3, r3, #8
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	4313      	orrs	r3, r2
 800c318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a28      	ldr	r2, [pc, #160]	; (800c3c0 <TIM_OC3_SetConfig+0xfc>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d003      	beq.n	800c32a <TIM_OC3_SetConfig+0x66>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a27      	ldr	r2, [pc, #156]	; (800c3c4 <TIM_OC3_SetConfig+0x100>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d10d      	bne.n	800c346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	021b      	lsls	r3, r3, #8
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a1d      	ldr	r2, [pc, #116]	; (800c3c0 <TIM_OC3_SetConfig+0xfc>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d00f      	beq.n	800c36e <TIM_OC3_SetConfig+0xaa>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a1c      	ldr	r2, [pc, #112]	; (800c3c4 <TIM_OC3_SetConfig+0x100>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d00b      	beq.n	800c36e <TIM_OC3_SetConfig+0xaa>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a1b      	ldr	r2, [pc, #108]	; (800c3c8 <TIM_OC3_SetConfig+0x104>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d007      	beq.n	800c36e <TIM_OC3_SetConfig+0xaa>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a1a      	ldr	r2, [pc, #104]	; (800c3cc <TIM_OC3_SetConfig+0x108>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d003      	beq.n	800c36e <TIM_OC3_SetConfig+0xaa>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a19      	ldr	r2, [pc, #100]	; (800c3d0 <TIM_OC3_SetConfig+0x10c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d113      	bne.n	800c396 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c37c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	011b      	lsls	r3, r3, #4
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	4313      	orrs	r3, r2
 800c388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	011b      	lsls	r3, r3, #4
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	4313      	orrs	r3, r2
 800c394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	621a      	str	r2, [r3, #32]
}
 800c3b0:	bf00      	nop
 800c3b2:	371c      	adds	r7, #28
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	fffeff8f 	.word	0xfffeff8f
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40010400 	.word	0x40010400
 800c3c8:	40014000 	.word	0x40014000
 800c3cc:	40014400 	.word	0x40014400
 800c3d0:	40014800 	.word	0x40014800

0800c3d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b087      	sub	sp, #28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a1b      	ldr	r3, [r3, #32]
 800c3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	69db      	ldr	r3, [r3, #28]
 800c3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	4b24      	ldr	r3, [pc, #144]	; (800c490 <TIM_OC4_SetConfig+0xbc>)
 800c400:	4013      	ands	r3, r2
 800c402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	021b      	lsls	r3, r3, #8
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	4313      	orrs	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	031b      	lsls	r3, r3, #12
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	4313      	orrs	r3, r2
 800c42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a19      	ldr	r2, [pc, #100]	; (800c494 <TIM_OC4_SetConfig+0xc0>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00f      	beq.n	800c454 <TIM_OC4_SetConfig+0x80>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a18      	ldr	r2, [pc, #96]	; (800c498 <TIM_OC4_SetConfig+0xc4>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00b      	beq.n	800c454 <TIM_OC4_SetConfig+0x80>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a17      	ldr	r2, [pc, #92]	; (800c49c <TIM_OC4_SetConfig+0xc8>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d007      	beq.n	800c454 <TIM_OC4_SetConfig+0x80>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a16      	ldr	r2, [pc, #88]	; (800c4a0 <TIM_OC4_SetConfig+0xcc>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d003      	beq.n	800c454 <TIM_OC4_SetConfig+0x80>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a15      	ldr	r2, [pc, #84]	; (800c4a4 <TIM_OC4_SetConfig+0xd0>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d109      	bne.n	800c468 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c45a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	019b      	lsls	r3, r3, #6
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	4313      	orrs	r3, r2
 800c466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	621a      	str	r2, [r3, #32]
}
 800c482:	bf00      	nop
 800c484:	371c      	adds	r7, #28
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	feff8fff 	.word	0xfeff8fff
 800c494:	40010000 	.word	0x40010000
 800c498:	40010400 	.word	0x40010400
 800c49c:	40014000 	.word	0x40014000
 800c4a0:	40014400 	.word	0x40014400
 800c4a4:	40014800 	.word	0x40014800

0800c4a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b087      	sub	sp, #28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	4b21      	ldr	r3, [pc, #132]	; (800c558 <TIM_OC5_SetConfig+0xb0>)
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c4e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	041b      	lsls	r3, r3, #16
 800c4f0:	693a      	ldr	r2, [r7, #16]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a18      	ldr	r2, [pc, #96]	; (800c55c <TIM_OC5_SetConfig+0xb4>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d00f      	beq.n	800c51e <TIM_OC5_SetConfig+0x76>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a17      	ldr	r2, [pc, #92]	; (800c560 <TIM_OC5_SetConfig+0xb8>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d00b      	beq.n	800c51e <TIM_OC5_SetConfig+0x76>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a16      	ldr	r2, [pc, #88]	; (800c564 <TIM_OC5_SetConfig+0xbc>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d007      	beq.n	800c51e <TIM_OC5_SetConfig+0x76>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a15      	ldr	r2, [pc, #84]	; (800c568 <TIM_OC5_SetConfig+0xc0>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d003      	beq.n	800c51e <TIM_OC5_SetConfig+0x76>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a14      	ldr	r2, [pc, #80]	; (800c56c <TIM_OC5_SetConfig+0xc4>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d109      	bne.n	800c532 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c524:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	021b      	lsls	r3, r3, #8
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	4313      	orrs	r3, r2
 800c530:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	685a      	ldr	r2, [r3, #4]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	621a      	str	r2, [r3, #32]
}
 800c54c:	bf00      	nop
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	fffeff8f 	.word	0xfffeff8f
 800c55c:	40010000 	.word	0x40010000
 800c560:	40010400 	.word	0x40010400
 800c564:	40014000 	.word	0x40014000
 800c568:	40014400 	.word	0x40014400
 800c56c:	40014800 	.word	0x40014800

0800c570 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4b22      	ldr	r3, [pc, #136]	; (800c624 <TIM_OC6_SetConfig+0xb4>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	021b      	lsls	r3, r3, #8
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c5b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	051b      	lsls	r3, r3, #20
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a19      	ldr	r2, [pc, #100]	; (800c628 <TIM_OC6_SetConfig+0xb8>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00f      	beq.n	800c5e8 <TIM_OC6_SetConfig+0x78>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a18      	ldr	r2, [pc, #96]	; (800c62c <TIM_OC6_SetConfig+0xbc>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d00b      	beq.n	800c5e8 <TIM_OC6_SetConfig+0x78>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a17      	ldr	r2, [pc, #92]	; (800c630 <TIM_OC6_SetConfig+0xc0>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d007      	beq.n	800c5e8 <TIM_OC6_SetConfig+0x78>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a16      	ldr	r2, [pc, #88]	; (800c634 <TIM_OC6_SetConfig+0xc4>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d003      	beq.n	800c5e8 <TIM_OC6_SetConfig+0x78>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a15      	ldr	r2, [pc, #84]	; (800c638 <TIM_OC6_SetConfig+0xc8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d109      	bne.n	800c5fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	695b      	ldr	r3, [r3, #20]
 800c5f4:	029b      	lsls	r3, r3, #10
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	621a      	str	r2, [r3, #32]
}
 800c616:	bf00      	nop
 800c618:	371c      	adds	r7, #28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	feff8fff 	.word	0xfeff8fff
 800c628:	40010000 	.word	0x40010000
 800c62c:	40010400 	.word	0x40010400
 800c630:	40014000 	.word	0x40014000
 800c634:	40014400 	.word	0x40014400
 800c638:	40014800 	.word	0x40014800

0800c63c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	f023 0201 	bic.w	r2, r3, #1
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	011b      	lsls	r3, r3, #4
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	4313      	orrs	r3, r2
 800c670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f023 030a 	bic.w	r3, r3, #10
 800c678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	4313      	orrs	r3, r2
 800c680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	697a      	ldr	r2, [r7, #20]
 800c68c:	621a      	str	r2, [r3, #32]
}
 800c68e:	bf00      	nop
 800c690:	371c      	adds	r7, #28
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b087      	sub	sp, #28
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	f023 0210 	bic.w	r2, r3, #16
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	031b      	lsls	r3, r3, #12
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	621a      	str	r2, [r3, #32]
}
 800c6ee:	bf00      	nop
 800c6f0:	371c      	adds	r7, #28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
	...

0800c6fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	4b09      	ldr	r3, [pc, #36]	; (800c734 <TIM_ITRx_SetConfig+0x38>)
 800c710:	4013      	ands	r3, r2
 800c712:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	4313      	orrs	r3, r2
 800c71a:	f043 0307 	orr.w	r3, r3, #7
 800c71e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	609a      	str	r2, [r3, #8]
}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	ffcfff8f 	.word	0xffcfff8f

0800c738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
 800c744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	021a      	lsls	r2, r3, #8
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	431a      	orrs	r2, r3
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	4313      	orrs	r3, r2
 800c760:	697a      	ldr	r2, [r7, #20]
 800c762:	4313      	orrs	r3, r2
 800c764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	609a      	str	r2, [r3, #8]
}
 800c76c:	bf00      	nop
 800c76e:	371c      	adds	r7, #28
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d101      	bne.n	800c790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c78c:	2302      	movs	r3, #2
 800c78e:	e06d      	b.n	800c86c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2202      	movs	r2, #2
 800c79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a30      	ldr	r2, [pc, #192]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d004      	beq.n	800c7c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a2f      	ldr	r2, [pc, #188]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d108      	bne.n	800c7d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c7ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a20      	ldr	r2, [pc, #128]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d022      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c802:	d01d      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a1d      	ldr	r2, [pc, #116]	; (800c880 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d018      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a1c      	ldr	r2, [pc, #112]	; (800c884 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d013      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a1a      	ldr	r2, [pc, #104]	; (800c888 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d00e      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a15      	ldr	r2, [pc, #84]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d009      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a16      	ldr	r2, [pc, #88]	; (800c88c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d004      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a15      	ldr	r2, [pc, #84]	; (800c890 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10c      	bne.n	800c85a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c846:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	40010000 	.word	0x40010000
 800c87c:	40010400 	.word	0x40010400
 800c880:	40000400 	.word	0x40000400
 800c884:	40000800 	.word	0x40000800
 800c888:	40000c00 	.word	0x40000c00
 800c88c:	40001800 	.word	0x40001800
 800c890:	40014000 	.word	0x40014000

0800c894 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d101      	bne.n	800c8b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	e065      	b.n	800c97c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	4313      	orrs	r3, r2
 800c90a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c916:	4313      	orrs	r3, r2
 800c918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	041b      	lsls	r3, r3, #16
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a16      	ldr	r2, [pc, #88]	; (800c988 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d004      	beq.n	800c93e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a14      	ldr	r2, [pc, #80]	; (800c98c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d115      	bne.n	800c96a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c948:	051b      	lsls	r3, r3, #20
 800c94a:	4313      	orrs	r3, r2
 800c94c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	4313      	orrs	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	4313      	orrs	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	40010000 	.word	0x40010000
 800c98c:	40010400 	.word	0x40010400

0800c990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c990:	b084      	sub	sp, #16
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	f107 001c 	add.w	r0, r7, #28
 800c99e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d120      	bne.n	800c9ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68da      	ldr	r2, [r3, #12]
 800c9b8:	4b2a      	ldr	r3, [pc, #168]	; (800ca64 <USB_CoreInit+0xd4>)
 800c9ba:	4013      	ands	r3, r2
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d105      	bne.n	800c9de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f001 fc04 	bl	800e1ec <USB_CoreReset>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]
 800c9e8:	e01a      	b.n	800ca20 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f001 fbf8 	bl	800e1ec <USB_CoreReset>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ca00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	639a      	str	r2, [r3, #56]	; 0x38
 800ca12:	e005      	b.n	800ca20 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d116      	bne.n	800ca54 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca34:	4b0c      	ldr	r3, [pc, #48]	; (800ca68 <USB_CoreInit+0xd8>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f043 0206 	orr.w	r2, r3, #6
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	f043 0220 	orr.w	r2, r3, #32
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca60:	b004      	add	sp, #16
 800ca62:	4770      	bx	lr
 800ca64:	ffbdffbf 	.word	0xffbdffbf
 800ca68:	03ee0000 	.word	0x03ee0000

0800ca6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	4613      	mov	r3, r2
 800ca78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d165      	bne.n	800cb4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	4a41      	ldr	r2, [pc, #260]	; (800cb88 <USB_SetTurnaroundTime+0x11c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d906      	bls.n	800ca96 <USB_SetTurnaroundTime+0x2a>
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	4a40      	ldr	r2, [pc, #256]	; (800cb8c <USB_SetTurnaroundTime+0x120>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d202      	bcs.n	800ca96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ca90:	230f      	movs	r3, #15
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	e062      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	4a3c      	ldr	r2, [pc, #240]	; (800cb8c <USB_SetTurnaroundTime+0x120>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d306      	bcc.n	800caac <USB_SetTurnaroundTime+0x40>
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	4a3b      	ldr	r2, [pc, #236]	; (800cb90 <USB_SetTurnaroundTime+0x124>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d202      	bcs.n	800caac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800caa6:	230e      	movs	r3, #14
 800caa8:	617b      	str	r3, [r7, #20]
 800caaa:	e057      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	4a38      	ldr	r2, [pc, #224]	; (800cb90 <USB_SetTurnaroundTime+0x124>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d306      	bcc.n	800cac2 <USB_SetTurnaroundTime+0x56>
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	4a37      	ldr	r2, [pc, #220]	; (800cb94 <USB_SetTurnaroundTime+0x128>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d202      	bcs.n	800cac2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cabc:	230d      	movs	r3, #13
 800cabe:	617b      	str	r3, [r7, #20]
 800cac0:	e04c      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	4a33      	ldr	r2, [pc, #204]	; (800cb94 <USB_SetTurnaroundTime+0x128>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d306      	bcc.n	800cad8 <USB_SetTurnaroundTime+0x6c>
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	4a32      	ldr	r2, [pc, #200]	; (800cb98 <USB_SetTurnaroundTime+0x12c>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d802      	bhi.n	800cad8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cad2:	230c      	movs	r3, #12
 800cad4:	617b      	str	r3, [r7, #20]
 800cad6:	e041      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4a2f      	ldr	r2, [pc, #188]	; (800cb98 <USB_SetTurnaroundTime+0x12c>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d906      	bls.n	800caee <USB_SetTurnaroundTime+0x82>
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	4a2e      	ldr	r2, [pc, #184]	; (800cb9c <USB_SetTurnaroundTime+0x130>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d802      	bhi.n	800caee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cae8:	230b      	movs	r3, #11
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	e036      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	4a2a      	ldr	r2, [pc, #168]	; (800cb9c <USB_SetTurnaroundTime+0x130>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d906      	bls.n	800cb04 <USB_SetTurnaroundTime+0x98>
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	4a29      	ldr	r2, [pc, #164]	; (800cba0 <USB_SetTurnaroundTime+0x134>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d802      	bhi.n	800cb04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cafe:	230a      	movs	r3, #10
 800cb00:	617b      	str	r3, [r7, #20]
 800cb02:	e02b      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	4a26      	ldr	r2, [pc, #152]	; (800cba0 <USB_SetTurnaroundTime+0x134>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d906      	bls.n	800cb1a <USB_SetTurnaroundTime+0xae>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	4a25      	ldr	r2, [pc, #148]	; (800cba4 <USB_SetTurnaroundTime+0x138>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d202      	bcs.n	800cb1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cb14:	2309      	movs	r3, #9
 800cb16:	617b      	str	r3, [r7, #20]
 800cb18:	e020      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	4a21      	ldr	r2, [pc, #132]	; (800cba4 <USB_SetTurnaroundTime+0x138>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d306      	bcc.n	800cb30 <USB_SetTurnaroundTime+0xc4>
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	4a20      	ldr	r2, [pc, #128]	; (800cba8 <USB_SetTurnaroundTime+0x13c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d802      	bhi.n	800cb30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	617b      	str	r3, [r7, #20]
 800cb2e:	e015      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	4a1d      	ldr	r2, [pc, #116]	; (800cba8 <USB_SetTurnaroundTime+0x13c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d906      	bls.n	800cb46 <USB_SetTurnaroundTime+0xda>
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	4a1c      	ldr	r2, [pc, #112]	; (800cbac <USB_SetTurnaroundTime+0x140>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d202      	bcs.n	800cb46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cb40:	2307      	movs	r3, #7
 800cb42:	617b      	str	r3, [r7, #20]
 800cb44:	e00a      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cb46:	2306      	movs	r3, #6
 800cb48:	617b      	str	r3, [r7, #20]
 800cb4a:	e007      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cb4c:	79fb      	ldrb	r3, [r7, #7]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d102      	bne.n	800cb58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cb52:	2309      	movs	r3, #9
 800cb54:	617b      	str	r3, [r7, #20]
 800cb56:	e001      	b.n	800cb5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cb58:	2309      	movs	r3, #9
 800cb5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	68da      	ldr	r2, [r3, #12]
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	029b      	lsls	r3, r3, #10
 800cb70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cb74:	431a      	orrs	r2, r3
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	371c      	adds	r7, #28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr
 800cb88:	00d8acbf 	.word	0x00d8acbf
 800cb8c:	00e4e1c0 	.word	0x00e4e1c0
 800cb90:	00f42400 	.word	0x00f42400
 800cb94:	01067380 	.word	0x01067380
 800cb98:	011a499f 	.word	0x011a499f
 800cb9c:	01312cff 	.word	0x01312cff
 800cba0:	014ca43f 	.word	0x014ca43f
 800cba4:	016e3600 	.word	0x016e3600
 800cba8:	01a6ab1f 	.word	0x01a6ab1f
 800cbac:	01e84800 	.word	0x01e84800

0800cbb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f043 0201 	orr.w	r2, r3, #1
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr

0800cbd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	b083      	sub	sp, #12
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	f023 0201 	bic.w	r2, r3, #1
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d115      	bne.n	800cc42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cc22:	2001      	movs	r0, #1
 800cc24:	f7f5 fbe8 	bl	80023f8 <HAL_Delay>
      ms++;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 fa4b 	bl	800e0ca <USB_GetMode>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d01e      	beq.n	800cc78 <USB_SetCurrentMode+0x84>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2b31      	cmp	r3, #49	; 0x31
 800cc3e:	d9f0      	bls.n	800cc22 <USB_SetCurrentMode+0x2e>
 800cc40:	e01a      	b.n	800cc78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc42:	78fb      	ldrb	r3, [r7, #3]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d115      	bne.n	800cc74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cc54:	2001      	movs	r0, #1
 800cc56:	f7f5 fbcf 	bl	80023f8 <HAL_Delay>
      ms++;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f001 fa32 	bl	800e0ca <USB_GetMode>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d005      	beq.n	800cc78 <USB_SetCurrentMode+0x84>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b31      	cmp	r3, #49	; 0x31
 800cc70:	d9f0      	bls.n	800cc54 <USB_SetCurrentMode+0x60>
 800cc72:	e001      	b.n	800cc78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	e005      	b.n	800cc84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b32      	cmp	r3, #50	; 0x32
 800cc7c:	d101      	bne.n	800cc82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e000      	b.n	800cc84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b086      	sub	sp, #24
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cca6:	2300      	movs	r3, #0
 800cca8:	613b      	str	r3, [r7, #16]
 800ccaa:	e009      	b.n	800ccc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	3340      	adds	r3, #64	; 0x40
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	613b      	str	r3, [r7, #16]
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	2b0e      	cmp	r3, #14
 800ccc4:	d9f2      	bls.n	800ccac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ccc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d11c      	bne.n	800cd06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccda:	f043 0302 	orr.w	r3, r3, #2
 800ccde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	e005      	b.n	800cd12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd18:	461a      	mov	r2, r3
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd24:	4619      	mov	r1, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	680b      	ldr	r3, [r1, #0]
 800cd30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d10c      	bne.n	800cd52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d104      	bne.n	800cd48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cd3e:	2100      	movs	r1, #0
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f965 	bl	800d010 <USB_SetDevSpeed>
 800cd46:	e008      	b.n	800cd5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cd48:	2101      	movs	r1, #1
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f960 	bl	800d010 <USB_SetDevSpeed>
 800cd50:	e003      	b.n	800cd5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd52:	2103      	movs	r1, #3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f95b 	bl	800d010 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd5a:	2110      	movs	r1, #16
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f8f3 	bl	800cf48 <USB_FlushTxFifo>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 f91f 	bl	800cfb0 <USB_FlushRxFifo>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd82:	461a      	mov	r2, r3
 800cd84:	2300      	movs	r3, #0
 800cd86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd8e:	461a      	mov	r2, r3
 800cd90:	2300      	movs	r3, #0
 800cd92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cda0:	2300      	movs	r3, #0
 800cda2:	613b      	str	r3, [r7, #16]
 800cda4:	e043      	b.n	800ce2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	015a      	lsls	r2, r3, #5
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	4413      	add	r3, r2
 800cdae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdbc:	d118      	bne.n	800cdf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	e013      	b.n	800ce02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	015a      	lsls	r2, r3, #5
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	4413      	add	r3, r2
 800cde2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde6:	461a      	mov	r2, r3
 800cde8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cdec:	6013      	str	r3, [r2, #0]
 800cdee:	e008      	b.n	800ce02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	2300      	movs	r3, #0
 800ce00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	015a      	lsls	r2, r3, #5
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	4413      	add	r3, r2
 800ce0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0e:	461a      	mov	r2, r3
 800ce10:	2300      	movs	r3, #0
 800ce12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce20:	461a      	mov	r2, r3
 800ce22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	613b      	str	r3, [r7, #16]
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d3b7      	bcc.n	800cda6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce36:	2300      	movs	r3, #0
 800ce38:	613b      	str	r3, [r7, #16]
 800ce3a:	e043      	b.n	800cec4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	015a      	lsls	r2, r3, #5
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	4413      	add	r3, r2
 800ce44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce52:	d118      	bne.n	800ce86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10a      	bne.n	800ce70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce66:	461a      	mov	r2, r3
 800ce68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	e013      	b.n	800ce98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	015a      	lsls	r2, r3, #5
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce82:	6013      	str	r3, [r2, #0]
 800ce84:	e008      	b.n	800ce98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	015a      	lsls	r2, r3, #5
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce92:	461a      	mov	r2, r3
 800ce94:	2300      	movs	r3, #0
 800ce96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea4:	461a      	mov	r2, r3
 800cea6:	2300      	movs	r3, #0
 800cea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	015a      	lsls	r2, r3, #5
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	3301      	adds	r3, #1
 800cec2:	613b      	str	r3, [r7, #16]
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d3b7      	bcc.n	800ce3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cede:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ceec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d105      	bne.n	800cf00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	f043 0210 	orr.w	r2, r3, #16
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	699a      	ldr	r2, [r3, #24]
 800cf04:	4b0e      	ldr	r3, [pc, #56]	; (800cf40 <USB_DevInit+0x2b4>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d005      	beq.n	800cf1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	699b      	ldr	r3, [r3, #24]
 800cf16:	f043 0208 	orr.w	r2, r3, #8
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cf1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d105      	bne.n	800cf30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	699a      	ldr	r2, [r3, #24]
 800cf28:	4b06      	ldr	r3, [pc, #24]	; (800cf44 <USB_DevInit+0x2b8>)
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf3c:	b004      	add	sp, #16
 800cf3e:	4770      	bx	lr
 800cf40:	803c3800 	.word	0x803c3800
 800cf44:	40000004 	.word	0x40000004

0800cf48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cf52:	2300      	movs	r3, #0
 800cf54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4a13      	ldr	r2, [pc, #76]	; (800cfac <USB_FlushTxFifo+0x64>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d901      	bls.n	800cf68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cf64:	2303      	movs	r3, #3
 800cf66:	e01b      	b.n	800cfa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	daf2      	bge.n	800cf56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	019b      	lsls	r3, r3, #6
 800cf78:	f043 0220 	orr.w	r2, r3, #32
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3301      	adds	r3, #1
 800cf84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4a08      	ldr	r2, [pc, #32]	; (800cfac <USB_FlushTxFifo+0x64>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d901      	bls.n	800cf92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	e006      	b.n	800cfa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	f003 0320 	and.w	r3, r3, #32
 800cf9a:	2b20      	cmp	r3, #32
 800cf9c:	d0f0      	beq.n	800cf80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr
 800cfac:	00030d40 	.word	0x00030d40

0800cfb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	4a11      	ldr	r2, [pc, #68]	; (800d00c <USB_FlushRxFifo+0x5c>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d901      	bls.n	800cfce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e018      	b.n	800d000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	daf2      	bge.n	800cfbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2210      	movs	r2, #16
 800cfde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4a08      	ldr	r2, [pc, #32]	; (800d00c <USB_FlushRxFifo+0x5c>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d901      	bls.n	800cff2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cfee:	2303      	movs	r3, #3
 800cff0:	e006      	b.n	800d000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	f003 0310 	and.w	r3, r3, #16
 800cffa:	2b10      	cmp	r3, #16
 800cffc:	d0f0      	beq.n	800cfe0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3714      	adds	r7, #20
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	00030d40 	.word	0x00030d40

0800d010 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	78fb      	ldrb	r3, [r7, #3]
 800d02a:	68f9      	ldr	r1, [r7, #12]
 800d02c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d030:	4313      	orrs	r3, r2
 800d032:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d042:	b480      	push	{r7}
 800d044:	b087      	sub	sp, #28
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f003 0306 	and.w	r3, r3, #6
 800d05a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d102      	bne.n	800d068 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d062:	2300      	movs	r3, #0
 800d064:	75fb      	strb	r3, [r7, #23]
 800d066:	e00a      	b.n	800d07e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d002      	beq.n	800d074 <USB_GetDevSpeed+0x32>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b06      	cmp	r3, #6
 800d072:	d102      	bne.n	800d07a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d074:	2302      	movs	r3, #2
 800d076:	75fb      	strb	r3, [r7, #23]
 800d078:	e001      	b.n	800d07e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d07a:	230f      	movs	r3, #15
 800d07c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d080:	4618      	mov	r0, r3
 800d082:	371c      	adds	r7, #28
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	785b      	ldrb	r3, [r3, #1]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d139      	bne.n	800d11c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ae:	69da      	ldr	r2, [r3, #28]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	f003 030f 	and.w	r3, r3, #15
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	68f9      	ldr	r1, [r7, #12]
 800d0c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d153      	bne.n	800d188 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	015a      	lsls	r2, r3, #5
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	791b      	ldrb	r3, [r3, #4]
 800d0fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d0fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	059b      	lsls	r3, r3, #22
 800d102:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d104:	431a      	orrs	r2, r3
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	0159      	lsls	r1, r3, #5
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	440b      	add	r3, r1
 800d10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d112:	4619      	mov	r1, r3
 800d114:	4b20      	ldr	r3, [pc, #128]	; (800d198 <USB_ActivateEndpoint+0x10c>)
 800d116:	4313      	orrs	r3, r2
 800d118:	600b      	str	r3, [r1, #0]
 800d11a:	e035      	b.n	800d188 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	69da      	ldr	r2, [r3, #28]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	f003 030f 	and.w	r3, r3, #15
 800d12c:	2101      	movs	r1, #1
 800d12e:	fa01 f303 	lsl.w	r3, r1, r3
 800d132:	041b      	lsls	r3, r3, #16
 800d134:	68f9      	ldr	r1, [r7, #12]
 800d136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d13a:	4313      	orrs	r3, r2
 800d13c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	015a      	lsls	r2, r3, #5
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	4413      	add	r3, r2
 800d146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d119      	bne.n	800d188 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	015a      	lsls	r2, r3, #5
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	4413      	add	r3, r2
 800d15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	791b      	ldrb	r3, [r3, #4]
 800d16e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d170:	430b      	orrs	r3, r1
 800d172:	431a      	orrs	r2, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	0159      	lsls	r1, r3, #5
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	440b      	add	r3, r1
 800d17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d180:	4619      	mov	r1, r3
 800d182:	4b05      	ldr	r3, [pc, #20]	; (800d198 <USB_ActivateEndpoint+0x10c>)
 800d184:	4313      	orrs	r3, r2
 800d186:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	10008000 	.word	0x10008000

0800d19c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	785b      	ldrb	r3, [r3, #1]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d161      	bne.n	800d27c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	4413      	add	r3, r2
 800d1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1ce:	d11f      	bne.n	800d210 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	015a      	lsls	r2, r3, #5
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	0151      	lsls	r1, r2, #5
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	440a      	add	r2, r1
 800d1e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d1ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	015a      	lsls	r2, r3, #5
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	0151      	lsls	r1, r2, #5
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	440a      	add	r2, r1
 800d206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d20a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d20e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	f003 030f 	and.w	r3, r3, #15
 800d220:	2101      	movs	r1, #1
 800d222:	fa01 f303 	lsl.w	r3, r1, r3
 800d226:	b29b      	uxth	r3, r3
 800d228:	43db      	mvns	r3, r3
 800d22a:	68f9      	ldr	r1, [r7, #12]
 800d22c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d230:	4013      	ands	r3, r2
 800d232:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d23a:	69da      	ldr	r2, [r3, #28]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	f003 030f 	and.w	r3, r3, #15
 800d244:	2101      	movs	r1, #1
 800d246:	fa01 f303 	lsl.w	r3, r1, r3
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	43db      	mvns	r3, r3
 800d24e:	68f9      	ldr	r1, [r7, #12]
 800d250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d254:	4013      	ands	r3, r2
 800d256:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	015a      	lsls	r2, r3, #5
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	4413      	add	r3, r2
 800d260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	0159      	lsls	r1, r3, #5
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	440b      	add	r3, r1
 800d26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d272:	4619      	mov	r1, r3
 800d274:	4b35      	ldr	r3, [pc, #212]	; (800d34c <USB_DeactivateEndpoint+0x1b0>)
 800d276:	4013      	ands	r3, r2
 800d278:	600b      	str	r3, [r1, #0]
 800d27a:	e060      	b.n	800d33e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	4413      	add	r3, r2
 800d284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d28e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d292:	d11f      	bne.n	800d2d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	015a      	lsls	r2, r3, #5
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	4413      	add	r3, r2
 800d29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	0151      	lsls	r1, r2, #5
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	440a      	add	r2, r1
 800d2aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d2b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	0151      	lsls	r1, r2, #5
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	440a      	add	r2, r1
 800d2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	f003 030f 	and.w	r3, r3, #15
 800d2e4:	2101      	movs	r1, #1
 800d2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ea:	041b      	lsls	r3, r3, #16
 800d2ec:	43db      	mvns	r3, r3
 800d2ee:	68f9      	ldr	r1, [r7, #12]
 800d2f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2fe:	69da      	ldr	r2, [r3, #28]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	f003 030f 	and.w	r3, r3, #15
 800d308:	2101      	movs	r1, #1
 800d30a:	fa01 f303 	lsl.w	r3, r1, r3
 800d30e:	041b      	lsls	r3, r3, #16
 800d310:	43db      	mvns	r3, r3
 800d312:	68f9      	ldr	r1, [r7, #12]
 800d314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d318:	4013      	ands	r3, r2
 800d31a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	015a      	lsls	r2, r3, #5
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4413      	add	r3, r2
 800d324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	0159      	lsls	r1, r3, #5
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	440b      	add	r3, r1
 800d332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d336:	4619      	mov	r1, r3
 800d338:	4b05      	ldr	r3, [pc, #20]	; (800d350 <USB_DeactivateEndpoint+0x1b4>)
 800d33a:	4013      	ands	r3, r2
 800d33c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	ec337800 	.word	0xec337800
 800d350:	eff37800 	.word	0xeff37800

0800d354 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af02      	add	r7, sp, #8
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	4613      	mov	r3, r2
 800d360:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	785b      	ldrb	r3, [r3, #1]
 800d370:	2b01      	cmp	r3, #1
 800d372:	f040 8163 	bne.w	800d63c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	699b      	ldr	r3, [r3, #24]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d132      	bne.n	800d3e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	4413      	add	r3, r2
 800d386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d38a:	691a      	ldr	r2, [r3, #16]
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	0159      	lsls	r1, r3, #5
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	440b      	add	r3, r1
 800d394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d398:	4619      	mov	r1, r3
 800d39a:	4ba5      	ldr	r3, [pc, #660]	; (800d630 <USB_EPStartXfer+0x2dc>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	015a      	lsls	r2, r3, #5
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	69ba      	ldr	r2, [r7, #24]
 800d3b0:	0151      	lsls	r1, r2, #5
 800d3b2:	69fa      	ldr	r2, [r7, #28]
 800d3b4:	440a      	add	r2, r1
 800d3b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	015a      	lsls	r2, r3, #5
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3cc:	691a      	ldr	r2, [r3, #16]
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	0159      	lsls	r1, r3, #5
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	440b      	add	r3, r1
 800d3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4b95      	ldr	r3, [pc, #596]	; (800d634 <USB_EPStartXfer+0x2e0>)
 800d3de:	4013      	ands	r3, r2
 800d3e0:	610b      	str	r3, [r1, #16]
 800d3e2:	e074      	b.n	800d4ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f0:	691a      	ldr	r2, [r3, #16]
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	0159      	lsls	r1, r3, #5
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	440b      	add	r3, r1
 800d3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3fe:	4619      	mov	r1, r3
 800d400:	4b8c      	ldr	r3, [pc, #560]	; (800d634 <USB_EPStartXfer+0x2e0>)
 800d402:	4013      	ands	r3, r2
 800d404:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	015a      	lsls	r2, r3, #5
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d412:	691a      	ldr	r2, [r3, #16]
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	0159      	lsls	r1, r3, #5
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	440b      	add	r3, r1
 800d41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d420:	4619      	mov	r1, r3
 800d422:	4b83      	ldr	r3, [pc, #524]	; (800d630 <USB_EPStartXfer+0x2dc>)
 800d424:	4013      	ands	r3, r2
 800d426:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	015a      	lsls	r2, r3, #5
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	4413      	add	r3, r2
 800d430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d434:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	6999      	ldr	r1, [r3, #24]
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	440b      	add	r3, r1
 800d440:	1e59      	subs	r1, r3, #1
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	fbb1 f3f3 	udiv	r3, r1, r3
 800d44a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d44c:	4b7a      	ldr	r3, [pc, #488]	; (800d638 <USB_EPStartXfer+0x2e4>)
 800d44e:	400b      	ands	r3, r1
 800d450:	69b9      	ldr	r1, [r7, #24]
 800d452:	0148      	lsls	r0, r1, #5
 800d454:	69f9      	ldr	r1, [r7, #28]
 800d456:	4401      	add	r1, r0
 800d458:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d45c:	4313      	orrs	r3, r2
 800d45e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46c:	691a      	ldr	r2, [r3, #16]
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d476:	69b9      	ldr	r1, [r7, #24]
 800d478:	0148      	lsls	r0, r1, #5
 800d47a:	69f9      	ldr	r1, [r7, #28]
 800d47c:	4401      	add	r1, r0
 800d47e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d482:	4313      	orrs	r3, r2
 800d484:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	791b      	ldrb	r3, [r3, #4]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d11f      	bne.n	800d4ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	015a      	lsls	r2, r3, #5
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	4413      	add	r3, r2
 800d496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	0151      	lsls	r1, r2, #5
 800d4a0:	69fa      	ldr	r2, [r7, #28]
 800d4a2:	440a      	add	r2, r1
 800d4a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d4ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	015a      	lsls	r2, r3, #5
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	69ba      	ldr	r2, [r7, #24]
 800d4be:	0151      	lsls	r1, r2, #5
 800d4c0:	69fa      	ldr	r2, [r7, #28]
 800d4c2:	440a      	add	r2, r1
 800d4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d4ce:	79fb      	ldrb	r3, [r7, #7]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d14b      	bne.n	800d56c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d009      	beq.n	800d4f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	015a      	lsls	r2, r3, #5
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	695b      	ldr	r3, [r3, #20]
 800d4ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	791b      	ldrb	r3, [r3, #4]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d128      	bne.n	800d54a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d504:	2b00      	cmp	r3, #0
 800d506:	d110      	bne.n	800d52a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	69ba      	ldr	r2, [r7, #24]
 800d518:	0151      	lsls	r1, r2, #5
 800d51a:	69fa      	ldr	r2, [r7, #28]
 800d51c:	440a      	add	r2, r1
 800d51e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d526:	6013      	str	r3, [r2, #0]
 800d528:	e00f      	b.n	800d54a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	015a      	lsls	r2, r3, #5
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	4413      	add	r3, r2
 800d532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	69ba      	ldr	r2, [r7, #24]
 800d53a:	0151      	lsls	r1, r2, #5
 800d53c:	69fa      	ldr	r2, [r7, #28]
 800d53e:	440a      	add	r2, r1
 800d540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d548:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	015a      	lsls	r2, r3, #5
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	4413      	add	r3, r2
 800d552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	69ba      	ldr	r2, [r7, #24]
 800d55a:	0151      	lsls	r1, r2, #5
 800d55c:	69fa      	ldr	r2, [r7, #28]
 800d55e:	440a      	add	r2, r1
 800d560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d564:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d568:	6013      	str	r3, [r2, #0]
 800d56a:	e137      	b.n	800d7dc <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	015a      	lsls	r2, r3, #5
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	4413      	add	r3, r2
 800d574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	69ba      	ldr	r2, [r7, #24]
 800d57c:	0151      	lsls	r1, r2, #5
 800d57e:	69fa      	ldr	r2, [r7, #28]
 800d580:	440a      	add	r2, r1
 800d582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d58a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	791b      	ldrb	r3, [r3, #4]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d015      	beq.n	800d5c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 811f 	beq.w	800d7dc <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	f003 030f 	and.w	r3, r3, #15
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5b4:	69f9      	ldr	r1, [r7, #28]
 800d5b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	634b      	str	r3, [r1, #52]	; 0x34
 800d5be:	e10d      	b.n	800d7dc <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d110      	bne.n	800d5f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	015a      	lsls	r2, r3, #5
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	69ba      	ldr	r2, [r7, #24]
 800d5e0:	0151      	lsls	r1, r2, #5
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	440a      	add	r2, r1
 800d5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	e00f      	b.n	800d612 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	69ba      	ldr	r2, [r7, #24]
 800d602:	0151      	lsls	r1, r2, #5
 800d604:	69fa      	ldr	r2, [r7, #28]
 800d606:	440a      	add	r2, r1
 800d608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d60c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d610:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	6919      	ldr	r1, [r3, #16]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	781a      	ldrb	r2, [r3, #0]
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	b298      	uxth	r0, r3
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	4603      	mov	r3, r0
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f000 faea 	bl	800dc00 <USB_WritePacket>
 800d62c:	e0d6      	b.n	800d7dc <USB_EPStartXfer+0x488>
 800d62e:	bf00      	nop
 800d630:	e007ffff 	.word	0xe007ffff
 800d634:	fff80000 	.word	0xfff80000
 800d638:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d648:	691a      	ldr	r2, [r3, #16]
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	0159      	lsls	r1, r3, #5
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	440b      	add	r3, r1
 800d652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d656:	4619      	mov	r1, r3
 800d658:	4b63      	ldr	r3, [pc, #396]	; (800d7e8 <USB_EPStartXfer+0x494>)
 800d65a:	4013      	ands	r3, r2
 800d65c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	015a      	lsls	r2, r3, #5
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
 800d666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d66a:	691a      	ldr	r2, [r3, #16]
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	0159      	lsls	r1, r3, #5
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	440b      	add	r3, r1
 800d674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d678:	4619      	mov	r1, r3
 800d67a:	4b5c      	ldr	r3, [pc, #368]	; (800d7ec <USB_EPStartXfer+0x498>)
 800d67c:	4013      	ands	r3, r2
 800d67e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	699b      	ldr	r3, [r3, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d123      	bne.n	800d6d0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	015a      	lsls	r2, r3, #5
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	4413      	add	r3, r2
 800d690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d694:	691a      	ldr	r2, [r3, #16]
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d69e:	69b9      	ldr	r1, [r7, #24]
 800d6a0:	0148      	lsls	r0, r1, #5
 800d6a2:	69f9      	ldr	r1, [r7, #28]
 800d6a4:	4401      	add	r1, r0
 800d6a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	69ba      	ldr	r2, [r7, #24]
 800d6be:	0151      	lsls	r1, r2, #5
 800d6c0:	69fa      	ldr	r2, [r7, #28]
 800d6c2:	440a      	add	r2, r1
 800d6c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6cc:	6113      	str	r3, [r2, #16]
 800d6ce:	e037      	b.n	800d740 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	699a      	ldr	r2, [r3, #24]
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	4413      	add	r3, r2
 800d6da:	1e5a      	subs	r2, r3, #1
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	8afa      	ldrh	r2, [r7, #22]
 800d6ec:	fb02 f203 	mul.w	r2, r2, r3
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d700:	691a      	ldr	r2, [r3, #16]
 800d702:	8afb      	ldrh	r3, [r7, #22]
 800d704:	04d9      	lsls	r1, r3, #19
 800d706:	4b3a      	ldr	r3, [pc, #232]	; (800d7f0 <USB_EPStartXfer+0x49c>)
 800d708:	400b      	ands	r3, r1
 800d70a:	69b9      	ldr	r1, [r7, #24]
 800d70c:	0148      	lsls	r0, r1, #5
 800d70e:	69f9      	ldr	r1, [r7, #28]
 800d710:	4401      	add	r1, r0
 800d712:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d716:	4313      	orrs	r3, r2
 800d718:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	015a      	lsls	r2, r3, #5
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	4413      	add	r3, r2
 800d722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d726:	691a      	ldr	r2, [r3, #16]
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	69db      	ldr	r3, [r3, #28]
 800d72c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d730:	69b9      	ldr	r1, [r7, #24]
 800d732:	0148      	lsls	r0, r1, #5
 800d734:	69f9      	ldr	r1, [r7, #28]
 800d736:	4401      	add	r1, r0
 800d738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d73c:	4313      	orrs	r3, r2
 800d73e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d740:	79fb      	ldrb	r3, [r7, #7]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d10d      	bne.n	800d762 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d009      	beq.n	800d762 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	6919      	ldr	r1, [r3, #16]
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	015a      	lsls	r2, r3, #5
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	4413      	add	r3, r2
 800d75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75e:	460a      	mov	r2, r1
 800d760:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	791b      	ldrb	r3, [r3, #4]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d128      	bne.n	800d7bc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d776:	2b00      	cmp	r3, #0
 800d778:	d110      	bne.n	800d79c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	015a      	lsls	r2, r3, #5
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	4413      	add	r3, r2
 800d782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	69ba      	ldr	r2, [r7, #24]
 800d78a:	0151      	lsls	r1, r2, #5
 800d78c:	69fa      	ldr	r2, [r7, #28]
 800d78e:	440a      	add	r2, r1
 800d790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d798:	6013      	str	r3, [r2, #0]
 800d79a:	e00f      	b.n	800d7bc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	015a      	lsls	r2, r3, #5
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	69ba      	ldr	r2, [r7, #24]
 800d7ac:	0151      	lsls	r1, r2, #5
 800d7ae:	69fa      	ldr	r2, [r7, #28]
 800d7b0:	440a      	add	r2, r1
 800d7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	015a      	lsls	r2, r3, #5
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	69ba      	ldr	r2, [r7, #24]
 800d7cc:	0151      	lsls	r1, r2, #5
 800d7ce:	69fa      	ldr	r2, [r7, #28]
 800d7d0:	440a      	add	r2, r1
 800d7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3720      	adds	r7, #32
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	fff80000 	.word	0xfff80000
 800d7ec:	e007ffff 	.word	0xe007ffff
 800d7f0:	1ff80000 	.word	0x1ff80000

0800d7f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	4613      	mov	r3, r2
 800d800:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	785b      	ldrb	r3, [r3, #1]
 800d810:	2b01      	cmp	r3, #1
 800d812:	f040 80ce 	bne.w	800d9b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	699b      	ldr	r3, [r3, #24]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d132      	bne.n	800d884 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	015a      	lsls	r2, r3, #5
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	4413      	add	r3, r2
 800d826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d82a:	691a      	ldr	r2, [r3, #16]
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	0159      	lsls	r1, r3, #5
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	440b      	add	r3, r1
 800d834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d838:	4619      	mov	r1, r3
 800d83a:	4b9a      	ldr	r3, [pc, #616]	; (800daa4 <USB_EP0StartXfer+0x2b0>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	015a      	lsls	r2, r3, #5
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	4413      	add	r3, r2
 800d848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	0151      	lsls	r1, r2, #5
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	440a      	add	r2, r1
 800d856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d85a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d85e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	015a      	lsls	r2, r3, #5
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	4413      	add	r3, r2
 800d868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d86c:	691a      	ldr	r2, [r3, #16]
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	0159      	lsls	r1, r3, #5
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	440b      	add	r3, r1
 800d876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d87a:	4619      	mov	r1, r3
 800d87c:	4b8a      	ldr	r3, [pc, #552]	; (800daa8 <USB_EP0StartXfer+0x2b4>)
 800d87e:	4013      	ands	r3, r2
 800d880:	610b      	str	r3, [r1, #16]
 800d882:	e04e      	b.n	800d922 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	015a      	lsls	r2, r3, #5
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	4413      	add	r3, r2
 800d88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d890:	691a      	ldr	r2, [r3, #16]
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	0159      	lsls	r1, r3, #5
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	440b      	add	r3, r1
 800d89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d89e:	4619      	mov	r1, r3
 800d8a0:	4b81      	ldr	r3, [pc, #516]	; (800daa8 <USB_EP0StartXfer+0x2b4>)
 800d8a2:	4013      	ands	r3, r2
 800d8a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	015a      	lsls	r2, r3, #5
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8b2:	691a      	ldr	r2, [r3, #16]
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	0159      	lsls	r1, r3, #5
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	440b      	add	r3, r1
 800d8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4b78      	ldr	r3, [pc, #480]	; (800daa4 <USB_EP0StartXfer+0x2b0>)
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	699a      	ldr	r2, [r3, #24]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d903      	bls.n	800d8dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	68da      	ldr	r2, [r3, #12]
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	015a      	lsls	r2, r3, #5
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	0151      	lsls	r1, r2, #5
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	440a      	add	r2, r1
 800d8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	015a      	lsls	r2, r3, #5
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	4413      	add	r3, r2
 800d904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d908:	691a      	ldr	r2, [r3, #16]
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	699b      	ldr	r3, [r3, #24]
 800d90e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d912:	6939      	ldr	r1, [r7, #16]
 800d914:	0148      	lsls	r0, r1, #5
 800d916:	6979      	ldr	r1, [r7, #20]
 800d918:	4401      	add	r1, r0
 800d91a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d91e:	4313      	orrs	r3, r2
 800d920:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d11e      	bne.n	800d966 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d009      	beq.n	800d944 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	015a      	lsls	r2, r3, #5
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	4413      	add	r3, r2
 800d938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d93c:	461a      	mov	r2, r3
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	695b      	ldr	r3, [r3, #20]
 800d942:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	015a      	lsls	r2, r3, #5
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	4413      	add	r3, r2
 800d94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	0151      	lsls	r1, r2, #5
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	440a      	add	r2, r1
 800d95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d95e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	e097      	b.n	800da96 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	015a      	lsls	r2, r3, #5
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	4413      	add	r3, r2
 800d96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	0151      	lsls	r1, r2, #5
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	440a      	add	r2, r1
 800d97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d980:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d984:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f000 8083 	beq.w	800da96 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	f003 030f 	and.w	r3, r3, #15
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d9a6:	6979      	ldr	r1, [r7, #20]
 800d9a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	634b      	str	r3, [r1, #52]	; 0x34
 800d9b0:	e071      	b.n	800da96 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9be:	691a      	ldr	r2, [r3, #16]
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	0159      	lsls	r1, r3, #5
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	440b      	add	r3, r1
 800d9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	4b36      	ldr	r3, [pc, #216]	; (800daa8 <USB_EP0StartXfer+0x2b4>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	015a      	lsls	r2, r3, #5
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e0:	691a      	ldr	r2, [r3, #16]
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	0159      	lsls	r1, r3, #5
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	440b      	add	r3, r1
 800d9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	4b2c      	ldr	r3, [pc, #176]	; (800daa4 <USB_EP0StartXfer+0x2b0>)
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	68da      	ldr	r2, [r3, #12]
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	68da      	ldr	r2, [r3, #12]
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	015a      	lsls	r2, r3, #5
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	4413      	add	r3, r2
 800da16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	0151      	lsls	r1, r2, #5
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	440a      	add	r2, r1
 800da24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	015a      	lsls	r2, r3, #5
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	4413      	add	r3, r2
 800da36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da3a:	691a      	ldr	r2, [r3, #16]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	69db      	ldr	r3, [r3, #28]
 800da40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da44:	6939      	ldr	r1, [r7, #16]
 800da46:	0148      	lsls	r0, r1, #5
 800da48:	6979      	ldr	r1, [r7, #20]
 800da4a:	4401      	add	r1, r0
 800da4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da50:	4313      	orrs	r3, r2
 800da52:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d10d      	bne.n	800da76 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d009      	beq.n	800da76 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	6919      	ldr	r1, [r3, #16]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	015a      	lsls	r2, r3, #5
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da72:	460a      	mov	r2, r1
 800da74:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	015a      	lsls	r2, r3, #5
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	4413      	add	r3, r2
 800da7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	0151      	lsls	r1, r2, #5
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	440a      	add	r2, r1
 800da8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	371c      	adds	r7, #28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	e007ffff 	.word	0xe007ffff
 800daa8:	fff80000 	.word	0xfff80000

0800daac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800daac:	b480      	push	{r7}
 800daae:	b087      	sub	sp, #28
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	785b      	ldrb	r3, [r3, #1]
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d14a      	bne.n	800db60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	015a      	lsls	r2, r3, #5
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dae2:	f040 8086 	bne.w	800dbf2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	015a      	lsls	r2, r3, #5
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	4413      	add	r3, r2
 800daf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	7812      	ldrb	r2, [r2, #0]
 800dafa:	0151      	lsls	r1, r2, #5
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	440a      	add	r2, r1
 800db00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	015a      	lsls	r2, r3, #5
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	4413      	add	r3, r2
 800db14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	7812      	ldrb	r2, [r2, #0]
 800db1e:	0151      	lsls	r1, r2, #5
 800db20:	693a      	ldr	r2, [r7, #16]
 800db22:	440a      	add	r2, r1
 800db24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3301      	adds	r3, #1
 800db32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f242 7210 	movw	r2, #10000	; 0x2710
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d902      	bls.n	800db44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800db3e:	2301      	movs	r3, #1
 800db40:	75fb      	strb	r3, [r7, #23]
          break;
 800db42:	e056      	b.n	800dbf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	015a      	lsls	r2, r3, #5
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	4413      	add	r3, r2
 800db4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db5c:	d0e7      	beq.n	800db2e <USB_EPStopXfer+0x82>
 800db5e:	e048      	b.n	800dbf2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	015a      	lsls	r2, r3, #5
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	4413      	add	r3, r2
 800db6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db78:	d13b      	bne.n	800dbf2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	015a      	lsls	r2, r3, #5
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	4413      	add	r3, r2
 800db84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	7812      	ldrb	r2, [r2, #0]
 800db8e:	0151      	lsls	r1, r2, #5
 800db90:	693a      	ldr	r2, [r7, #16]
 800db92:	440a      	add	r2, r1
 800db94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	7812      	ldrb	r2, [r2, #0]
 800dbb2:	0151      	lsls	r1, r2, #5
 800dbb4:	693a      	ldr	r2, [r7, #16]
 800dbb6:	440a      	add	r2, r1
 800dbb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f242 7210 	movw	r2, #10000	; 0x2710
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d902      	bls.n	800dbd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	75fb      	strb	r3, [r7, #23]
          break;
 800dbd6:	e00c      	b.n	800dbf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	015a      	lsls	r2, r3, #5
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbf0:	d0e7      	beq.n	800dbc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	371c      	adds	r7, #28
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b089      	sub	sp, #36	; 0x24
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	460b      	mov	r3, r1
 800dc10:	71fb      	strb	r3, [r7, #7]
 800dc12:	4613      	mov	r3, r2
 800dc14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800dc1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d123      	bne.n	800dc6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dc26:	88bb      	ldrh	r3, [r7, #4]
 800dc28:	3303      	adds	r3, #3
 800dc2a:	089b      	lsrs	r3, r3, #2
 800dc2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dc2e:	2300      	movs	r3, #0
 800dc30:	61bb      	str	r3, [r7, #24]
 800dc32:	e018      	b.n	800dc66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dc34:	79fb      	ldrb	r3, [r7, #7]
 800dc36:	031a      	lsls	r2, r3, #12
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc40:	461a      	mov	r2, r3
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	3301      	adds	r3, #1
 800dc52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	3301      	adds	r3, #1
 800dc58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	3301      	adds	r3, #1
 800dc64:	61bb      	str	r3, [r7, #24]
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d3e2      	bcc.n	800dc34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3724      	adds	r7, #36	; 0x24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b08b      	sub	sp, #44	; 0x2c
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	4613      	mov	r3, r2
 800dc88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	089b      	lsrs	r3, r3, #2
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dc9a:	88fb      	ldrh	r3, [r7, #6]
 800dc9c:	f003 0303 	and.w	r3, r3, #3
 800dca0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dca2:	2300      	movs	r3, #0
 800dca4:	623b      	str	r3, [r7, #32]
 800dca6:	e014      	b.n	800dcd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb2:	601a      	str	r2, [r3, #0]
    pDest++;
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	3301      	adds	r3, #1
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dccc:	6a3b      	ldr	r3, [r7, #32]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	623b      	str	r3, [r7, #32]
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d3e6      	bcc.n	800dca8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dcda:	8bfb      	ldrh	r3, [r7, #30]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d01e      	beq.n	800dd1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dce0:	2300      	movs	r3, #0
 800dce2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dce4:	69bb      	ldr	r3, [r7, #24]
 800dce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcea:	461a      	mov	r2, r3
 800dcec:	f107 0310 	add.w	r3, r7, #16
 800dcf0:	6812      	ldr	r2, [r2, #0]
 800dcf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	6a3b      	ldr	r3, [r7, #32]
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	00db      	lsls	r3, r3, #3
 800dcfc:	fa22 f303 	lsr.w	r3, r2, r3
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	701a      	strb	r2, [r3, #0]
      i++;
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	623b      	str	r3, [r7, #32]
      pDest++;
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	3301      	adds	r3, #1
 800dd10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800dd12:	8bfb      	ldrh	r3, [r7, #30]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dd18:	8bfb      	ldrh	r3, [r7, #30]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1ea      	bne.n	800dcf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	372c      	adds	r7, #44	; 0x2c
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b085      	sub	sp, #20
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	785b      	ldrb	r3, [r3, #1]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d12c      	bne.n	800dda2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	015a      	lsls	r2, r3, #5
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	db12      	blt.n	800dd80 <USB_EPSetStall+0x54>
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00f      	beq.n	800dd80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	015a      	lsls	r2, r3, #5
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	4413      	add	r3, r2
 800dd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	0151      	lsls	r1, r2, #5
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	440a      	add	r2, r1
 800dd76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dd7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	015a      	lsls	r2, r3, #5
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	4413      	add	r3, r2
 800dd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	0151      	lsls	r1, r2, #5
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	440a      	add	r2, r1
 800dd96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd9e:	6013      	str	r3, [r2, #0]
 800dda0:	e02b      	b.n	800ddfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	015a      	lsls	r2, r3, #5
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4413      	add	r3, r2
 800ddaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	db12      	blt.n	800ddda <USB_EPSetStall+0xae>
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00f      	beq.n	800ddda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	015a      	lsls	r2, r3, #5
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68ba      	ldr	r2, [r7, #8]
 800ddca:	0151      	lsls	r1, r2, #5
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	440a      	add	r2, r1
 800ddd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ddd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	0151      	lsls	r1, r2, #5
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	440a      	add	r2, r1
 800ddf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3714      	adds	r7, #20
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	785b      	ldrb	r3, [r3, #1]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d128      	bne.n	800de76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	015a      	lsls	r2, r3, #5
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	4413      	add	r3, r2
 800de2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	0151      	lsls	r1, r2, #5
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	440a      	add	r2, r1
 800de3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	791b      	ldrb	r3, [r3, #4]
 800de48:	2b03      	cmp	r3, #3
 800de4a:	d003      	beq.n	800de54 <USB_EPClearStall+0x4c>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	791b      	ldrb	r3, [r3, #4]
 800de50:	2b02      	cmp	r3, #2
 800de52:	d138      	bne.n	800dec6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	015a      	lsls	r2, r3, #5
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4413      	add	r3, r2
 800de5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	0151      	lsls	r1, r2, #5
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	440a      	add	r2, r1
 800de6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	e027      	b.n	800dec6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	015a      	lsls	r2, r3, #5
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	4413      	add	r3, r2
 800de7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	0151      	lsls	r1, r2, #5
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	440a      	add	r2, r1
 800de8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	791b      	ldrb	r3, [r3, #4]
 800de9a:	2b03      	cmp	r3, #3
 800de9c:	d003      	beq.n	800dea6 <USB_EPClearStall+0x9e>
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	791b      	ldrb	r3, [r3, #4]
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d10f      	bne.n	800dec6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	015a      	lsls	r2, r3, #5
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	4413      	add	r3, r2
 800deae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	0151      	lsls	r1, r2, #5
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	440a      	add	r2, r1
 800debc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dec4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3714      	adds	r7, #20
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	460b      	mov	r3, r1
 800dede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800def2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800def6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	78fb      	ldrb	r3, [r7, #3]
 800df02:	011b      	lsls	r3, r3, #4
 800df04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800df08:	68f9      	ldr	r1, [r7, #12]
 800df0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df0e:	4313      	orrs	r3, r2
 800df10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df3a:	f023 0303 	bic.w	r3, r3, #3
 800df3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df4e:	f023 0302 	bic.w	r3, r3, #2
 800df52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df62:	b480      	push	{r7}
 800df64:	b085      	sub	sp, #20
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df7c:	f023 0303 	bic.w	r3, r3, #3
 800df80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df90:	f043 0302 	orr.w	r3, r3, #2
 800df94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	695b      	ldr	r3, [r3, #20]
 800dfb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	699b      	ldr	r3, [r3, #24]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	4013      	ands	r3, r2
 800dfba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dfca:	b480      	push	{r7}
 800dfcc:	b085      	sub	sp, #20
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfdc:	699b      	ldr	r3, [r3, #24]
 800dfde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe6:	69db      	ldr	r3, [r3, #28]
 800dfe8:	68ba      	ldr	r2, [r7, #8]
 800dfea:	4013      	ands	r3, r2
 800dfec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	0c1b      	lsrs	r3, r3, #16
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr

0800dffe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dffe:	b480      	push	{r7}
 800e000:	b085      	sub	sp, #20
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e010:	699b      	ldr	r3, [r3, #24]
 800e012:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e01a:	69db      	ldr	r3, [r3, #28]
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	4013      	ands	r3, r2
 800e020:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	b29b      	uxth	r3, r3
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e032:	b480      	push	{r7}
 800e034:	b085      	sub	sp, #20
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	460b      	mov	r3, r1
 800e03c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e042:	78fb      	ldrb	r3, [r7, #3]
 800e044:	015a      	lsls	r2, r3, #5
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	4413      	add	r3, r2
 800e04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e058:	695b      	ldr	r3, [r3, #20]
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	4013      	ands	r3, r2
 800e05e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e060:	68bb      	ldr	r3, [r7, #8]
}
 800e062:	4618      	mov	r0, r3
 800e064:	3714      	adds	r7, #20
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e06e:	b480      	push	{r7}
 800e070:	b087      	sub	sp, #28
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	460b      	mov	r3, r1
 800e078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e090:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e092:	78fb      	ldrb	r3, [r7, #3]
 800e094:	f003 030f 	and.w	r3, r3, #15
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	fa22 f303 	lsr.w	r3, r2, r3
 800e09e:	01db      	lsls	r3, r3, #7
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e0a8:	78fb      	ldrb	r3, [r7, #3]
 800e0aa:	015a      	lsls	r2, r3, #5
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e0bc:	68bb      	ldr	r3, [r7, #8]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	371c      	adds	r7, #28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr

0800e0ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e0ca:	b480      	push	{r7}
 800e0cc:	b083      	sub	sp, #12
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	695b      	ldr	r3, [r3, #20]
 800e0d6:	f003 0301 	and.w	r3, r3, #1
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr
	...

0800e0e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e102:	4619      	mov	r1, r3
 800e104:	4b09      	ldr	r3, [pc, #36]	; (800e12c <USB_ActivateSetup+0x44>)
 800e106:	4013      	ands	r3, r2
 800e108:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e11c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e11e:	2300      	movs	r3, #0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	fffff800 	.word	0xfffff800

0800e130 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e130:	b480      	push	{r7}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	460b      	mov	r3, r1
 800e13a:	607a      	str	r2, [r7, #4]
 800e13c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	333c      	adds	r3, #60	; 0x3c
 800e146:	3304      	adds	r3, #4
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	4a26      	ldr	r2, [pc, #152]	; (800e1e8 <USB_EP0_OutStart+0xb8>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d90a      	bls.n	800e16a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e164:	d101      	bne.n	800e16a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	e037      	b.n	800e1da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e170:	461a      	mov	r2, r3
 800e172:	2300      	movs	r3, #0
 800e174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e190:	691b      	ldr	r3, [r3, #16]
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e198:	f043 0318 	orr.w	r3, r3, #24
 800e19c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e1b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e1b2:	7afb      	ldrb	r3, [r7, #11]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d10f      	bne.n	800e1d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1be:	461a      	mov	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	697a      	ldr	r2, [r7, #20]
 800e1ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e1d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	4f54300a 	.word	0x4f54300a

0800e1ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	4a13      	ldr	r2, [pc, #76]	; (800e250 <USB_CoreReset+0x64>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d901      	bls.n	800e20a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e01b      	b.n	800e242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	daf2      	bge.n	800e1f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e212:	2300      	movs	r3, #0
 800e214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	691b      	ldr	r3, [r3, #16]
 800e21a:	f043 0201 	orr.w	r2, r3, #1
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	3301      	adds	r3, #1
 800e226:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4a09      	ldr	r2, [pc, #36]	; (800e250 <USB_CoreReset+0x64>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d901      	bls.n	800e234 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e230:	2303      	movs	r3, #3
 800e232:	e006      	b.n	800e242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	f003 0301 	and.w	r3, r3, #1
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d0f0      	beq.n	800e222 <USB_CoreReset+0x36>

  return HAL_OK;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	3714      	adds	r7, #20
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	00030d40 	.word	0x00030d40

0800e254 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e260:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e264:	f002 fc5a 	bl	8010b1c <USBD_static_malloc>
 800e268:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d109      	bne.n	800e284 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	32b0      	adds	r2, #176	; 0xb0
 800e27a:	2100      	movs	r1, #0
 800e27c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e280:	2302      	movs	r3, #2
 800e282:	e0d4      	b.n	800e42e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e284:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e288:	2100      	movs	r1, #0
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f002 fcc2 	bl	8010c14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	32b0      	adds	r2, #176	; 0xb0
 800e29a:	68f9      	ldr	r1, [r7, #12]
 800e29c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	32b0      	adds	r2, #176	; 0xb0
 800e2aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	7c1b      	ldrb	r3, [r3, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d138      	bne.n	800e32e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e2bc:	4b5e      	ldr	r3, [pc, #376]	; (800e438 <USBD_CDC_Init+0x1e4>)
 800e2be:	7819      	ldrb	r1, [r3, #0]
 800e2c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2c4:	2202      	movs	r2, #2
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f002 fb05 	bl	80108d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e2cc:	4b5a      	ldr	r3, [pc, #360]	; (800e438 <USBD_CDC_Init+0x1e4>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f003 020f 	and.w	r2, r3, #15
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	4413      	add	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	440b      	add	r3, r1
 800e2e0:	3324      	adds	r3, #36	; 0x24
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e2e6:	4b55      	ldr	r3, [pc, #340]	; (800e43c <USBD_CDC_Init+0x1e8>)
 800e2e8:	7819      	ldrb	r1, [r3, #0]
 800e2ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ee:	2202      	movs	r2, #2
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f002 faf0 	bl	80108d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e2f6:	4b51      	ldr	r3, [pc, #324]	; (800e43c <USBD_CDC_Init+0x1e8>)
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	f003 020f 	and.w	r2, r3, #15
 800e2fe:	6879      	ldr	r1, [r7, #4]
 800e300:	4613      	mov	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	440b      	add	r3, r1
 800e30a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e30e:	2201      	movs	r2, #1
 800e310:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e312:	4b4b      	ldr	r3, [pc, #300]	; (800e440 <USBD_CDC_Init+0x1ec>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	f003 020f 	and.w	r2, r3, #15
 800e31a:	6879      	ldr	r1, [r7, #4]
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	440b      	add	r3, r1
 800e326:	3326      	adds	r3, #38	; 0x26
 800e328:	2210      	movs	r2, #16
 800e32a:	801a      	strh	r2, [r3, #0]
 800e32c:	e035      	b.n	800e39a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e32e:	4b42      	ldr	r3, [pc, #264]	; (800e438 <USBD_CDC_Init+0x1e4>)
 800e330:	7819      	ldrb	r1, [r3, #0]
 800e332:	2340      	movs	r3, #64	; 0x40
 800e334:	2202      	movs	r2, #2
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f002 facd 	bl	80108d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e33c:	4b3e      	ldr	r3, [pc, #248]	; (800e438 <USBD_CDC_Init+0x1e4>)
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	f003 020f 	and.w	r2, r3, #15
 800e344:	6879      	ldr	r1, [r7, #4]
 800e346:	4613      	mov	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4413      	add	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	440b      	add	r3, r1
 800e350:	3324      	adds	r3, #36	; 0x24
 800e352:	2201      	movs	r2, #1
 800e354:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e356:	4b39      	ldr	r3, [pc, #228]	; (800e43c <USBD_CDC_Init+0x1e8>)
 800e358:	7819      	ldrb	r1, [r3, #0]
 800e35a:	2340      	movs	r3, #64	; 0x40
 800e35c:	2202      	movs	r2, #2
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f002 fab9 	bl	80108d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e364:	4b35      	ldr	r3, [pc, #212]	; (800e43c <USBD_CDC_Init+0x1e8>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	f003 020f 	and.w	r2, r3, #15
 800e36c:	6879      	ldr	r1, [r7, #4]
 800e36e:	4613      	mov	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	440b      	add	r3, r1
 800e378:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e37c:	2201      	movs	r2, #1
 800e37e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e380:	4b2f      	ldr	r3, [pc, #188]	; (800e440 <USBD_CDC_Init+0x1ec>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	f003 020f 	and.w	r2, r3, #15
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	440b      	add	r3, r1
 800e394:	3326      	adds	r3, #38	; 0x26
 800e396:	2210      	movs	r2, #16
 800e398:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e39a:	4b29      	ldr	r3, [pc, #164]	; (800e440 <USBD_CDC_Init+0x1ec>)
 800e39c:	7819      	ldrb	r1, [r3, #0]
 800e39e:	2308      	movs	r3, #8
 800e3a0:	2203      	movs	r2, #3
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f002 fa97 	bl	80108d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e3a8:	4b25      	ldr	r3, [pc, #148]	; (800e440 <USBD_CDC_Init+0x1ec>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f003 020f 	and.w	r2, r3, #15
 800e3b0:	6879      	ldr	r1, [r7, #4]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	440b      	add	r3, r1
 800e3bc:	3324      	adds	r3, #36	; 0x24
 800e3be:	2201      	movs	r2, #1
 800e3c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	33b0      	adds	r3, #176	; 0xb0
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	e018      	b.n	800e42e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7c1b      	ldrb	r3, [r3, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10a      	bne.n	800e41a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e404:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <USBD_CDC_Init+0x1e8>)
 800e406:	7819      	ldrb	r1, [r3, #0]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f002 fb4e 	bl	8010ab4 <USBD_LL_PrepareReceive>
 800e418:	e008      	b.n	800e42c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e41a:	4b08      	ldr	r3, [pc, #32]	; (800e43c <USBD_CDC_Init+0x1e8>)
 800e41c:	7819      	ldrb	r1, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e424:	2340      	movs	r3, #64	; 0x40
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f002 fb44 	bl	8010ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	2400009f 	.word	0x2400009f
 800e43c:	240000a0 	.word	0x240000a0
 800e440:	240000a1 	.word	0x240000a1

0800e444 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e450:	4b3a      	ldr	r3, [pc, #232]	; (800e53c <USBD_CDC_DeInit+0xf8>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	4619      	mov	r1, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f002 fa63 	bl	8010922 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e45c:	4b37      	ldr	r3, [pc, #220]	; (800e53c <USBD_CDC_DeInit+0xf8>)
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	f003 020f 	and.w	r2, r3, #15
 800e464:	6879      	ldr	r1, [r7, #4]
 800e466:	4613      	mov	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	440b      	add	r3, r1
 800e470:	3324      	adds	r3, #36	; 0x24
 800e472:	2200      	movs	r2, #0
 800e474:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e476:	4b32      	ldr	r3, [pc, #200]	; (800e540 <USBD_CDC_DeInit+0xfc>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	4619      	mov	r1, r3
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f002 fa50 	bl	8010922 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e482:	4b2f      	ldr	r3, [pc, #188]	; (800e540 <USBD_CDC_DeInit+0xfc>)
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	f003 020f 	and.w	r2, r3, #15
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e49a:	2200      	movs	r2, #0
 800e49c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e49e:	4b29      	ldr	r3, [pc, #164]	; (800e544 <USBD_CDC_DeInit+0x100>)
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f002 fa3c 	bl	8010922 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e4aa:	4b26      	ldr	r3, [pc, #152]	; (800e544 <USBD_CDC_DeInit+0x100>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	f003 020f 	and.w	r2, r3, #15
 800e4b2:	6879      	ldr	r1, [r7, #4]
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4413      	add	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	440b      	add	r3, r1
 800e4be:	3324      	adds	r3, #36	; 0x24
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e4c4:	4b1f      	ldr	r3, [pc, #124]	; (800e544 <USBD_CDC_DeInit+0x100>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	f003 020f 	and.w	r2, r3, #15
 800e4cc:	6879      	ldr	r1, [r7, #4]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	440b      	add	r3, r1
 800e4d8:	3326      	adds	r3, #38	; 0x26
 800e4da:	2200      	movs	r2, #0
 800e4dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	32b0      	adds	r2, #176	; 0xb0
 800e4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d01f      	beq.n	800e530 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	33b0      	adds	r3, #176	; 0xb0
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	32b0      	adds	r2, #176	; 0xb0
 800e50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e512:	4618      	mov	r0, r3
 800e514:	f002 fb10 	bl	8010b38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	32b0      	adds	r2, #176	; 0xb0
 800e522:	2100      	movs	r1, #0
 800e524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	2400009f 	.word	0x2400009f
 800e540:	240000a0 	.word	0x240000a0
 800e544:	240000a1 	.word	0x240000a1

0800e548 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	32b0      	adds	r2, #176	; 0xb0
 800e55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e560:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e562:	2300      	movs	r3, #0
 800e564:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e566:	2300      	movs	r3, #0
 800e568:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e56a:	2300      	movs	r3, #0
 800e56c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d101      	bne.n	800e578 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e574:	2303      	movs	r3, #3
 800e576:	e0bf      	b.n	800e6f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e580:	2b00      	cmp	r3, #0
 800e582:	d050      	beq.n	800e626 <USBD_CDC_Setup+0xde>
 800e584:	2b20      	cmp	r3, #32
 800e586:	f040 80af 	bne.w	800e6e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	88db      	ldrh	r3, [r3, #6]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d03a      	beq.n	800e608 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	b25b      	sxtb	r3, r3
 800e598:	2b00      	cmp	r3, #0
 800e59a:	da1b      	bge.n	800e5d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	33b0      	adds	r3, #176	; 0xb0
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4413      	add	r3, r2
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e5b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e5b4:	683a      	ldr	r2, [r7, #0]
 800e5b6:	88d2      	ldrh	r2, [r2, #6]
 800e5b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	88db      	ldrh	r3, [r3, #6]
 800e5be:	2b07      	cmp	r3, #7
 800e5c0:	bf28      	it	cs
 800e5c2:	2307      	movcs	r3, #7
 800e5c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	89fa      	ldrh	r2, [r7, #14]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f001 fd43 	bl	8010058 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e5d2:	e090      	b.n	800e6f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	785a      	ldrb	r2, [r3, #1]
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	88db      	ldrh	r3, [r3, #6]
 800e5e2:	2b3f      	cmp	r3, #63	; 0x3f
 800e5e4:	d803      	bhi.n	800e5ee <USBD_CDC_Setup+0xa6>
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	88db      	ldrh	r3, [r3, #6]
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	e000      	b.n	800e5f0 <USBD_CDC_Setup+0xa8>
 800e5ee:	2240      	movs	r2, #64	; 0x40
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e5f6:	6939      	ldr	r1, [r7, #16]
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e5fe:	461a      	mov	r2, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f001 fd55 	bl	80100b0 <USBD_CtlPrepareRx>
      break;
 800e606:	e076      	b.n	800e6f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	33b0      	adds	r3, #176	; 0xb0
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	4413      	add	r3, r2
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	7850      	ldrb	r0, [r2, #1]
 800e61e:	2200      	movs	r2, #0
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	4798      	blx	r3
      break;
 800e624:	e067      	b.n	800e6f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	785b      	ldrb	r3, [r3, #1]
 800e62a:	2b0b      	cmp	r3, #11
 800e62c:	d851      	bhi.n	800e6d2 <USBD_CDC_Setup+0x18a>
 800e62e:	a201      	add	r2, pc, #4	; (adr r2, 800e634 <USBD_CDC_Setup+0xec>)
 800e630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e634:	0800e665 	.word	0x0800e665
 800e638:	0800e6e1 	.word	0x0800e6e1
 800e63c:	0800e6d3 	.word	0x0800e6d3
 800e640:	0800e6d3 	.word	0x0800e6d3
 800e644:	0800e6d3 	.word	0x0800e6d3
 800e648:	0800e6d3 	.word	0x0800e6d3
 800e64c:	0800e6d3 	.word	0x0800e6d3
 800e650:	0800e6d3 	.word	0x0800e6d3
 800e654:	0800e6d3 	.word	0x0800e6d3
 800e658:	0800e6d3 	.word	0x0800e6d3
 800e65c:	0800e68f 	.word	0x0800e68f
 800e660:	0800e6b9 	.word	0x0800e6b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b03      	cmp	r3, #3
 800e66e:	d107      	bne.n	800e680 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e670:	f107 030a 	add.w	r3, r7, #10
 800e674:	2202      	movs	r2, #2
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f001 fced 	bl	8010058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e67e:	e032      	b.n	800e6e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f001 fc77 	bl	800ff76 <USBD_CtlError>
            ret = USBD_FAIL;
 800e688:	2303      	movs	r3, #3
 800e68a:	75fb      	strb	r3, [r7, #23]
          break;
 800e68c:	e02b      	b.n	800e6e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e694:	b2db      	uxtb	r3, r3
 800e696:	2b03      	cmp	r3, #3
 800e698:	d107      	bne.n	800e6aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e69a:	f107 030d 	add.w	r3, r7, #13
 800e69e:	2201      	movs	r2, #1
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 fcd8 	bl	8010058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6a8:	e01d      	b.n	800e6e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f001 fc62 	bl	800ff76 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	75fb      	strb	r3, [r7, #23]
          break;
 800e6b6:	e016      	b.n	800e6e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b03      	cmp	r3, #3
 800e6c2:	d00f      	beq.n	800e6e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f001 fc55 	bl	800ff76 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e6d0:	e008      	b.n	800e6e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f001 fc4e 	bl	800ff76 <USBD_CtlError>
          ret = USBD_FAIL;
 800e6da:	2303      	movs	r3, #3
 800e6dc:	75fb      	strb	r3, [r7, #23]
          break;
 800e6de:	e002      	b.n	800e6e6 <USBD_CDC_Setup+0x19e>
          break;
 800e6e0:	bf00      	nop
 800e6e2:	e008      	b.n	800e6f6 <USBD_CDC_Setup+0x1ae>
          break;
 800e6e4:	bf00      	nop
      }
      break;
 800e6e6:	e006      	b.n	800e6f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e6e8:	6839      	ldr	r1, [r7, #0]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f001 fc43 	bl	800ff76 <USBD_CtlError>
      ret = USBD_FAIL;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	75fb      	strb	r3, [r7, #23]
      break;
 800e6f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	460b      	mov	r3, r1
 800e70a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e712:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	32b0      	adds	r2, #176	; 0xb0
 800e71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d101      	bne.n	800e72a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e726:	2303      	movs	r3, #3
 800e728:	e065      	b.n	800e7f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	32b0      	adds	r2, #176	; 0xb0
 800e734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e738:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e73a:	78fb      	ldrb	r3, [r7, #3]
 800e73c:	f003 020f 	and.w	r2, r3, #15
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	4613      	mov	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	440b      	add	r3, r1
 800e74c:	3318      	adds	r3, #24
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d02f      	beq.n	800e7b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e754:	78fb      	ldrb	r3, [r7, #3]
 800e756:	f003 020f 	and.w	r2, r3, #15
 800e75a:	6879      	ldr	r1, [r7, #4]
 800e75c:	4613      	mov	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4413      	add	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	440b      	add	r3, r1
 800e766:	3318      	adds	r3, #24
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	78fb      	ldrb	r3, [r7, #3]
 800e76c:	f003 010f 	and.w	r1, r3, #15
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	460b      	mov	r3, r1
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	440b      	add	r3, r1
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	4403      	add	r3, r0
 800e77c:	3348      	adds	r3, #72	; 0x48
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	fbb2 f1f3 	udiv	r1, r2, r3
 800e784:	fb03 f301 	mul.w	r3, r3, r1
 800e788:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d112      	bne.n	800e7b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e78e:	78fb      	ldrb	r3, [r7, #3]
 800e790:	f003 020f 	and.w	r2, r3, #15
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	4613      	mov	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4413      	add	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	440b      	add	r3, r1
 800e7a0:	3318      	adds	r3, #24
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e7a6:	78f9      	ldrb	r1, [r7, #3]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f002 f960 	bl	8010a72 <USBD_LL_Transmit>
 800e7b2:	e01f      	b.n	800e7f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	33b0      	adds	r3, #176	; 0xb0
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d010      	beq.n	800e7f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	33b0      	adds	r3, #176	; 0xb0
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	691b      	ldr	r3, [r3, #16]
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e7f0:	78fa      	ldrb	r2, [r7, #3]
 800e7f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b084      	sub	sp, #16
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	460b      	mov	r3, r1
 800e808:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	32b0      	adds	r2, #176	; 0xb0
 800e814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e818:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	32b0      	adds	r2, #176	; 0xb0
 800e824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e82c:	2303      	movs	r3, #3
 800e82e:	e01a      	b.n	800e866 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	4619      	mov	r1, r3
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f002 f95e 	bl	8010af6 <USBD_LL_GetRxDataSize>
 800e83a:	4602      	mov	r2, r0
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	33b0      	adds	r3, #176	; 0xb0
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e860:	4611      	mov	r1, r2
 800e862:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b084      	sub	sp, #16
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	32b0      	adds	r2, #176	; 0xb0
 800e880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e884:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d101      	bne.n	800e890 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e88c:	2303      	movs	r3, #3
 800e88e:	e025      	b.n	800e8dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	33b0      	adds	r3, #176	; 0xb0
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4413      	add	r3, r2
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d01a      	beq.n	800e8da <USBD_CDC_EP0_RxReady+0x6c>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e8aa:	2bff      	cmp	r3, #255	; 0xff
 800e8ac:	d015      	beq.n	800e8da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	33b0      	adds	r3, #176	; 0xb0
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4413      	add	r3, r2
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e8c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e8ce:	b292      	uxth	r2, r2
 800e8d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	22ff      	movs	r2, #255	; 0xff
 800e8d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e8ec:	2182      	movs	r1, #130	; 0x82
 800e8ee:	4818      	ldr	r0, [pc, #96]	; (800e950 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e8f0:	f000 fd09 	bl	800f306 <USBD_GetEpDesc>
 800e8f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e8f6:	2101      	movs	r1, #1
 800e8f8:	4815      	ldr	r0, [pc, #84]	; (800e950 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e8fa:	f000 fd04 	bl	800f306 <USBD_GetEpDesc>
 800e8fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e900:	2181      	movs	r1, #129	; 0x81
 800e902:	4813      	ldr	r0, [pc, #76]	; (800e950 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e904:	f000 fcff 	bl	800f306 <USBD_GetEpDesc>
 800e908:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	2210      	movs	r2, #16
 800e914:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d006      	beq.n	800e92a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	2200      	movs	r2, #0
 800e920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e924:	711a      	strb	r2, [r3, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d006      	beq.n	800e93e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2200      	movs	r2, #0
 800e934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e938:	711a      	strb	r2, [r3, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2243      	movs	r2, #67	; 0x43
 800e942:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e944:	4b02      	ldr	r3, [pc, #8]	; (800e950 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e946:	4618      	mov	r0, r3
 800e948:	3718      	adds	r7, #24
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	2400005c 	.word	0x2400005c

0800e954 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e95c:	2182      	movs	r1, #130	; 0x82
 800e95e:	4818      	ldr	r0, [pc, #96]	; (800e9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e960:	f000 fcd1 	bl	800f306 <USBD_GetEpDesc>
 800e964:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e966:	2101      	movs	r1, #1
 800e968:	4815      	ldr	r0, [pc, #84]	; (800e9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e96a:	f000 fccc 	bl	800f306 <USBD_GetEpDesc>
 800e96e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e970:	2181      	movs	r1, #129	; 0x81
 800e972:	4813      	ldr	r0, [pc, #76]	; (800e9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e974:	f000 fcc7 	bl	800f306 <USBD_GetEpDesc>
 800e978:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d002      	beq.n	800e986 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	2210      	movs	r2, #16
 800e984:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d006      	beq.n	800e99a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	2200      	movs	r2, #0
 800e990:	711a      	strb	r2, [r3, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	f042 0202 	orr.w	r2, r2, #2
 800e998:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d006      	beq.n	800e9ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	711a      	strb	r2, [r3, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f042 0202 	orr.w	r2, r2, #2
 800e9ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2243      	movs	r2, #67	; 0x43
 800e9b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e9b4:	4b02      	ldr	r3, [pc, #8]	; (800e9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3718      	adds	r7, #24
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	2400005c 	.word	0x2400005c

0800e9c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e9cc:	2182      	movs	r1, #130	; 0x82
 800e9ce:	4818      	ldr	r0, [pc, #96]	; (800ea30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e9d0:	f000 fc99 	bl	800f306 <USBD_GetEpDesc>
 800e9d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e9d6:	2101      	movs	r1, #1
 800e9d8:	4815      	ldr	r0, [pc, #84]	; (800ea30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e9da:	f000 fc94 	bl	800f306 <USBD_GetEpDesc>
 800e9de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e9e0:	2181      	movs	r1, #129	; 0x81
 800e9e2:	4813      	ldr	r0, [pc, #76]	; (800ea30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e9e4:	f000 fc8f 	bl	800f306 <USBD_GetEpDesc>
 800e9e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d002      	beq.n	800e9f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	2210      	movs	r2, #16
 800e9f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d006      	beq.n	800ea0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea04:	711a      	strb	r2, [r3, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d006      	beq.n	800ea1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea18:	711a      	strb	r2, [r3, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2243      	movs	r2, #67	; 0x43
 800ea22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea24:	4b02      	ldr	r3, [pc, #8]	; (800ea30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3718      	adds	r7, #24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	2400005c 	.word	0x2400005c

0800ea34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	220a      	movs	r2, #10
 800ea40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ea42:	4b03      	ldr	r3, [pc, #12]	; (800ea50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	24000018 	.word	0x24000018

0800ea54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d101      	bne.n	800ea68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ea64:	2303      	movs	r3, #3
 800ea66:	e009      	b.n	800ea7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	33b0      	adds	r3, #176	; 0xb0
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	4413      	add	r3, r2
 800ea76:	683a      	ldr	r2, [r7, #0]
 800ea78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b087      	sub	sp, #28
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	32b0      	adds	r2, #176	; 0xb0
 800ea9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d101      	bne.n	800eaae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	e008      	b.n	800eac0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	371c      	adds	r7, #28
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eacc:	b480      	push	{r7}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	32b0      	adds	r2, #176	; 0xb0
 800eae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d101      	bne.n	800eaf0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800eaec:	2303      	movs	r3, #3
 800eaee:	e004      	b.n	800eafa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3714      	adds	r7, #20
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
	...

0800eb08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	32b0      	adds	r2, #176	; 0xb0
 800eb1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	32b0      	adds	r2, #176	; 0xb0
 800eb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800eb32:	2303      	movs	r3, #3
 800eb34:	e018      	b.n	800eb68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	7c1b      	ldrb	r3, [r3, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d10a      	bne.n	800eb54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb3e:	4b0c      	ldr	r3, [pc, #48]	; (800eb70 <USBD_CDC_ReceivePacket+0x68>)
 800eb40:	7819      	ldrb	r1, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f001 ffb1 	bl	8010ab4 <USBD_LL_PrepareReceive>
 800eb52:	e008      	b.n	800eb66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb54:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <USBD_CDC_ReceivePacket+0x68>)
 800eb56:	7819      	ldrb	r1, [r3, #0]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb5e:	2340      	movs	r3, #64	; 0x40
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f001 ffa7 	bl	8010ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	240000a0 	.word	0x240000a0

0800eb74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eb88:	2303      	movs	r3, #3
 800eb8a:	e01f      	b.n	800ebcc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	79fa      	ldrb	r2, [r7, #7]
 800ebbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f001 fe1d 	bl	8010800 <USBD_LL_Init>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e025      	b.n	800ec38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	32ae      	adds	r2, #174	; 0xae
 800ebfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00f      	beq.n	800ec28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	32ae      	adds	r2, #174	; 0xae
 800ec12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec18:	f107 020e 	add.w	r2, r7, #14
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	4798      	blx	r3
 800ec20:	4602      	mov	r2, r0
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 fe29 	bl	80108a0 <USBD_LL_Start>
 800ec4e:	4603      	mov	r3, r0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	370c      	adds	r7, #12
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr

0800ec6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	460b      	mov	r3, r1
 800ec78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d009      	beq.n	800ec9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	78fa      	ldrb	r2, [r7, #3]
 800ec92:	4611      	mov	r1, r2
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	4798      	blx	r3
 800ec98:	4603      	mov	r3, r0
 800ec9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ec9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b084      	sub	sp, #16
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	460b      	mov	r3, r1
 800ecb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	78fa      	ldrb	r2, [r7, #3]
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	4798      	blx	r3
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d001      	beq.n	800ecd0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800eccc:	2303      	movs	r3, #3
 800ecce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b084      	sub	sp, #16
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
 800ece2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f001 f908 	bl	800ff02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ed00:	461a      	mov	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed0e:	f003 031f 	and.w	r3, r3, #31
 800ed12:	2b02      	cmp	r3, #2
 800ed14:	d01a      	beq.n	800ed4c <USBD_LL_SetupStage+0x72>
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d822      	bhi.n	800ed60 <USBD_LL_SetupStage+0x86>
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <USBD_LL_SetupStage+0x4a>
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d00a      	beq.n	800ed38 <USBD_LL_SetupStage+0x5e>
 800ed22:	e01d      	b.n	800ed60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f000 fb5f 	bl	800f3f0 <USBD_StdDevReq>
 800ed32:	4603      	mov	r3, r0
 800ed34:	73fb      	strb	r3, [r7, #15]
      break;
 800ed36:	e020      	b.n	800ed7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed3e:	4619      	mov	r1, r3
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fbc7 	bl	800f4d4 <USBD_StdItfReq>
 800ed46:	4603      	mov	r3, r0
 800ed48:	73fb      	strb	r3, [r7, #15]
      break;
 800ed4a:	e016      	b.n	800ed7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed52:	4619      	mov	r1, r3
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 fc29 	bl	800f5ac <USBD_StdEPReq>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed5e:	e00c      	b.n	800ed7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f001 fdf6 	bl	8010960 <USBD_LL_StallEP>
 800ed74:	4603      	mov	r3, r0
 800ed76:	73fb      	strb	r3, [r7, #15]
      break;
 800ed78:	bf00      	nop
  }

  return ret;
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	607a      	str	r2, [r7, #4]
 800ed90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed92:	2300      	movs	r3, #0
 800ed94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ed96:	7afb      	ldrb	r3, [r7, #11]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d16e      	bne.n	800ee7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eda2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edaa:	2b03      	cmp	r3, #3
 800edac:	f040 8098 	bne.w	800eee0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	689a      	ldr	r2, [r3, #8]
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d913      	bls.n	800ede4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	689a      	ldr	r2, [r3, #8]
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	1ad2      	subs	r2, r2, r3
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	68da      	ldr	r2, [r3, #12]
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	4293      	cmp	r3, r2
 800edd4:	bf28      	it	cs
 800edd6:	4613      	movcs	r3, r2
 800edd8:	461a      	mov	r2, r3
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f001 f984 	bl	80100ea <USBD_CtlContinueRx>
 800ede2:	e07d      	b.n	800eee0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800edea:	f003 031f 	and.w	r3, r3, #31
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d014      	beq.n	800ee1c <USBD_LL_DataOutStage+0x98>
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	d81d      	bhi.n	800ee32 <USBD_LL_DataOutStage+0xae>
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d002      	beq.n	800ee00 <USBD_LL_DataOutStage+0x7c>
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d003      	beq.n	800ee06 <USBD_LL_DataOutStage+0x82>
 800edfe:	e018      	b.n	800ee32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ee00:	2300      	movs	r3, #0
 800ee02:	75bb      	strb	r3, [r7, #22]
            break;
 800ee04:	e018      	b.n	800ee38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	4619      	mov	r1, r3
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 fa5e 	bl	800f2d2 <USBD_CoreFindIF>
 800ee16:	4603      	mov	r3, r0
 800ee18:	75bb      	strb	r3, [r7, #22]
            break;
 800ee1a:	e00d      	b.n	800ee38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	4619      	mov	r1, r3
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f000 fa60 	bl	800f2ec <USBD_CoreFindEP>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	75bb      	strb	r3, [r7, #22]
            break;
 800ee30:	e002      	b.n	800ee38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ee32:	2300      	movs	r3, #0
 800ee34:	75bb      	strb	r3, [r7, #22]
            break;
 800ee36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ee38:	7dbb      	ldrb	r3, [r7, #22]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d119      	bne.n	800ee72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	d113      	bne.n	800ee72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ee4a:	7dba      	ldrb	r2, [r7, #22]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	32ae      	adds	r2, #174	; 0xae
 800ee50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00b      	beq.n	800ee72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ee5a:	7dba      	ldrb	r2, [r7, #22]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ee62:	7dba      	ldrb	r2, [r7, #22]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	32ae      	adds	r2, #174	; 0xae
 800ee68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ee72:	68f8      	ldr	r0, [r7, #12]
 800ee74:	f001 f94a 	bl	801010c <USBD_CtlSendStatus>
 800ee78:	e032      	b.n	800eee0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ee7a:	7afb      	ldrb	r3, [r7, #11]
 800ee7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	4619      	mov	r1, r3
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f000 fa31 	bl	800f2ec <USBD_CoreFindEP>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee8e:	7dbb      	ldrb	r3, [r7, #22]
 800ee90:	2bff      	cmp	r3, #255	; 0xff
 800ee92:	d025      	beq.n	800eee0 <USBD_LL_DataOutStage+0x15c>
 800ee94:	7dbb      	ldrb	r3, [r7, #22]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d122      	bne.n	800eee0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b03      	cmp	r3, #3
 800eea4:	d117      	bne.n	800eed6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eea6:	7dba      	ldrb	r2, [r7, #22]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	32ae      	adds	r2, #174	; 0xae
 800eeac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00f      	beq.n	800eed6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eeb6:	7dba      	ldrb	r2, [r7, #22]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eebe:	7dba      	ldrb	r2, [r7, #22]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	32ae      	adds	r2, #174	; 0xae
 800eec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	7afa      	ldrb	r2, [r7, #11]
 800eecc:	4611      	mov	r1, r2
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	4798      	blx	r3
 800eed2:	4603      	mov	r3, r0
 800eed4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eed6:	7dfb      	ldrb	r3, [r7, #23]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d001      	beq.n	800eee0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eedc:	7dfb      	ldrb	r3, [r7, #23]
 800eede:	e000      	b.n	800eee2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3718      	adds	r7, #24
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b086      	sub	sp, #24
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	60f8      	str	r0, [r7, #12]
 800eef2:	460b      	mov	r3, r1
 800eef4:	607a      	str	r2, [r7, #4]
 800eef6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eef8:	7afb      	ldrb	r3, [r7, #11]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d16f      	bne.n	800efde <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	3314      	adds	r3, #20
 800ef02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d15a      	bne.n	800efc4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	689a      	ldr	r2, [r3, #8]
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d914      	bls.n	800ef44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	689a      	ldr	r2, [r3, #8]
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	1ad2      	subs	r2, r2, r3
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	6879      	ldr	r1, [r7, #4]
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f001 f8ac 	bl	801008e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef36:	2300      	movs	r3, #0
 800ef38:	2200      	movs	r2, #0
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f001 fdb9 	bl	8010ab4 <USBD_LL_PrepareReceive>
 800ef42:	e03f      	b.n	800efc4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	68da      	ldr	r2, [r3, #12]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d11c      	bne.n	800ef8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	685a      	ldr	r2, [r3, #4]
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d316      	bcc.n	800ef8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d20f      	bcs.n	800ef8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f001 f88d 	bl	801008e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	2200      	movs	r2, #0
 800ef80:	2100      	movs	r1, #0
 800ef82:	68f8      	ldr	r0, [r7, #12]
 800ef84:	f001 fd96 	bl	8010ab4 <USBD_LL_PrepareReceive>
 800ef88:	e01c      	b.n	800efc4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d10f      	bne.n	800efb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d009      	beq.n	800efb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800efb6:	2180      	movs	r1, #128	; 0x80
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f001 fcd1 	bl	8010960 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f001 f8b7 	bl	8010132 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d03a      	beq.n	800f044 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7ff fe42 	bl	800ec58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800efdc:	e032      	b.n	800f044 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800efde:	7afb      	ldrb	r3, [r7, #11]
 800efe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	4619      	mov	r1, r3
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f000 f97f 	bl	800f2ec <USBD_CoreFindEP>
 800efee:	4603      	mov	r3, r0
 800eff0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eff2:	7dfb      	ldrb	r3, [r7, #23]
 800eff4:	2bff      	cmp	r3, #255	; 0xff
 800eff6:	d025      	beq.n	800f044 <USBD_LL_DataInStage+0x15a>
 800eff8:	7dfb      	ldrb	r3, [r7, #23]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d122      	bne.n	800f044 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f004:	b2db      	uxtb	r3, r3
 800f006:	2b03      	cmp	r3, #3
 800f008:	d11c      	bne.n	800f044 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f00a:	7dfa      	ldrb	r2, [r7, #23]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	32ae      	adds	r2, #174	; 0xae
 800f010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f014:	695b      	ldr	r3, [r3, #20]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d014      	beq.n	800f044 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f01a:	7dfa      	ldrb	r2, [r7, #23]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f022:	7dfa      	ldrb	r2, [r7, #23]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	32ae      	adds	r2, #174	; 0xae
 800f028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f02c:	695b      	ldr	r3, [r3, #20]
 800f02e:	7afa      	ldrb	r2, [r7, #11]
 800f030:	4611      	mov	r1, r2
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	4798      	blx	r3
 800f036:	4603      	mov	r3, r0
 800f038:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f03a:	7dbb      	ldrb	r3, [r7, #22]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d001      	beq.n	800f044 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f040:	7dbb      	ldrb	r3, [r7, #22]
 800f042:	e000      	b.n	800f046 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f044:	2300      	movs	r3, #0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3718      	adds	r7, #24
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f04e:	b580      	push	{r7, lr}
 800f050:	b084      	sub	sp, #16
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f056:	2300      	movs	r3, #0
 800f058:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2201      	movs	r2, #1
 800f05e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f086:	2b00      	cmp	r3, #0
 800f088:	d014      	beq.n	800f0b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00e      	beq.n	800f0b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	6852      	ldr	r2, [r2, #4]
 800f0a2:	b2d2      	uxtb	r2, r2
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	4798      	blx	r3
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d001      	beq.n	800f0b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f001 fc0b 	bl	80108d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2240      	movs	r2, #64	; 0x40
 800f0cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f0d0:	2340      	movs	r3, #64	; 0x40
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	2180      	movs	r1, #128	; 0x80
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f001 fbfd 	bl	80108d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2240      	movs	r2, #64	; 0x40
 800f0e6:	621a      	str	r2, [r3, #32]

  return ret;
 800f0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f0f2:	b480      	push	{r7}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	78fa      	ldrb	r2, [r7, #3]
 800f102:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f112:	b480      	push	{r7}
 800f114:	b083      	sub	sp, #12
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f120:	b2da      	uxtb	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2204      	movs	r2, #4
 800f12c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	370c      	adds	r7, #12
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f13e:	b480      	push	{r7}
 800f140:	b083      	sub	sp, #12
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b04      	cmp	r3, #4
 800f150:	d106      	bne.n	800f160 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b082      	sub	sp, #8
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	2b03      	cmp	r3, #3
 800f180:	d110      	bne.n	800f1a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00b      	beq.n	800f1a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f192:	69db      	ldr	r3, [r3, #28]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d005      	beq.n	800f1a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f19e:	69db      	ldr	r3, [r3, #28]
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3708      	adds	r7, #8
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	32ae      	adds	r2, #174	; 0xae
 800f1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d101      	bne.n	800f1d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f1cc:	2303      	movs	r3, #3
 800f1ce:	e01c      	b.n	800f20a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	2b03      	cmp	r3, #3
 800f1da:	d115      	bne.n	800f208 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	32ae      	adds	r2, #174	; 0xae
 800f1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ea:	6a1b      	ldr	r3, [r3, #32]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00b      	beq.n	800f208 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	32ae      	adds	r2, #174	; 0xae
 800f1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1fe:	6a1b      	ldr	r3, [r3, #32]
 800f200:	78fa      	ldrb	r2, [r7, #3]
 800f202:	4611      	mov	r1, r2
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	460b      	mov	r3, r1
 800f21c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	32ae      	adds	r2, #174	; 0xae
 800f228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f230:	2303      	movs	r3, #3
 800f232:	e01c      	b.n	800f26e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d115      	bne.n	800f26c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	32ae      	adds	r2, #174	; 0xae
 800f24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00b      	beq.n	800f26c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	32ae      	adds	r2, #174	; 0xae
 800f25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	78fa      	ldrb	r2, [r7, #3]
 800f266:	4611      	mov	r1, r2
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f26c:	2300      	movs	r3, #0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}

0800f276 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f276:	b480      	push	{r7}
 800f278:	b083      	sub	sp, #12
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00e      	beq.n	800f2c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	6852      	ldr	r2, [r2, #4]
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	4798      	blx	r3
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b083      	sub	sp, #12
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
 800f2da:	460b      	mov	r3, r1
 800f2dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f2de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f2f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f306:	b580      	push	{r7, lr}
 800f308:	b086      	sub	sp, #24
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
 800f30e:	460b      	mov	r3, r1
 800f310:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f31a:	2300      	movs	r3, #0
 800f31c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	885b      	ldrh	r3, [r3, #2]
 800f322:	b29a      	uxth	r2, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d920      	bls.n	800f370 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	b29b      	uxth	r3, r3
 800f334:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f336:	e013      	b.n	800f360 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f338:	f107 030a 	add.w	r3, r7, #10
 800f33c:	4619      	mov	r1, r3
 800f33e:	6978      	ldr	r0, [r7, #20]
 800f340:	f000 f81b 	bl	800f37a <USBD_GetNextDesc>
 800f344:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	785b      	ldrb	r3, [r3, #1]
 800f34a:	2b05      	cmp	r3, #5
 800f34c:	d108      	bne.n	800f360 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	789b      	ldrb	r3, [r3, #2]
 800f356:	78fa      	ldrb	r2, [r7, #3]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d008      	beq.n	800f36e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f35c:	2300      	movs	r3, #0
 800f35e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	885b      	ldrh	r3, [r3, #2]
 800f364:	b29a      	uxth	r2, r3
 800f366:	897b      	ldrh	r3, [r7, #10]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d8e5      	bhi.n	800f338 <USBD_GetEpDesc+0x32>
 800f36c:	e000      	b.n	800f370 <USBD_GetEpDesc+0x6a>
          break;
 800f36e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f370:	693b      	ldr	r3, [r7, #16]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3718      	adds	r7, #24
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f37a:	b480      	push	{r7}
 800f37c:	b085      	sub	sp, #20
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
 800f382:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	881a      	ldrh	r2, [r3, #0]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	b29b      	uxth	r3, r3
 800f392:	4413      	add	r3, r2
 800f394:	b29a      	uxth	r2, r3
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3714      	adds	r7, #20
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b087      	sub	sp, #28
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f3d2:	8a3b      	ldrh	r3, [r7, #16]
 800f3d4:	021b      	lsls	r3, r3, #8
 800f3d6:	b21a      	sxth	r2, r3
 800f3d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	b21b      	sxth	r3, r3
 800f3e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f3e2:	89fb      	ldrh	r3, [r7, #14]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	371c      	adds	r7, #28
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f406:	2b40      	cmp	r3, #64	; 0x40
 800f408:	d005      	beq.n	800f416 <USBD_StdDevReq+0x26>
 800f40a:	2b40      	cmp	r3, #64	; 0x40
 800f40c:	d857      	bhi.n	800f4be <USBD_StdDevReq+0xce>
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00f      	beq.n	800f432 <USBD_StdDevReq+0x42>
 800f412:	2b20      	cmp	r3, #32
 800f414:	d153      	bne.n	800f4be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	32ae      	adds	r2, #174	; 0xae
 800f420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	4798      	blx	r3
 800f42c:	4603      	mov	r3, r0
 800f42e:	73fb      	strb	r3, [r7, #15]
      break;
 800f430:	e04a      	b.n	800f4c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	785b      	ldrb	r3, [r3, #1]
 800f436:	2b09      	cmp	r3, #9
 800f438:	d83b      	bhi.n	800f4b2 <USBD_StdDevReq+0xc2>
 800f43a:	a201      	add	r2, pc, #4	; (adr r2, 800f440 <USBD_StdDevReq+0x50>)
 800f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f440:	0800f495 	.word	0x0800f495
 800f444:	0800f4a9 	.word	0x0800f4a9
 800f448:	0800f4b3 	.word	0x0800f4b3
 800f44c:	0800f49f 	.word	0x0800f49f
 800f450:	0800f4b3 	.word	0x0800f4b3
 800f454:	0800f473 	.word	0x0800f473
 800f458:	0800f469 	.word	0x0800f469
 800f45c:	0800f4b3 	.word	0x0800f4b3
 800f460:	0800f48b 	.word	0x0800f48b
 800f464:	0800f47d 	.word	0x0800f47d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f468:	6839      	ldr	r1, [r7, #0]
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 fa3c 	bl	800f8e8 <USBD_GetDescriptor>
          break;
 800f470:	e024      	b.n	800f4bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f000 fba1 	bl	800fbbc <USBD_SetAddress>
          break;
 800f47a:	e01f      	b.n	800f4bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f47c:	6839      	ldr	r1, [r7, #0]
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f000 fbe0 	bl	800fc44 <USBD_SetConfig>
 800f484:	4603      	mov	r3, r0
 800f486:	73fb      	strb	r3, [r7, #15]
          break;
 800f488:	e018      	b.n	800f4bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fc83 	bl	800fd98 <USBD_GetConfig>
          break;
 800f492:	e013      	b.n	800f4bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f494:	6839      	ldr	r1, [r7, #0]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fcb4 	bl	800fe04 <USBD_GetStatus>
          break;
 800f49c:	e00e      	b.n	800f4bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f49e:	6839      	ldr	r1, [r7, #0]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fce3 	bl	800fe6c <USBD_SetFeature>
          break;
 800f4a6:	e009      	b.n	800f4bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 fd07 	bl	800febe <USBD_ClrFeature>
          break;
 800f4b0:	e004      	b.n	800f4bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f4b2:	6839      	ldr	r1, [r7, #0]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 fd5e 	bl	800ff76 <USBD_CtlError>
          break;
 800f4ba:	bf00      	nop
      }
      break;
 800f4bc:	e004      	b.n	800f4c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fd58 	bl	800ff76 <USBD_CtlError>
      break;
 800f4c6:	bf00      	nop
  }

  return ret;
 800f4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop

0800f4d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f4ea:	2b40      	cmp	r3, #64	; 0x40
 800f4ec:	d005      	beq.n	800f4fa <USBD_StdItfReq+0x26>
 800f4ee:	2b40      	cmp	r3, #64	; 0x40
 800f4f0:	d852      	bhi.n	800f598 <USBD_StdItfReq+0xc4>
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d001      	beq.n	800f4fa <USBD_StdItfReq+0x26>
 800f4f6:	2b20      	cmp	r3, #32
 800f4f8:	d14e      	bne.n	800f598 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f500:	b2db      	uxtb	r3, r3
 800f502:	3b01      	subs	r3, #1
 800f504:	2b02      	cmp	r3, #2
 800f506:	d840      	bhi.n	800f58a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	889b      	ldrh	r3, [r3, #4]
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d836      	bhi.n	800f580 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	889b      	ldrh	r3, [r3, #4]
 800f516:	b2db      	uxtb	r3, r3
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7ff fed9 	bl	800f2d2 <USBD_CoreFindIF>
 800f520:	4603      	mov	r3, r0
 800f522:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f524:	7bbb      	ldrb	r3, [r7, #14]
 800f526:	2bff      	cmp	r3, #255	; 0xff
 800f528:	d01d      	beq.n	800f566 <USBD_StdItfReq+0x92>
 800f52a:	7bbb      	ldrb	r3, [r7, #14]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d11a      	bne.n	800f566 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f530:	7bba      	ldrb	r2, [r7, #14]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	32ae      	adds	r2, #174	; 0xae
 800f536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00f      	beq.n	800f560 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f540:	7bba      	ldrb	r2, [r7, #14]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f548:	7bba      	ldrb	r2, [r7, #14]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	32ae      	adds	r2, #174	; 0xae
 800f54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	6839      	ldr	r1, [r7, #0]
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	4798      	blx	r3
 800f55a:	4603      	mov	r3, r0
 800f55c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f55e:	e004      	b.n	800f56a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f560:	2303      	movs	r3, #3
 800f562:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f564:	e001      	b.n	800f56a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f566:	2303      	movs	r3, #3
 800f568:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	88db      	ldrh	r3, [r3, #6]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d110      	bne.n	800f594 <USBD_StdItfReq+0xc0>
 800f572:	7bfb      	ldrb	r3, [r7, #15]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10d      	bne.n	800f594 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 fdc7 	bl	801010c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f57e:	e009      	b.n	800f594 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f580:	6839      	ldr	r1, [r7, #0]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 fcf7 	bl	800ff76 <USBD_CtlError>
          break;
 800f588:	e004      	b.n	800f594 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f58a:	6839      	ldr	r1, [r7, #0]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fcf2 	bl	800ff76 <USBD_CtlError>
          break;
 800f592:	e000      	b.n	800f596 <USBD_StdItfReq+0xc2>
          break;
 800f594:	bf00      	nop
      }
      break;
 800f596:	e004      	b.n	800f5a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f598:	6839      	ldr	r1, [r7, #0]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fceb 	bl	800ff76 <USBD_CtlError>
      break;
 800f5a0:	bf00      	nop
  }

  return ret;
 800f5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	889b      	ldrh	r3, [r3, #4]
 800f5be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f5c8:	2b40      	cmp	r3, #64	; 0x40
 800f5ca:	d007      	beq.n	800f5dc <USBD_StdEPReq+0x30>
 800f5cc:	2b40      	cmp	r3, #64	; 0x40
 800f5ce:	f200 817f 	bhi.w	800f8d0 <USBD_StdEPReq+0x324>
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d02a      	beq.n	800f62c <USBD_StdEPReq+0x80>
 800f5d6:	2b20      	cmp	r3, #32
 800f5d8:	f040 817a 	bne.w	800f8d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f5dc:	7bbb      	ldrb	r3, [r7, #14]
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7ff fe83 	bl	800f2ec <USBD_CoreFindEP>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5ea:	7b7b      	ldrb	r3, [r7, #13]
 800f5ec:	2bff      	cmp	r3, #255	; 0xff
 800f5ee:	f000 8174 	beq.w	800f8da <USBD_StdEPReq+0x32e>
 800f5f2:	7b7b      	ldrb	r3, [r7, #13]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f040 8170 	bne.w	800f8da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f5fa:	7b7a      	ldrb	r2, [r7, #13]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f602:	7b7a      	ldrb	r2, [r7, #13]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	32ae      	adds	r2, #174	; 0xae
 800f608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f000 8163 	beq.w	800f8da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f614:	7b7a      	ldrb	r2, [r7, #13]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	32ae      	adds	r2, #174	; 0xae
 800f61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	6839      	ldr	r1, [r7, #0]
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	4798      	blx	r3
 800f626:	4603      	mov	r3, r0
 800f628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f62a:	e156      	b.n	800f8da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	785b      	ldrb	r3, [r3, #1]
 800f630:	2b03      	cmp	r3, #3
 800f632:	d008      	beq.n	800f646 <USBD_StdEPReq+0x9a>
 800f634:	2b03      	cmp	r3, #3
 800f636:	f300 8145 	bgt.w	800f8c4 <USBD_StdEPReq+0x318>
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 809b 	beq.w	800f776 <USBD_StdEPReq+0x1ca>
 800f640:	2b01      	cmp	r3, #1
 800f642:	d03c      	beq.n	800f6be <USBD_StdEPReq+0x112>
 800f644:	e13e      	b.n	800f8c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	2b02      	cmp	r3, #2
 800f650:	d002      	beq.n	800f658 <USBD_StdEPReq+0xac>
 800f652:	2b03      	cmp	r3, #3
 800f654:	d016      	beq.n	800f684 <USBD_StdEPReq+0xd8>
 800f656:	e02c      	b.n	800f6b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f658:	7bbb      	ldrb	r3, [r7, #14]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00d      	beq.n	800f67a <USBD_StdEPReq+0xce>
 800f65e:	7bbb      	ldrb	r3, [r7, #14]
 800f660:	2b80      	cmp	r3, #128	; 0x80
 800f662:	d00a      	beq.n	800f67a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f664:	7bbb      	ldrb	r3, [r7, #14]
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f001 f979 	bl	8010960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f66e:	2180      	movs	r1, #128	; 0x80
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f001 f975 	bl	8010960 <USBD_LL_StallEP>
 800f676:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f678:	e020      	b.n	800f6bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f67a:	6839      	ldr	r1, [r7, #0]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 fc7a 	bl	800ff76 <USBD_CtlError>
              break;
 800f682:	e01b      	b.n	800f6bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	885b      	ldrh	r3, [r3, #2]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d10e      	bne.n	800f6aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f68c:	7bbb      	ldrb	r3, [r7, #14]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00b      	beq.n	800f6aa <USBD_StdEPReq+0xfe>
 800f692:	7bbb      	ldrb	r3, [r7, #14]
 800f694:	2b80      	cmp	r3, #128	; 0x80
 800f696:	d008      	beq.n	800f6aa <USBD_StdEPReq+0xfe>
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	88db      	ldrh	r3, [r3, #6]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d104      	bne.n	800f6aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6a0:	7bbb      	ldrb	r3, [r7, #14]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f001 f95b 	bl	8010960 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fd2e 	bl	801010c <USBD_CtlSendStatus>

              break;
 800f6b0:	e004      	b.n	800f6bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fc5e 	bl	800ff76 <USBD_CtlError>
              break;
 800f6ba:	bf00      	nop
          }
          break;
 800f6bc:	e107      	b.n	800f8ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	d002      	beq.n	800f6d0 <USBD_StdEPReq+0x124>
 800f6ca:	2b03      	cmp	r3, #3
 800f6cc:	d016      	beq.n	800f6fc <USBD_StdEPReq+0x150>
 800f6ce:	e04b      	b.n	800f768 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6d0:	7bbb      	ldrb	r3, [r7, #14]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00d      	beq.n	800f6f2 <USBD_StdEPReq+0x146>
 800f6d6:	7bbb      	ldrb	r3, [r7, #14]
 800f6d8:	2b80      	cmp	r3, #128	; 0x80
 800f6da:	d00a      	beq.n	800f6f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
 800f6de:	4619      	mov	r1, r3
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f001 f93d 	bl	8010960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6e6:	2180      	movs	r1, #128	; 0x80
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f001 f939 	bl	8010960 <USBD_LL_StallEP>
 800f6ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f6f0:	e040      	b.n	800f774 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f6f2:	6839      	ldr	r1, [r7, #0]
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 fc3e 	bl	800ff76 <USBD_CtlError>
              break;
 800f6fa:	e03b      	b.n	800f774 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	885b      	ldrh	r3, [r3, #2]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d136      	bne.n	800f772 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f704:	7bbb      	ldrb	r3, [r7, #14]
 800f706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d004      	beq.n	800f718 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f70e:	7bbb      	ldrb	r3, [r7, #14]
 800f710:	4619      	mov	r1, r3
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f001 f943 	bl	801099e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 fcf7 	bl	801010c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f71e:	7bbb      	ldrb	r3, [r7, #14]
 800f720:	4619      	mov	r1, r3
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7ff fde2 	bl	800f2ec <USBD_CoreFindEP>
 800f728:	4603      	mov	r3, r0
 800f72a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f72c:	7b7b      	ldrb	r3, [r7, #13]
 800f72e:	2bff      	cmp	r3, #255	; 0xff
 800f730:	d01f      	beq.n	800f772 <USBD_StdEPReq+0x1c6>
 800f732:	7b7b      	ldrb	r3, [r7, #13]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d11c      	bne.n	800f772 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f738:	7b7a      	ldrb	r2, [r7, #13]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f740:	7b7a      	ldrb	r2, [r7, #13]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	32ae      	adds	r2, #174	; 0xae
 800f746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d010      	beq.n	800f772 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f750:	7b7a      	ldrb	r2, [r7, #13]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	32ae      	adds	r2, #174	; 0xae
 800f756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	6839      	ldr	r1, [r7, #0]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	4798      	blx	r3
 800f762:	4603      	mov	r3, r0
 800f764:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f766:	e004      	b.n	800f772 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f768:	6839      	ldr	r1, [r7, #0]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fc03 	bl	800ff76 <USBD_CtlError>
              break;
 800f770:	e000      	b.n	800f774 <USBD_StdEPReq+0x1c8>
              break;
 800f772:	bf00      	nop
          }
          break;
 800f774:	e0ab      	b.n	800f8ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	2b02      	cmp	r3, #2
 800f780:	d002      	beq.n	800f788 <USBD_StdEPReq+0x1dc>
 800f782:	2b03      	cmp	r3, #3
 800f784:	d032      	beq.n	800f7ec <USBD_StdEPReq+0x240>
 800f786:	e097      	b.n	800f8b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f788:	7bbb      	ldrb	r3, [r7, #14]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d007      	beq.n	800f79e <USBD_StdEPReq+0x1f2>
 800f78e:	7bbb      	ldrb	r3, [r7, #14]
 800f790:	2b80      	cmp	r3, #128	; 0x80
 800f792:	d004      	beq.n	800f79e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 fbed 	bl	800ff76 <USBD_CtlError>
                break;
 800f79c:	e091      	b.n	800f8c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f79e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	da0b      	bge.n	800f7be <USBD_StdEPReq+0x212>
 800f7a6:	7bbb      	ldrb	r3, [r7, #14]
 800f7a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	4413      	add	r3, r2
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	3310      	adds	r3, #16
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	3304      	adds	r3, #4
 800f7bc:	e00b      	b.n	800f7d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f7be:	7bbb      	ldrb	r3, [r7, #14]
 800f7c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	3304      	adds	r3, #4
 800f7d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	2202      	movs	r2, #2
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 fc37 	bl	8010058 <USBD_CtlSendData>
              break;
 800f7ea:	e06a      	b.n	800f8c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f7ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	da11      	bge.n	800f818 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f7f4:	7bbb      	ldrb	r3, [r7, #14]
 800f7f6:	f003 020f 	and.w	r2, r3, #15
 800f7fa:	6879      	ldr	r1, [r7, #4]
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	4413      	add	r3, r2
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	440b      	add	r3, r1
 800f806:	3324      	adds	r3, #36	; 0x24
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d117      	bne.n	800f83e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fbb0 	bl	800ff76 <USBD_CtlError>
                  break;
 800f816:	e054      	b.n	800f8c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f818:	7bbb      	ldrb	r3, [r7, #14]
 800f81a:	f003 020f 	and.w	r2, r3, #15
 800f81e:	6879      	ldr	r1, [r7, #4]
 800f820:	4613      	mov	r3, r2
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	4413      	add	r3, r2
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	440b      	add	r3, r1
 800f82a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f82e:	881b      	ldrh	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d104      	bne.n	800f83e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f834:	6839      	ldr	r1, [r7, #0]
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 fb9d 	bl	800ff76 <USBD_CtlError>
                  break;
 800f83c:	e041      	b.n	800f8c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f83e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f842:	2b00      	cmp	r3, #0
 800f844:	da0b      	bge.n	800f85e <USBD_StdEPReq+0x2b2>
 800f846:	7bbb      	ldrb	r3, [r7, #14]
 800f848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f84c:	4613      	mov	r3, r2
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	4413      	add	r3, r2
 800f852:	009b      	lsls	r3, r3, #2
 800f854:	3310      	adds	r3, #16
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	4413      	add	r3, r2
 800f85a:	3304      	adds	r3, #4
 800f85c:	e00b      	b.n	800f876 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f85e:	7bbb      	ldrb	r3, [r7, #14]
 800f860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f864:	4613      	mov	r3, r2
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4413      	add	r3, r2
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	4413      	add	r3, r2
 800f874:	3304      	adds	r3, #4
 800f876:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f878:	7bbb      	ldrb	r3, [r7, #14]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <USBD_StdEPReq+0x2d8>
 800f87e:	7bbb      	ldrb	r3, [r7, #14]
 800f880:	2b80      	cmp	r3, #128	; 0x80
 800f882:	d103      	bne.n	800f88c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	2200      	movs	r2, #0
 800f888:	601a      	str	r2, [r3, #0]
 800f88a:	e00e      	b.n	800f8aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f88c:	7bbb      	ldrb	r3, [r7, #14]
 800f88e:	4619      	mov	r1, r3
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f001 f8a3 	bl	80109dc <USBD_LL_IsStallEP>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d003      	beq.n	800f8a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	e002      	b.n	800f8aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 fbd1 	bl	8010058 <USBD_CtlSendData>
              break;
 800f8b6:	e004      	b.n	800f8c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f8b8:	6839      	ldr	r1, [r7, #0]
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fb5b 	bl	800ff76 <USBD_CtlError>
              break;
 800f8c0:	bf00      	nop
          }
          break;
 800f8c2:	e004      	b.n	800f8ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 fb55 	bl	800ff76 <USBD_CtlError>
          break;
 800f8cc:	bf00      	nop
      }
      break;
 800f8ce:	e005      	b.n	800f8dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f8d0:	6839      	ldr	r1, [r7, #0]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fb4f 	bl	800ff76 <USBD_CtlError>
      break;
 800f8d8:	e000      	b.n	800f8dc <USBD_StdEPReq+0x330>
      break;
 800f8da:	bf00      	nop
  }

  return ret;
 800f8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
	...

0800f8e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	885b      	ldrh	r3, [r3, #2]
 800f902:	0a1b      	lsrs	r3, r3, #8
 800f904:	b29b      	uxth	r3, r3
 800f906:	3b01      	subs	r3, #1
 800f908:	2b06      	cmp	r3, #6
 800f90a:	f200 8128 	bhi.w	800fb5e <USBD_GetDescriptor+0x276>
 800f90e:	a201      	add	r2, pc, #4	; (adr r2, 800f914 <USBD_GetDescriptor+0x2c>)
 800f910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f914:	0800f931 	.word	0x0800f931
 800f918:	0800f949 	.word	0x0800f949
 800f91c:	0800f989 	.word	0x0800f989
 800f920:	0800fb5f 	.word	0x0800fb5f
 800f924:	0800fb5f 	.word	0x0800fb5f
 800f928:	0800faff 	.word	0x0800faff
 800f92c:	0800fb2b 	.word	0x0800fb2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	7c12      	ldrb	r2, [r2, #16]
 800f93c:	f107 0108 	add.w	r1, r7, #8
 800f940:	4610      	mov	r0, r2
 800f942:	4798      	blx	r3
 800f944:	60f8      	str	r0, [r7, #12]
      break;
 800f946:	e112      	b.n	800fb6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	7c1b      	ldrb	r3, [r3, #16]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10d      	bne.n	800f96c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f958:	f107 0208 	add.w	r2, r7, #8
 800f95c:	4610      	mov	r0, r2
 800f95e:	4798      	blx	r3
 800f960:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	3301      	adds	r3, #1
 800f966:	2202      	movs	r2, #2
 800f968:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f96a:	e100      	b.n	800fb6e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	f107 0208 	add.w	r2, r7, #8
 800f978:	4610      	mov	r0, r2
 800f97a:	4798      	blx	r3
 800f97c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	3301      	adds	r3, #1
 800f982:	2202      	movs	r2, #2
 800f984:	701a      	strb	r2, [r3, #0]
      break;
 800f986:	e0f2      	b.n	800fb6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	885b      	ldrh	r3, [r3, #2]
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b05      	cmp	r3, #5
 800f990:	f200 80ac 	bhi.w	800faec <USBD_GetDescriptor+0x204>
 800f994:	a201      	add	r2, pc, #4	; (adr r2, 800f99c <USBD_GetDescriptor+0xb4>)
 800f996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99a:	bf00      	nop
 800f99c:	0800f9b5 	.word	0x0800f9b5
 800f9a0:	0800f9e9 	.word	0x0800f9e9
 800f9a4:	0800fa1d 	.word	0x0800fa1d
 800f9a8:	0800fa51 	.word	0x0800fa51
 800f9ac:	0800fa85 	.word	0x0800fa85
 800f9b0:	0800fab9 	.word	0x0800fab9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00b      	beq.n	800f9d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	7c12      	ldrb	r2, [r2, #16]
 800f9cc:	f107 0108 	add.w	r1, r7, #8
 800f9d0:	4610      	mov	r0, r2
 800f9d2:	4798      	blx	r3
 800f9d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9d6:	e091      	b.n	800fafc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9d8:	6839      	ldr	r1, [r7, #0]
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 facb 	bl	800ff76 <USBD_CtlError>
            err++;
 800f9e0:	7afb      	ldrb	r3, [r7, #11]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f9e6:	e089      	b.n	800fafc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00b      	beq.n	800fa0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	7c12      	ldrb	r2, [r2, #16]
 800fa00:	f107 0108 	add.w	r1, r7, #8
 800fa04:	4610      	mov	r0, r2
 800fa06:	4798      	blx	r3
 800fa08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa0a:	e077      	b.n	800fafc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa0c:	6839      	ldr	r1, [r7, #0]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 fab1 	bl	800ff76 <USBD_CtlError>
            err++;
 800fa14:	7afb      	ldrb	r3, [r7, #11]
 800fa16:	3301      	adds	r3, #1
 800fa18:	72fb      	strb	r3, [r7, #11]
          break;
 800fa1a:	e06f      	b.n	800fafc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00b      	beq.n	800fa40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	7c12      	ldrb	r2, [r2, #16]
 800fa34:	f107 0108 	add.w	r1, r7, #8
 800fa38:	4610      	mov	r0, r2
 800fa3a:	4798      	blx	r3
 800fa3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa3e:	e05d      	b.n	800fafc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 fa97 	bl	800ff76 <USBD_CtlError>
            err++;
 800fa48:	7afb      	ldrb	r3, [r7, #11]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	72fb      	strb	r3, [r7, #11]
          break;
 800fa4e:	e055      	b.n	800fafc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa56:	691b      	ldr	r3, [r3, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00b      	beq.n	800fa74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	7c12      	ldrb	r2, [r2, #16]
 800fa68:	f107 0108 	add.w	r1, r7, #8
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	4798      	blx	r3
 800fa70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa72:	e043      	b.n	800fafc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 fa7d 	bl	800ff76 <USBD_CtlError>
            err++;
 800fa7c:	7afb      	ldrb	r3, [r7, #11]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	72fb      	strb	r3, [r7, #11]
          break;
 800fa82:	e03b      	b.n	800fafc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa8a:	695b      	ldr	r3, [r3, #20]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00b      	beq.n	800faa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa96:	695b      	ldr	r3, [r3, #20]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	7c12      	ldrb	r2, [r2, #16]
 800fa9c:	f107 0108 	add.w	r1, r7, #8
 800faa0:	4610      	mov	r0, r2
 800faa2:	4798      	blx	r3
 800faa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faa6:	e029      	b.n	800fafc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800faa8:	6839      	ldr	r1, [r7, #0]
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 fa63 	bl	800ff76 <USBD_CtlError>
            err++;
 800fab0:	7afb      	ldrb	r3, [r7, #11]
 800fab2:	3301      	adds	r3, #1
 800fab4:	72fb      	strb	r3, [r7, #11]
          break;
 800fab6:	e021      	b.n	800fafc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d00b      	beq.n	800fadc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faca:	699b      	ldr	r3, [r3, #24]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	7c12      	ldrb	r2, [r2, #16]
 800fad0:	f107 0108 	add.w	r1, r7, #8
 800fad4:	4610      	mov	r0, r2
 800fad6:	4798      	blx	r3
 800fad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fada:	e00f      	b.n	800fafc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fadc:	6839      	ldr	r1, [r7, #0]
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 fa49 	bl	800ff76 <USBD_CtlError>
            err++;
 800fae4:	7afb      	ldrb	r3, [r7, #11]
 800fae6:	3301      	adds	r3, #1
 800fae8:	72fb      	strb	r3, [r7, #11]
          break;
 800faea:	e007      	b.n	800fafc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 fa41 	bl	800ff76 <USBD_CtlError>
          err++;
 800faf4:	7afb      	ldrb	r3, [r7, #11]
 800faf6:	3301      	adds	r3, #1
 800faf8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fafa:	bf00      	nop
      }
      break;
 800fafc:	e037      	b.n	800fb6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	7c1b      	ldrb	r3, [r3, #16]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d109      	bne.n	800fb1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb0e:	f107 0208 	add.w	r2, r7, #8
 800fb12:	4610      	mov	r0, r2
 800fb14:	4798      	blx	r3
 800fb16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb18:	e029      	b.n	800fb6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 fa2a 	bl	800ff76 <USBD_CtlError>
        err++;
 800fb22:	7afb      	ldrb	r3, [r7, #11]
 800fb24:	3301      	adds	r3, #1
 800fb26:	72fb      	strb	r3, [r7, #11]
      break;
 800fb28:	e021      	b.n	800fb6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	7c1b      	ldrb	r3, [r3, #16]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10d      	bne.n	800fb4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb3a:	f107 0208 	add.w	r2, r7, #8
 800fb3e:	4610      	mov	r0, r2
 800fb40:	4798      	blx	r3
 800fb42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3301      	adds	r3, #1
 800fb48:	2207      	movs	r2, #7
 800fb4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb4c:	e00f      	b.n	800fb6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fb4e:	6839      	ldr	r1, [r7, #0]
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fa10 	bl	800ff76 <USBD_CtlError>
        err++;
 800fb56:	7afb      	ldrb	r3, [r7, #11]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	72fb      	strb	r3, [r7, #11]
      break;
 800fb5c:	e007      	b.n	800fb6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 fa08 	bl	800ff76 <USBD_CtlError>
      err++;
 800fb66:	7afb      	ldrb	r3, [r7, #11]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	72fb      	strb	r3, [r7, #11]
      break;
 800fb6c:	bf00      	nop
  }

  if (err != 0U)
 800fb6e:	7afb      	ldrb	r3, [r7, #11]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d11e      	bne.n	800fbb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	88db      	ldrh	r3, [r3, #6]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d016      	beq.n	800fbaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fb7c:	893b      	ldrh	r3, [r7, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00e      	beq.n	800fba0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	88da      	ldrh	r2, [r3, #6]
 800fb86:	893b      	ldrh	r3, [r7, #8]
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	bf28      	it	cs
 800fb8c:	4613      	movcs	r3, r2
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fb92:	893b      	ldrh	r3, [r7, #8]
 800fb94:	461a      	mov	r2, r3
 800fb96:	68f9      	ldr	r1, [r7, #12]
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fa5d 	bl	8010058 <USBD_CtlSendData>
 800fb9e:	e009      	b.n	800fbb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 f9e7 	bl	800ff76 <USBD_CtlError>
 800fba8:	e004      	b.n	800fbb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 faae 	bl	801010c <USBD_CtlSendStatus>
 800fbb0:	e000      	b.n	800fbb4 <USBD_GetDescriptor+0x2cc>
    return;
 800fbb2:	bf00      	nop
  }
}
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop

0800fbbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	889b      	ldrh	r3, [r3, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d131      	bne.n	800fc32 <USBD_SetAddress+0x76>
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	88db      	ldrh	r3, [r3, #6]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d12d      	bne.n	800fc32 <USBD_SetAddress+0x76>
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	885b      	ldrh	r3, [r3, #2]
 800fbda:	2b7f      	cmp	r3, #127	; 0x7f
 800fbdc:	d829      	bhi.n	800fc32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	885b      	ldrh	r3, [r3, #2]
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	2b03      	cmp	r3, #3
 800fbf4:	d104      	bne.n	800fc00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fbf6:	6839      	ldr	r1, [r7, #0]
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 f9bc 	bl	800ff76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbfe:	e01d      	b.n	800fc3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	7bfa      	ldrb	r2, [r7, #15]
 800fc04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fc08:	7bfb      	ldrb	r3, [r7, #15]
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 ff11 	bl	8010a34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 fa7a 	bl	801010c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d004      	beq.n	800fc28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2202      	movs	r2, #2
 800fc22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc26:	e009      	b.n	800fc3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc30:	e004      	b.n	800fc3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fc32:	6839      	ldr	r1, [r7, #0]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 f99e 	bl	800ff76 <USBD_CtlError>
  }
}
 800fc3a:	bf00      	nop
 800fc3c:	bf00      	nop
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	885b      	ldrh	r3, [r3, #2]
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	4b4e      	ldr	r3, [pc, #312]	; (800fd94 <USBD_SetConfig+0x150>)
 800fc5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fc5c:	4b4d      	ldr	r3, [pc, #308]	; (800fd94 <USBD_SetConfig+0x150>)
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d905      	bls.n	800fc70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fc64:	6839      	ldr	r1, [r7, #0]
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f985 	bl	800ff76 <USBD_CtlError>
    return USBD_FAIL;
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	e08c      	b.n	800fd8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	2b02      	cmp	r3, #2
 800fc7a:	d002      	beq.n	800fc82 <USBD_SetConfig+0x3e>
 800fc7c:	2b03      	cmp	r3, #3
 800fc7e:	d029      	beq.n	800fcd4 <USBD_SetConfig+0x90>
 800fc80:	e075      	b.n	800fd6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fc82:	4b44      	ldr	r3, [pc, #272]	; (800fd94 <USBD_SetConfig+0x150>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d020      	beq.n	800fccc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fc8a:	4b42      	ldr	r3, [pc, #264]	; (800fd94 <USBD_SetConfig+0x150>)
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	461a      	mov	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc94:	4b3f      	ldr	r3, [pc, #252]	; (800fd94 <USBD_SetConfig+0x150>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7fe ffe7 	bl	800ec6e <USBD_SetClassConfig>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d008      	beq.n	800fcbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fcaa:	6839      	ldr	r1, [r7, #0]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 f962 	bl	800ff76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fcba:	e065      	b.n	800fd88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 fa25 	bl	801010c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2203      	movs	r2, #3
 800fcc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fcca:	e05d      	b.n	800fd88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fa1d 	bl	801010c <USBD_CtlSendStatus>
      break;
 800fcd2:	e059      	b.n	800fd88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fcd4:	4b2f      	ldr	r3, [pc, #188]	; (800fd94 <USBD_SetConfig+0x150>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d112      	bne.n	800fd02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2202      	movs	r2, #2
 800fce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fce4:	4b2b      	ldr	r3, [pc, #172]	; (800fd94 <USBD_SetConfig+0x150>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	461a      	mov	r2, r3
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fcee:	4b29      	ldr	r3, [pc, #164]	; (800fd94 <USBD_SetConfig+0x150>)
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7fe ffd6 	bl	800eca6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fa06 	bl	801010c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd00:	e042      	b.n	800fd88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fd02:	4b24      	ldr	r3, [pc, #144]	; (800fd94 <USBD_SetConfig+0x150>)
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	461a      	mov	r2, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d02a      	beq.n	800fd66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7fe ffc4 	bl	800eca6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fd1e:	4b1d      	ldr	r3, [pc, #116]	; (800fd94 <USBD_SetConfig+0x150>)
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	461a      	mov	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd28:	4b1a      	ldr	r3, [pc, #104]	; (800fd94 <USBD_SetConfig+0x150>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7fe ff9d 	bl	800ec6e <USBD_SetClassConfig>
 800fd34:	4603      	mov	r3, r0
 800fd36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fd38:	7bfb      	ldrb	r3, [r7, #15]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00f      	beq.n	800fd5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f918 	bl	800ff76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7fe ffa9 	bl	800eca6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2202      	movs	r2, #2
 800fd58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fd5c:	e014      	b.n	800fd88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f9d4 	bl	801010c <USBD_CtlSendStatus>
      break;
 800fd64:	e010      	b.n	800fd88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f9d0 	bl	801010c <USBD_CtlSendStatus>
      break;
 800fd6c:	e00c      	b.n	800fd88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 f900 	bl	800ff76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd76:	4b07      	ldr	r3, [pc, #28]	; (800fd94 <USBD_SetConfig+0x150>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7fe ff92 	bl	800eca6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fd82:	2303      	movs	r3, #3
 800fd84:	73fb      	strb	r3, [r7, #15]
      break;
 800fd86:	bf00      	nop
  }

  return ret;
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3710      	adds	r7, #16
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	240005a4 	.word	0x240005a4

0800fd98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	88db      	ldrh	r3, [r3, #6]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d004      	beq.n	800fdb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 f8e2 	bl	800ff76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fdb2:	e023      	b.n	800fdfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	dc02      	bgt.n	800fdc6 <USBD_GetConfig+0x2e>
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	dc03      	bgt.n	800fdcc <USBD_GetConfig+0x34>
 800fdc4:	e015      	b.n	800fdf2 <USBD_GetConfig+0x5a>
 800fdc6:	2b03      	cmp	r3, #3
 800fdc8:	d00b      	beq.n	800fde2 <USBD_GetConfig+0x4a>
 800fdca:	e012      	b.n	800fdf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	3308      	adds	r3, #8
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 f93c 	bl	8010058 <USBD_CtlSendData>
        break;
 800fde0:	e00c      	b.n	800fdfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3304      	adds	r3, #4
 800fde6:	2201      	movs	r2, #1
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f934 	bl	8010058 <USBD_CtlSendData>
        break;
 800fdf0:	e004      	b.n	800fdfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fdf2:	6839      	ldr	r1, [r7, #0]
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 f8be 	bl	800ff76 <USBD_CtlError>
        break;
 800fdfa:	bf00      	nop
}
 800fdfc:	bf00      	nop
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	3b01      	subs	r3, #1
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	d81e      	bhi.n	800fe5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	88db      	ldrh	r3, [r3, #6]
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	d004      	beq.n	800fe2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f8a5 	bl	800ff76 <USBD_CtlError>
        break;
 800fe2c:	e01a      	b.n	800fe64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2201      	movs	r2, #1
 800fe32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d005      	beq.n	800fe4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	f043 0202 	orr.w	r2, r3, #2
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	330c      	adds	r3, #12
 800fe4e:	2202      	movs	r2, #2
 800fe50:	4619      	mov	r1, r3
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 f900 	bl	8010058 <USBD_CtlSendData>
      break;
 800fe58:	e004      	b.n	800fe64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f88a 	bl	800ff76 <USBD_CtlError>
      break;
 800fe62:	bf00      	nop
  }
}
 800fe64:	bf00      	nop
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	885b      	ldrh	r3, [r3, #2]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d107      	bne.n	800fe8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2201      	movs	r2, #1
 800fe82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 f940 	bl	801010c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fe8c:	e013      	b.n	800feb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	885b      	ldrh	r3, [r3, #2]
 800fe92:	2b02      	cmp	r3, #2
 800fe94:	d10b      	bne.n	800feae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	889b      	ldrh	r3, [r3, #4]
 800fe9a:	0a1b      	lsrs	r3, r3, #8
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 f930 	bl	801010c <USBD_CtlSendStatus>
}
 800feac:	e003      	b.n	800feb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800feae:	6839      	ldr	r1, [r7, #0]
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 f860 	bl	800ff76 <USBD_CtlError>
}
 800feb6:	bf00      	nop
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
 800fec6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	3b01      	subs	r3, #1
 800fed2:	2b02      	cmp	r3, #2
 800fed4:	d80b      	bhi.n	800feee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	885b      	ldrh	r3, [r3, #2]
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d10c      	bne.n	800fef8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 f910 	bl	801010c <USBD_CtlSendStatus>
      }
      break;
 800feec:	e004      	b.n	800fef8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800feee:	6839      	ldr	r1, [r7, #0]
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 f840 	bl	800ff76 <USBD_CtlError>
      break;
 800fef6:	e000      	b.n	800fefa <USBD_ClrFeature+0x3c>
      break;
 800fef8:	bf00      	nop
  }
}
 800fefa:	bf00      	nop
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b084      	sub	sp, #16
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	781a      	ldrb	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	781a      	ldrb	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f7ff fa41 	bl	800f3b4 <SWAPBYTE>
 800ff32:	4603      	mov	r3, r0
 800ff34:	461a      	mov	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	3301      	adds	r3, #1
 800ff44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7ff fa34 	bl	800f3b4 <SWAPBYTE>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	461a      	mov	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	3301      	adds	r3, #1
 800ff58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f7ff fa27 	bl	800f3b4 <SWAPBYTE>
 800ff66:	4603      	mov	r3, r0
 800ff68:	461a      	mov	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	80da      	strh	r2, [r3, #6]
}
 800ff6e:	bf00      	nop
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b082      	sub	sp, #8
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff80:	2180      	movs	r1, #128	; 0x80
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 fcec 	bl	8010960 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff88:	2100      	movs	r1, #0
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 fce8 	bl	8010960 <USBD_LL_StallEP>
}
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d036      	beq.n	801001c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ffb2:	6938      	ldr	r0, [r7, #16]
 800ffb4:	f000 f836 	bl	8010024 <USBD_GetLen>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	3301      	adds	r3, #1
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	005b      	lsls	r3, r3, #1
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	68ba      	ldr	r2, [r7, #8]
 800ffca:	4413      	add	r3, r2
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	7812      	ldrb	r2, [r2, #0]
 800ffd0:	701a      	strb	r2, [r3, #0]
  idx++;
 800ffd2:	7dfb      	ldrb	r3, [r7, #23]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	4413      	add	r3, r2
 800ffde:	2203      	movs	r2, #3
 800ffe0:	701a      	strb	r2, [r3, #0]
  idx++;
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ffe8:	e013      	b.n	8010012 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	4413      	add	r3, r2
 800fff0:	693a      	ldr	r2, [r7, #16]
 800fff2:	7812      	ldrb	r2, [r2, #0]
 800fff4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	3301      	adds	r3, #1
 800fffa:	613b      	str	r3, [r7, #16]
    idx++;
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	3301      	adds	r3, #1
 8010000:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010002:	7dfb      	ldrb	r3, [r7, #23]
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	4413      	add	r3, r2
 8010008:	2200      	movs	r2, #0
 801000a:	701a      	strb	r2, [r3, #0]
    idx++;
 801000c:	7dfb      	ldrb	r3, [r7, #23]
 801000e:	3301      	adds	r3, #1
 8010010:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1e7      	bne.n	800ffea <USBD_GetString+0x52>
 801001a:	e000      	b.n	801001e <USBD_GetString+0x86>
    return;
 801001c:	bf00      	nop
  }
}
 801001e:	3718      	adds	r7, #24
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801002c:	2300      	movs	r3, #0
 801002e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010034:	e005      	b.n	8010042 <USBD_GetLen+0x1e>
  {
    len++;
 8010036:	7bfb      	ldrb	r3, [r7, #15]
 8010038:	3301      	adds	r3, #1
 801003a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	3301      	adds	r3, #1
 8010040:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1f5      	bne.n	8010036 <USBD_GetLen+0x12>
  }

  return len;
 801004a:	7bfb      	ldrb	r3, [r7, #15]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3714      	adds	r7, #20
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2202      	movs	r2, #2
 8010068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	68ba      	ldr	r2, [r7, #8]
 801007c:	2100      	movs	r1, #0
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f000 fcf7 	bl	8010a72 <USBD_LL_Transmit>

  return USBD_OK;
 8010084:	2300      	movs	r3, #0
}
 8010086:	4618      	mov	r0, r3
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}

0801008e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801008e:	b580      	push	{r7, lr}
 8010090:	b084      	sub	sp, #16
 8010092:	af00      	add	r7, sp, #0
 8010094:	60f8      	str	r0, [r7, #12]
 8010096:	60b9      	str	r1, [r7, #8]
 8010098:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	68ba      	ldr	r2, [r7, #8]
 801009e:	2100      	movs	r1, #0
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f000 fce6 	bl	8010a72 <USBD_LL_Transmit>

  return USBD_OK;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3710      	adds	r7, #16
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2203      	movs	r2, #3
 80100c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	2100      	movs	r1, #0
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f000 fcea 	bl	8010ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b084      	sub	sp, #16
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	60f8      	str	r0, [r7, #12]
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	2100      	movs	r1, #0
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f000 fcd9 	bl	8010ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010102:	2300      	movs	r3, #0
}
 8010104:	4618      	mov	r0, r3
 8010106:	3710      	adds	r7, #16
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2204      	movs	r2, #4
 8010118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801011c:	2300      	movs	r3, #0
 801011e:	2200      	movs	r2, #0
 8010120:	2100      	movs	r1, #0
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 fca5 	bl	8010a72 <USBD_LL_Transmit>

  return USBD_OK;
 8010128:	2300      	movs	r3, #0
}
 801012a:	4618      	mov	r0, r3
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}

08010132 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010132:	b580      	push	{r7, lr}
 8010134:	b082      	sub	sp, #8
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2205      	movs	r2, #5
 801013e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010142:	2300      	movs	r3, #0
 8010144:	2200      	movs	r2, #0
 8010146:	2100      	movs	r1, #0
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 fcb3 	bl	8010ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801014e:	2300      	movs	r3, #0
}
 8010150:	4618      	mov	r0, r3
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801015c:	2200      	movs	r2, #0
 801015e:	4913      	ldr	r1, [pc, #76]	; (80101ac <MX_USB_DEVICE_Init+0x54>)
 8010160:	4813      	ldr	r0, [pc, #76]	; (80101b0 <MX_USB_DEVICE_Init+0x58>)
 8010162:	f7fe fd07 	bl	800eb74 <USBD_Init>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801016c:	f7f1 f8dc 	bl	8001328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010170:	4910      	ldr	r1, [pc, #64]	; (80101b4 <MX_USB_DEVICE_Init+0x5c>)
 8010172:	480f      	ldr	r0, [pc, #60]	; (80101b0 <MX_USB_DEVICE_Init+0x58>)
 8010174:	f7fe fd2e 	bl	800ebd4 <USBD_RegisterClass>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d001      	beq.n	8010182 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801017e:	f7f1 f8d3 	bl	8001328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010182:	490d      	ldr	r1, [pc, #52]	; (80101b8 <MX_USB_DEVICE_Init+0x60>)
 8010184:	480a      	ldr	r0, [pc, #40]	; (80101b0 <MX_USB_DEVICE_Init+0x58>)
 8010186:	f7fe fc65 	bl	800ea54 <USBD_CDC_RegisterInterface>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010190:	f7f1 f8ca 	bl	8001328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010194:	4806      	ldr	r0, [pc, #24]	; (80101b0 <MX_USB_DEVICE_Init+0x58>)
 8010196:	f7fe fd53 	bl	800ec40 <USBD_Start>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d001      	beq.n	80101a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80101a0:	f7f1 f8c2 	bl	8001328 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80101a4:	f7f7 fbe8 	bl	8007978 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80101a8:	bf00      	nop
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	240000b8 	.word	0x240000b8
 80101b0:	24000ce4 	.word	0x24000ce4
 80101b4:	24000024 	.word	0x24000024
 80101b8:	240000a4 	.word	0x240000a4

080101bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80101c0:	2200      	movs	r2, #0
 80101c2:	4905      	ldr	r1, [pc, #20]	; (80101d8 <CDC_Init_FS+0x1c>)
 80101c4:	4805      	ldr	r0, [pc, #20]	; (80101dc <CDC_Init_FS+0x20>)
 80101c6:	f7fe fc5f 	bl	800ea88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80101ca:	4905      	ldr	r1, [pc, #20]	; (80101e0 <CDC_Init_FS+0x24>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <CDC_Init_FS+0x20>)
 80101ce:	f7fe fc7d 	bl	800eacc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80101d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	240017c0 	.word	0x240017c0
 80101dc:	24000ce4 	.word	0x24000ce4
 80101e0:	24000fc0 	.word	0x24000fc0

080101e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80101e4:	b480      	push	{r7}
 80101e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80101e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr

080101f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	6039      	str	r1, [r7, #0]
 80101fe:	71fb      	strb	r3, [r7, #7]
 8010200:	4613      	mov	r3, r2
 8010202:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010204:	79fb      	ldrb	r3, [r7, #7]
 8010206:	2b23      	cmp	r3, #35	; 0x23
 8010208:	d84a      	bhi.n	80102a0 <CDC_Control_FS+0xac>
 801020a:	a201      	add	r2, pc, #4	; (adr r2, 8010210 <CDC_Control_FS+0x1c>)
 801020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010210:	080102a1 	.word	0x080102a1
 8010214:	080102a1 	.word	0x080102a1
 8010218:	080102a1 	.word	0x080102a1
 801021c:	080102a1 	.word	0x080102a1
 8010220:	080102a1 	.word	0x080102a1
 8010224:	080102a1 	.word	0x080102a1
 8010228:	080102a1 	.word	0x080102a1
 801022c:	080102a1 	.word	0x080102a1
 8010230:	080102a1 	.word	0x080102a1
 8010234:	080102a1 	.word	0x080102a1
 8010238:	080102a1 	.word	0x080102a1
 801023c:	080102a1 	.word	0x080102a1
 8010240:	080102a1 	.word	0x080102a1
 8010244:	080102a1 	.word	0x080102a1
 8010248:	080102a1 	.word	0x080102a1
 801024c:	080102a1 	.word	0x080102a1
 8010250:	080102a1 	.word	0x080102a1
 8010254:	080102a1 	.word	0x080102a1
 8010258:	080102a1 	.word	0x080102a1
 801025c:	080102a1 	.word	0x080102a1
 8010260:	080102a1 	.word	0x080102a1
 8010264:	080102a1 	.word	0x080102a1
 8010268:	080102a1 	.word	0x080102a1
 801026c:	080102a1 	.word	0x080102a1
 8010270:	080102a1 	.word	0x080102a1
 8010274:	080102a1 	.word	0x080102a1
 8010278:	080102a1 	.word	0x080102a1
 801027c:	080102a1 	.word	0x080102a1
 8010280:	080102a1 	.word	0x080102a1
 8010284:	080102a1 	.word	0x080102a1
 8010288:	080102a1 	.word	0x080102a1
 801028c:	080102a1 	.word	0x080102a1
 8010290:	080102a1 	.word	0x080102a1
 8010294:	080102a1 	.word	0x080102a1
 8010298:	080102a1 	.word	0x080102a1
 801029c:	080102a1 	.word	0x080102a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80102a0:	bf00      	nop
  }

  return (USBD_OK);
 80102a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	370c      	adds	r7, #12
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80102ba:	6879      	ldr	r1, [r7, #4]
 80102bc:	4805      	ldr	r0, [pc, #20]	; (80102d4 <CDC_Receive_FS+0x24>)
 80102be:	f7fe fc05 	bl	800eacc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80102c2:	4804      	ldr	r0, [pc, #16]	; (80102d4 <CDC_Receive_FS+0x24>)
 80102c4:	f7fe fc20 	bl	800eb08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80102c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	24000ce4 	.word	0x24000ce4

080102d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80102d8:	b480      	push	{r7}
 80102da:	b087      	sub	sp, #28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	4613      	mov	r3, r2
 80102e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80102e6:	2300      	movs	r3, #0
 80102e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80102ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	371c      	adds	r7, #28
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr
	...

080102fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	6039      	str	r1, [r7, #0]
 8010306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	2212      	movs	r2, #18
 801030c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801030e:	4b03      	ldr	r3, [pc, #12]	; (801031c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010310:	4618      	mov	r0, r3
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr
 801031c:	240000d4 	.word	0x240000d4

08010320 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	4603      	mov	r3, r0
 8010328:	6039      	str	r1, [r7, #0]
 801032a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	2204      	movs	r2, #4
 8010330:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010332:	4b03      	ldr	r3, [pc, #12]	; (8010340 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010334:	4618      	mov	r0, r3
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	240000e8 	.word	0x240000e8

08010344 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	6039      	str	r1, [r7, #0]
 801034e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010350:	79fb      	ldrb	r3, [r7, #7]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d105      	bne.n	8010362 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010356:	683a      	ldr	r2, [r7, #0]
 8010358:	4907      	ldr	r1, [pc, #28]	; (8010378 <USBD_FS_ProductStrDescriptor+0x34>)
 801035a:	4808      	ldr	r0, [pc, #32]	; (801037c <USBD_FS_ProductStrDescriptor+0x38>)
 801035c:	f7ff fe1c 	bl	800ff98 <USBD_GetString>
 8010360:	e004      	b.n	801036c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010362:	683a      	ldr	r2, [r7, #0]
 8010364:	4904      	ldr	r1, [pc, #16]	; (8010378 <USBD_FS_ProductStrDescriptor+0x34>)
 8010366:	4805      	ldr	r0, [pc, #20]	; (801037c <USBD_FS_ProductStrDescriptor+0x38>)
 8010368:	f7ff fe16 	bl	800ff98 <USBD_GetString>
  }
  return USBD_StrDesc;
 801036c:	4b02      	ldr	r3, [pc, #8]	; (8010378 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801036e:	4618      	mov	r0, r3
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	24001fc0 	.word	0x24001fc0
 801037c:	08011e18 	.word	0x08011e18

08010380 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	4603      	mov	r3, r0
 8010388:	6039      	str	r1, [r7, #0]
 801038a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801038c:	683a      	ldr	r2, [r7, #0]
 801038e:	4904      	ldr	r1, [pc, #16]	; (80103a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010390:	4804      	ldr	r0, [pc, #16]	; (80103a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010392:	f7ff fe01 	bl	800ff98 <USBD_GetString>
  return USBD_StrDesc;
 8010396:	4b02      	ldr	r3, [pc, #8]	; (80103a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010398:	4618      	mov	r0, r3
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	24001fc0 	.word	0x24001fc0
 80103a4:	08011e30 	.word	0x08011e30

080103a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	4603      	mov	r3, r0
 80103b0:	6039      	str	r1, [r7, #0]
 80103b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	221a      	movs	r2, #26
 80103b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80103ba:	f000 f843 	bl	8010444 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80103be:	4b02      	ldr	r3, [pc, #8]	; (80103c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	240000ec 	.word	0x240000ec

080103cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	4603      	mov	r3, r0
 80103d4:	6039      	str	r1, [r7, #0]
 80103d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80103d8:	79fb      	ldrb	r3, [r7, #7]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d105      	bne.n	80103ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103de:	683a      	ldr	r2, [r7, #0]
 80103e0:	4907      	ldr	r1, [pc, #28]	; (8010400 <USBD_FS_ConfigStrDescriptor+0x34>)
 80103e2:	4808      	ldr	r0, [pc, #32]	; (8010404 <USBD_FS_ConfigStrDescriptor+0x38>)
 80103e4:	f7ff fdd8 	bl	800ff98 <USBD_GetString>
 80103e8:	e004      	b.n	80103f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103ea:	683a      	ldr	r2, [r7, #0]
 80103ec:	4904      	ldr	r1, [pc, #16]	; (8010400 <USBD_FS_ConfigStrDescriptor+0x34>)
 80103ee:	4805      	ldr	r0, [pc, #20]	; (8010404 <USBD_FS_ConfigStrDescriptor+0x38>)
 80103f0:	f7ff fdd2 	bl	800ff98 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103f4:	4b02      	ldr	r3, [pc, #8]	; (8010400 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	24001fc0 	.word	0x24001fc0
 8010404:	08011e44 	.word	0x08011e44

08010408 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	4603      	mov	r3, r0
 8010410:	6039      	str	r1, [r7, #0]
 8010412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010414:	79fb      	ldrb	r3, [r7, #7]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d105      	bne.n	8010426 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801041a:	683a      	ldr	r2, [r7, #0]
 801041c:	4907      	ldr	r1, [pc, #28]	; (801043c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801041e:	4808      	ldr	r0, [pc, #32]	; (8010440 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010420:	f7ff fdba 	bl	800ff98 <USBD_GetString>
 8010424:	e004      	b.n	8010430 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	4904      	ldr	r1, [pc, #16]	; (801043c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801042a:	4805      	ldr	r0, [pc, #20]	; (8010440 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801042c:	f7ff fdb4 	bl	800ff98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010430:	4b02      	ldr	r3, [pc, #8]	; (801043c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010432:	4618      	mov	r0, r3
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	24001fc0 	.word	0x24001fc0
 8010440:	08011e50 	.word	0x08011e50

08010444 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801044a:	4b0f      	ldr	r3, [pc, #60]	; (8010488 <Get_SerialNum+0x44>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010450:	4b0e      	ldr	r3, [pc, #56]	; (801048c <Get_SerialNum+0x48>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010456:	4b0e      	ldr	r3, [pc, #56]	; (8010490 <Get_SerialNum+0x4c>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4413      	add	r3, r2
 8010462:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d009      	beq.n	801047e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801046a:	2208      	movs	r2, #8
 801046c:	4909      	ldr	r1, [pc, #36]	; (8010494 <Get_SerialNum+0x50>)
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f000 f814 	bl	801049c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010474:	2204      	movs	r2, #4
 8010476:	4908      	ldr	r1, [pc, #32]	; (8010498 <Get_SerialNum+0x54>)
 8010478:	68b8      	ldr	r0, [r7, #8]
 801047a:	f000 f80f 	bl	801049c <IntToUnicode>
  }
}
 801047e:	bf00      	nop
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	1ff1e800 	.word	0x1ff1e800
 801048c:	1ff1e804 	.word	0x1ff1e804
 8010490:	1ff1e808 	.word	0x1ff1e808
 8010494:	240000ee 	.word	0x240000ee
 8010498:	240000fe 	.word	0x240000fe

0801049c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801049c:	b480      	push	{r7}
 801049e:	b087      	sub	sp, #28
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	4613      	mov	r3, r2
 80104a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80104ae:	2300      	movs	r3, #0
 80104b0:	75fb      	strb	r3, [r7, #23]
 80104b2:	e027      	b.n	8010504 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	0f1b      	lsrs	r3, r3, #28
 80104b8:	2b09      	cmp	r3, #9
 80104ba:	d80b      	bhi.n	80104d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	0f1b      	lsrs	r3, r3, #28
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	7dfb      	ldrb	r3, [r7, #23]
 80104c4:	005b      	lsls	r3, r3, #1
 80104c6:	4619      	mov	r1, r3
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	440b      	add	r3, r1
 80104cc:	3230      	adds	r2, #48	; 0x30
 80104ce:	b2d2      	uxtb	r2, r2
 80104d0:	701a      	strb	r2, [r3, #0]
 80104d2:	e00a      	b.n	80104ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	0f1b      	lsrs	r3, r3, #28
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	7dfb      	ldrb	r3, [r7, #23]
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	4619      	mov	r1, r3
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	440b      	add	r3, r1
 80104e4:	3237      	adds	r2, #55	; 0x37
 80104e6:	b2d2      	uxtb	r2, r2
 80104e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	011b      	lsls	r3, r3, #4
 80104ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80104f0:	7dfb      	ldrb	r3, [r7, #23]
 80104f2:	005b      	lsls	r3, r3, #1
 80104f4:	3301      	adds	r3, #1
 80104f6:	68ba      	ldr	r2, [r7, #8]
 80104f8:	4413      	add	r3, r2
 80104fa:	2200      	movs	r2, #0
 80104fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80104fe:	7dfb      	ldrb	r3, [r7, #23]
 8010500:	3301      	adds	r3, #1
 8010502:	75fb      	strb	r3, [r7, #23]
 8010504:	7dfa      	ldrb	r2, [r7, #23]
 8010506:	79fb      	ldrb	r3, [r7, #7]
 8010508:	429a      	cmp	r2, r3
 801050a:	d3d3      	bcc.n	80104b4 <IntToUnicode+0x18>
  }
}
 801050c:	bf00      	nop
 801050e:	bf00      	nop
 8010510:	371c      	adds	r7, #28
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
	...

0801051c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b0b8      	sub	sp, #224	; 0xe0
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010528:	2200      	movs	r2, #0
 801052a:	601a      	str	r2, [r3, #0]
 801052c:	605a      	str	r2, [r3, #4]
 801052e:	609a      	str	r2, [r3, #8]
 8010530:	60da      	str	r2, [r3, #12]
 8010532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010534:	f107 0310 	add.w	r3, r7, #16
 8010538:	22bc      	movs	r2, #188	; 0xbc
 801053a:	2100      	movs	r1, #0
 801053c:	4618      	mov	r0, r3
 801053e:	f000 fb69 	bl	8010c14 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a32      	ldr	r2, [pc, #200]	; (8010610 <HAL_PCD_MspInit+0xf4>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d15d      	bne.n	8010608 <HAL_PCD_MspInit+0xec>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801054c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010550:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8010552:	2301      	movs	r3, #1
 8010554:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 15;
 8010556:	230f      	movs	r3, #15
 8010558:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801055a:	2302      	movs	r3, #2
 801055c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 801055e:	2303      	movs	r3, #3
 8010560:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 15;
 8010562:	230f      	movs	r3, #15
 8010564:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8010566:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801056a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 801056c:	2300      	movs	r3, #0
 801056e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8010570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010574:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010578:	f107 0310 	add.w	r3, r7, #16
 801057c:	4618      	mov	r0, r3
 801057e:	f7f8 f997 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d001      	beq.n	801058c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8010588:	f7f0 fece 	bl	8001328 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801058c:	f7f7 f9f4 	bl	8007978 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010590:	4b20      	ldr	r3, [pc, #128]	; (8010614 <HAL_PCD_MspInit+0xf8>)
 8010592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010596:	4a1f      	ldr	r2, [pc, #124]	; (8010614 <HAL_PCD_MspInit+0xf8>)
 8010598:	f043 0301 	orr.w	r3, r3, #1
 801059c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80105a0:	4b1c      	ldr	r3, [pc, #112]	; (8010614 <HAL_PCD_MspInit+0xf8>)
 80105a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105a6:	f003 0301 	and.w	r3, r3, #1
 80105aa:	60fb      	str	r3, [r7, #12]
 80105ac:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80105ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80105b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105b6:	2302      	movs	r3, #2
 80105b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105bc:	2300      	movs	r3, #0
 80105be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105c2:	2300      	movs	r3, #0
 80105c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80105c8:	230a      	movs	r3, #10
 80105ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80105d2:	4619      	mov	r1, r3
 80105d4:	4810      	ldr	r0, [pc, #64]	; (8010618 <HAL_PCD_MspInit+0xfc>)
 80105d6:	f7f5 fbcf 	bl	8005d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105da:	4b0e      	ldr	r3, [pc, #56]	; (8010614 <HAL_PCD_MspInit+0xf8>)
 80105dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80105e0:	4a0c      	ldr	r2, [pc, #48]	; (8010614 <HAL_PCD_MspInit+0xf8>)
 80105e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80105ea:	4b0a      	ldr	r3, [pc, #40]	; (8010614 <HAL_PCD_MspInit+0xf8>)
 80105ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80105f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105f4:	60bb      	str	r3, [r7, #8]
 80105f6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80105f8:	2200      	movs	r2, #0
 80105fa:	2100      	movs	r1, #0
 80105fc:	2065      	movs	r0, #101	; 0x65
 80105fe:	f7f3 fb5c 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010602:	2065      	movs	r0, #101	; 0x65
 8010604:	f7f3 fb73 	bl	8003cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010608:	bf00      	nop
 801060a:	37e0      	adds	r7, #224	; 0xe0
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	40080000 	.word	0x40080000
 8010614:	58024400 	.word	0x58024400
 8010618:	58020000 	.word	0x58020000

0801061c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010630:	4619      	mov	r1, r3
 8010632:	4610      	mov	r0, r2
 8010634:	f7fe fb51 	bl	800ecda <USBD_LL_SetupStage>
}
 8010638:	bf00      	nop
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	460b      	mov	r3, r1
 801064a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010652:	78fa      	ldrb	r2, [r7, #3]
 8010654:	6879      	ldr	r1, [r7, #4]
 8010656:	4613      	mov	r3, r2
 8010658:	00db      	lsls	r3, r3, #3
 801065a:	4413      	add	r3, r2
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	440b      	add	r3, r1
 8010660:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	78fb      	ldrb	r3, [r7, #3]
 8010668:	4619      	mov	r1, r3
 801066a:	f7fe fb8b 	bl	800ed84 <USBD_LL_DataOutStage>
}
 801066e:	bf00      	nop
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b082      	sub	sp, #8
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	460b      	mov	r3, r1
 8010680:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010688:	78fa      	ldrb	r2, [r7, #3]
 801068a:	6879      	ldr	r1, [r7, #4]
 801068c:	4613      	mov	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	4413      	add	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	440b      	add	r3, r1
 8010696:	334c      	adds	r3, #76	; 0x4c
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	78fb      	ldrb	r3, [r7, #3]
 801069c:	4619      	mov	r1, r3
 801069e:	f7fe fc24 	bl	800eeea <USBD_LL_DataInStage>
}
 80106a2:	bf00      	nop
 80106a4:	3708      	adds	r7, #8
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}

080106aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b082      	sub	sp, #8
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fe fd58 	bl	800f16e <USBD_LL_SOF>
}
 80106be:	bf00      	nop
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106ce:	2301      	movs	r3, #1
 80106d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	68db      	ldr	r3, [r3, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d102      	bne.n	80106e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80106da:	2300      	movs	r3, #0
 80106dc:	73fb      	strb	r3, [r7, #15]
 80106de:	e008      	b.n	80106f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d102      	bne.n	80106ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80106e8:	2301      	movs	r3, #1
 80106ea:	73fb      	strb	r3, [r7, #15]
 80106ec:	e001      	b.n	80106f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80106ee:	f7f0 fe1b 	bl	8001328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106f8:	7bfa      	ldrb	r2, [r7, #15]
 80106fa:	4611      	mov	r1, r2
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe fcf8 	bl	800f0f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010708:	4618      	mov	r0, r3
 801070a:	f7fe fca0 	bl	800f04e <USBD_LL_Reset>
}
 801070e:	bf00      	nop
 8010710:	3710      	adds	r7, #16
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
	...

08010718 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010726:	4618      	mov	r0, r3
 8010728:	f7fe fcf3 	bl	800f112 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	6812      	ldr	r2, [r2, #0]
 801073a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801073e:	f043 0301 	orr.w	r3, r3, #1
 8010742:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a1b      	ldr	r3, [r3, #32]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d005      	beq.n	8010758 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801074c:	4b04      	ldr	r3, [pc, #16]	; (8010760 <HAL_PCD_SuspendCallback+0x48>)
 801074e:	691b      	ldr	r3, [r3, #16]
 8010750:	4a03      	ldr	r2, [pc, #12]	; (8010760 <HAL_PCD_SuspendCallback+0x48>)
 8010752:	f043 0306 	orr.w	r3, r3, #6
 8010756:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010758:	bf00      	nop
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	e000ed00 	.word	0xe000ed00

08010764 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010772:	4618      	mov	r0, r3
 8010774:	f7fe fce3 	bl	800f13e <USBD_LL_Resume>
}
 8010778:	bf00      	nop
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	460b      	mov	r3, r1
 801078a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010792:	78fa      	ldrb	r2, [r7, #3]
 8010794:	4611      	mov	r1, r2
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe fd3b 	bl	800f212 <USBD_LL_IsoOUTIncomplete>
}
 801079c:	bf00      	nop
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	460b      	mov	r3, r1
 80107ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107b6:	78fa      	ldrb	r2, [r7, #3]
 80107b8:	4611      	mov	r1, r2
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fe fcf7 	bl	800f1ae <USBD_LL_IsoINIncomplete>
}
 80107c0:	bf00      	nop
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fe fd4d 	bl	800f276 <USBD_LL_DevConnected>
}
 80107dc:	bf00      	nop
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7fe fd4a 	bl	800f28c <USBD_LL_DevDisconnected>
}
 80107f8:	bf00      	nop
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d13e      	bne.n	801088e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010810:	4a21      	ldr	r2, [pc, #132]	; (8010898 <USBD_LL_Init+0x98>)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4a1f      	ldr	r2, [pc, #124]	; (8010898 <USBD_LL_Init+0x98>)
 801081c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010820:	4b1d      	ldr	r3, [pc, #116]	; (8010898 <USBD_LL_Init+0x98>)
 8010822:	4a1e      	ldr	r2, [pc, #120]	; (801089c <USBD_LL_Init+0x9c>)
 8010824:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010826:	4b1c      	ldr	r3, [pc, #112]	; (8010898 <USBD_LL_Init+0x98>)
 8010828:	2209      	movs	r2, #9
 801082a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801082c:	4b1a      	ldr	r3, [pc, #104]	; (8010898 <USBD_LL_Init+0x98>)
 801082e:	2202      	movs	r2, #2
 8010830:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010832:	4b19      	ldr	r3, [pc, #100]	; (8010898 <USBD_LL_Init+0x98>)
 8010834:	2200      	movs	r2, #0
 8010836:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010838:	4b17      	ldr	r3, [pc, #92]	; (8010898 <USBD_LL_Init+0x98>)
 801083a:	2202      	movs	r2, #2
 801083c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801083e:	4b16      	ldr	r3, [pc, #88]	; (8010898 <USBD_LL_Init+0x98>)
 8010840:	2200      	movs	r2, #0
 8010842:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010844:	4b14      	ldr	r3, [pc, #80]	; (8010898 <USBD_LL_Init+0x98>)
 8010846:	2200      	movs	r2, #0
 8010848:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801084a:	4b13      	ldr	r3, [pc, #76]	; (8010898 <USBD_LL_Init+0x98>)
 801084c:	2200      	movs	r2, #0
 801084e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010850:	4b11      	ldr	r3, [pc, #68]	; (8010898 <USBD_LL_Init+0x98>)
 8010852:	2200      	movs	r2, #0
 8010854:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010856:	4b10      	ldr	r3, [pc, #64]	; (8010898 <USBD_LL_Init+0x98>)
 8010858:	2200      	movs	r2, #0
 801085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801085c:	4b0e      	ldr	r3, [pc, #56]	; (8010898 <USBD_LL_Init+0x98>)
 801085e:	2200      	movs	r2, #0
 8010860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010862:	480d      	ldr	r0, [pc, #52]	; (8010898 <USBD_LL_Init+0x98>)
 8010864:	f7f5 fd79 	bl	800635a <HAL_PCD_Init>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801086e:	f7f0 fd5b 	bl	8001328 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010872:	2180      	movs	r1, #128	; 0x80
 8010874:	4808      	ldr	r0, [pc, #32]	; (8010898 <USBD_LL_Init+0x98>)
 8010876:	f7f7 f804 	bl	8007882 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801087a:	2240      	movs	r2, #64	; 0x40
 801087c:	2100      	movs	r1, #0
 801087e:	4806      	ldr	r0, [pc, #24]	; (8010898 <USBD_LL_Init+0x98>)
 8010880:	f7f6 ffb8 	bl	80077f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010884:	2280      	movs	r2, #128	; 0x80
 8010886:	2101      	movs	r1, #1
 8010888:	4803      	ldr	r0, [pc, #12]	; (8010898 <USBD_LL_Init+0x98>)
 801088a:	f7f6 ffb3 	bl	80077f4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	240021c0 	.word	0x240021c0
 801089c:	40080000 	.word	0x40080000

080108a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108ac:	2300      	movs	r3, #0
 80108ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7f5 fe73 	bl	80065a2 <HAL_PCD_Start>
 80108bc:	4603      	mov	r3, r0
 80108be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f000 f942 	bl	8010b4c <USBD_Get_USB_Status>
 80108c8:	4603      	mov	r3, r0
 80108ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b084      	sub	sp, #16
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
 80108de:	4608      	mov	r0, r1
 80108e0:	4611      	mov	r1, r2
 80108e2:	461a      	mov	r2, r3
 80108e4:	4603      	mov	r3, r0
 80108e6:	70fb      	strb	r3, [r7, #3]
 80108e8:	460b      	mov	r3, r1
 80108ea:	70bb      	strb	r3, [r7, #2]
 80108ec:	4613      	mov	r3, r2
 80108ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108f4:	2300      	movs	r3, #0
 80108f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80108fe:	78bb      	ldrb	r3, [r7, #2]
 8010900:	883a      	ldrh	r2, [r7, #0]
 8010902:	78f9      	ldrb	r1, [r7, #3]
 8010904:	f7f6 fb71 	bl	8006fea <HAL_PCD_EP_Open>
 8010908:	4603      	mov	r3, r0
 801090a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801090c:	7bfb      	ldrb	r3, [r7, #15]
 801090e:	4618      	mov	r0, r3
 8010910:	f000 f91c 	bl	8010b4c <USBD_Get_USB_Status>
 8010914:	4603      	mov	r3, r0
 8010916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010918:	7bbb      	ldrb	r3, [r7, #14]
}
 801091a:	4618      	mov	r0, r3
 801091c:	3710      	adds	r7, #16
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010922:	b580      	push	{r7, lr}
 8010924:	b084      	sub	sp, #16
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
 801092a:	460b      	mov	r3, r1
 801092c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801092e:	2300      	movs	r3, #0
 8010930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010932:	2300      	movs	r3, #0
 8010934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801093c:	78fa      	ldrb	r2, [r7, #3]
 801093e:	4611      	mov	r1, r2
 8010940:	4618      	mov	r0, r3
 8010942:	f7f6 fbba 	bl	80070ba <HAL_PCD_EP_Close>
 8010946:	4603      	mov	r3, r0
 8010948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	4618      	mov	r0, r3
 801094e:	f000 f8fd 	bl	8010b4c <USBD_Get_USB_Status>
 8010952:	4603      	mov	r3, r0
 8010954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010956:	7bbb      	ldrb	r3, [r7, #14]
}
 8010958:	4618      	mov	r0, r3
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	460b      	mov	r3, r1
 801096a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801096c:	2300      	movs	r3, #0
 801096e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010970:	2300      	movs	r3, #0
 8010972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801097a:	78fa      	ldrb	r2, [r7, #3]
 801097c:	4611      	mov	r1, r2
 801097e:	4618      	mov	r0, r3
 8010980:	f7f6 fc92 	bl	80072a8 <HAL_PCD_EP_SetStall>
 8010984:	4603      	mov	r3, r0
 8010986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010988:	7bfb      	ldrb	r3, [r7, #15]
 801098a:	4618      	mov	r0, r3
 801098c:	f000 f8de 	bl	8010b4c <USBD_Get_USB_Status>
 8010990:	4603      	mov	r3, r0
 8010992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010994:	7bbb      	ldrb	r3, [r7, #14]
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b084      	sub	sp, #16
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
 80109a6:	460b      	mov	r3, r1
 80109a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109aa:	2300      	movs	r3, #0
 80109ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109ae:	2300      	movs	r3, #0
 80109b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109b8:	78fa      	ldrb	r2, [r7, #3]
 80109ba:	4611      	mov	r1, r2
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f6 fcd7 	bl	8007370 <HAL_PCD_EP_ClrStall>
 80109c2:	4603      	mov	r3, r0
 80109c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f000 f8bf 	bl	8010b4c <USBD_Get_USB_Status>
 80109ce:	4603      	mov	r3, r0
 80109d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109dc:	b480      	push	{r7}
 80109de:	b085      	sub	sp, #20
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	460b      	mov	r3, r1
 80109e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80109f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	da0b      	bge.n	8010a10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80109f8:	78fb      	ldrb	r3, [r7, #3]
 80109fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80109fe:	68f9      	ldr	r1, [r7, #12]
 8010a00:	4613      	mov	r3, r2
 8010a02:	00db      	lsls	r3, r3, #3
 8010a04:	4413      	add	r3, r2
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	440b      	add	r3, r1
 8010a0a:	333e      	adds	r3, #62	; 0x3e
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	e00b      	b.n	8010a28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a10:	78fb      	ldrb	r3, [r7, #3]
 8010a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a16:	68f9      	ldr	r1, [r7, #12]
 8010a18:	4613      	mov	r3, r2
 8010a1a:	00db      	lsls	r3, r3, #3
 8010a1c:	4413      	add	r3, r2
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	440b      	add	r3, r1
 8010a22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010a26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3714      	adds	r7, #20
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a40:	2300      	movs	r3, #0
 8010a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a4e:	78fa      	ldrb	r2, [r7, #3]
 8010a50:	4611      	mov	r1, r2
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7f6 faa4 	bl	8006fa0 <HAL_PCD_SetAddress>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a5c:	7bfb      	ldrb	r3, [r7, #15]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f000 f874 	bl	8010b4c <USBD_Get_USB_Status>
 8010a64:	4603      	mov	r3, r0
 8010a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b086      	sub	sp, #24
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	60f8      	str	r0, [r7, #12]
 8010a7a:	607a      	str	r2, [r7, #4]
 8010a7c:	603b      	str	r3, [r7, #0]
 8010a7e:	460b      	mov	r3, r1
 8010a80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a90:	7af9      	ldrb	r1, [r7, #11]
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	f7f6 fbbd 	bl	8007214 <HAL_PCD_EP_Transmit>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f000 f853 	bl	8010b4c <USBD_Get_USB_Status>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010aaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3718      	adds	r7, #24
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	607a      	str	r2, [r7, #4]
 8010abe:	603b      	str	r3, [r7, #0]
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010ad2:	7af9      	ldrb	r1, [r7, #11]
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	f7f6 fb39 	bl	800714e <HAL_PCD_EP_Receive>
 8010adc:	4603      	mov	r3, r0
 8010ade:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ae0:	7dfb      	ldrb	r3, [r7, #23]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f000 f832 	bl	8010b4c <USBD_Get_USB_Status>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010aec:	7dbb      	ldrb	r3, [r7, #22]
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b082      	sub	sp, #8
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
 8010afe:	460b      	mov	r3, r1
 8010b00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b08:	78fa      	ldrb	r2, [r7, #3]
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7f6 fb69 	bl	80071e4 <HAL_PCD_EP_GetRxCount>
 8010b12:	4603      	mov	r3, r0
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010b24:	4b03      	ldr	r3, [pc, #12]	; (8010b34 <USBD_static_malloc+0x18>)
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	370c      	adds	r7, #12
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	240005a8 	.word	0x240005a8

08010b38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]

}
 8010b40:	bf00      	nop
 8010b42:	370c      	adds	r7, #12
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	4603      	mov	r3, r0
 8010b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b56:	2300      	movs	r3, #0
 8010b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010b5a:	79fb      	ldrb	r3, [r7, #7]
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	d817      	bhi.n	8010b90 <USBD_Get_USB_Status+0x44>
 8010b60:	a201      	add	r2, pc, #4	; (adr r2, 8010b68 <USBD_Get_USB_Status+0x1c>)
 8010b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b66:	bf00      	nop
 8010b68:	08010b79 	.word	0x08010b79
 8010b6c:	08010b7f 	.word	0x08010b7f
 8010b70:	08010b85 	.word	0x08010b85
 8010b74:	08010b8b 	.word	0x08010b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b7c:	e00b      	b.n	8010b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b7e:	2303      	movs	r3, #3
 8010b80:	73fb      	strb	r3, [r7, #15]
    break;
 8010b82:	e008      	b.n	8010b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b84:	2301      	movs	r3, #1
 8010b86:	73fb      	strb	r3, [r7, #15]
    break;
 8010b88:	e005      	b.n	8010b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b8a:	2303      	movs	r3, #3
 8010b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8010b8e:	e002      	b.n	8010b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010b90:	2303      	movs	r3, #3
 8010b92:	73fb      	strb	r3, [r7, #15]
    break;
 8010b94:	bf00      	nop
  }
  return usb_status;
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3714      	adds	r7, #20
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr

08010ba4 <__errno>:
 8010ba4:	4b01      	ldr	r3, [pc, #4]	; (8010bac <__errno+0x8>)
 8010ba6:	6818      	ldr	r0, [r3, #0]
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	24000108 	.word	0x24000108

08010bb0 <__libc_init_array>:
 8010bb0:	b570      	push	{r4, r5, r6, lr}
 8010bb2:	4d0d      	ldr	r5, [pc, #52]	; (8010be8 <__libc_init_array+0x38>)
 8010bb4:	4c0d      	ldr	r4, [pc, #52]	; (8010bec <__libc_init_array+0x3c>)
 8010bb6:	1b64      	subs	r4, r4, r5
 8010bb8:	10a4      	asrs	r4, r4, #2
 8010bba:	2600      	movs	r6, #0
 8010bbc:	42a6      	cmp	r6, r4
 8010bbe:	d109      	bne.n	8010bd4 <__libc_init_array+0x24>
 8010bc0:	4d0b      	ldr	r5, [pc, #44]	; (8010bf0 <__libc_init_array+0x40>)
 8010bc2:	4c0c      	ldr	r4, [pc, #48]	; (8010bf4 <__libc_init_array+0x44>)
 8010bc4:	f000 ffe8 	bl	8011b98 <_init>
 8010bc8:	1b64      	subs	r4, r4, r5
 8010bca:	10a4      	asrs	r4, r4, #2
 8010bcc:	2600      	movs	r6, #0
 8010bce:	42a6      	cmp	r6, r4
 8010bd0:	d105      	bne.n	8010bde <__libc_init_array+0x2e>
 8010bd2:	bd70      	pop	{r4, r5, r6, pc}
 8010bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bd8:	4798      	blx	r3
 8010bda:	3601      	adds	r6, #1
 8010bdc:	e7ee      	b.n	8010bbc <__libc_init_array+0xc>
 8010bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8010be2:	4798      	blx	r3
 8010be4:	3601      	adds	r6, #1
 8010be6:	e7f2      	b.n	8010bce <__libc_init_array+0x1e>
 8010be8:	08011f10 	.word	0x08011f10
 8010bec:	08011f10 	.word	0x08011f10
 8010bf0:	08011f10 	.word	0x08011f10
 8010bf4:	08011f14 	.word	0x08011f14

08010bf8 <memcpy>:
 8010bf8:	440a      	add	r2, r1
 8010bfa:	4291      	cmp	r1, r2
 8010bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c00:	d100      	bne.n	8010c04 <memcpy+0xc>
 8010c02:	4770      	bx	lr
 8010c04:	b510      	push	{r4, lr}
 8010c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c0e:	4291      	cmp	r1, r2
 8010c10:	d1f9      	bne.n	8010c06 <memcpy+0xe>
 8010c12:	bd10      	pop	{r4, pc}

08010c14 <memset>:
 8010c14:	4402      	add	r2, r0
 8010c16:	4603      	mov	r3, r0
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d100      	bne.n	8010c1e <memset+0xa>
 8010c1c:	4770      	bx	lr
 8010c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8010c22:	e7f9      	b.n	8010c18 <memset+0x4>

08010c24 <iprintf>:
 8010c24:	b40f      	push	{r0, r1, r2, r3}
 8010c26:	4b0a      	ldr	r3, [pc, #40]	; (8010c50 <iprintf+0x2c>)
 8010c28:	b513      	push	{r0, r1, r4, lr}
 8010c2a:	681c      	ldr	r4, [r3, #0]
 8010c2c:	b124      	cbz	r4, 8010c38 <iprintf+0x14>
 8010c2e:	69a3      	ldr	r3, [r4, #24]
 8010c30:	b913      	cbnz	r3, 8010c38 <iprintf+0x14>
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 fa5e 	bl	80110f4 <__sinit>
 8010c38:	ab05      	add	r3, sp, #20
 8010c3a:	9a04      	ldr	r2, [sp, #16]
 8010c3c:	68a1      	ldr	r1, [r4, #8]
 8010c3e:	9301      	str	r3, [sp, #4]
 8010c40:	4620      	mov	r0, r4
 8010c42:	f000 fc2f 	bl	80114a4 <_vfiprintf_r>
 8010c46:	b002      	add	sp, #8
 8010c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c4c:	b004      	add	sp, #16
 8010c4e:	4770      	bx	lr
 8010c50:	24000108 	.word	0x24000108

08010c54 <_puts_r>:
 8010c54:	b570      	push	{r4, r5, r6, lr}
 8010c56:	460e      	mov	r6, r1
 8010c58:	4605      	mov	r5, r0
 8010c5a:	b118      	cbz	r0, 8010c64 <_puts_r+0x10>
 8010c5c:	6983      	ldr	r3, [r0, #24]
 8010c5e:	b90b      	cbnz	r3, 8010c64 <_puts_r+0x10>
 8010c60:	f000 fa48 	bl	80110f4 <__sinit>
 8010c64:	69ab      	ldr	r3, [r5, #24]
 8010c66:	68ac      	ldr	r4, [r5, #8]
 8010c68:	b913      	cbnz	r3, 8010c70 <_puts_r+0x1c>
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	f000 fa42 	bl	80110f4 <__sinit>
 8010c70:	4b2c      	ldr	r3, [pc, #176]	; (8010d24 <_puts_r+0xd0>)
 8010c72:	429c      	cmp	r4, r3
 8010c74:	d120      	bne.n	8010cb8 <_puts_r+0x64>
 8010c76:	686c      	ldr	r4, [r5, #4]
 8010c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c7a:	07db      	lsls	r3, r3, #31
 8010c7c:	d405      	bmi.n	8010c8a <_puts_r+0x36>
 8010c7e:	89a3      	ldrh	r3, [r4, #12]
 8010c80:	0598      	lsls	r0, r3, #22
 8010c82:	d402      	bmi.n	8010c8a <_puts_r+0x36>
 8010c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c86:	f000 fad3 	bl	8011230 <__retarget_lock_acquire_recursive>
 8010c8a:	89a3      	ldrh	r3, [r4, #12]
 8010c8c:	0719      	lsls	r1, r3, #28
 8010c8e:	d51d      	bpl.n	8010ccc <_puts_r+0x78>
 8010c90:	6923      	ldr	r3, [r4, #16]
 8010c92:	b1db      	cbz	r3, 8010ccc <_puts_r+0x78>
 8010c94:	3e01      	subs	r6, #1
 8010c96:	68a3      	ldr	r3, [r4, #8]
 8010c98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c9c:	3b01      	subs	r3, #1
 8010c9e:	60a3      	str	r3, [r4, #8]
 8010ca0:	bb39      	cbnz	r1, 8010cf2 <_puts_r+0x9e>
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	da38      	bge.n	8010d18 <_puts_r+0xc4>
 8010ca6:	4622      	mov	r2, r4
 8010ca8:	210a      	movs	r1, #10
 8010caa:	4628      	mov	r0, r5
 8010cac:	f000 f848 	bl	8010d40 <__swbuf_r>
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	d011      	beq.n	8010cd8 <_puts_r+0x84>
 8010cb4:	250a      	movs	r5, #10
 8010cb6:	e011      	b.n	8010cdc <_puts_r+0x88>
 8010cb8:	4b1b      	ldr	r3, [pc, #108]	; (8010d28 <_puts_r+0xd4>)
 8010cba:	429c      	cmp	r4, r3
 8010cbc:	d101      	bne.n	8010cc2 <_puts_r+0x6e>
 8010cbe:	68ac      	ldr	r4, [r5, #8]
 8010cc0:	e7da      	b.n	8010c78 <_puts_r+0x24>
 8010cc2:	4b1a      	ldr	r3, [pc, #104]	; (8010d2c <_puts_r+0xd8>)
 8010cc4:	429c      	cmp	r4, r3
 8010cc6:	bf08      	it	eq
 8010cc8:	68ec      	ldreq	r4, [r5, #12]
 8010cca:	e7d5      	b.n	8010c78 <_puts_r+0x24>
 8010ccc:	4621      	mov	r1, r4
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f000 f888 	bl	8010de4 <__swsetup_r>
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d0dd      	beq.n	8010c94 <_puts_r+0x40>
 8010cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8010cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cde:	07da      	lsls	r2, r3, #31
 8010ce0:	d405      	bmi.n	8010cee <_puts_r+0x9a>
 8010ce2:	89a3      	ldrh	r3, [r4, #12]
 8010ce4:	059b      	lsls	r3, r3, #22
 8010ce6:	d402      	bmi.n	8010cee <_puts_r+0x9a>
 8010ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cea:	f000 faa2 	bl	8011232 <__retarget_lock_release_recursive>
 8010cee:	4628      	mov	r0, r5
 8010cf0:	bd70      	pop	{r4, r5, r6, pc}
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	da04      	bge.n	8010d00 <_puts_r+0xac>
 8010cf6:	69a2      	ldr	r2, [r4, #24]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	dc06      	bgt.n	8010d0a <_puts_r+0xb6>
 8010cfc:	290a      	cmp	r1, #10
 8010cfe:	d004      	beq.n	8010d0a <_puts_r+0xb6>
 8010d00:	6823      	ldr	r3, [r4, #0]
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	6022      	str	r2, [r4, #0]
 8010d06:	7019      	strb	r1, [r3, #0]
 8010d08:	e7c5      	b.n	8010c96 <_puts_r+0x42>
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	f000 f817 	bl	8010d40 <__swbuf_r>
 8010d12:	3001      	adds	r0, #1
 8010d14:	d1bf      	bne.n	8010c96 <_puts_r+0x42>
 8010d16:	e7df      	b.n	8010cd8 <_puts_r+0x84>
 8010d18:	6823      	ldr	r3, [r4, #0]
 8010d1a:	250a      	movs	r5, #10
 8010d1c:	1c5a      	adds	r2, r3, #1
 8010d1e:	6022      	str	r2, [r4, #0]
 8010d20:	701d      	strb	r5, [r3, #0]
 8010d22:	e7db      	b.n	8010cdc <_puts_r+0x88>
 8010d24:	08011e9c 	.word	0x08011e9c
 8010d28:	08011ebc 	.word	0x08011ebc
 8010d2c:	08011e7c 	.word	0x08011e7c

08010d30 <puts>:
 8010d30:	4b02      	ldr	r3, [pc, #8]	; (8010d3c <puts+0xc>)
 8010d32:	4601      	mov	r1, r0
 8010d34:	6818      	ldr	r0, [r3, #0]
 8010d36:	f7ff bf8d 	b.w	8010c54 <_puts_r>
 8010d3a:	bf00      	nop
 8010d3c:	24000108 	.word	0x24000108

08010d40 <__swbuf_r>:
 8010d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d42:	460e      	mov	r6, r1
 8010d44:	4614      	mov	r4, r2
 8010d46:	4605      	mov	r5, r0
 8010d48:	b118      	cbz	r0, 8010d52 <__swbuf_r+0x12>
 8010d4a:	6983      	ldr	r3, [r0, #24]
 8010d4c:	b90b      	cbnz	r3, 8010d52 <__swbuf_r+0x12>
 8010d4e:	f000 f9d1 	bl	80110f4 <__sinit>
 8010d52:	4b21      	ldr	r3, [pc, #132]	; (8010dd8 <__swbuf_r+0x98>)
 8010d54:	429c      	cmp	r4, r3
 8010d56:	d12b      	bne.n	8010db0 <__swbuf_r+0x70>
 8010d58:	686c      	ldr	r4, [r5, #4]
 8010d5a:	69a3      	ldr	r3, [r4, #24]
 8010d5c:	60a3      	str	r3, [r4, #8]
 8010d5e:	89a3      	ldrh	r3, [r4, #12]
 8010d60:	071a      	lsls	r2, r3, #28
 8010d62:	d52f      	bpl.n	8010dc4 <__swbuf_r+0x84>
 8010d64:	6923      	ldr	r3, [r4, #16]
 8010d66:	b36b      	cbz	r3, 8010dc4 <__swbuf_r+0x84>
 8010d68:	6923      	ldr	r3, [r4, #16]
 8010d6a:	6820      	ldr	r0, [r4, #0]
 8010d6c:	1ac0      	subs	r0, r0, r3
 8010d6e:	6963      	ldr	r3, [r4, #20]
 8010d70:	b2f6      	uxtb	r6, r6
 8010d72:	4283      	cmp	r3, r0
 8010d74:	4637      	mov	r7, r6
 8010d76:	dc04      	bgt.n	8010d82 <__swbuf_r+0x42>
 8010d78:	4621      	mov	r1, r4
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f000 f926 	bl	8010fcc <_fflush_r>
 8010d80:	bb30      	cbnz	r0, 8010dd0 <__swbuf_r+0x90>
 8010d82:	68a3      	ldr	r3, [r4, #8]
 8010d84:	3b01      	subs	r3, #1
 8010d86:	60a3      	str	r3, [r4, #8]
 8010d88:	6823      	ldr	r3, [r4, #0]
 8010d8a:	1c5a      	adds	r2, r3, #1
 8010d8c:	6022      	str	r2, [r4, #0]
 8010d8e:	701e      	strb	r6, [r3, #0]
 8010d90:	6963      	ldr	r3, [r4, #20]
 8010d92:	3001      	adds	r0, #1
 8010d94:	4283      	cmp	r3, r0
 8010d96:	d004      	beq.n	8010da2 <__swbuf_r+0x62>
 8010d98:	89a3      	ldrh	r3, [r4, #12]
 8010d9a:	07db      	lsls	r3, r3, #31
 8010d9c:	d506      	bpl.n	8010dac <__swbuf_r+0x6c>
 8010d9e:	2e0a      	cmp	r6, #10
 8010da0:	d104      	bne.n	8010dac <__swbuf_r+0x6c>
 8010da2:	4621      	mov	r1, r4
 8010da4:	4628      	mov	r0, r5
 8010da6:	f000 f911 	bl	8010fcc <_fflush_r>
 8010daa:	b988      	cbnz	r0, 8010dd0 <__swbuf_r+0x90>
 8010dac:	4638      	mov	r0, r7
 8010dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010db0:	4b0a      	ldr	r3, [pc, #40]	; (8010ddc <__swbuf_r+0x9c>)
 8010db2:	429c      	cmp	r4, r3
 8010db4:	d101      	bne.n	8010dba <__swbuf_r+0x7a>
 8010db6:	68ac      	ldr	r4, [r5, #8]
 8010db8:	e7cf      	b.n	8010d5a <__swbuf_r+0x1a>
 8010dba:	4b09      	ldr	r3, [pc, #36]	; (8010de0 <__swbuf_r+0xa0>)
 8010dbc:	429c      	cmp	r4, r3
 8010dbe:	bf08      	it	eq
 8010dc0:	68ec      	ldreq	r4, [r5, #12]
 8010dc2:	e7ca      	b.n	8010d5a <__swbuf_r+0x1a>
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 f80c 	bl	8010de4 <__swsetup_r>
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	d0cb      	beq.n	8010d68 <__swbuf_r+0x28>
 8010dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8010dd4:	e7ea      	b.n	8010dac <__swbuf_r+0x6c>
 8010dd6:	bf00      	nop
 8010dd8:	08011e9c 	.word	0x08011e9c
 8010ddc:	08011ebc 	.word	0x08011ebc
 8010de0:	08011e7c 	.word	0x08011e7c

08010de4 <__swsetup_r>:
 8010de4:	4b32      	ldr	r3, [pc, #200]	; (8010eb0 <__swsetup_r+0xcc>)
 8010de6:	b570      	push	{r4, r5, r6, lr}
 8010de8:	681d      	ldr	r5, [r3, #0]
 8010dea:	4606      	mov	r6, r0
 8010dec:	460c      	mov	r4, r1
 8010dee:	b125      	cbz	r5, 8010dfa <__swsetup_r+0x16>
 8010df0:	69ab      	ldr	r3, [r5, #24]
 8010df2:	b913      	cbnz	r3, 8010dfa <__swsetup_r+0x16>
 8010df4:	4628      	mov	r0, r5
 8010df6:	f000 f97d 	bl	80110f4 <__sinit>
 8010dfa:	4b2e      	ldr	r3, [pc, #184]	; (8010eb4 <__swsetup_r+0xd0>)
 8010dfc:	429c      	cmp	r4, r3
 8010dfe:	d10f      	bne.n	8010e20 <__swsetup_r+0x3c>
 8010e00:	686c      	ldr	r4, [r5, #4]
 8010e02:	89a3      	ldrh	r3, [r4, #12]
 8010e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e08:	0719      	lsls	r1, r3, #28
 8010e0a:	d42c      	bmi.n	8010e66 <__swsetup_r+0x82>
 8010e0c:	06dd      	lsls	r5, r3, #27
 8010e0e:	d411      	bmi.n	8010e34 <__swsetup_r+0x50>
 8010e10:	2309      	movs	r3, #9
 8010e12:	6033      	str	r3, [r6, #0]
 8010e14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010e18:	81a3      	strh	r3, [r4, #12]
 8010e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e1e:	e03e      	b.n	8010e9e <__swsetup_r+0xba>
 8010e20:	4b25      	ldr	r3, [pc, #148]	; (8010eb8 <__swsetup_r+0xd4>)
 8010e22:	429c      	cmp	r4, r3
 8010e24:	d101      	bne.n	8010e2a <__swsetup_r+0x46>
 8010e26:	68ac      	ldr	r4, [r5, #8]
 8010e28:	e7eb      	b.n	8010e02 <__swsetup_r+0x1e>
 8010e2a:	4b24      	ldr	r3, [pc, #144]	; (8010ebc <__swsetup_r+0xd8>)
 8010e2c:	429c      	cmp	r4, r3
 8010e2e:	bf08      	it	eq
 8010e30:	68ec      	ldreq	r4, [r5, #12]
 8010e32:	e7e6      	b.n	8010e02 <__swsetup_r+0x1e>
 8010e34:	0758      	lsls	r0, r3, #29
 8010e36:	d512      	bpl.n	8010e5e <__swsetup_r+0x7a>
 8010e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e3a:	b141      	cbz	r1, 8010e4e <__swsetup_r+0x6a>
 8010e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e40:	4299      	cmp	r1, r3
 8010e42:	d002      	beq.n	8010e4a <__swsetup_r+0x66>
 8010e44:	4630      	mov	r0, r6
 8010e46:	f000 fa59 	bl	80112fc <_free_r>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8010e4e:	89a3      	ldrh	r3, [r4, #12]
 8010e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e54:	81a3      	strh	r3, [r4, #12]
 8010e56:	2300      	movs	r3, #0
 8010e58:	6063      	str	r3, [r4, #4]
 8010e5a:	6923      	ldr	r3, [r4, #16]
 8010e5c:	6023      	str	r3, [r4, #0]
 8010e5e:	89a3      	ldrh	r3, [r4, #12]
 8010e60:	f043 0308 	orr.w	r3, r3, #8
 8010e64:	81a3      	strh	r3, [r4, #12]
 8010e66:	6923      	ldr	r3, [r4, #16]
 8010e68:	b94b      	cbnz	r3, 8010e7e <__swsetup_r+0x9a>
 8010e6a:	89a3      	ldrh	r3, [r4, #12]
 8010e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e74:	d003      	beq.n	8010e7e <__swsetup_r+0x9a>
 8010e76:	4621      	mov	r1, r4
 8010e78:	4630      	mov	r0, r6
 8010e7a:	f000 f9ff 	bl	801127c <__smakebuf_r>
 8010e7e:	89a0      	ldrh	r0, [r4, #12]
 8010e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e84:	f010 0301 	ands.w	r3, r0, #1
 8010e88:	d00a      	beq.n	8010ea0 <__swsetup_r+0xbc>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	60a3      	str	r3, [r4, #8]
 8010e8e:	6963      	ldr	r3, [r4, #20]
 8010e90:	425b      	negs	r3, r3
 8010e92:	61a3      	str	r3, [r4, #24]
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	b943      	cbnz	r3, 8010eaa <__swsetup_r+0xc6>
 8010e98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e9c:	d1ba      	bne.n	8010e14 <__swsetup_r+0x30>
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ea0:	0781      	lsls	r1, r0, #30
 8010ea2:	bf58      	it	pl
 8010ea4:	6963      	ldrpl	r3, [r4, #20]
 8010ea6:	60a3      	str	r3, [r4, #8]
 8010ea8:	e7f4      	b.n	8010e94 <__swsetup_r+0xb0>
 8010eaa:	2000      	movs	r0, #0
 8010eac:	e7f7      	b.n	8010e9e <__swsetup_r+0xba>
 8010eae:	bf00      	nop
 8010eb0:	24000108 	.word	0x24000108
 8010eb4:	08011e9c 	.word	0x08011e9c
 8010eb8:	08011ebc 	.word	0x08011ebc
 8010ebc:	08011e7c 	.word	0x08011e7c

08010ec0 <__sflush_r>:
 8010ec0:	898a      	ldrh	r2, [r1, #12]
 8010ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec6:	4605      	mov	r5, r0
 8010ec8:	0710      	lsls	r0, r2, #28
 8010eca:	460c      	mov	r4, r1
 8010ecc:	d458      	bmi.n	8010f80 <__sflush_r+0xc0>
 8010ece:	684b      	ldr	r3, [r1, #4]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	dc05      	bgt.n	8010ee0 <__sflush_r+0x20>
 8010ed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	dc02      	bgt.n	8010ee0 <__sflush_r+0x20>
 8010eda:	2000      	movs	r0, #0
 8010edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ee2:	2e00      	cmp	r6, #0
 8010ee4:	d0f9      	beq.n	8010eda <__sflush_r+0x1a>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010eec:	682f      	ldr	r7, [r5, #0]
 8010eee:	602b      	str	r3, [r5, #0]
 8010ef0:	d032      	beq.n	8010f58 <__sflush_r+0x98>
 8010ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ef4:	89a3      	ldrh	r3, [r4, #12]
 8010ef6:	075a      	lsls	r2, r3, #29
 8010ef8:	d505      	bpl.n	8010f06 <__sflush_r+0x46>
 8010efa:	6863      	ldr	r3, [r4, #4]
 8010efc:	1ac0      	subs	r0, r0, r3
 8010efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f00:	b10b      	cbz	r3, 8010f06 <__sflush_r+0x46>
 8010f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f04:	1ac0      	subs	r0, r0, r3
 8010f06:	2300      	movs	r3, #0
 8010f08:	4602      	mov	r2, r0
 8010f0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f0c:	6a21      	ldr	r1, [r4, #32]
 8010f0e:	4628      	mov	r0, r5
 8010f10:	47b0      	blx	r6
 8010f12:	1c43      	adds	r3, r0, #1
 8010f14:	89a3      	ldrh	r3, [r4, #12]
 8010f16:	d106      	bne.n	8010f26 <__sflush_r+0x66>
 8010f18:	6829      	ldr	r1, [r5, #0]
 8010f1a:	291d      	cmp	r1, #29
 8010f1c:	d82c      	bhi.n	8010f78 <__sflush_r+0xb8>
 8010f1e:	4a2a      	ldr	r2, [pc, #168]	; (8010fc8 <__sflush_r+0x108>)
 8010f20:	40ca      	lsrs	r2, r1
 8010f22:	07d6      	lsls	r6, r2, #31
 8010f24:	d528      	bpl.n	8010f78 <__sflush_r+0xb8>
 8010f26:	2200      	movs	r2, #0
 8010f28:	6062      	str	r2, [r4, #4]
 8010f2a:	04d9      	lsls	r1, r3, #19
 8010f2c:	6922      	ldr	r2, [r4, #16]
 8010f2e:	6022      	str	r2, [r4, #0]
 8010f30:	d504      	bpl.n	8010f3c <__sflush_r+0x7c>
 8010f32:	1c42      	adds	r2, r0, #1
 8010f34:	d101      	bne.n	8010f3a <__sflush_r+0x7a>
 8010f36:	682b      	ldr	r3, [r5, #0]
 8010f38:	b903      	cbnz	r3, 8010f3c <__sflush_r+0x7c>
 8010f3a:	6560      	str	r0, [r4, #84]	; 0x54
 8010f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f3e:	602f      	str	r7, [r5, #0]
 8010f40:	2900      	cmp	r1, #0
 8010f42:	d0ca      	beq.n	8010eda <__sflush_r+0x1a>
 8010f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f48:	4299      	cmp	r1, r3
 8010f4a:	d002      	beq.n	8010f52 <__sflush_r+0x92>
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f000 f9d5 	bl	80112fc <_free_r>
 8010f52:	2000      	movs	r0, #0
 8010f54:	6360      	str	r0, [r4, #52]	; 0x34
 8010f56:	e7c1      	b.n	8010edc <__sflush_r+0x1c>
 8010f58:	6a21      	ldr	r1, [r4, #32]
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	47b0      	blx	r6
 8010f60:	1c41      	adds	r1, r0, #1
 8010f62:	d1c7      	bne.n	8010ef4 <__sflush_r+0x34>
 8010f64:	682b      	ldr	r3, [r5, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d0c4      	beq.n	8010ef4 <__sflush_r+0x34>
 8010f6a:	2b1d      	cmp	r3, #29
 8010f6c:	d001      	beq.n	8010f72 <__sflush_r+0xb2>
 8010f6e:	2b16      	cmp	r3, #22
 8010f70:	d101      	bne.n	8010f76 <__sflush_r+0xb6>
 8010f72:	602f      	str	r7, [r5, #0]
 8010f74:	e7b1      	b.n	8010eda <__sflush_r+0x1a>
 8010f76:	89a3      	ldrh	r3, [r4, #12]
 8010f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f7c:	81a3      	strh	r3, [r4, #12]
 8010f7e:	e7ad      	b.n	8010edc <__sflush_r+0x1c>
 8010f80:	690f      	ldr	r7, [r1, #16]
 8010f82:	2f00      	cmp	r7, #0
 8010f84:	d0a9      	beq.n	8010eda <__sflush_r+0x1a>
 8010f86:	0793      	lsls	r3, r2, #30
 8010f88:	680e      	ldr	r6, [r1, #0]
 8010f8a:	bf08      	it	eq
 8010f8c:	694b      	ldreq	r3, [r1, #20]
 8010f8e:	600f      	str	r7, [r1, #0]
 8010f90:	bf18      	it	ne
 8010f92:	2300      	movne	r3, #0
 8010f94:	eba6 0807 	sub.w	r8, r6, r7
 8010f98:	608b      	str	r3, [r1, #8]
 8010f9a:	f1b8 0f00 	cmp.w	r8, #0
 8010f9e:	dd9c      	ble.n	8010eda <__sflush_r+0x1a>
 8010fa0:	6a21      	ldr	r1, [r4, #32]
 8010fa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010fa4:	4643      	mov	r3, r8
 8010fa6:	463a      	mov	r2, r7
 8010fa8:	4628      	mov	r0, r5
 8010faa:	47b0      	blx	r6
 8010fac:	2800      	cmp	r0, #0
 8010fae:	dc06      	bgt.n	8010fbe <__sflush_r+0xfe>
 8010fb0:	89a3      	ldrh	r3, [r4, #12]
 8010fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fb6:	81a3      	strh	r3, [r4, #12]
 8010fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fbc:	e78e      	b.n	8010edc <__sflush_r+0x1c>
 8010fbe:	4407      	add	r7, r0
 8010fc0:	eba8 0800 	sub.w	r8, r8, r0
 8010fc4:	e7e9      	b.n	8010f9a <__sflush_r+0xda>
 8010fc6:	bf00      	nop
 8010fc8:	20400001 	.word	0x20400001

08010fcc <_fflush_r>:
 8010fcc:	b538      	push	{r3, r4, r5, lr}
 8010fce:	690b      	ldr	r3, [r1, #16]
 8010fd0:	4605      	mov	r5, r0
 8010fd2:	460c      	mov	r4, r1
 8010fd4:	b913      	cbnz	r3, 8010fdc <_fflush_r+0x10>
 8010fd6:	2500      	movs	r5, #0
 8010fd8:	4628      	mov	r0, r5
 8010fda:	bd38      	pop	{r3, r4, r5, pc}
 8010fdc:	b118      	cbz	r0, 8010fe6 <_fflush_r+0x1a>
 8010fde:	6983      	ldr	r3, [r0, #24]
 8010fe0:	b90b      	cbnz	r3, 8010fe6 <_fflush_r+0x1a>
 8010fe2:	f000 f887 	bl	80110f4 <__sinit>
 8010fe6:	4b14      	ldr	r3, [pc, #80]	; (8011038 <_fflush_r+0x6c>)
 8010fe8:	429c      	cmp	r4, r3
 8010fea:	d11b      	bne.n	8011024 <_fflush_r+0x58>
 8010fec:	686c      	ldr	r4, [r5, #4]
 8010fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d0ef      	beq.n	8010fd6 <_fflush_r+0xa>
 8010ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ff8:	07d0      	lsls	r0, r2, #31
 8010ffa:	d404      	bmi.n	8011006 <_fflush_r+0x3a>
 8010ffc:	0599      	lsls	r1, r3, #22
 8010ffe:	d402      	bmi.n	8011006 <_fflush_r+0x3a>
 8011000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011002:	f000 f915 	bl	8011230 <__retarget_lock_acquire_recursive>
 8011006:	4628      	mov	r0, r5
 8011008:	4621      	mov	r1, r4
 801100a:	f7ff ff59 	bl	8010ec0 <__sflush_r>
 801100e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011010:	07da      	lsls	r2, r3, #31
 8011012:	4605      	mov	r5, r0
 8011014:	d4e0      	bmi.n	8010fd8 <_fflush_r+0xc>
 8011016:	89a3      	ldrh	r3, [r4, #12]
 8011018:	059b      	lsls	r3, r3, #22
 801101a:	d4dd      	bmi.n	8010fd8 <_fflush_r+0xc>
 801101c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801101e:	f000 f908 	bl	8011232 <__retarget_lock_release_recursive>
 8011022:	e7d9      	b.n	8010fd8 <_fflush_r+0xc>
 8011024:	4b05      	ldr	r3, [pc, #20]	; (801103c <_fflush_r+0x70>)
 8011026:	429c      	cmp	r4, r3
 8011028:	d101      	bne.n	801102e <_fflush_r+0x62>
 801102a:	68ac      	ldr	r4, [r5, #8]
 801102c:	e7df      	b.n	8010fee <_fflush_r+0x22>
 801102e:	4b04      	ldr	r3, [pc, #16]	; (8011040 <_fflush_r+0x74>)
 8011030:	429c      	cmp	r4, r3
 8011032:	bf08      	it	eq
 8011034:	68ec      	ldreq	r4, [r5, #12]
 8011036:	e7da      	b.n	8010fee <_fflush_r+0x22>
 8011038:	08011e9c 	.word	0x08011e9c
 801103c:	08011ebc 	.word	0x08011ebc
 8011040:	08011e7c 	.word	0x08011e7c

08011044 <std>:
 8011044:	2300      	movs	r3, #0
 8011046:	b510      	push	{r4, lr}
 8011048:	4604      	mov	r4, r0
 801104a:	e9c0 3300 	strd	r3, r3, [r0]
 801104e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011052:	6083      	str	r3, [r0, #8]
 8011054:	8181      	strh	r1, [r0, #12]
 8011056:	6643      	str	r3, [r0, #100]	; 0x64
 8011058:	81c2      	strh	r2, [r0, #14]
 801105a:	6183      	str	r3, [r0, #24]
 801105c:	4619      	mov	r1, r3
 801105e:	2208      	movs	r2, #8
 8011060:	305c      	adds	r0, #92	; 0x5c
 8011062:	f7ff fdd7 	bl	8010c14 <memset>
 8011066:	4b05      	ldr	r3, [pc, #20]	; (801107c <std+0x38>)
 8011068:	6263      	str	r3, [r4, #36]	; 0x24
 801106a:	4b05      	ldr	r3, [pc, #20]	; (8011080 <std+0x3c>)
 801106c:	62a3      	str	r3, [r4, #40]	; 0x28
 801106e:	4b05      	ldr	r3, [pc, #20]	; (8011084 <std+0x40>)
 8011070:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011072:	4b05      	ldr	r3, [pc, #20]	; (8011088 <std+0x44>)
 8011074:	6224      	str	r4, [r4, #32]
 8011076:	6323      	str	r3, [r4, #48]	; 0x30
 8011078:	bd10      	pop	{r4, pc}
 801107a:	bf00      	nop
 801107c:	08011a4d 	.word	0x08011a4d
 8011080:	08011a6f 	.word	0x08011a6f
 8011084:	08011aa7 	.word	0x08011aa7
 8011088:	08011acb 	.word	0x08011acb

0801108c <_cleanup_r>:
 801108c:	4901      	ldr	r1, [pc, #4]	; (8011094 <_cleanup_r+0x8>)
 801108e:	f000 b8af 	b.w	80111f0 <_fwalk_reent>
 8011092:	bf00      	nop
 8011094:	08010fcd 	.word	0x08010fcd

08011098 <__sfmoreglue>:
 8011098:	b570      	push	{r4, r5, r6, lr}
 801109a:	1e4a      	subs	r2, r1, #1
 801109c:	2568      	movs	r5, #104	; 0x68
 801109e:	4355      	muls	r5, r2
 80110a0:	460e      	mov	r6, r1
 80110a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110a6:	f000 f979 	bl	801139c <_malloc_r>
 80110aa:	4604      	mov	r4, r0
 80110ac:	b140      	cbz	r0, 80110c0 <__sfmoreglue+0x28>
 80110ae:	2100      	movs	r1, #0
 80110b0:	e9c0 1600 	strd	r1, r6, [r0]
 80110b4:	300c      	adds	r0, #12
 80110b6:	60a0      	str	r0, [r4, #8]
 80110b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110bc:	f7ff fdaa 	bl	8010c14 <memset>
 80110c0:	4620      	mov	r0, r4
 80110c2:	bd70      	pop	{r4, r5, r6, pc}

080110c4 <__sfp_lock_acquire>:
 80110c4:	4801      	ldr	r0, [pc, #4]	; (80110cc <__sfp_lock_acquire+0x8>)
 80110c6:	f000 b8b3 	b.w	8011230 <__retarget_lock_acquire_recursive>
 80110ca:	bf00      	nop
 80110cc:	240026d4 	.word	0x240026d4

080110d0 <__sfp_lock_release>:
 80110d0:	4801      	ldr	r0, [pc, #4]	; (80110d8 <__sfp_lock_release+0x8>)
 80110d2:	f000 b8ae 	b.w	8011232 <__retarget_lock_release_recursive>
 80110d6:	bf00      	nop
 80110d8:	240026d4 	.word	0x240026d4

080110dc <__sinit_lock_acquire>:
 80110dc:	4801      	ldr	r0, [pc, #4]	; (80110e4 <__sinit_lock_acquire+0x8>)
 80110de:	f000 b8a7 	b.w	8011230 <__retarget_lock_acquire_recursive>
 80110e2:	bf00      	nop
 80110e4:	240026cf 	.word	0x240026cf

080110e8 <__sinit_lock_release>:
 80110e8:	4801      	ldr	r0, [pc, #4]	; (80110f0 <__sinit_lock_release+0x8>)
 80110ea:	f000 b8a2 	b.w	8011232 <__retarget_lock_release_recursive>
 80110ee:	bf00      	nop
 80110f0:	240026cf 	.word	0x240026cf

080110f4 <__sinit>:
 80110f4:	b510      	push	{r4, lr}
 80110f6:	4604      	mov	r4, r0
 80110f8:	f7ff fff0 	bl	80110dc <__sinit_lock_acquire>
 80110fc:	69a3      	ldr	r3, [r4, #24]
 80110fe:	b11b      	cbz	r3, 8011108 <__sinit+0x14>
 8011100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011104:	f7ff bff0 	b.w	80110e8 <__sinit_lock_release>
 8011108:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801110c:	6523      	str	r3, [r4, #80]	; 0x50
 801110e:	4b13      	ldr	r3, [pc, #76]	; (801115c <__sinit+0x68>)
 8011110:	4a13      	ldr	r2, [pc, #76]	; (8011160 <__sinit+0x6c>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	62a2      	str	r2, [r4, #40]	; 0x28
 8011116:	42a3      	cmp	r3, r4
 8011118:	bf04      	itt	eq
 801111a:	2301      	moveq	r3, #1
 801111c:	61a3      	streq	r3, [r4, #24]
 801111e:	4620      	mov	r0, r4
 8011120:	f000 f820 	bl	8011164 <__sfp>
 8011124:	6060      	str	r0, [r4, #4]
 8011126:	4620      	mov	r0, r4
 8011128:	f000 f81c 	bl	8011164 <__sfp>
 801112c:	60a0      	str	r0, [r4, #8]
 801112e:	4620      	mov	r0, r4
 8011130:	f000 f818 	bl	8011164 <__sfp>
 8011134:	2200      	movs	r2, #0
 8011136:	60e0      	str	r0, [r4, #12]
 8011138:	2104      	movs	r1, #4
 801113a:	6860      	ldr	r0, [r4, #4]
 801113c:	f7ff ff82 	bl	8011044 <std>
 8011140:	68a0      	ldr	r0, [r4, #8]
 8011142:	2201      	movs	r2, #1
 8011144:	2109      	movs	r1, #9
 8011146:	f7ff ff7d 	bl	8011044 <std>
 801114a:	68e0      	ldr	r0, [r4, #12]
 801114c:	2202      	movs	r2, #2
 801114e:	2112      	movs	r1, #18
 8011150:	f7ff ff78 	bl	8011044 <std>
 8011154:	2301      	movs	r3, #1
 8011156:	61a3      	str	r3, [r4, #24]
 8011158:	e7d2      	b.n	8011100 <__sinit+0xc>
 801115a:	bf00      	nop
 801115c:	08011e78 	.word	0x08011e78
 8011160:	0801108d 	.word	0x0801108d

08011164 <__sfp>:
 8011164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011166:	4607      	mov	r7, r0
 8011168:	f7ff ffac 	bl	80110c4 <__sfp_lock_acquire>
 801116c:	4b1e      	ldr	r3, [pc, #120]	; (80111e8 <__sfp+0x84>)
 801116e:	681e      	ldr	r6, [r3, #0]
 8011170:	69b3      	ldr	r3, [r6, #24]
 8011172:	b913      	cbnz	r3, 801117a <__sfp+0x16>
 8011174:	4630      	mov	r0, r6
 8011176:	f7ff ffbd 	bl	80110f4 <__sinit>
 801117a:	3648      	adds	r6, #72	; 0x48
 801117c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011180:	3b01      	subs	r3, #1
 8011182:	d503      	bpl.n	801118c <__sfp+0x28>
 8011184:	6833      	ldr	r3, [r6, #0]
 8011186:	b30b      	cbz	r3, 80111cc <__sfp+0x68>
 8011188:	6836      	ldr	r6, [r6, #0]
 801118a:	e7f7      	b.n	801117c <__sfp+0x18>
 801118c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011190:	b9d5      	cbnz	r5, 80111c8 <__sfp+0x64>
 8011192:	4b16      	ldr	r3, [pc, #88]	; (80111ec <__sfp+0x88>)
 8011194:	60e3      	str	r3, [r4, #12]
 8011196:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801119a:	6665      	str	r5, [r4, #100]	; 0x64
 801119c:	f000 f847 	bl	801122e <__retarget_lock_init_recursive>
 80111a0:	f7ff ff96 	bl	80110d0 <__sfp_lock_release>
 80111a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80111a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80111ac:	6025      	str	r5, [r4, #0]
 80111ae:	61a5      	str	r5, [r4, #24]
 80111b0:	2208      	movs	r2, #8
 80111b2:	4629      	mov	r1, r5
 80111b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111b8:	f7ff fd2c 	bl	8010c14 <memset>
 80111bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80111c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80111c4:	4620      	mov	r0, r4
 80111c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111c8:	3468      	adds	r4, #104	; 0x68
 80111ca:	e7d9      	b.n	8011180 <__sfp+0x1c>
 80111cc:	2104      	movs	r1, #4
 80111ce:	4638      	mov	r0, r7
 80111d0:	f7ff ff62 	bl	8011098 <__sfmoreglue>
 80111d4:	4604      	mov	r4, r0
 80111d6:	6030      	str	r0, [r6, #0]
 80111d8:	2800      	cmp	r0, #0
 80111da:	d1d5      	bne.n	8011188 <__sfp+0x24>
 80111dc:	f7ff ff78 	bl	80110d0 <__sfp_lock_release>
 80111e0:	230c      	movs	r3, #12
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	e7ee      	b.n	80111c4 <__sfp+0x60>
 80111e6:	bf00      	nop
 80111e8:	08011e78 	.word	0x08011e78
 80111ec:	ffff0001 	.word	0xffff0001

080111f0 <_fwalk_reent>:
 80111f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111f4:	4606      	mov	r6, r0
 80111f6:	4688      	mov	r8, r1
 80111f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111fc:	2700      	movs	r7, #0
 80111fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011202:	f1b9 0901 	subs.w	r9, r9, #1
 8011206:	d505      	bpl.n	8011214 <_fwalk_reent+0x24>
 8011208:	6824      	ldr	r4, [r4, #0]
 801120a:	2c00      	cmp	r4, #0
 801120c:	d1f7      	bne.n	80111fe <_fwalk_reent+0xe>
 801120e:	4638      	mov	r0, r7
 8011210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011214:	89ab      	ldrh	r3, [r5, #12]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d907      	bls.n	801122a <_fwalk_reent+0x3a>
 801121a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801121e:	3301      	adds	r3, #1
 8011220:	d003      	beq.n	801122a <_fwalk_reent+0x3a>
 8011222:	4629      	mov	r1, r5
 8011224:	4630      	mov	r0, r6
 8011226:	47c0      	blx	r8
 8011228:	4307      	orrs	r7, r0
 801122a:	3568      	adds	r5, #104	; 0x68
 801122c:	e7e9      	b.n	8011202 <_fwalk_reent+0x12>

0801122e <__retarget_lock_init_recursive>:
 801122e:	4770      	bx	lr

08011230 <__retarget_lock_acquire_recursive>:
 8011230:	4770      	bx	lr

08011232 <__retarget_lock_release_recursive>:
 8011232:	4770      	bx	lr

08011234 <__swhatbuf_r>:
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	460e      	mov	r6, r1
 8011238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801123c:	2900      	cmp	r1, #0
 801123e:	b096      	sub	sp, #88	; 0x58
 8011240:	4614      	mov	r4, r2
 8011242:	461d      	mov	r5, r3
 8011244:	da07      	bge.n	8011256 <__swhatbuf_r+0x22>
 8011246:	2300      	movs	r3, #0
 8011248:	602b      	str	r3, [r5, #0]
 801124a:	89b3      	ldrh	r3, [r6, #12]
 801124c:	061a      	lsls	r2, r3, #24
 801124e:	d410      	bmi.n	8011272 <__swhatbuf_r+0x3e>
 8011250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011254:	e00e      	b.n	8011274 <__swhatbuf_r+0x40>
 8011256:	466a      	mov	r2, sp
 8011258:	f000 fc4c 	bl	8011af4 <_fstat_r>
 801125c:	2800      	cmp	r0, #0
 801125e:	dbf2      	blt.n	8011246 <__swhatbuf_r+0x12>
 8011260:	9a01      	ldr	r2, [sp, #4]
 8011262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801126a:	425a      	negs	r2, r3
 801126c:	415a      	adcs	r2, r3
 801126e:	602a      	str	r2, [r5, #0]
 8011270:	e7ee      	b.n	8011250 <__swhatbuf_r+0x1c>
 8011272:	2340      	movs	r3, #64	; 0x40
 8011274:	2000      	movs	r0, #0
 8011276:	6023      	str	r3, [r4, #0]
 8011278:	b016      	add	sp, #88	; 0x58
 801127a:	bd70      	pop	{r4, r5, r6, pc}

0801127c <__smakebuf_r>:
 801127c:	898b      	ldrh	r3, [r1, #12]
 801127e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011280:	079d      	lsls	r5, r3, #30
 8011282:	4606      	mov	r6, r0
 8011284:	460c      	mov	r4, r1
 8011286:	d507      	bpl.n	8011298 <__smakebuf_r+0x1c>
 8011288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801128c:	6023      	str	r3, [r4, #0]
 801128e:	6123      	str	r3, [r4, #16]
 8011290:	2301      	movs	r3, #1
 8011292:	6163      	str	r3, [r4, #20]
 8011294:	b002      	add	sp, #8
 8011296:	bd70      	pop	{r4, r5, r6, pc}
 8011298:	ab01      	add	r3, sp, #4
 801129a:	466a      	mov	r2, sp
 801129c:	f7ff ffca 	bl	8011234 <__swhatbuf_r>
 80112a0:	9900      	ldr	r1, [sp, #0]
 80112a2:	4605      	mov	r5, r0
 80112a4:	4630      	mov	r0, r6
 80112a6:	f000 f879 	bl	801139c <_malloc_r>
 80112aa:	b948      	cbnz	r0, 80112c0 <__smakebuf_r+0x44>
 80112ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112b0:	059a      	lsls	r2, r3, #22
 80112b2:	d4ef      	bmi.n	8011294 <__smakebuf_r+0x18>
 80112b4:	f023 0303 	bic.w	r3, r3, #3
 80112b8:	f043 0302 	orr.w	r3, r3, #2
 80112bc:	81a3      	strh	r3, [r4, #12]
 80112be:	e7e3      	b.n	8011288 <__smakebuf_r+0xc>
 80112c0:	4b0d      	ldr	r3, [pc, #52]	; (80112f8 <__smakebuf_r+0x7c>)
 80112c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	6020      	str	r0, [r4, #0]
 80112c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112cc:	81a3      	strh	r3, [r4, #12]
 80112ce:	9b00      	ldr	r3, [sp, #0]
 80112d0:	6163      	str	r3, [r4, #20]
 80112d2:	9b01      	ldr	r3, [sp, #4]
 80112d4:	6120      	str	r0, [r4, #16]
 80112d6:	b15b      	cbz	r3, 80112f0 <__smakebuf_r+0x74>
 80112d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112dc:	4630      	mov	r0, r6
 80112de:	f000 fc1b 	bl	8011b18 <_isatty_r>
 80112e2:	b128      	cbz	r0, 80112f0 <__smakebuf_r+0x74>
 80112e4:	89a3      	ldrh	r3, [r4, #12]
 80112e6:	f023 0303 	bic.w	r3, r3, #3
 80112ea:	f043 0301 	orr.w	r3, r3, #1
 80112ee:	81a3      	strh	r3, [r4, #12]
 80112f0:	89a0      	ldrh	r0, [r4, #12]
 80112f2:	4305      	orrs	r5, r0
 80112f4:	81a5      	strh	r5, [r4, #12]
 80112f6:	e7cd      	b.n	8011294 <__smakebuf_r+0x18>
 80112f8:	0801108d 	.word	0x0801108d

080112fc <_free_r>:
 80112fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112fe:	2900      	cmp	r1, #0
 8011300:	d048      	beq.n	8011394 <_free_r+0x98>
 8011302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011306:	9001      	str	r0, [sp, #4]
 8011308:	2b00      	cmp	r3, #0
 801130a:	f1a1 0404 	sub.w	r4, r1, #4
 801130e:	bfb8      	it	lt
 8011310:	18e4      	addlt	r4, r4, r3
 8011312:	f000 fc23 	bl	8011b5c <__malloc_lock>
 8011316:	4a20      	ldr	r2, [pc, #128]	; (8011398 <_free_r+0x9c>)
 8011318:	9801      	ldr	r0, [sp, #4]
 801131a:	6813      	ldr	r3, [r2, #0]
 801131c:	4615      	mov	r5, r2
 801131e:	b933      	cbnz	r3, 801132e <_free_r+0x32>
 8011320:	6063      	str	r3, [r4, #4]
 8011322:	6014      	str	r4, [r2, #0]
 8011324:	b003      	add	sp, #12
 8011326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801132a:	f000 bc1d 	b.w	8011b68 <__malloc_unlock>
 801132e:	42a3      	cmp	r3, r4
 8011330:	d90b      	bls.n	801134a <_free_r+0x4e>
 8011332:	6821      	ldr	r1, [r4, #0]
 8011334:	1862      	adds	r2, r4, r1
 8011336:	4293      	cmp	r3, r2
 8011338:	bf04      	itt	eq
 801133a:	681a      	ldreq	r2, [r3, #0]
 801133c:	685b      	ldreq	r3, [r3, #4]
 801133e:	6063      	str	r3, [r4, #4]
 8011340:	bf04      	itt	eq
 8011342:	1852      	addeq	r2, r2, r1
 8011344:	6022      	streq	r2, [r4, #0]
 8011346:	602c      	str	r4, [r5, #0]
 8011348:	e7ec      	b.n	8011324 <_free_r+0x28>
 801134a:	461a      	mov	r2, r3
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	b10b      	cbz	r3, 8011354 <_free_r+0x58>
 8011350:	42a3      	cmp	r3, r4
 8011352:	d9fa      	bls.n	801134a <_free_r+0x4e>
 8011354:	6811      	ldr	r1, [r2, #0]
 8011356:	1855      	adds	r5, r2, r1
 8011358:	42a5      	cmp	r5, r4
 801135a:	d10b      	bne.n	8011374 <_free_r+0x78>
 801135c:	6824      	ldr	r4, [r4, #0]
 801135e:	4421      	add	r1, r4
 8011360:	1854      	adds	r4, r2, r1
 8011362:	42a3      	cmp	r3, r4
 8011364:	6011      	str	r1, [r2, #0]
 8011366:	d1dd      	bne.n	8011324 <_free_r+0x28>
 8011368:	681c      	ldr	r4, [r3, #0]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	6053      	str	r3, [r2, #4]
 801136e:	4421      	add	r1, r4
 8011370:	6011      	str	r1, [r2, #0]
 8011372:	e7d7      	b.n	8011324 <_free_r+0x28>
 8011374:	d902      	bls.n	801137c <_free_r+0x80>
 8011376:	230c      	movs	r3, #12
 8011378:	6003      	str	r3, [r0, #0]
 801137a:	e7d3      	b.n	8011324 <_free_r+0x28>
 801137c:	6825      	ldr	r5, [r4, #0]
 801137e:	1961      	adds	r1, r4, r5
 8011380:	428b      	cmp	r3, r1
 8011382:	bf04      	itt	eq
 8011384:	6819      	ldreq	r1, [r3, #0]
 8011386:	685b      	ldreq	r3, [r3, #4]
 8011388:	6063      	str	r3, [r4, #4]
 801138a:	bf04      	itt	eq
 801138c:	1949      	addeq	r1, r1, r5
 801138e:	6021      	streq	r1, [r4, #0]
 8011390:	6054      	str	r4, [r2, #4]
 8011392:	e7c7      	b.n	8011324 <_free_r+0x28>
 8011394:	b003      	add	sp, #12
 8011396:	bd30      	pop	{r4, r5, pc}
 8011398:	240007c8 	.word	0x240007c8

0801139c <_malloc_r>:
 801139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139e:	1ccd      	adds	r5, r1, #3
 80113a0:	f025 0503 	bic.w	r5, r5, #3
 80113a4:	3508      	adds	r5, #8
 80113a6:	2d0c      	cmp	r5, #12
 80113a8:	bf38      	it	cc
 80113aa:	250c      	movcc	r5, #12
 80113ac:	2d00      	cmp	r5, #0
 80113ae:	4606      	mov	r6, r0
 80113b0:	db01      	blt.n	80113b6 <_malloc_r+0x1a>
 80113b2:	42a9      	cmp	r1, r5
 80113b4:	d903      	bls.n	80113be <_malloc_r+0x22>
 80113b6:	230c      	movs	r3, #12
 80113b8:	6033      	str	r3, [r6, #0]
 80113ba:	2000      	movs	r0, #0
 80113bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113be:	f000 fbcd 	bl	8011b5c <__malloc_lock>
 80113c2:	4921      	ldr	r1, [pc, #132]	; (8011448 <_malloc_r+0xac>)
 80113c4:	680a      	ldr	r2, [r1, #0]
 80113c6:	4614      	mov	r4, r2
 80113c8:	b99c      	cbnz	r4, 80113f2 <_malloc_r+0x56>
 80113ca:	4f20      	ldr	r7, [pc, #128]	; (801144c <_malloc_r+0xb0>)
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	b923      	cbnz	r3, 80113da <_malloc_r+0x3e>
 80113d0:	4621      	mov	r1, r4
 80113d2:	4630      	mov	r0, r6
 80113d4:	f000 fb2a 	bl	8011a2c <_sbrk_r>
 80113d8:	6038      	str	r0, [r7, #0]
 80113da:	4629      	mov	r1, r5
 80113dc:	4630      	mov	r0, r6
 80113de:	f000 fb25 	bl	8011a2c <_sbrk_r>
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	d123      	bne.n	801142e <_malloc_r+0x92>
 80113e6:	230c      	movs	r3, #12
 80113e8:	6033      	str	r3, [r6, #0]
 80113ea:	4630      	mov	r0, r6
 80113ec:	f000 fbbc 	bl	8011b68 <__malloc_unlock>
 80113f0:	e7e3      	b.n	80113ba <_malloc_r+0x1e>
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	1b5b      	subs	r3, r3, r5
 80113f6:	d417      	bmi.n	8011428 <_malloc_r+0x8c>
 80113f8:	2b0b      	cmp	r3, #11
 80113fa:	d903      	bls.n	8011404 <_malloc_r+0x68>
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	441c      	add	r4, r3
 8011400:	6025      	str	r5, [r4, #0]
 8011402:	e004      	b.n	801140e <_malloc_r+0x72>
 8011404:	6863      	ldr	r3, [r4, #4]
 8011406:	42a2      	cmp	r2, r4
 8011408:	bf0c      	ite	eq
 801140a:	600b      	streq	r3, [r1, #0]
 801140c:	6053      	strne	r3, [r2, #4]
 801140e:	4630      	mov	r0, r6
 8011410:	f000 fbaa 	bl	8011b68 <__malloc_unlock>
 8011414:	f104 000b 	add.w	r0, r4, #11
 8011418:	1d23      	adds	r3, r4, #4
 801141a:	f020 0007 	bic.w	r0, r0, #7
 801141e:	1ac2      	subs	r2, r0, r3
 8011420:	d0cc      	beq.n	80113bc <_malloc_r+0x20>
 8011422:	1a1b      	subs	r3, r3, r0
 8011424:	50a3      	str	r3, [r4, r2]
 8011426:	e7c9      	b.n	80113bc <_malloc_r+0x20>
 8011428:	4622      	mov	r2, r4
 801142a:	6864      	ldr	r4, [r4, #4]
 801142c:	e7cc      	b.n	80113c8 <_malloc_r+0x2c>
 801142e:	1cc4      	adds	r4, r0, #3
 8011430:	f024 0403 	bic.w	r4, r4, #3
 8011434:	42a0      	cmp	r0, r4
 8011436:	d0e3      	beq.n	8011400 <_malloc_r+0x64>
 8011438:	1a21      	subs	r1, r4, r0
 801143a:	4630      	mov	r0, r6
 801143c:	f000 faf6 	bl	8011a2c <_sbrk_r>
 8011440:	3001      	adds	r0, #1
 8011442:	d1dd      	bne.n	8011400 <_malloc_r+0x64>
 8011444:	e7cf      	b.n	80113e6 <_malloc_r+0x4a>
 8011446:	bf00      	nop
 8011448:	240007c8 	.word	0x240007c8
 801144c:	240007cc 	.word	0x240007cc

08011450 <__sfputc_r>:
 8011450:	6893      	ldr	r3, [r2, #8]
 8011452:	3b01      	subs	r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	b410      	push	{r4}
 8011458:	6093      	str	r3, [r2, #8]
 801145a:	da08      	bge.n	801146e <__sfputc_r+0x1e>
 801145c:	6994      	ldr	r4, [r2, #24]
 801145e:	42a3      	cmp	r3, r4
 8011460:	db01      	blt.n	8011466 <__sfputc_r+0x16>
 8011462:	290a      	cmp	r1, #10
 8011464:	d103      	bne.n	801146e <__sfputc_r+0x1e>
 8011466:	f85d 4b04 	ldr.w	r4, [sp], #4
 801146a:	f7ff bc69 	b.w	8010d40 <__swbuf_r>
 801146e:	6813      	ldr	r3, [r2, #0]
 8011470:	1c58      	adds	r0, r3, #1
 8011472:	6010      	str	r0, [r2, #0]
 8011474:	7019      	strb	r1, [r3, #0]
 8011476:	4608      	mov	r0, r1
 8011478:	f85d 4b04 	ldr.w	r4, [sp], #4
 801147c:	4770      	bx	lr

0801147e <__sfputs_r>:
 801147e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011480:	4606      	mov	r6, r0
 8011482:	460f      	mov	r7, r1
 8011484:	4614      	mov	r4, r2
 8011486:	18d5      	adds	r5, r2, r3
 8011488:	42ac      	cmp	r4, r5
 801148a:	d101      	bne.n	8011490 <__sfputs_r+0x12>
 801148c:	2000      	movs	r0, #0
 801148e:	e007      	b.n	80114a0 <__sfputs_r+0x22>
 8011490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011494:	463a      	mov	r2, r7
 8011496:	4630      	mov	r0, r6
 8011498:	f7ff ffda 	bl	8011450 <__sfputc_r>
 801149c:	1c43      	adds	r3, r0, #1
 801149e:	d1f3      	bne.n	8011488 <__sfputs_r+0xa>
 80114a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080114a4 <_vfiprintf_r>:
 80114a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a8:	460d      	mov	r5, r1
 80114aa:	b09d      	sub	sp, #116	; 0x74
 80114ac:	4614      	mov	r4, r2
 80114ae:	4698      	mov	r8, r3
 80114b0:	4606      	mov	r6, r0
 80114b2:	b118      	cbz	r0, 80114bc <_vfiprintf_r+0x18>
 80114b4:	6983      	ldr	r3, [r0, #24]
 80114b6:	b90b      	cbnz	r3, 80114bc <_vfiprintf_r+0x18>
 80114b8:	f7ff fe1c 	bl	80110f4 <__sinit>
 80114bc:	4b89      	ldr	r3, [pc, #548]	; (80116e4 <_vfiprintf_r+0x240>)
 80114be:	429d      	cmp	r5, r3
 80114c0:	d11b      	bne.n	80114fa <_vfiprintf_r+0x56>
 80114c2:	6875      	ldr	r5, [r6, #4]
 80114c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114c6:	07d9      	lsls	r1, r3, #31
 80114c8:	d405      	bmi.n	80114d6 <_vfiprintf_r+0x32>
 80114ca:	89ab      	ldrh	r3, [r5, #12]
 80114cc:	059a      	lsls	r2, r3, #22
 80114ce:	d402      	bmi.n	80114d6 <_vfiprintf_r+0x32>
 80114d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114d2:	f7ff fead 	bl	8011230 <__retarget_lock_acquire_recursive>
 80114d6:	89ab      	ldrh	r3, [r5, #12]
 80114d8:	071b      	lsls	r3, r3, #28
 80114da:	d501      	bpl.n	80114e0 <_vfiprintf_r+0x3c>
 80114dc:	692b      	ldr	r3, [r5, #16]
 80114de:	b9eb      	cbnz	r3, 801151c <_vfiprintf_r+0x78>
 80114e0:	4629      	mov	r1, r5
 80114e2:	4630      	mov	r0, r6
 80114e4:	f7ff fc7e 	bl	8010de4 <__swsetup_r>
 80114e8:	b1c0      	cbz	r0, 801151c <_vfiprintf_r+0x78>
 80114ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114ec:	07dc      	lsls	r4, r3, #31
 80114ee:	d50e      	bpl.n	801150e <_vfiprintf_r+0x6a>
 80114f0:	f04f 30ff 	mov.w	r0, #4294967295
 80114f4:	b01d      	add	sp, #116	; 0x74
 80114f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114fa:	4b7b      	ldr	r3, [pc, #492]	; (80116e8 <_vfiprintf_r+0x244>)
 80114fc:	429d      	cmp	r5, r3
 80114fe:	d101      	bne.n	8011504 <_vfiprintf_r+0x60>
 8011500:	68b5      	ldr	r5, [r6, #8]
 8011502:	e7df      	b.n	80114c4 <_vfiprintf_r+0x20>
 8011504:	4b79      	ldr	r3, [pc, #484]	; (80116ec <_vfiprintf_r+0x248>)
 8011506:	429d      	cmp	r5, r3
 8011508:	bf08      	it	eq
 801150a:	68f5      	ldreq	r5, [r6, #12]
 801150c:	e7da      	b.n	80114c4 <_vfiprintf_r+0x20>
 801150e:	89ab      	ldrh	r3, [r5, #12]
 8011510:	0598      	lsls	r0, r3, #22
 8011512:	d4ed      	bmi.n	80114f0 <_vfiprintf_r+0x4c>
 8011514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011516:	f7ff fe8c 	bl	8011232 <__retarget_lock_release_recursive>
 801151a:	e7e9      	b.n	80114f0 <_vfiprintf_r+0x4c>
 801151c:	2300      	movs	r3, #0
 801151e:	9309      	str	r3, [sp, #36]	; 0x24
 8011520:	2320      	movs	r3, #32
 8011522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011526:	f8cd 800c 	str.w	r8, [sp, #12]
 801152a:	2330      	movs	r3, #48	; 0x30
 801152c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80116f0 <_vfiprintf_r+0x24c>
 8011530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011534:	f04f 0901 	mov.w	r9, #1
 8011538:	4623      	mov	r3, r4
 801153a:	469a      	mov	sl, r3
 801153c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011540:	b10a      	cbz	r2, 8011546 <_vfiprintf_r+0xa2>
 8011542:	2a25      	cmp	r2, #37	; 0x25
 8011544:	d1f9      	bne.n	801153a <_vfiprintf_r+0x96>
 8011546:	ebba 0b04 	subs.w	fp, sl, r4
 801154a:	d00b      	beq.n	8011564 <_vfiprintf_r+0xc0>
 801154c:	465b      	mov	r3, fp
 801154e:	4622      	mov	r2, r4
 8011550:	4629      	mov	r1, r5
 8011552:	4630      	mov	r0, r6
 8011554:	f7ff ff93 	bl	801147e <__sfputs_r>
 8011558:	3001      	adds	r0, #1
 801155a:	f000 80aa 	beq.w	80116b2 <_vfiprintf_r+0x20e>
 801155e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011560:	445a      	add	r2, fp
 8011562:	9209      	str	r2, [sp, #36]	; 0x24
 8011564:	f89a 3000 	ldrb.w	r3, [sl]
 8011568:	2b00      	cmp	r3, #0
 801156a:	f000 80a2 	beq.w	80116b2 <_vfiprintf_r+0x20e>
 801156e:	2300      	movs	r3, #0
 8011570:	f04f 32ff 	mov.w	r2, #4294967295
 8011574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011578:	f10a 0a01 	add.w	sl, sl, #1
 801157c:	9304      	str	r3, [sp, #16]
 801157e:	9307      	str	r3, [sp, #28]
 8011580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011584:	931a      	str	r3, [sp, #104]	; 0x68
 8011586:	4654      	mov	r4, sl
 8011588:	2205      	movs	r2, #5
 801158a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801158e:	4858      	ldr	r0, [pc, #352]	; (80116f0 <_vfiprintf_r+0x24c>)
 8011590:	f7ee fea6 	bl	80002e0 <memchr>
 8011594:	9a04      	ldr	r2, [sp, #16]
 8011596:	b9d8      	cbnz	r0, 80115d0 <_vfiprintf_r+0x12c>
 8011598:	06d1      	lsls	r1, r2, #27
 801159a:	bf44      	itt	mi
 801159c:	2320      	movmi	r3, #32
 801159e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115a2:	0713      	lsls	r3, r2, #28
 80115a4:	bf44      	itt	mi
 80115a6:	232b      	movmi	r3, #43	; 0x2b
 80115a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115ac:	f89a 3000 	ldrb.w	r3, [sl]
 80115b0:	2b2a      	cmp	r3, #42	; 0x2a
 80115b2:	d015      	beq.n	80115e0 <_vfiprintf_r+0x13c>
 80115b4:	9a07      	ldr	r2, [sp, #28]
 80115b6:	4654      	mov	r4, sl
 80115b8:	2000      	movs	r0, #0
 80115ba:	f04f 0c0a 	mov.w	ip, #10
 80115be:	4621      	mov	r1, r4
 80115c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115c4:	3b30      	subs	r3, #48	; 0x30
 80115c6:	2b09      	cmp	r3, #9
 80115c8:	d94e      	bls.n	8011668 <_vfiprintf_r+0x1c4>
 80115ca:	b1b0      	cbz	r0, 80115fa <_vfiprintf_r+0x156>
 80115cc:	9207      	str	r2, [sp, #28]
 80115ce:	e014      	b.n	80115fa <_vfiprintf_r+0x156>
 80115d0:	eba0 0308 	sub.w	r3, r0, r8
 80115d4:	fa09 f303 	lsl.w	r3, r9, r3
 80115d8:	4313      	orrs	r3, r2
 80115da:	9304      	str	r3, [sp, #16]
 80115dc:	46a2      	mov	sl, r4
 80115de:	e7d2      	b.n	8011586 <_vfiprintf_r+0xe2>
 80115e0:	9b03      	ldr	r3, [sp, #12]
 80115e2:	1d19      	adds	r1, r3, #4
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	9103      	str	r1, [sp, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	bfbb      	ittet	lt
 80115ec:	425b      	neglt	r3, r3
 80115ee:	f042 0202 	orrlt.w	r2, r2, #2
 80115f2:	9307      	strge	r3, [sp, #28]
 80115f4:	9307      	strlt	r3, [sp, #28]
 80115f6:	bfb8      	it	lt
 80115f8:	9204      	strlt	r2, [sp, #16]
 80115fa:	7823      	ldrb	r3, [r4, #0]
 80115fc:	2b2e      	cmp	r3, #46	; 0x2e
 80115fe:	d10c      	bne.n	801161a <_vfiprintf_r+0x176>
 8011600:	7863      	ldrb	r3, [r4, #1]
 8011602:	2b2a      	cmp	r3, #42	; 0x2a
 8011604:	d135      	bne.n	8011672 <_vfiprintf_r+0x1ce>
 8011606:	9b03      	ldr	r3, [sp, #12]
 8011608:	1d1a      	adds	r2, r3, #4
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	9203      	str	r2, [sp, #12]
 801160e:	2b00      	cmp	r3, #0
 8011610:	bfb8      	it	lt
 8011612:	f04f 33ff 	movlt.w	r3, #4294967295
 8011616:	3402      	adds	r4, #2
 8011618:	9305      	str	r3, [sp, #20]
 801161a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011700 <_vfiprintf_r+0x25c>
 801161e:	7821      	ldrb	r1, [r4, #0]
 8011620:	2203      	movs	r2, #3
 8011622:	4650      	mov	r0, sl
 8011624:	f7ee fe5c 	bl	80002e0 <memchr>
 8011628:	b140      	cbz	r0, 801163c <_vfiprintf_r+0x198>
 801162a:	2340      	movs	r3, #64	; 0x40
 801162c:	eba0 000a 	sub.w	r0, r0, sl
 8011630:	fa03 f000 	lsl.w	r0, r3, r0
 8011634:	9b04      	ldr	r3, [sp, #16]
 8011636:	4303      	orrs	r3, r0
 8011638:	3401      	adds	r4, #1
 801163a:	9304      	str	r3, [sp, #16]
 801163c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011640:	482c      	ldr	r0, [pc, #176]	; (80116f4 <_vfiprintf_r+0x250>)
 8011642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011646:	2206      	movs	r2, #6
 8011648:	f7ee fe4a 	bl	80002e0 <memchr>
 801164c:	2800      	cmp	r0, #0
 801164e:	d03f      	beq.n	80116d0 <_vfiprintf_r+0x22c>
 8011650:	4b29      	ldr	r3, [pc, #164]	; (80116f8 <_vfiprintf_r+0x254>)
 8011652:	bb1b      	cbnz	r3, 801169c <_vfiprintf_r+0x1f8>
 8011654:	9b03      	ldr	r3, [sp, #12]
 8011656:	3307      	adds	r3, #7
 8011658:	f023 0307 	bic.w	r3, r3, #7
 801165c:	3308      	adds	r3, #8
 801165e:	9303      	str	r3, [sp, #12]
 8011660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011662:	443b      	add	r3, r7
 8011664:	9309      	str	r3, [sp, #36]	; 0x24
 8011666:	e767      	b.n	8011538 <_vfiprintf_r+0x94>
 8011668:	fb0c 3202 	mla	r2, ip, r2, r3
 801166c:	460c      	mov	r4, r1
 801166e:	2001      	movs	r0, #1
 8011670:	e7a5      	b.n	80115be <_vfiprintf_r+0x11a>
 8011672:	2300      	movs	r3, #0
 8011674:	3401      	adds	r4, #1
 8011676:	9305      	str	r3, [sp, #20]
 8011678:	4619      	mov	r1, r3
 801167a:	f04f 0c0a 	mov.w	ip, #10
 801167e:	4620      	mov	r0, r4
 8011680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011684:	3a30      	subs	r2, #48	; 0x30
 8011686:	2a09      	cmp	r2, #9
 8011688:	d903      	bls.n	8011692 <_vfiprintf_r+0x1ee>
 801168a:	2b00      	cmp	r3, #0
 801168c:	d0c5      	beq.n	801161a <_vfiprintf_r+0x176>
 801168e:	9105      	str	r1, [sp, #20]
 8011690:	e7c3      	b.n	801161a <_vfiprintf_r+0x176>
 8011692:	fb0c 2101 	mla	r1, ip, r1, r2
 8011696:	4604      	mov	r4, r0
 8011698:	2301      	movs	r3, #1
 801169a:	e7f0      	b.n	801167e <_vfiprintf_r+0x1da>
 801169c:	ab03      	add	r3, sp, #12
 801169e:	9300      	str	r3, [sp, #0]
 80116a0:	462a      	mov	r2, r5
 80116a2:	4b16      	ldr	r3, [pc, #88]	; (80116fc <_vfiprintf_r+0x258>)
 80116a4:	a904      	add	r1, sp, #16
 80116a6:	4630      	mov	r0, r6
 80116a8:	f3af 8000 	nop.w
 80116ac:	4607      	mov	r7, r0
 80116ae:	1c78      	adds	r0, r7, #1
 80116b0:	d1d6      	bne.n	8011660 <_vfiprintf_r+0x1bc>
 80116b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116b4:	07d9      	lsls	r1, r3, #31
 80116b6:	d405      	bmi.n	80116c4 <_vfiprintf_r+0x220>
 80116b8:	89ab      	ldrh	r3, [r5, #12]
 80116ba:	059a      	lsls	r2, r3, #22
 80116bc:	d402      	bmi.n	80116c4 <_vfiprintf_r+0x220>
 80116be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116c0:	f7ff fdb7 	bl	8011232 <__retarget_lock_release_recursive>
 80116c4:	89ab      	ldrh	r3, [r5, #12]
 80116c6:	065b      	lsls	r3, r3, #25
 80116c8:	f53f af12 	bmi.w	80114f0 <_vfiprintf_r+0x4c>
 80116cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116ce:	e711      	b.n	80114f4 <_vfiprintf_r+0x50>
 80116d0:	ab03      	add	r3, sp, #12
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	462a      	mov	r2, r5
 80116d6:	4b09      	ldr	r3, [pc, #36]	; (80116fc <_vfiprintf_r+0x258>)
 80116d8:	a904      	add	r1, sp, #16
 80116da:	4630      	mov	r0, r6
 80116dc:	f000 f880 	bl	80117e0 <_printf_i>
 80116e0:	e7e4      	b.n	80116ac <_vfiprintf_r+0x208>
 80116e2:	bf00      	nop
 80116e4:	08011e9c 	.word	0x08011e9c
 80116e8:	08011ebc 	.word	0x08011ebc
 80116ec:	08011e7c 	.word	0x08011e7c
 80116f0:	08011edc 	.word	0x08011edc
 80116f4:	08011ee6 	.word	0x08011ee6
 80116f8:	00000000 	.word	0x00000000
 80116fc:	0801147f 	.word	0x0801147f
 8011700:	08011ee2 	.word	0x08011ee2

08011704 <_printf_common>:
 8011704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011708:	4616      	mov	r6, r2
 801170a:	4699      	mov	r9, r3
 801170c:	688a      	ldr	r2, [r1, #8]
 801170e:	690b      	ldr	r3, [r1, #16]
 8011710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011714:	4293      	cmp	r3, r2
 8011716:	bfb8      	it	lt
 8011718:	4613      	movlt	r3, r2
 801171a:	6033      	str	r3, [r6, #0]
 801171c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011720:	4607      	mov	r7, r0
 8011722:	460c      	mov	r4, r1
 8011724:	b10a      	cbz	r2, 801172a <_printf_common+0x26>
 8011726:	3301      	adds	r3, #1
 8011728:	6033      	str	r3, [r6, #0]
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	0699      	lsls	r1, r3, #26
 801172e:	bf42      	ittt	mi
 8011730:	6833      	ldrmi	r3, [r6, #0]
 8011732:	3302      	addmi	r3, #2
 8011734:	6033      	strmi	r3, [r6, #0]
 8011736:	6825      	ldr	r5, [r4, #0]
 8011738:	f015 0506 	ands.w	r5, r5, #6
 801173c:	d106      	bne.n	801174c <_printf_common+0x48>
 801173e:	f104 0a19 	add.w	sl, r4, #25
 8011742:	68e3      	ldr	r3, [r4, #12]
 8011744:	6832      	ldr	r2, [r6, #0]
 8011746:	1a9b      	subs	r3, r3, r2
 8011748:	42ab      	cmp	r3, r5
 801174a:	dc26      	bgt.n	801179a <_printf_common+0x96>
 801174c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011750:	1e13      	subs	r3, r2, #0
 8011752:	6822      	ldr	r2, [r4, #0]
 8011754:	bf18      	it	ne
 8011756:	2301      	movne	r3, #1
 8011758:	0692      	lsls	r2, r2, #26
 801175a:	d42b      	bmi.n	80117b4 <_printf_common+0xb0>
 801175c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011760:	4649      	mov	r1, r9
 8011762:	4638      	mov	r0, r7
 8011764:	47c0      	blx	r8
 8011766:	3001      	adds	r0, #1
 8011768:	d01e      	beq.n	80117a8 <_printf_common+0xa4>
 801176a:	6823      	ldr	r3, [r4, #0]
 801176c:	68e5      	ldr	r5, [r4, #12]
 801176e:	6832      	ldr	r2, [r6, #0]
 8011770:	f003 0306 	and.w	r3, r3, #6
 8011774:	2b04      	cmp	r3, #4
 8011776:	bf08      	it	eq
 8011778:	1aad      	subeq	r5, r5, r2
 801177a:	68a3      	ldr	r3, [r4, #8]
 801177c:	6922      	ldr	r2, [r4, #16]
 801177e:	bf0c      	ite	eq
 8011780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011784:	2500      	movne	r5, #0
 8011786:	4293      	cmp	r3, r2
 8011788:	bfc4      	itt	gt
 801178a:	1a9b      	subgt	r3, r3, r2
 801178c:	18ed      	addgt	r5, r5, r3
 801178e:	2600      	movs	r6, #0
 8011790:	341a      	adds	r4, #26
 8011792:	42b5      	cmp	r5, r6
 8011794:	d11a      	bne.n	80117cc <_printf_common+0xc8>
 8011796:	2000      	movs	r0, #0
 8011798:	e008      	b.n	80117ac <_printf_common+0xa8>
 801179a:	2301      	movs	r3, #1
 801179c:	4652      	mov	r2, sl
 801179e:	4649      	mov	r1, r9
 80117a0:	4638      	mov	r0, r7
 80117a2:	47c0      	blx	r8
 80117a4:	3001      	adds	r0, #1
 80117a6:	d103      	bne.n	80117b0 <_printf_common+0xac>
 80117a8:	f04f 30ff 	mov.w	r0, #4294967295
 80117ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b0:	3501      	adds	r5, #1
 80117b2:	e7c6      	b.n	8011742 <_printf_common+0x3e>
 80117b4:	18e1      	adds	r1, r4, r3
 80117b6:	1c5a      	adds	r2, r3, #1
 80117b8:	2030      	movs	r0, #48	; 0x30
 80117ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117be:	4422      	add	r2, r4
 80117c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117c8:	3302      	adds	r3, #2
 80117ca:	e7c7      	b.n	801175c <_printf_common+0x58>
 80117cc:	2301      	movs	r3, #1
 80117ce:	4622      	mov	r2, r4
 80117d0:	4649      	mov	r1, r9
 80117d2:	4638      	mov	r0, r7
 80117d4:	47c0      	blx	r8
 80117d6:	3001      	adds	r0, #1
 80117d8:	d0e6      	beq.n	80117a8 <_printf_common+0xa4>
 80117da:	3601      	adds	r6, #1
 80117dc:	e7d9      	b.n	8011792 <_printf_common+0x8e>
	...

080117e0 <_printf_i>:
 80117e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117e4:	460c      	mov	r4, r1
 80117e6:	4691      	mov	r9, r2
 80117e8:	7e27      	ldrb	r7, [r4, #24]
 80117ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80117ec:	2f78      	cmp	r7, #120	; 0x78
 80117ee:	4680      	mov	r8, r0
 80117f0:	469a      	mov	sl, r3
 80117f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117f6:	d807      	bhi.n	8011808 <_printf_i+0x28>
 80117f8:	2f62      	cmp	r7, #98	; 0x62
 80117fa:	d80a      	bhi.n	8011812 <_printf_i+0x32>
 80117fc:	2f00      	cmp	r7, #0
 80117fe:	f000 80d8 	beq.w	80119b2 <_printf_i+0x1d2>
 8011802:	2f58      	cmp	r7, #88	; 0x58
 8011804:	f000 80a3 	beq.w	801194e <_printf_i+0x16e>
 8011808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801180c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011810:	e03a      	b.n	8011888 <_printf_i+0xa8>
 8011812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011816:	2b15      	cmp	r3, #21
 8011818:	d8f6      	bhi.n	8011808 <_printf_i+0x28>
 801181a:	a001      	add	r0, pc, #4	; (adr r0, 8011820 <_printf_i+0x40>)
 801181c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011820:	08011879 	.word	0x08011879
 8011824:	0801188d 	.word	0x0801188d
 8011828:	08011809 	.word	0x08011809
 801182c:	08011809 	.word	0x08011809
 8011830:	08011809 	.word	0x08011809
 8011834:	08011809 	.word	0x08011809
 8011838:	0801188d 	.word	0x0801188d
 801183c:	08011809 	.word	0x08011809
 8011840:	08011809 	.word	0x08011809
 8011844:	08011809 	.word	0x08011809
 8011848:	08011809 	.word	0x08011809
 801184c:	08011999 	.word	0x08011999
 8011850:	080118bd 	.word	0x080118bd
 8011854:	0801197b 	.word	0x0801197b
 8011858:	08011809 	.word	0x08011809
 801185c:	08011809 	.word	0x08011809
 8011860:	080119bb 	.word	0x080119bb
 8011864:	08011809 	.word	0x08011809
 8011868:	080118bd 	.word	0x080118bd
 801186c:	08011809 	.word	0x08011809
 8011870:	08011809 	.word	0x08011809
 8011874:	08011983 	.word	0x08011983
 8011878:	680b      	ldr	r3, [r1, #0]
 801187a:	1d1a      	adds	r2, r3, #4
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	600a      	str	r2, [r1, #0]
 8011880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011888:	2301      	movs	r3, #1
 801188a:	e0a3      	b.n	80119d4 <_printf_i+0x1f4>
 801188c:	6825      	ldr	r5, [r4, #0]
 801188e:	6808      	ldr	r0, [r1, #0]
 8011890:	062e      	lsls	r6, r5, #24
 8011892:	f100 0304 	add.w	r3, r0, #4
 8011896:	d50a      	bpl.n	80118ae <_printf_i+0xce>
 8011898:	6805      	ldr	r5, [r0, #0]
 801189a:	600b      	str	r3, [r1, #0]
 801189c:	2d00      	cmp	r5, #0
 801189e:	da03      	bge.n	80118a8 <_printf_i+0xc8>
 80118a0:	232d      	movs	r3, #45	; 0x2d
 80118a2:	426d      	negs	r5, r5
 80118a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118a8:	485e      	ldr	r0, [pc, #376]	; (8011a24 <_printf_i+0x244>)
 80118aa:	230a      	movs	r3, #10
 80118ac:	e019      	b.n	80118e2 <_printf_i+0x102>
 80118ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80118b2:	6805      	ldr	r5, [r0, #0]
 80118b4:	600b      	str	r3, [r1, #0]
 80118b6:	bf18      	it	ne
 80118b8:	b22d      	sxthne	r5, r5
 80118ba:	e7ef      	b.n	801189c <_printf_i+0xbc>
 80118bc:	680b      	ldr	r3, [r1, #0]
 80118be:	6825      	ldr	r5, [r4, #0]
 80118c0:	1d18      	adds	r0, r3, #4
 80118c2:	6008      	str	r0, [r1, #0]
 80118c4:	0628      	lsls	r0, r5, #24
 80118c6:	d501      	bpl.n	80118cc <_printf_i+0xec>
 80118c8:	681d      	ldr	r5, [r3, #0]
 80118ca:	e002      	b.n	80118d2 <_printf_i+0xf2>
 80118cc:	0669      	lsls	r1, r5, #25
 80118ce:	d5fb      	bpl.n	80118c8 <_printf_i+0xe8>
 80118d0:	881d      	ldrh	r5, [r3, #0]
 80118d2:	4854      	ldr	r0, [pc, #336]	; (8011a24 <_printf_i+0x244>)
 80118d4:	2f6f      	cmp	r7, #111	; 0x6f
 80118d6:	bf0c      	ite	eq
 80118d8:	2308      	moveq	r3, #8
 80118da:	230a      	movne	r3, #10
 80118dc:	2100      	movs	r1, #0
 80118de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118e2:	6866      	ldr	r6, [r4, #4]
 80118e4:	60a6      	str	r6, [r4, #8]
 80118e6:	2e00      	cmp	r6, #0
 80118e8:	bfa2      	ittt	ge
 80118ea:	6821      	ldrge	r1, [r4, #0]
 80118ec:	f021 0104 	bicge.w	r1, r1, #4
 80118f0:	6021      	strge	r1, [r4, #0]
 80118f2:	b90d      	cbnz	r5, 80118f8 <_printf_i+0x118>
 80118f4:	2e00      	cmp	r6, #0
 80118f6:	d04d      	beq.n	8011994 <_printf_i+0x1b4>
 80118f8:	4616      	mov	r6, r2
 80118fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80118fe:	fb03 5711 	mls	r7, r3, r1, r5
 8011902:	5dc7      	ldrb	r7, [r0, r7]
 8011904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011908:	462f      	mov	r7, r5
 801190a:	42bb      	cmp	r3, r7
 801190c:	460d      	mov	r5, r1
 801190e:	d9f4      	bls.n	80118fa <_printf_i+0x11a>
 8011910:	2b08      	cmp	r3, #8
 8011912:	d10b      	bne.n	801192c <_printf_i+0x14c>
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	07df      	lsls	r7, r3, #31
 8011918:	d508      	bpl.n	801192c <_printf_i+0x14c>
 801191a:	6923      	ldr	r3, [r4, #16]
 801191c:	6861      	ldr	r1, [r4, #4]
 801191e:	4299      	cmp	r1, r3
 8011920:	bfde      	ittt	le
 8011922:	2330      	movle	r3, #48	; 0x30
 8011924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011928:	f106 36ff 	addle.w	r6, r6, #4294967295
 801192c:	1b92      	subs	r2, r2, r6
 801192e:	6122      	str	r2, [r4, #16]
 8011930:	f8cd a000 	str.w	sl, [sp]
 8011934:	464b      	mov	r3, r9
 8011936:	aa03      	add	r2, sp, #12
 8011938:	4621      	mov	r1, r4
 801193a:	4640      	mov	r0, r8
 801193c:	f7ff fee2 	bl	8011704 <_printf_common>
 8011940:	3001      	adds	r0, #1
 8011942:	d14c      	bne.n	80119de <_printf_i+0x1fe>
 8011944:	f04f 30ff 	mov.w	r0, #4294967295
 8011948:	b004      	add	sp, #16
 801194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801194e:	4835      	ldr	r0, [pc, #212]	; (8011a24 <_printf_i+0x244>)
 8011950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011954:	6823      	ldr	r3, [r4, #0]
 8011956:	680e      	ldr	r6, [r1, #0]
 8011958:	061f      	lsls	r7, r3, #24
 801195a:	f856 5b04 	ldr.w	r5, [r6], #4
 801195e:	600e      	str	r6, [r1, #0]
 8011960:	d514      	bpl.n	801198c <_printf_i+0x1ac>
 8011962:	07d9      	lsls	r1, r3, #31
 8011964:	bf44      	itt	mi
 8011966:	f043 0320 	orrmi.w	r3, r3, #32
 801196a:	6023      	strmi	r3, [r4, #0]
 801196c:	b91d      	cbnz	r5, 8011976 <_printf_i+0x196>
 801196e:	6823      	ldr	r3, [r4, #0]
 8011970:	f023 0320 	bic.w	r3, r3, #32
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	2310      	movs	r3, #16
 8011978:	e7b0      	b.n	80118dc <_printf_i+0xfc>
 801197a:	6823      	ldr	r3, [r4, #0]
 801197c:	f043 0320 	orr.w	r3, r3, #32
 8011980:	6023      	str	r3, [r4, #0]
 8011982:	2378      	movs	r3, #120	; 0x78
 8011984:	4828      	ldr	r0, [pc, #160]	; (8011a28 <_printf_i+0x248>)
 8011986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801198a:	e7e3      	b.n	8011954 <_printf_i+0x174>
 801198c:	065e      	lsls	r6, r3, #25
 801198e:	bf48      	it	mi
 8011990:	b2ad      	uxthmi	r5, r5
 8011992:	e7e6      	b.n	8011962 <_printf_i+0x182>
 8011994:	4616      	mov	r6, r2
 8011996:	e7bb      	b.n	8011910 <_printf_i+0x130>
 8011998:	680b      	ldr	r3, [r1, #0]
 801199a:	6826      	ldr	r6, [r4, #0]
 801199c:	6960      	ldr	r0, [r4, #20]
 801199e:	1d1d      	adds	r5, r3, #4
 80119a0:	600d      	str	r5, [r1, #0]
 80119a2:	0635      	lsls	r5, r6, #24
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	d501      	bpl.n	80119ac <_printf_i+0x1cc>
 80119a8:	6018      	str	r0, [r3, #0]
 80119aa:	e002      	b.n	80119b2 <_printf_i+0x1d2>
 80119ac:	0671      	lsls	r1, r6, #25
 80119ae:	d5fb      	bpl.n	80119a8 <_printf_i+0x1c8>
 80119b0:	8018      	strh	r0, [r3, #0]
 80119b2:	2300      	movs	r3, #0
 80119b4:	6123      	str	r3, [r4, #16]
 80119b6:	4616      	mov	r6, r2
 80119b8:	e7ba      	b.n	8011930 <_printf_i+0x150>
 80119ba:	680b      	ldr	r3, [r1, #0]
 80119bc:	1d1a      	adds	r2, r3, #4
 80119be:	600a      	str	r2, [r1, #0]
 80119c0:	681e      	ldr	r6, [r3, #0]
 80119c2:	6862      	ldr	r2, [r4, #4]
 80119c4:	2100      	movs	r1, #0
 80119c6:	4630      	mov	r0, r6
 80119c8:	f7ee fc8a 	bl	80002e0 <memchr>
 80119cc:	b108      	cbz	r0, 80119d2 <_printf_i+0x1f2>
 80119ce:	1b80      	subs	r0, r0, r6
 80119d0:	6060      	str	r0, [r4, #4]
 80119d2:	6863      	ldr	r3, [r4, #4]
 80119d4:	6123      	str	r3, [r4, #16]
 80119d6:	2300      	movs	r3, #0
 80119d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119dc:	e7a8      	b.n	8011930 <_printf_i+0x150>
 80119de:	6923      	ldr	r3, [r4, #16]
 80119e0:	4632      	mov	r2, r6
 80119e2:	4649      	mov	r1, r9
 80119e4:	4640      	mov	r0, r8
 80119e6:	47d0      	blx	sl
 80119e8:	3001      	adds	r0, #1
 80119ea:	d0ab      	beq.n	8011944 <_printf_i+0x164>
 80119ec:	6823      	ldr	r3, [r4, #0]
 80119ee:	079b      	lsls	r3, r3, #30
 80119f0:	d413      	bmi.n	8011a1a <_printf_i+0x23a>
 80119f2:	68e0      	ldr	r0, [r4, #12]
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	4298      	cmp	r0, r3
 80119f8:	bfb8      	it	lt
 80119fa:	4618      	movlt	r0, r3
 80119fc:	e7a4      	b.n	8011948 <_printf_i+0x168>
 80119fe:	2301      	movs	r3, #1
 8011a00:	4632      	mov	r2, r6
 8011a02:	4649      	mov	r1, r9
 8011a04:	4640      	mov	r0, r8
 8011a06:	47d0      	blx	sl
 8011a08:	3001      	adds	r0, #1
 8011a0a:	d09b      	beq.n	8011944 <_printf_i+0x164>
 8011a0c:	3501      	adds	r5, #1
 8011a0e:	68e3      	ldr	r3, [r4, #12]
 8011a10:	9903      	ldr	r1, [sp, #12]
 8011a12:	1a5b      	subs	r3, r3, r1
 8011a14:	42ab      	cmp	r3, r5
 8011a16:	dcf2      	bgt.n	80119fe <_printf_i+0x21e>
 8011a18:	e7eb      	b.n	80119f2 <_printf_i+0x212>
 8011a1a:	2500      	movs	r5, #0
 8011a1c:	f104 0619 	add.w	r6, r4, #25
 8011a20:	e7f5      	b.n	8011a0e <_printf_i+0x22e>
 8011a22:	bf00      	nop
 8011a24:	08011eed 	.word	0x08011eed
 8011a28:	08011efe 	.word	0x08011efe

08011a2c <_sbrk_r>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	4d06      	ldr	r5, [pc, #24]	; (8011a48 <_sbrk_r+0x1c>)
 8011a30:	2300      	movs	r3, #0
 8011a32:	4604      	mov	r4, r0
 8011a34:	4608      	mov	r0, r1
 8011a36:	602b      	str	r3, [r5, #0]
 8011a38:	f7f0 fb64 	bl	8002104 <_sbrk>
 8011a3c:	1c43      	adds	r3, r0, #1
 8011a3e:	d102      	bne.n	8011a46 <_sbrk_r+0x1a>
 8011a40:	682b      	ldr	r3, [r5, #0]
 8011a42:	b103      	cbz	r3, 8011a46 <_sbrk_r+0x1a>
 8011a44:	6023      	str	r3, [r4, #0]
 8011a46:	bd38      	pop	{r3, r4, r5, pc}
 8011a48:	240026d8 	.word	0x240026d8

08011a4c <__sread>:
 8011a4c:	b510      	push	{r4, lr}
 8011a4e:	460c      	mov	r4, r1
 8011a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a54:	f000 f88e 	bl	8011b74 <_read_r>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	bfab      	itete	ge
 8011a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8011a60:	181b      	addge	r3, r3, r0
 8011a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a66:	bfac      	ite	ge
 8011a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a6a:	81a3      	strhlt	r3, [r4, #12]
 8011a6c:	bd10      	pop	{r4, pc}

08011a6e <__swrite>:
 8011a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a72:	461f      	mov	r7, r3
 8011a74:	898b      	ldrh	r3, [r1, #12]
 8011a76:	05db      	lsls	r3, r3, #23
 8011a78:	4605      	mov	r5, r0
 8011a7a:	460c      	mov	r4, r1
 8011a7c:	4616      	mov	r6, r2
 8011a7e:	d505      	bpl.n	8011a8c <__swrite+0x1e>
 8011a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a84:	2302      	movs	r3, #2
 8011a86:	2200      	movs	r2, #0
 8011a88:	f000 f856 	bl	8011b38 <_lseek_r>
 8011a8c:	89a3      	ldrh	r3, [r4, #12]
 8011a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a96:	81a3      	strh	r3, [r4, #12]
 8011a98:	4632      	mov	r2, r6
 8011a9a:	463b      	mov	r3, r7
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa2:	f7ee be03 	b.w	80006ac <_write_r>

08011aa6 <__sseek>:
 8011aa6:	b510      	push	{r4, lr}
 8011aa8:	460c      	mov	r4, r1
 8011aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aae:	f000 f843 	bl	8011b38 <_lseek_r>
 8011ab2:	1c43      	adds	r3, r0, #1
 8011ab4:	89a3      	ldrh	r3, [r4, #12]
 8011ab6:	bf15      	itete	ne
 8011ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ac2:	81a3      	strheq	r3, [r4, #12]
 8011ac4:	bf18      	it	ne
 8011ac6:	81a3      	strhne	r3, [r4, #12]
 8011ac8:	bd10      	pop	{r4, pc}

08011aca <__sclose>:
 8011aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ace:	f000 b801 	b.w	8011ad4 <_close_r>
	...

08011ad4 <_close_r>:
 8011ad4:	b538      	push	{r3, r4, r5, lr}
 8011ad6:	4d06      	ldr	r5, [pc, #24]	; (8011af0 <_close_r+0x1c>)
 8011ad8:	2300      	movs	r3, #0
 8011ada:	4604      	mov	r4, r0
 8011adc:	4608      	mov	r0, r1
 8011ade:	602b      	str	r3, [r5, #0]
 8011ae0:	f7f0 fadb 	bl	800209a <_close>
 8011ae4:	1c43      	adds	r3, r0, #1
 8011ae6:	d102      	bne.n	8011aee <_close_r+0x1a>
 8011ae8:	682b      	ldr	r3, [r5, #0]
 8011aea:	b103      	cbz	r3, 8011aee <_close_r+0x1a>
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	bd38      	pop	{r3, r4, r5, pc}
 8011af0:	240026d8 	.word	0x240026d8

08011af4 <_fstat_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d07      	ldr	r5, [pc, #28]	; (8011b14 <_fstat_r+0x20>)
 8011af8:	2300      	movs	r3, #0
 8011afa:	4604      	mov	r4, r0
 8011afc:	4608      	mov	r0, r1
 8011afe:	4611      	mov	r1, r2
 8011b00:	602b      	str	r3, [r5, #0]
 8011b02:	f7f0 fad6 	bl	80020b2 <_fstat>
 8011b06:	1c43      	adds	r3, r0, #1
 8011b08:	d102      	bne.n	8011b10 <_fstat_r+0x1c>
 8011b0a:	682b      	ldr	r3, [r5, #0]
 8011b0c:	b103      	cbz	r3, 8011b10 <_fstat_r+0x1c>
 8011b0e:	6023      	str	r3, [r4, #0]
 8011b10:	bd38      	pop	{r3, r4, r5, pc}
 8011b12:	bf00      	nop
 8011b14:	240026d8 	.word	0x240026d8

08011b18 <_isatty_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	4d06      	ldr	r5, [pc, #24]	; (8011b34 <_isatty_r+0x1c>)
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4604      	mov	r4, r0
 8011b20:	4608      	mov	r0, r1
 8011b22:	602b      	str	r3, [r5, #0]
 8011b24:	f7f0 fad5 	bl	80020d2 <_isatty>
 8011b28:	1c43      	adds	r3, r0, #1
 8011b2a:	d102      	bne.n	8011b32 <_isatty_r+0x1a>
 8011b2c:	682b      	ldr	r3, [r5, #0]
 8011b2e:	b103      	cbz	r3, 8011b32 <_isatty_r+0x1a>
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	240026d8 	.word	0x240026d8

08011b38 <_lseek_r>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	4d07      	ldr	r5, [pc, #28]	; (8011b58 <_lseek_r+0x20>)
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	4608      	mov	r0, r1
 8011b40:	4611      	mov	r1, r2
 8011b42:	2200      	movs	r2, #0
 8011b44:	602a      	str	r2, [r5, #0]
 8011b46:	461a      	mov	r2, r3
 8011b48:	f7f0 face 	bl	80020e8 <_lseek>
 8011b4c:	1c43      	adds	r3, r0, #1
 8011b4e:	d102      	bne.n	8011b56 <_lseek_r+0x1e>
 8011b50:	682b      	ldr	r3, [r5, #0]
 8011b52:	b103      	cbz	r3, 8011b56 <_lseek_r+0x1e>
 8011b54:	6023      	str	r3, [r4, #0]
 8011b56:	bd38      	pop	{r3, r4, r5, pc}
 8011b58:	240026d8 	.word	0x240026d8

08011b5c <__malloc_lock>:
 8011b5c:	4801      	ldr	r0, [pc, #4]	; (8011b64 <__malloc_lock+0x8>)
 8011b5e:	f7ff bb67 	b.w	8011230 <__retarget_lock_acquire_recursive>
 8011b62:	bf00      	nop
 8011b64:	240026d0 	.word	0x240026d0

08011b68 <__malloc_unlock>:
 8011b68:	4801      	ldr	r0, [pc, #4]	; (8011b70 <__malloc_unlock+0x8>)
 8011b6a:	f7ff bb62 	b.w	8011232 <__retarget_lock_release_recursive>
 8011b6e:	bf00      	nop
 8011b70:	240026d0 	.word	0x240026d0

08011b74 <_read_r>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4d07      	ldr	r5, [pc, #28]	; (8011b94 <_read_r+0x20>)
 8011b78:	4604      	mov	r4, r0
 8011b7a:	4608      	mov	r0, r1
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	2200      	movs	r2, #0
 8011b80:	602a      	str	r2, [r5, #0]
 8011b82:	461a      	mov	r2, r3
 8011b84:	f7f0 fa6c 	bl	8002060 <_read>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d102      	bne.n	8011b92 <_read_r+0x1e>
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	b103      	cbz	r3, 8011b92 <_read_r+0x1e>
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	240026d8 	.word	0x240026d8

08011b98 <_init>:
 8011b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9a:	bf00      	nop
 8011b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b9e:	bc08      	pop	{r3}
 8011ba0:	469e      	mov	lr, r3
 8011ba2:	4770      	bx	lr

08011ba4 <_fini>:
 8011ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ba6:	bf00      	nop
 8011ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011baa:	bc08      	pop	{r3}
 8011bac:	469e      	mov	lr, r3
 8011bae:	4770      	bx	lr
